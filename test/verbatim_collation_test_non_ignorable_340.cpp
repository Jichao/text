// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_340_000)
{
    // 3921 003F;	
    // (㤡) CJK UNIFIED IDEOGRAPH-3921	[FB80 B921 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3921, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB921, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_001)
{
    // 3921 0061;	
    // (㤡) CJK UNIFIED IDEOGRAPH-3921	[FB80 B921 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3921, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB921, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_002)
{
    // 3921 0041;	
    // (㤡) CJK UNIFIED IDEOGRAPH-3921	[FB80 B921 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3921, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB921, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_003)
{
    // 3921 0062;	
    // (㤡) CJK UNIFIED IDEOGRAPH-3921	[FB80 B921 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3921, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB921, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_004)
{
    // 3922 0021;	
    // (㤢) CJK UNIFIED IDEOGRAPH-3922	[FB80 B922 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3922, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB922, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_005)
{
    // 3922 003F;	
    // (㤢) CJK UNIFIED IDEOGRAPH-3922	[FB80 B922 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3922, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB922, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_006)
{
    // 3922 0061;	
    // (㤢) CJK UNIFIED IDEOGRAPH-3922	[FB80 B922 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3922, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB922, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_007)
{
    // 3922 0041;	
    // (㤢) CJK UNIFIED IDEOGRAPH-3922	[FB80 B922 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3922, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB922, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_008)
{
    // 3922 0062;	
    // (㤢) CJK UNIFIED IDEOGRAPH-3922	[FB80 B922 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3922, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB922, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_009)
{
    // 3923 0021;	
    // (㤣) CJK UNIFIED IDEOGRAPH-3923	[FB80 B923 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3923, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB923, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_010)
{
    // 3923 003F;	
    // (㤣) CJK UNIFIED IDEOGRAPH-3923	[FB80 B923 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3923, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB923, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_011)
{
    // 3923 0061;	
    // (㤣) CJK UNIFIED IDEOGRAPH-3923	[FB80 B923 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3923, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB923, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_012)
{
    // 3923 0041;	
    // (㤣) CJK UNIFIED IDEOGRAPH-3923	[FB80 B923 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3923, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB923, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_013)
{
    // 3923 0062;	
    // (㤣) CJK UNIFIED IDEOGRAPH-3923	[FB80 B923 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3923, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB923, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_014)
{
    // 3924 0021;	
    // (㤤) CJK UNIFIED IDEOGRAPH-3924	[FB80 B924 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3924, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB924, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_015)
{
    // 3924 003F;	
    // (㤤) CJK UNIFIED IDEOGRAPH-3924	[FB80 B924 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3924, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB924, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_016)
{
    // 3924 0061;	
    // (㤤) CJK UNIFIED IDEOGRAPH-3924	[FB80 B924 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3924, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB924, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_017)
{
    // 3924 0041;	
    // (㤤) CJK UNIFIED IDEOGRAPH-3924	[FB80 B924 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3924, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB924, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_018)
{
    // 3924 0062;	
    // (㤤) CJK UNIFIED IDEOGRAPH-3924	[FB80 B924 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3924, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB924, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_019)
{
    // 3925 0021;	
    // (㤥) CJK UNIFIED IDEOGRAPH-3925	[FB80 B925 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3925, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB925, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_020)
{
    // 3925 003F;	
    // (㤥) CJK UNIFIED IDEOGRAPH-3925	[FB80 B925 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3925, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB925, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_021)
{
    // 3925 0061;	
    // (㤥) CJK UNIFIED IDEOGRAPH-3925	[FB80 B925 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3925, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB925, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_022)
{
    // 3925 0041;	
    // (㤥) CJK UNIFIED IDEOGRAPH-3925	[FB80 B925 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3925, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB925, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_023)
{
    // 3925 0062;	
    // (㤥) CJK UNIFIED IDEOGRAPH-3925	[FB80 B925 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3925, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB925, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_024)
{
    // 3926 0021;	
    // (㤦) CJK UNIFIED IDEOGRAPH-3926	[FB80 B926 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3926, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB926, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_025)
{
    // 3926 003F;	
    // (㤦) CJK UNIFIED IDEOGRAPH-3926	[FB80 B926 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3926, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB926, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_026)
{
    // 3926 0061;	
    // (㤦) CJK UNIFIED IDEOGRAPH-3926	[FB80 B926 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3926, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB926, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_027)
{
    // 3926 0041;	
    // (㤦) CJK UNIFIED IDEOGRAPH-3926	[FB80 B926 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3926, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB926, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_028)
{
    // 3926 0062;	
    // (㤦) CJK UNIFIED IDEOGRAPH-3926	[FB80 B926 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3926, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB926, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_029)
{
    // 3927 0021;	
    // (㤧) CJK UNIFIED IDEOGRAPH-3927	[FB80 B927 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3927, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB927, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_030)
{
    // 3927 003F;	
    // (㤧) CJK UNIFIED IDEOGRAPH-3927	[FB80 B927 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3927, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB927, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_031)
{
    // 3927 0061;	
    // (㤧) CJK UNIFIED IDEOGRAPH-3927	[FB80 B927 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3927, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB927, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_032)
{
    // 3927 0041;	
    // (㤧) CJK UNIFIED IDEOGRAPH-3927	[FB80 B927 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3927, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB927, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_033)
{
    // 3927 0062;	
    // (㤧) CJK UNIFIED IDEOGRAPH-3927	[FB80 B927 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3927, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB927, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_034)
{
    // 3928 0021;	
    // (㤨) CJK UNIFIED IDEOGRAPH-3928	[FB80 B928 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3928, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB928, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_035)
{
    // 3928 003F;	
    // (㤨) CJK UNIFIED IDEOGRAPH-3928	[FB80 B928 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3928, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB928, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_036)
{
    // 3928 0061;	
    // (㤨) CJK UNIFIED IDEOGRAPH-3928	[FB80 B928 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3928, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB928, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_037)
{
    // 3928 0041;	
    // (㤨) CJK UNIFIED IDEOGRAPH-3928	[FB80 B928 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3928, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB928, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_038)
{
    // 3928 0062;	
    // (㤨) CJK UNIFIED IDEOGRAPH-3928	[FB80 B928 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3928, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB928, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_039)
{
    // 3929 0021;	
    // (㤩) CJK UNIFIED IDEOGRAPH-3929	[FB80 B929 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3929, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB929, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_040)
{
    // 3929 003F;	
    // (㤩) CJK UNIFIED IDEOGRAPH-3929	[FB80 B929 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3929, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB929, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_041)
{
    // 3929 0061;	
    // (㤩) CJK UNIFIED IDEOGRAPH-3929	[FB80 B929 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3929, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB929, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_042)
{
    // 3929 0041;	
    // (㤩) CJK UNIFIED IDEOGRAPH-3929	[FB80 B929 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3929, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB929, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_043)
{
    // 3929 0062;	
    // (㤩) CJK UNIFIED IDEOGRAPH-3929	[FB80 B929 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3929, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB929, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_044)
{
    // 392A 0021;	
    // (㤪) CJK UNIFIED IDEOGRAPH-392A	[FB80 B92A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB92A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_045)
{
    // 392A 003F;	
    // (㤪) CJK UNIFIED IDEOGRAPH-392A	[FB80 B92A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB92A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_046)
{
    // 392A 0061;	
    // (㤪) CJK UNIFIED IDEOGRAPH-392A	[FB80 B92A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB92A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_047)
{
    // 392A 0041;	
    // (㤪) CJK UNIFIED IDEOGRAPH-392A	[FB80 B92A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x392A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB92A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_048)
{
    // 392A 0062;	
    // (㤪) CJK UNIFIED IDEOGRAPH-392A	[FB80 B92A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB92A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_049)
{
    // 392B 0021;	
    // (㤫) CJK UNIFIED IDEOGRAPH-392B	[FB80 B92B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB92B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_050)
{
    // 392B 003F;	
    // (㤫) CJK UNIFIED IDEOGRAPH-392B	[FB80 B92B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB92B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_051)
{
    // 392B 0061;	
    // (㤫) CJK UNIFIED IDEOGRAPH-392B	[FB80 B92B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB92B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_052)
{
    // 392B 0041;	
    // (㤫) CJK UNIFIED IDEOGRAPH-392B	[FB80 B92B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x392B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB92B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_053)
{
    // 392B 0062;	
    // (㤫) CJK UNIFIED IDEOGRAPH-392B	[FB80 B92B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB92B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_054)
{
    // 392C 0021;	
    // (㤬) CJK UNIFIED IDEOGRAPH-392C	[FB80 B92C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB92C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_055)
{
    // 392C 003F;	
    // (㤬) CJK UNIFIED IDEOGRAPH-392C	[FB80 B92C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB92C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_056)
{
    // 392C 0061;	
    // (㤬) CJK UNIFIED IDEOGRAPH-392C	[FB80 B92C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB92C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_057)
{
    // 392C 0041;	
    // (㤬) CJK UNIFIED IDEOGRAPH-392C	[FB80 B92C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x392C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB92C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_058)
{
    // 392C 0062;	
    // (㤬) CJK UNIFIED IDEOGRAPH-392C	[FB80 B92C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB92C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_059)
{
    // 392D 0021;	
    // (㤭) CJK UNIFIED IDEOGRAPH-392D	[FB80 B92D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB92D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_060)
{
    // 392D 003F;	
    // (㤭) CJK UNIFIED IDEOGRAPH-392D	[FB80 B92D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB92D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_061)
{
    // 392D 0061;	
    // (㤭) CJK UNIFIED IDEOGRAPH-392D	[FB80 B92D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB92D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_062)
{
    // 392D 0041;	
    // (㤭) CJK UNIFIED IDEOGRAPH-392D	[FB80 B92D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x392D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB92D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_063)
{
    // 392D 0062;	
    // (㤭) CJK UNIFIED IDEOGRAPH-392D	[FB80 B92D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB92D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_064)
{
    // 392E 0021;	
    // (㤮) CJK UNIFIED IDEOGRAPH-392E	[FB80 B92E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB92E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_065)
{
    // 392E 003F;	
    // (㤮) CJK UNIFIED IDEOGRAPH-392E	[FB80 B92E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB92E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_066)
{
    // 392E 0061;	
    // (㤮) CJK UNIFIED IDEOGRAPH-392E	[FB80 B92E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB92E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_067)
{
    // 392E 0041;	
    // (㤮) CJK UNIFIED IDEOGRAPH-392E	[FB80 B92E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x392E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB92E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_068)
{
    // 392E 0062;	
    // (㤮) CJK UNIFIED IDEOGRAPH-392E	[FB80 B92E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB92E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_069)
{
    // 392F 0021;	
    // (㤯) CJK UNIFIED IDEOGRAPH-392F	[FB80 B92F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB92F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_070)
{
    // 392F 003F;	
    // (㤯) CJK UNIFIED IDEOGRAPH-392F	[FB80 B92F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB92F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_071)
{
    // 392F 0061;	
    // (㤯) CJK UNIFIED IDEOGRAPH-392F	[FB80 B92F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB92F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_072)
{
    // 392F 0041;	
    // (㤯) CJK UNIFIED IDEOGRAPH-392F	[FB80 B92F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x392F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB92F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_073)
{
    // 392F 0062;	
    // (㤯) CJK UNIFIED IDEOGRAPH-392F	[FB80 B92F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x392F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB92F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_074)
{
    // 3930 0021;	
    // (㤰) CJK UNIFIED IDEOGRAPH-3930	[FB80 B930 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3930, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB930, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_075)
{
    // 3930 003F;	
    // (㤰) CJK UNIFIED IDEOGRAPH-3930	[FB80 B930 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3930, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB930, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_076)
{
    // 3930 0061;	
    // (㤰) CJK UNIFIED IDEOGRAPH-3930	[FB80 B930 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3930, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB930, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_077)
{
    // 3930 0041;	
    // (㤰) CJK UNIFIED IDEOGRAPH-3930	[FB80 B930 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3930, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB930, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_078)
{
    // 3930 0062;	
    // (㤰) CJK UNIFIED IDEOGRAPH-3930	[FB80 B930 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3930, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB930, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_079)
{
    // 3931 0021;	
    // (㤱) CJK UNIFIED IDEOGRAPH-3931	[FB80 B931 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3931, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB931, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_080)
{
    // 3931 003F;	
    // (㤱) CJK UNIFIED IDEOGRAPH-3931	[FB80 B931 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3931, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB931, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_081)
{
    // 3931 0061;	
    // (㤱) CJK UNIFIED IDEOGRAPH-3931	[FB80 B931 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3931, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB931, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_082)
{
    // 3931 0041;	
    // (㤱) CJK UNIFIED IDEOGRAPH-3931	[FB80 B931 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3931, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB931, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_083)
{
    // 3931 0062;	
    // (㤱) CJK UNIFIED IDEOGRAPH-3931	[FB80 B931 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3931, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB931, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_084)
{
    // 3932 0021;	
    // (㤲) CJK UNIFIED IDEOGRAPH-3932	[FB80 B932 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3932, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB932, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_085)
{
    // 3932 003F;	
    // (㤲) CJK UNIFIED IDEOGRAPH-3932	[FB80 B932 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3932, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB932, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_086)
{
    // 3932 0061;	
    // (㤲) CJK UNIFIED IDEOGRAPH-3932	[FB80 B932 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3932, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB932, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_087)
{
    // 3932 0041;	
    // (㤲) CJK UNIFIED IDEOGRAPH-3932	[FB80 B932 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3932, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB932, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_088)
{
    // 3932 0062;	
    // (㤲) CJK UNIFIED IDEOGRAPH-3932	[FB80 B932 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3932, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB932, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_089)
{
    // 3933 0021;	
    // (㤳) CJK UNIFIED IDEOGRAPH-3933	[FB80 B933 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3933, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB933, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_090)
{
    // 3933 003F;	
    // (㤳) CJK UNIFIED IDEOGRAPH-3933	[FB80 B933 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3933, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB933, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_091)
{
    // 3933 0061;	
    // (㤳) CJK UNIFIED IDEOGRAPH-3933	[FB80 B933 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3933, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB933, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_092)
{
    // 3933 0041;	
    // (㤳) CJK UNIFIED IDEOGRAPH-3933	[FB80 B933 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3933, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB933, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_093)
{
    // 3933 0062;	
    // (㤳) CJK UNIFIED IDEOGRAPH-3933	[FB80 B933 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3933, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB933, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_094)
{
    // 3934 0021;	
    // (㤴) CJK UNIFIED IDEOGRAPH-3934	[FB80 B934 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3934, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB934, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_095)
{
    // 3934 003F;	
    // (㤴) CJK UNIFIED IDEOGRAPH-3934	[FB80 B934 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3934, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB934, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_096)
{
    // 3934 0061;	
    // (㤴) CJK UNIFIED IDEOGRAPH-3934	[FB80 B934 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3934, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB934, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_097)
{
    // 3934 0041;	
    // (㤴) CJK UNIFIED IDEOGRAPH-3934	[FB80 B934 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3934, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB934, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_098)
{
    // 3934 0062;	
    // (㤴) CJK UNIFIED IDEOGRAPH-3934	[FB80 B934 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3934, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB934, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_099)
{
    // 3935 0021;	
    // (㤵) CJK UNIFIED IDEOGRAPH-3935	[FB80 B935 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3935, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB935, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_100)
{
    // 3935 003F;	
    // (㤵) CJK UNIFIED IDEOGRAPH-3935	[FB80 B935 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3935, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB935, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_101)
{
    // 3935 0061;	
    // (㤵) CJK UNIFIED IDEOGRAPH-3935	[FB80 B935 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3935, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB935, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_102)
{
    // 3935 0041;	
    // (㤵) CJK UNIFIED IDEOGRAPH-3935	[FB80 B935 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3935, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB935, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_103)
{
    // 3935 0062;	
    // (㤵) CJK UNIFIED IDEOGRAPH-3935	[FB80 B935 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3935, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB935, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_104)
{
    // 3936 0021;	
    // (㤶) CJK UNIFIED IDEOGRAPH-3936	[FB80 B936 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3936, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB936, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_105)
{
    // 3936 003F;	
    // (㤶) CJK UNIFIED IDEOGRAPH-3936	[FB80 B936 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3936, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB936, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_106)
{
    // 3936 0061;	
    // (㤶) CJK UNIFIED IDEOGRAPH-3936	[FB80 B936 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3936, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB936, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_107)
{
    // 3936 0041;	
    // (㤶) CJK UNIFIED IDEOGRAPH-3936	[FB80 B936 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3936, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB936, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_108)
{
    // 3936 0062;	
    // (㤶) CJK UNIFIED IDEOGRAPH-3936	[FB80 B936 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3936, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB936, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_109)
{
    // 3937 0021;	
    // (㤷) CJK UNIFIED IDEOGRAPH-3937	[FB80 B937 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3937, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB937, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_110)
{
    // 3937 003F;	
    // (㤷) CJK UNIFIED IDEOGRAPH-3937	[FB80 B937 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3937, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB937, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_111)
{
    // 3937 0061;	
    // (㤷) CJK UNIFIED IDEOGRAPH-3937	[FB80 B937 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3937, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB937, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_112)
{
    // 3937 0041;	
    // (㤷) CJK UNIFIED IDEOGRAPH-3937	[FB80 B937 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3937, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB937, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_113)
{
    // 3937 0062;	
    // (㤷) CJK UNIFIED IDEOGRAPH-3937	[FB80 B937 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3937, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB937, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_114)
{
    // 3938 0021;	
    // (㤸) CJK UNIFIED IDEOGRAPH-3938	[FB80 B938 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3938, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB938, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_115)
{
    // 3938 003F;	
    // (㤸) CJK UNIFIED IDEOGRAPH-3938	[FB80 B938 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3938, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB938, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_116)
{
    // 3938 0061;	
    // (㤸) CJK UNIFIED IDEOGRAPH-3938	[FB80 B938 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3938, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB938, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_117)
{
    // 3938 0041;	
    // (㤸) CJK UNIFIED IDEOGRAPH-3938	[FB80 B938 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3938, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB938, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_118)
{
    // 3938 0062;	
    // (㤸) CJK UNIFIED IDEOGRAPH-3938	[FB80 B938 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3938, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB938, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_119)
{
    // 3939 0021;	
    // (㤹) CJK UNIFIED IDEOGRAPH-3939	[FB80 B939 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3939, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB939, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_120)
{
    // 3939 003F;	
    // (㤹) CJK UNIFIED IDEOGRAPH-3939	[FB80 B939 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3939, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB939, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_121)
{
    // 3939 0061;	
    // (㤹) CJK UNIFIED IDEOGRAPH-3939	[FB80 B939 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3939, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB939, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_122)
{
    // 3939 0041;	
    // (㤹) CJK UNIFIED IDEOGRAPH-3939	[FB80 B939 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3939, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB939, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_123)
{
    // 3939 0062;	
    // (㤹) CJK UNIFIED IDEOGRAPH-3939	[FB80 B939 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3939, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB939, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_124)
{
    // 393A 0021;	
    // (㤺) CJK UNIFIED IDEOGRAPH-393A	[FB80 B93A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB93A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_125)
{
    // 2F8A1 0021;	
    // (㤺) CJK COMPATIBILITY IDEOGRAPH-2F8A1	[FB80 B93A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB93A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_126)
{
    // 393A 003F;	
    // (㤺) CJK UNIFIED IDEOGRAPH-393A	[FB80 B93A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB93A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_127)
{
    // 2F8A1 003F;	
    // (㤺) CJK COMPATIBILITY IDEOGRAPH-2F8A1	[FB80 B93A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB93A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_128)
{
    // 393A 0061;	
    // (㤺) CJK UNIFIED IDEOGRAPH-393A	[FB80 B93A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB93A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_129)
{
    // 2F8A1 0061;	
    // (㤺) CJK COMPATIBILITY IDEOGRAPH-2F8A1	[FB80 B93A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB93A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_130)
{
    // 393A 0041;	
    // (㤺) CJK UNIFIED IDEOGRAPH-393A	[FB80 B93A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x393A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB93A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_131)
{
    // 2F8A1 0041;	
    // (㤺) CJK COMPATIBILITY IDEOGRAPH-2F8A1	[FB80 B93A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8A1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB93A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_132)
{
    // 393A 0062;	
    // (㤺) CJK UNIFIED IDEOGRAPH-393A	[FB80 B93A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB93A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_133)
{
    // 2F8A1 0062;	
    // (㤺) CJK COMPATIBILITY IDEOGRAPH-2F8A1	[FB80 B93A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8A1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB93A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_134)
{
    // 393B 0021;	
    // (㤻) CJK UNIFIED IDEOGRAPH-393B	[FB80 B93B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB93B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_135)
{
    // 393B 003F;	
    // (㤻) CJK UNIFIED IDEOGRAPH-393B	[FB80 B93B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB93B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_136)
{
    // 393B 0061;	
    // (㤻) CJK UNIFIED IDEOGRAPH-393B	[FB80 B93B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB93B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_137)
{
    // 393B 0041;	
    // (㤻) CJK UNIFIED IDEOGRAPH-393B	[FB80 B93B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x393B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB93B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_138)
{
    // 393B 0062;	
    // (㤻) CJK UNIFIED IDEOGRAPH-393B	[FB80 B93B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB93B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_139)
{
    // 393C 0021;	
    // (㤼) CJK UNIFIED IDEOGRAPH-393C	[FB80 B93C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB93C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_140)
{
    // 393C 003F;	
    // (㤼) CJK UNIFIED IDEOGRAPH-393C	[FB80 B93C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB93C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_141)
{
    // 393C 0061;	
    // (㤼) CJK UNIFIED IDEOGRAPH-393C	[FB80 B93C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB93C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_142)
{
    // 393C 0041;	
    // (㤼) CJK UNIFIED IDEOGRAPH-393C	[FB80 B93C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x393C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB93C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_143)
{
    // 393C 0062;	
    // (㤼) CJK UNIFIED IDEOGRAPH-393C	[FB80 B93C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB93C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_144)
{
    // 393D 0021;	
    // (㤽) CJK UNIFIED IDEOGRAPH-393D	[FB80 B93D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB93D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_145)
{
    // 393D 003F;	
    // (㤽) CJK UNIFIED IDEOGRAPH-393D	[FB80 B93D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB93D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_146)
{
    // 393D 0061;	
    // (㤽) CJK UNIFIED IDEOGRAPH-393D	[FB80 B93D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB93D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_147)
{
    // 393D 0041;	
    // (㤽) CJK UNIFIED IDEOGRAPH-393D	[FB80 B93D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x393D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB93D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_148)
{
    // 393D 0062;	
    // (㤽) CJK UNIFIED IDEOGRAPH-393D	[FB80 B93D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB93D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_149)
{
    // 393E 0021;	
    // (㤾) CJK UNIFIED IDEOGRAPH-393E	[FB80 B93E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB93E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_150)
{
    // 393E 003F;	
    // (㤾) CJK UNIFIED IDEOGRAPH-393E	[FB80 B93E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB93E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_151)
{
    // 393E 0061;	
    // (㤾) CJK UNIFIED IDEOGRAPH-393E	[FB80 B93E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB93E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_152)
{
    // 393E 0041;	
    // (㤾) CJK UNIFIED IDEOGRAPH-393E	[FB80 B93E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x393E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB93E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_153)
{
    // 393E 0062;	
    // (㤾) CJK UNIFIED IDEOGRAPH-393E	[FB80 B93E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB93E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_154)
{
    // 393F 0021;	
    // (㤿) CJK UNIFIED IDEOGRAPH-393F	[FB80 B93F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB93F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_155)
{
    // 393F 003F;	
    // (㤿) CJK UNIFIED IDEOGRAPH-393F	[FB80 B93F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB93F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_156)
{
    // 393F 0061;	
    // (㤿) CJK UNIFIED IDEOGRAPH-393F	[FB80 B93F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB93F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_157)
{
    // 393F 0041;	
    // (㤿) CJK UNIFIED IDEOGRAPH-393F	[FB80 B93F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x393F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB93F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_158)
{
    // 393F 0062;	
    // (㤿) CJK UNIFIED IDEOGRAPH-393F	[FB80 B93F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x393F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB93F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_159)
{
    // 3940 0021;	
    // (㥀) CJK UNIFIED IDEOGRAPH-3940	[FB80 B940 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3940, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB940, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_160)
{
    // 3940 003F;	
    // (㥀) CJK UNIFIED IDEOGRAPH-3940	[FB80 B940 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3940, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB940, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_161)
{
    // 3940 0061;	
    // (㥀) CJK UNIFIED IDEOGRAPH-3940	[FB80 B940 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3940, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB940, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_162)
{
    // 3940 0041;	
    // (㥀) CJK UNIFIED IDEOGRAPH-3940	[FB80 B940 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3940, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB940, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_163)
{
    // 3940 0062;	
    // (㥀) CJK UNIFIED IDEOGRAPH-3940	[FB80 B940 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3940, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB940, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_164)
{
    // 3941 0021;	
    // (㥁) CJK UNIFIED IDEOGRAPH-3941	[FB80 B941 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3941, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB941, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_165)
{
    // 3941 003F;	
    // (㥁) CJK UNIFIED IDEOGRAPH-3941	[FB80 B941 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3941, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB941, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_166)
{
    // 3941 0061;	
    // (㥁) CJK UNIFIED IDEOGRAPH-3941	[FB80 B941 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3941, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB941, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_167)
{
    // 3941 0041;	
    // (㥁) CJK UNIFIED IDEOGRAPH-3941	[FB80 B941 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3941, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB941, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_168)
{
    // 3941 0062;	
    // (㥁) CJK UNIFIED IDEOGRAPH-3941	[FB80 B941 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3941, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB941, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_169)
{
    // 3942 0021;	
    // (㥂) CJK UNIFIED IDEOGRAPH-3942	[FB80 B942 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3942, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB942, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_170)
{
    // 3942 003F;	
    // (㥂) CJK UNIFIED IDEOGRAPH-3942	[FB80 B942 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3942, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB942, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_171)
{
    // 3942 0061;	
    // (㥂) CJK UNIFIED IDEOGRAPH-3942	[FB80 B942 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3942, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB942, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_172)
{
    // 3942 0041;	
    // (㥂) CJK UNIFIED IDEOGRAPH-3942	[FB80 B942 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3942, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB942, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_173)
{
    // 3942 0062;	
    // (㥂) CJK UNIFIED IDEOGRAPH-3942	[FB80 B942 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3942, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB942, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_174)
{
    // 3943 0021;	
    // (㥃) CJK UNIFIED IDEOGRAPH-3943	[FB80 B943 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3943, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB943, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_175)
{
    // 3943 003F;	
    // (㥃) CJK UNIFIED IDEOGRAPH-3943	[FB80 B943 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3943, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB943, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_176)
{
    // 3943 0061;	
    // (㥃) CJK UNIFIED IDEOGRAPH-3943	[FB80 B943 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3943, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB943, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_177)
{
    // 3943 0041;	
    // (㥃) CJK UNIFIED IDEOGRAPH-3943	[FB80 B943 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3943, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB943, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_178)
{
    // 3943 0062;	
    // (㥃) CJK UNIFIED IDEOGRAPH-3943	[FB80 B943 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3943, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB943, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_179)
{
    // 3944 0021;	
    // (㥄) CJK UNIFIED IDEOGRAPH-3944	[FB80 B944 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3944, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB944, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_180)
{
    // 3944 003F;	
    // (㥄) CJK UNIFIED IDEOGRAPH-3944	[FB80 B944 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3944, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB944, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_181)
{
    // 3944 0061;	
    // (㥄) CJK UNIFIED IDEOGRAPH-3944	[FB80 B944 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3944, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB944, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_182)
{
    // 3944 0041;	
    // (㥄) CJK UNIFIED IDEOGRAPH-3944	[FB80 B944 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3944, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB944, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_183)
{
    // 3944 0062;	
    // (㥄) CJK UNIFIED IDEOGRAPH-3944	[FB80 B944 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3944, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB944, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_184)
{
    // 3945 0021;	
    // (㥅) CJK UNIFIED IDEOGRAPH-3945	[FB80 B945 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3945, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB945, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_185)
{
    // 3945 003F;	
    // (㥅) CJK UNIFIED IDEOGRAPH-3945	[FB80 B945 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3945, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB945, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_186)
{
    // 3945 0061;	
    // (㥅) CJK UNIFIED IDEOGRAPH-3945	[FB80 B945 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3945, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB945, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_187)
{
    // 3945 0041;	
    // (㥅) CJK UNIFIED IDEOGRAPH-3945	[FB80 B945 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3945, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB945, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_188)
{
    // 3945 0062;	
    // (㥅) CJK UNIFIED IDEOGRAPH-3945	[FB80 B945 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3945, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB945, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_189)
{
    // 3946 0021;	
    // (㥆) CJK UNIFIED IDEOGRAPH-3946	[FB80 B946 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3946, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB946, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_190)
{
    // 3946 003F;	
    // (㥆) CJK UNIFIED IDEOGRAPH-3946	[FB80 B946 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3946, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB946, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_191)
{
    // 3946 0061;	
    // (㥆) CJK UNIFIED IDEOGRAPH-3946	[FB80 B946 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3946, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB946, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_192)
{
    // 3946 0041;	
    // (㥆) CJK UNIFIED IDEOGRAPH-3946	[FB80 B946 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3946, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB946, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_193)
{
    // 3946 0062;	
    // (㥆) CJK UNIFIED IDEOGRAPH-3946	[FB80 B946 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3946, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB946, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_194)
{
    // 3947 0021;	
    // (㥇) CJK UNIFIED IDEOGRAPH-3947	[FB80 B947 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3947, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB947, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_195)
{
    // 3947 003F;	
    // (㥇) CJK UNIFIED IDEOGRAPH-3947	[FB80 B947 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3947, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB947, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_196)
{
    // 3947 0061;	
    // (㥇) CJK UNIFIED IDEOGRAPH-3947	[FB80 B947 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3947, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB947, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_197)
{
    // 3947 0041;	
    // (㥇) CJK UNIFIED IDEOGRAPH-3947	[FB80 B947 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3947, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB947, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_198)
{
    // 3947 0062;	
    // (㥇) CJK UNIFIED IDEOGRAPH-3947	[FB80 B947 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3947, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB947, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_199)
{
    // 3948 0021;	
    // (㥈) CJK UNIFIED IDEOGRAPH-3948	[FB80 B948 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3948, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB948, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_200)
{
    // 3948 003F;	
    // (㥈) CJK UNIFIED IDEOGRAPH-3948	[FB80 B948 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3948, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB948, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_201)
{
    // 3948 0061;	
    // (㥈) CJK UNIFIED IDEOGRAPH-3948	[FB80 B948 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3948, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB948, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_202)
{
    // 3948 0041;	
    // (㥈) CJK UNIFIED IDEOGRAPH-3948	[FB80 B948 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3948, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB948, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_203)
{
    // 3948 0062;	
    // (㥈) CJK UNIFIED IDEOGRAPH-3948	[FB80 B948 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3948, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB948, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_204)
{
    // 3949 0021;	
    // (㥉) CJK UNIFIED IDEOGRAPH-3949	[FB80 B949 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3949, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB949, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_205)
{
    // 3949 003F;	
    // (㥉) CJK UNIFIED IDEOGRAPH-3949	[FB80 B949 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3949, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB949, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_206)
{
    // 3949 0061;	
    // (㥉) CJK UNIFIED IDEOGRAPH-3949	[FB80 B949 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3949, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB949, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_207)
{
    // 3949 0041;	
    // (㥉) CJK UNIFIED IDEOGRAPH-3949	[FB80 B949 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3949, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB949, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_208)
{
    // 3949 0062;	
    // (㥉) CJK UNIFIED IDEOGRAPH-3949	[FB80 B949 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3949, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB949, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_209)
{
    // 394A 0021;	
    // (㥊) CJK UNIFIED IDEOGRAPH-394A	[FB80 B94A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB94A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_210)
{
    // 394A 003F;	
    // (㥊) CJK UNIFIED IDEOGRAPH-394A	[FB80 B94A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB94A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_211)
{
    // 394A 0061;	
    // (㥊) CJK UNIFIED IDEOGRAPH-394A	[FB80 B94A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB94A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_212)
{
    // 394A 0041;	
    // (㥊) CJK UNIFIED IDEOGRAPH-394A	[FB80 B94A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x394A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB94A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_213)
{
    // 394A 0062;	
    // (㥊) CJK UNIFIED IDEOGRAPH-394A	[FB80 B94A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB94A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_214)
{
    // 394B 0021;	
    // (㥋) CJK UNIFIED IDEOGRAPH-394B	[FB80 B94B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB94B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_215)
{
    // 394B 003F;	
    // (㥋) CJK UNIFIED IDEOGRAPH-394B	[FB80 B94B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB94B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_216)
{
    // 394B 0061;	
    // (㥋) CJK UNIFIED IDEOGRAPH-394B	[FB80 B94B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB94B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_217)
{
    // 394B 0041;	
    // (㥋) CJK UNIFIED IDEOGRAPH-394B	[FB80 B94B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x394B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB94B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_218)
{
    // 394B 0062;	
    // (㥋) CJK UNIFIED IDEOGRAPH-394B	[FB80 B94B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB94B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_219)
{
    // 394C 0021;	
    // (㥌) CJK UNIFIED IDEOGRAPH-394C	[FB80 B94C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB94C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_220)
{
    // 394C 003F;	
    // (㥌) CJK UNIFIED IDEOGRAPH-394C	[FB80 B94C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB94C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_221)
{
    // 394C 0061;	
    // (㥌) CJK UNIFIED IDEOGRAPH-394C	[FB80 B94C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB94C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_222)
{
    // 394C 0041;	
    // (㥌) CJK UNIFIED IDEOGRAPH-394C	[FB80 B94C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x394C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB94C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_223)
{
    // 394C 0062;	
    // (㥌) CJK UNIFIED IDEOGRAPH-394C	[FB80 B94C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB94C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_224)
{
    // 394D 0021;	
    // (㥍) CJK UNIFIED IDEOGRAPH-394D	[FB80 B94D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB94D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_225)
{
    // 394D 003F;	
    // (㥍) CJK UNIFIED IDEOGRAPH-394D	[FB80 B94D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB94D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_226)
{
    // 394D 0061;	
    // (㥍) CJK UNIFIED IDEOGRAPH-394D	[FB80 B94D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB94D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_227)
{
    // 394D 0041;	
    // (㥍) CJK UNIFIED IDEOGRAPH-394D	[FB80 B94D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x394D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB94D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_228)
{
    // 394D 0062;	
    // (㥍) CJK UNIFIED IDEOGRAPH-394D	[FB80 B94D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB94D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_229)
{
    // 394E 0021;	
    // (㥎) CJK UNIFIED IDEOGRAPH-394E	[FB80 B94E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB94E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_230)
{
    // 394E 003F;	
    // (㥎) CJK UNIFIED IDEOGRAPH-394E	[FB80 B94E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB94E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_231)
{
    // 394E 0061;	
    // (㥎) CJK UNIFIED IDEOGRAPH-394E	[FB80 B94E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB94E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_232)
{
    // 394E 0041;	
    // (㥎) CJK UNIFIED IDEOGRAPH-394E	[FB80 B94E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x394E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB94E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_233)
{
    // 394E 0062;	
    // (㥎) CJK UNIFIED IDEOGRAPH-394E	[FB80 B94E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB94E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_234)
{
    // 394F 0021;	
    // (㥏) CJK UNIFIED IDEOGRAPH-394F	[FB80 B94F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB94F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_235)
{
    // 394F 003F;	
    // (㥏) CJK UNIFIED IDEOGRAPH-394F	[FB80 B94F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB94F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_236)
{
    // 394F 0061;	
    // (㥏) CJK UNIFIED IDEOGRAPH-394F	[FB80 B94F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB94F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_237)
{
    // 394F 0041;	
    // (㥏) CJK UNIFIED IDEOGRAPH-394F	[FB80 B94F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x394F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB94F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_238)
{
    // 394F 0062;	
    // (㥏) CJK UNIFIED IDEOGRAPH-394F	[FB80 B94F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x394F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB94F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_239)
{
    // 3950 0021;	
    // (㥐) CJK UNIFIED IDEOGRAPH-3950	[FB80 B950 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3950, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB950, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_240)
{
    // 3950 003F;	
    // (㥐) CJK UNIFIED IDEOGRAPH-3950	[FB80 B950 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3950, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB950, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_241)
{
    // 3950 0061;	
    // (㥐) CJK UNIFIED IDEOGRAPH-3950	[FB80 B950 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3950, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB950, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_242)
{
    // 3950 0041;	
    // (㥐) CJK UNIFIED IDEOGRAPH-3950	[FB80 B950 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3950, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB950, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_243)
{
    // 3950 0062;	
    // (㥐) CJK UNIFIED IDEOGRAPH-3950	[FB80 B950 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3950, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB950, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_244)
{
    // 3951 0021;	
    // (㥑) CJK UNIFIED IDEOGRAPH-3951	[FB80 B951 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3951, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB951, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_245)
{
    // 3951 003F;	
    // (㥑) CJK UNIFIED IDEOGRAPH-3951	[FB80 B951 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3951, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB951, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_246)
{
    // 3951 0061;	
    // (㥑) CJK UNIFIED IDEOGRAPH-3951	[FB80 B951 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3951, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB951, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_247)
{
    // 3951 0041;	
    // (㥑) CJK UNIFIED IDEOGRAPH-3951	[FB80 B951 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3951, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB951, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_248)
{
    // 3951 0062;	
    // (㥑) CJK UNIFIED IDEOGRAPH-3951	[FB80 B951 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3951, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB951, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_249)
{
    // 3952 0021;	
    // (㥒) CJK UNIFIED IDEOGRAPH-3952	[FB80 B952 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3952, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB952, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_250)
{
    // 3952 003F;	
    // (㥒) CJK UNIFIED IDEOGRAPH-3952	[FB80 B952 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3952, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB952, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_251)
{
    // 3952 0061;	
    // (㥒) CJK UNIFIED IDEOGRAPH-3952	[FB80 B952 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3952, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB952, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_252)
{
    // 3952 0041;	
    // (㥒) CJK UNIFIED IDEOGRAPH-3952	[FB80 B952 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3952, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB952, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_253)
{
    // 3952 0062;	
    // (㥒) CJK UNIFIED IDEOGRAPH-3952	[FB80 B952 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3952, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB952, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_254)
{
    // 3953 0021;	
    // (㥓) CJK UNIFIED IDEOGRAPH-3953	[FB80 B953 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3953, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB953, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_255)
{
    // 3953 003F;	
    // (㥓) CJK UNIFIED IDEOGRAPH-3953	[FB80 B953 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3953, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB953, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_256)
{
    // 3953 0061;	
    // (㥓) CJK UNIFIED IDEOGRAPH-3953	[FB80 B953 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3953, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB953, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_257)
{
    // 3953 0041;	
    // (㥓) CJK UNIFIED IDEOGRAPH-3953	[FB80 B953 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3953, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB953, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_258)
{
    // 3953 0062;	
    // (㥓) CJK UNIFIED IDEOGRAPH-3953	[FB80 B953 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3953, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB953, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_259)
{
    // 3954 0021;	
    // (㥔) CJK UNIFIED IDEOGRAPH-3954	[FB80 B954 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3954, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB954, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_260)
{
    // 3954 003F;	
    // (㥔) CJK UNIFIED IDEOGRAPH-3954	[FB80 B954 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3954, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB954, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_261)
{
    // 3954 0061;	
    // (㥔) CJK UNIFIED IDEOGRAPH-3954	[FB80 B954 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3954, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB954, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_262)
{
    // 3954 0041;	
    // (㥔) CJK UNIFIED IDEOGRAPH-3954	[FB80 B954 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3954, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB954, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_263)
{
    // 3954 0062;	
    // (㥔) CJK UNIFIED IDEOGRAPH-3954	[FB80 B954 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3954, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB954, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_264)
{
    // 3955 0021;	
    // (㥕) CJK UNIFIED IDEOGRAPH-3955	[FB80 B955 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3955, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB955, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_265)
{
    // 3955 003F;	
    // (㥕) CJK UNIFIED IDEOGRAPH-3955	[FB80 B955 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3955, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB955, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_266)
{
    // 3955 0061;	
    // (㥕) CJK UNIFIED IDEOGRAPH-3955	[FB80 B955 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3955, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB955, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_267)
{
    // 3955 0041;	
    // (㥕) CJK UNIFIED IDEOGRAPH-3955	[FB80 B955 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3955, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB955, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_268)
{
    // 3955 0062;	
    // (㥕) CJK UNIFIED IDEOGRAPH-3955	[FB80 B955 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3955, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB955, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_269)
{
    // 3956 0021;	
    // (㥖) CJK UNIFIED IDEOGRAPH-3956	[FB80 B956 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3956, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB956, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_270)
{
    // 3956 003F;	
    // (㥖) CJK UNIFIED IDEOGRAPH-3956	[FB80 B956 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3956, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB956, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_271)
{
    // 3956 0061;	
    // (㥖) CJK UNIFIED IDEOGRAPH-3956	[FB80 B956 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3956, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB956, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_272)
{
    // 3956 0041;	
    // (㥖) CJK UNIFIED IDEOGRAPH-3956	[FB80 B956 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3956, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB956, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_273)
{
    // 3956 0062;	
    // (㥖) CJK UNIFIED IDEOGRAPH-3956	[FB80 B956 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3956, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB956, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_274)
{
    // 3957 0021;	
    // (㥗) CJK UNIFIED IDEOGRAPH-3957	[FB80 B957 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3957, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB957, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_275)
{
    // 3957 003F;	
    // (㥗) CJK UNIFIED IDEOGRAPH-3957	[FB80 B957 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3957, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB957, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_276)
{
    // 3957 0061;	
    // (㥗) CJK UNIFIED IDEOGRAPH-3957	[FB80 B957 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3957, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB957, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_277)
{
    // 3957 0041;	
    // (㥗) CJK UNIFIED IDEOGRAPH-3957	[FB80 B957 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3957, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB957, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_278)
{
    // 3957 0062;	
    // (㥗) CJK UNIFIED IDEOGRAPH-3957	[FB80 B957 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3957, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB957, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_279)
{
    // 3958 0021;	
    // (㥘) CJK UNIFIED IDEOGRAPH-3958	[FB80 B958 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3958, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB958, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_280)
{
    // 3958 003F;	
    // (㥘) CJK UNIFIED IDEOGRAPH-3958	[FB80 B958 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3958, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB958, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_281)
{
    // 3958 0061;	
    // (㥘) CJK UNIFIED IDEOGRAPH-3958	[FB80 B958 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3958, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB958, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_282)
{
    // 3958 0041;	
    // (㥘) CJK UNIFIED IDEOGRAPH-3958	[FB80 B958 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3958, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB958, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_283)
{
    // 3958 0062;	
    // (㥘) CJK UNIFIED IDEOGRAPH-3958	[FB80 B958 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3958, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB958, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_284)
{
    // 3959 0021;	
    // (㥙) CJK UNIFIED IDEOGRAPH-3959	[FB80 B959 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3959, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB959, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_285)
{
    // 3959 003F;	
    // (㥙) CJK UNIFIED IDEOGRAPH-3959	[FB80 B959 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3959, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB959, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_286)
{
    // 3959 0061;	
    // (㥙) CJK UNIFIED IDEOGRAPH-3959	[FB80 B959 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3959, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB959, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_287)
{
    // 3959 0041;	
    // (㥙) CJK UNIFIED IDEOGRAPH-3959	[FB80 B959 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3959, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB959, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_288)
{
    // 3959 0062;	
    // (㥙) CJK UNIFIED IDEOGRAPH-3959	[FB80 B959 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3959, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB959, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_289)
{
    // 395A 0021;	
    // (㥚) CJK UNIFIED IDEOGRAPH-395A	[FB80 B95A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB95A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_290)
{
    // 395A 003F;	
    // (㥚) CJK UNIFIED IDEOGRAPH-395A	[FB80 B95A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB95A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_291)
{
    // 395A 0061;	
    // (㥚) CJK UNIFIED IDEOGRAPH-395A	[FB80 B95A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB95A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_292)
{
    // 395A 0041;	
    // (㥚) CJK UNIFIED IDEOGRAPH-395A	[FB80 B95A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x395A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB95A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_293)
{
    // 395A 0062;	
    // (㥚) CJK UNIFIED IDEOGRAPH-395A	[FB80 B95A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB95A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_294)
{
    // 395B 0021;	
    // (㥛) CJK UNIFIED IDEOGRAPH-395B	[FB80 B95B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB95B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_295)
{
    // 395B 003F;	
    // (㥛) CJK UNIFIED IDEOGRAPH-395B	[FB80 B95B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB95B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_296)
{
    // 395B 0061;	
    // (㥛) CJK UNIFIED IDEOGRAPH-395B	[FB80 B95B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB95B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_297)
{
    // 395B 0041;	
    // (㥛) CJK UNIFIED IDEOGRAPH-395B	[FB80 B95B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x395B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB95B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_298)
{
    // 395B 0062;	
    // (㥛) CJK UNIFIED IDEOGRAPH-395B	[FB80 B95B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB95B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_299)
{
    // 395C 0021;	
    // (㥜) CJK UNIFIED IDEOGRAPH-395C	[FB80 B95C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB95C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_300)
{
    // 395C 003F;	
    // (㥜) CJK UNIFIED IDEOGRAPH-395C	[FB80 B95C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB95C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_301)
{
    // 395C 0061;	
    // (㥜) CJK UNIFIED IDEOGRAPH-395C	[FB80 B95C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB95C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_302)
{
    // 395C 0041;	
    // (㥜) CJK UNIFIED IDEOGRAPH-395C	[FB80 B95C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x395C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB95C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_303)
{
    // 395C 0062;	
    // (㥜) CJK UNIFIED IDEOGRAPH-395C	[FB80 B95C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB95C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_304)
{
    // 395D 0021;	
    // (㥝) CJK UNIFIED IDEOGRAPH-395D	[FB80 B95D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB95D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_305)
{
    // 395D 003F;	
    // (㥝) CJK UNIFIED IDEOGRAPH-395D	[FB80 B95D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB95D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_306)
{
    // 395D 0061;	
    // (㥝) CJK UNIFIED IDEOGRAPH-395D	[FB80 B95D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB95D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_307)
{
    // 395D 0041;	
    // (㥝) CJK UNIFIED IDEOGRAPH-395D	[FB80 B95D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x395D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB95D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_308)
{
    // 395D 0062;	
    // (㥝) CJK UNIFIED IDEOGRAPH-395D	[FB80 B95D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB95D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_309)
{
    // 395E 0021;	
    // (㥞) CJK UNIFIED IDEOGRAPH-395E	[FB80 B95E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB95E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_310)
{
    // 395E 003F;	
    // (㥞) CJK UNIFIED IDEOGRAPH-395E	[FB80 B95E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB95E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_311)
{
    // 395E 0061;	
    // (㥞) CJK UNIFIED IDEOGRAPH-395E	[FB80 B95E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB95E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_312)
{
    // 395E 0041;	
    // (㥞) CJK UNIFIED IDEOGRAPH-395E	[FB80 B95E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x395E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB95E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_313)
{
    // 395E 0062;	
    // (㥞) CJK UNIFIED IDEOGRAPH-395E	[FB80 B95E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB95E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_314)
{
    // 395F 0021;	
    // (㥟) CJK UNIFIED IDEOGRAPH-395F	[FB80 B95F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB95F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_315)
{
    // 395F 003F;	
    // (㥟) CJK UNIFIED IDEOGRAPH-395F	[FB80 B95F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB95F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_316)
{
    // 395F 0061;	
    // (㥟) CJK UNIFIED IDEOGRAPH-395F	[FB80 B95F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB95F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_317)
{
    // 395F 0041;	
    // (㥟) CJK UNIFIED IDEOGRAPH-395F	[FB80 B95F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x395F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB95F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_318)
{
    // 395F 0062;	
    // (㥟) CJK UNIFIED IDEOGRAPH-395F	[FB80 B95F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x395F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB95F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_319)
{
    // 3960 0021;	
    // (㥠) CJK UNIFIED IDEOGRAPH-3960	[FB80 B960 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3960, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB960, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_320)
{
    // 3960 003F;	
    // (㥠) CJK UNIFIED IDEOGRAPH-3960	[FB80 B960 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3960, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB960, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_321)
{
    // 3960 0061;	
    // (㥠) CJK UNIFIED IDEOGRAPH-3960	[FB80 B960 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3960, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB960, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_322)
{
    // 3960 0041;	
    // (㥠) CJK UNIFIED IDEOGRAPH-3960	[FB80 B960 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3960, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB960, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_323)
{
    // 3960 0062;	
    // (㥠) CJK UNIFIED IDEOGRAPH-3960	[FB80 B960 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3960, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB960, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_324)
{
    // 3961 0021;	
    // (㥡) CJK UNIFIED IDEOGRAPH-3961	[FB80 B961 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3961, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB961, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_325)
{
    // 3961 003F;	
    // (㥡) CJK UNIFIED IDEOGRAPH-3961	[FB80 B961 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3961, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB961, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_326)
{
    // 3961 0061;	
    // (㥡) CJK UNIFIED IDEOGRAPH-3961	[FB80 B961 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3961, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB961, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_327)
{
    // 3961 0041;	
    // (㥡) CJK UNIFIED IDEOGRAPH-3961	[FB80 B961 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3961, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB961, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_328)
{
    // 3961 0062;	
    // (㥡) CJK UNIFIED IDEOGRAPH-3961	[FB80 B961 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3961, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB961, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_329)
{
    // 3962 0021;	
    // (㥢) CJK UNIFIED IDEOGRAPH-3962	[FB80 B962 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3962, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB962, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_330)
{
    // 3962 003F;	
    // (㥢) CJK UNIFIED IDEOGRAPH-3962	[FB80 B962 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3962, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB962, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_331)
{
    // 3962 0061;	
    // (㥢) CJK UNIFIED IDEOGRAPH-3962	[FB80 B962 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3962, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB962, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_332)
{
    // 3962 0041;	
    // (㥢) CJK UNIFIED IDEOGRAPH-3962	[FB80 B962 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3962, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB962, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_333)
{
    // 3962 0062;	
    // (㥢) CJK UNIFIED IDEOGRAPH-3962	[FB80 B962 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3962, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB962, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_334)
{
    // 3963 0021;	
    // (㥣) CJK UNIFIED IDEOGRAPH-3963	[FB80 B963 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3963, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB963, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_335)
{
    // 3963 003F;	
    // (㥣) CJK UNIFIED IDEOGRAPH-3963	[FB80 B963 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3963, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB963, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_336)
{
    // 3963 0061;	
    // (㥣) CJK UNIFIED IDEOGRAPH-3963	[FB80 B963 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3963, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB963, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_337)
{
    // 3963 0041;	
    // (㥣) CJK UNIFIED IDEOGRAPH-3963	[FB80 B963 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3963, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB963, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_338)
{
    // 3963 0062;	
    // (㥣) CJK UNIFIED IDEOGRAPH-3963	[FB80 B963 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3963, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB963, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_339)
{
    // 3964 0021;	
    // (㥤) CJK UNIFIED IDEOGRAPH-3964	[FB80 B964 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3964, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB964, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_340)
{
    // 3964 003F;	
    // (㥤) CJK UNIFIED IDEOGRAPH-3964	[FB80 B964 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3964, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB964, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_341)
{
    // 3964 0061;	
    // (㥤) CJK UNIFIED IDEOGRAPH-3964	[FB80 B964 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3964, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB964, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_342)
{
    // 3964 0041;	
    // (㥤) CJK UNIFIED IDEOGRAPH-3964	[FB80 B964 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3964, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB964, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_343)
{
    // 3964 0062;	
    // (㥤) CJK UNIFIED IDEOGRAPH-3964	[FB80 B964 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3964, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB964, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_344)
{
    // 3965 0021;	
    // (㥥) CJK UNIFIED IDEOGRAPH-3965	[FB80 B965 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3965, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB965, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_345)
{
    // 3965 003F;	
    // (㥥) CJK UNIFIED IDEOGRAPH-3965	[FB80 B965 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3965, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB965, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_346)
{
    // 3965 0061;	
    // (㥥) CJK UNIFIED IDEOGRAPH-3965	[FB80 B965 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3965, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB965, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_347)
{
    // 3965 0041;	
    // (㥥) CJK UNIFIED IDEOGRAPH-3965	[FB80 B965 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3965, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB965, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_348)
{
    // 3965 0062;	
    // (㥥) CJK UNIFIED IDEOGRAPH-3965	[FB80 B965 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3965, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB965, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_349)
{
    // 3966 0021;	
    // (㥦) CJK UNIFIED IDEOGRAPH-3966	[FB80 B966 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3966, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB966, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_350)
{
    // 3966 003F;	
    // (㥦) CJK UNIFIED IDEOGRAPH-3966	[FB80 B966 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3966, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB966, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_351)
{
    // 3966 0061;	
    // (㥦) CJK UNIFIED IDEOGRAPH-3966	[FB80 B966 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3966, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB966, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_352)
{
    // 3966 0041;	
    // (㥦) CJK UNIFIED IDEOGRAPH-3966	[FB80 B966 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3966, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB966, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_353)
{
    // 3966 0062;	
    // (㥦) CJK UNIFIED IDEOGRAPH-3966	[FB80 B966 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3966, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB966, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_354)
{
    // 3967 0021;	
    // (㥧) CJK UNIFIED IDEOGRAPH-3967	[FB80 B967 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3967, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB967, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_355)
{
    // 3967 003F;	
    // (㥧) CJK UNIFIED IDEOGRAPH-3967	[FB80 B967 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3967, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB967, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_356)
{
    // 3967 0061;	
    // (㥧) CJK UNIFIED IDEOGRAPH-3967	[FB80 B967 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3967, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB967, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_357)
{
    // 3967 0041;	
    // (㥧) CJK UNIFIED IDEOGRAPH-3967	[FB80 B967 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3967, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB967, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_358)
{
    // 3967 0062;	
    // (㥧) CJK UNIFIED IDEOGRAPH-3967	[FB80 B967 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3967, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB967, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_359)
{
    // 3968 0021;	
    // (㥨) CJK UNIFIED IDEOGRAPH-3968	[FB80 B968 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3968, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB968, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_360)
{
    // 3968 003F;	
    // (㥨) CJK UNIFIED IDEOGRAPH-3968	[FB80 B968 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3968, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB968, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_361)
{
    // 3968 0061;	
    // (㥨) CJK UNIFIED IDEOGRAPH-3968	[FB80 B968 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3968, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB968, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_362)
{
    // 3968 0041;	
    // (㥨) CJK UNIFIED IDEOGRAPH-3968	[FB80 B968 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3968, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB968, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_363)
{
    // 3968 0062;	
    // (㥨) CJK UNIFIED IDEOGRAPH-3968	[FB80 B968 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3968, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB968, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_364)
{
    // 3969 0021;	
    // (㥩) CJK UNIFIED IDEOGRAPH-3969	[FB80 B969 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3969, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB969, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_365)
{
    // 3969 003F;	
    // (㥩) CJK UNIFIED IDEOGRAPH-3969	[FB80 B969 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3969, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB969, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_366)
{
    // 3969 0061;	
    // (㥩) CJK UNIFIED IDEOGRAPH-3969	[FB80 B969 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3969, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB969, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_367)
{
    // 3969 0041;	
    // (㥩) CJK UNIFIED IDEOGRAPH-3969	[FB80 B969 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3969, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB969, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_368)
{
    // 3969 0062;	
    // (㥩) CJK UNIFIED IDEOGRAPH-3969	[FB80 B969 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3969, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB969, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_369)
{
    // 396A 0021;	
    // (㥪) CJK UNIFIED IDEOGRAPH-396A	[FB80 B96A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB96A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_370)
{
    // 396A 003F;	
    // (㥪) CJK UNIFIED IDEOGRAPH-396A	[FB80 B96A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB96A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_371)
{
    // 396A 0061;	
    // (㥪) CJK UNIFIED IDEOGRAPH-396A	[FB80 B96A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB96A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_372)
{
    // 396A 0041;	
    // (㥪) CJK UNIFIED IDEOGRAPH-396A	[FB80 B96A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x396A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB96A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_373)
{
    // 396A 0062;	
    // (㥪) CJK UNIFIED IDEOGRAPH-396A	[FB80 B96A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB96A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_374)
{
    // 396B 0021;	
    // (㥫) CJK UNIFIED IDEOGRAPH-396B	[FB80 B96B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB96B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_375)
{
    // 396B 003F;	
    // (㥫) CJK UNIFIED IDEOGRAPH-396B	[FB80 B96B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB96B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_376)
{
    // 396B 0061;	
    // (㥫) CJK UNIFIED IDEOGRAPH-396B	[FB80 B96B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB96B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_377)
{
    // 396B 0041;	
    // (㥫) CJK UNIFIED IDEOGRAPH-396B	[FB80 B96B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x396B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB96B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_378)
{
    // 396B 0062;	
    // (㥫) CJK UNIFIED IDEOGRAPH-396B	[FB80 B96B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB96B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_379)
{
    // 396C 0021;	
    // (㥬) CJK UNIFIED IDEOGRAPH-396C	[FB80 B96C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB96C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_380)
{
    // 396C 003F;	
    // (㥬) CJK UNIFIED IDEOGRAPH-396C	[FB80 B96C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB96C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_381)
{
    // 396C 0061;	
    // (㥬) CJK UNIFIED IDEOGRAPH-396C	[FB80 B96C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB96C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_382)
{
    // 396C 0041;	
    // (㥬) CJK UNIFIED IDEOGRAPH-396C	[FB80 B96C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x396C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB96C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_383)
{
    // 396C 0062;	
    // (㥬) CJK UNIFIED IDEOGRAPH-396C	[FB80 B96C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB96C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_384)
{
    // 396D 0021;	
    // (㥭) CJK UNIFIED IDEOGRAPH-396D	[FB80 B96D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB96D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_385)
{
    // 396D 003F;	
    // (㥭) CJK UNIFIED IDEOGRAPH-396D	[FB80 B96D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB96D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_386)
{
    // 396D 0061;	
    // (㥭) CJK UNIFIED IDEOGRAPH-396D	[FB80 B96D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB96D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_387)
{
    // 396D 0041;	
    // (㥭) CJK UNIFIED IDEOGRAPH-396D	[FB80 B96D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x396D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB96D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_388)
{
    // 396D 0062;	
    // (㥭) CJK UNIFIED IDEOGRAPH-396D	[FB80 B96D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB96D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_389)
{
    // 396E 0021;	
    // (㥮) CJK UNIFIED IDEOGRAPH-396E	[FB80 B96E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB96E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_390)
{
    // 396E 003F;	
    // (㥮) CJK UNIFIED IDEOGRAPH-396E	[FB80 B96E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB96E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_391)
{
    // 396E 0061;	
    // (㥮) CJK UNIFIED IDEOGRAPH-396E	[FB80 B96E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB96E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_392)
{
    // 396E 0041;	
    // (㥮) CJK UNIFIED IDEOGRAPH-396E	[FB80 B96E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x396E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB96E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_393)
{
    // 396E 0062;	
    // (㥮) CJK UNIFIED IDEOGRAPH-396E	[FB80 B96E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB96E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_394)
{
    // 396F 0021;	
    // (㥯) CJK UNIFIED IDEOGRAPH-396F	[FB80 B96F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB96F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_395)
{
    // 396F 003F;	
    // (㥯) CJK UNIFIED IDEOGRAPH-396F	[FB80 B96F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB96F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_396)
{
    // 396F 0061;	
    // (㥯) CJK UNIFIED IDEOGRAPH-396F	[FB80 B96F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB96F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_397)
{
    // 396F 0041;	
    // (㥯) CJK UNIFIED IDEOGRAPH-396F	[FB80 B96F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x396F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB96F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_398)
{
    // 396F 0062;	
    // (㥯) CJK UNIFIED IDEOGRAPH-396F	[FB80 B96F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x396F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB96F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_399)
{
    // 3970 0021;	
    // (㥰) CJK UNIFIED IDEOGRAPH-3970	[FB80 B970 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3970, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB970, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_400)
{
    // 3970 003F;	
    // (㥰) CJK UNIFIED IDEOGRAPH-3970	[FB80 B970 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3970, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB970, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_401)
{
    // 3970 0061;	
    // (㥰) CJK UNIFIED IDEOGRAPH-3970	[FB80 B970 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3970, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB970, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_402)
{
    // 3970 0041;	
    // (㥰) CJK UNIFIED IDEOGRAPH-3970	[FB80 B970 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3970, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB970, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_403)
{
    // 3970 0062;	
    // (㥰) CJK UNIFIED IDEOGRAPH-3970	[FB80 B970 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3970, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB970, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_404)
{
    // 3971 0021;	
    // (㥱) CJK UNIFIED IDEOGRAPH-3971	[FB80 B971 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3971, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB971, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_405)
{
    // 3971 003F;	
    // (㥱) CJK UNIFIED IDEOGRAPH-3971	[FB80 B971 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3971, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB971, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_406)
{
    // 3971 0061;	
    // (㥱) CJK UNIFIED IDEOGRAPH-3971	[FB80 B971 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3971, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB971, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_407)
{
    // 3971 0041;	
    // (㥱) CJK UNIFIED IDEOGRAPH-3971	[FB80 B971 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3971, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB971, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_408)
{
    // 3971 0062;	
    // (㥱) CJK UNIFIED IDEOGRAPH-3971	[FB80 B971 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3971, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB971, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_409)
{
    // 3972 0021;	
    // (㥲) CJK UNIFIED IDEOGRAPH-3972	[FB80 B972 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3972, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB972, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_410)
{
    // 3972 003F;	
    // (㥲) CJK UNIFIED IDEOGRAPH-3972	[FB80 B972 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3972, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB972, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_411)
{
    // 3972 0061;	
    // (㥲) CJK UNIFIED IDEOGRAPH-3972	[FB80 B972 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3972, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB972, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_412)
{
    // 3972 0041;	
    // (㥲) CJK UNIFIED IDEOGRAPH-3972	[FB80 B972 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3972, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB972, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_413)
{
    // 3972 0062;	
    // (㥲) CJK UNIFIED IDEOGRAPH-3972	[FB80 B972 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3972, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB972, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_414)
{
    // 3973 0021;	
    // (㥳) CJK UNIFIED IDEOGRAPH-3973	[FB80 B973 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3973, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB973, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_415)
{
    // 3973 003F;	
    // (㥳) CJK UNIFIED IDEOGRAPH-3973	[FB80 B973 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3973, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB973, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_416)
{
    // 3973 0061;	
    // (㥳) CJK UNIFIED IDEOGRAPH-3973	[FB80 B973 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3973, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB973, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_417)
{
    // 3973 0041;	
    // (㥳) CJK UNIFIED IDEOGRAPH-3973	[FB80 B973 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3973, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB973, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_418)
{
    // 3973 0062;	
    // (㥳) CJK UNIFIED IDEOGRAPH-3973	[FB80 B973 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3973, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB973, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_419)
{
    // 3974 0021;	
    // (㥴) CJK UNIFIED IDEOGRAPH-3974	[FB80 B974 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3974, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB974, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_420)
{
    // 3974 003F;	
    // (㥴) CJK UNIFIED IDEOGRAPH-3974	[FB80 B974 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3974, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB974, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_421)
{
    // 3974 0061;	
    // (㥴) CJK UNIFIED IDEOGRAPH-3974	[FB80 B974 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3974, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB974, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_422)
{
    // 3974 0041;	
    // (㥴) CJK UNIFIED IDEOGRAPH-3974	[FB80 B974 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3974, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB974, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_423)
{
    // 3974 0062;	
    // (㥴) CJK UNIFIED IDEOGRAPH-3974	[FB80 B974 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3974, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB974, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_424)
{
    // 3975 0021;	
    // (㥵) CJK UNIFIED IDEOGRAPH-3975	[FB80 B975 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3975, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB975, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_425)
{
    // 3975 003F;	
    // (㥵) CJK UNIFIED IDEOGRAPH-3975	[FB80 B975 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3975, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB975, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_426)
{
    // 3975 0061;	
    // (㥵) CJK UNIFIED IDEOGRAPH-3975	[FB80 B975 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3975, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB975, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_427)
{
    // 3975 0041;	
    // (㥵) CJK UNIFIED IDEOGRAPH-3975	[FB80 B975 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3975, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB975, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_428)
{
    // 3975 0062;	
    // (㥵) CJK UNIFIED IDEOGRAPH-3975	[FB80 B975 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3975, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB975, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_429)
{
    // 3976 0021;	
    // (㥶) CJK UNIFIED IDEOGRAPH-3976	[FB80 B976 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3976, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB976, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_430)
{
    // 3976 003F;	
    // (㥶) CJK UNIFIED IDEOGRAPH-3976	[FB80 B976 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3976, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB976, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_431)
{
    // 3976 0061;	
    // (㥶) CJK UNIFIED IDEOGRAPH-3976	[FB80 B976 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3976, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB976, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_432)
{
    // 3976 0041;	
    // (㥶) CJK UNIFIED IDEOGRAPH-3976	[FB80 B976 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3976, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB976, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_433)
{
    // 3976 0062;	
    // (㥶) CJK UNIFIED IDEOGRAPH-3976	[FB80 B976 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3976, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB976, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_434)
{
    // 3977 0021;	
    // (㥷) CJK UNIFIED IDEOGRAPH-3977	[FB80 B977 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3977, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB977, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_435)
{
    // 3977 003F;	
    // (㥷) CJK UNIFIED IDEOGRAPH-3977	[FB80 B977 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3977, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB977, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_436)
{
    // 3977 0061;	
    // (㥷) CJK UNIFIED IDEOGRAPH-3977	[FB80 B977 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3977, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB977, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_437)
{
    // 3977 0041;	
    // (㥷) CJK UNIFIED IDEOGRAPH-3977	[FB80 B977 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3977, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB977, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_438)
{
    // 3977 0062;	
    // (㥷) CJK UNIFIED IDEOGRAPH-3977	[FB80 B977 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3977, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB977, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_439)
{
    // 3978 0021;	
    // (㥸) CJK UNIFIED IDEOGRAPH-3978	[FB80 B978 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3978, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB978, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_440)
{
    // 3978 003F;	
    // (㥸) CJK UNIFIED IDEOGRAPH-3978	[FB80 B978 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3978, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB978, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_441)
{
    // 3978 0061;	
    // (㥸) CJK UNIFIED IDEOGRAPH-3978	[FB80 B978 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3978, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB978, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_442)
{
    // 3978 0041;	
    // (㥸) CJK UNIFIED IDEOGRAPH-3978	[FB80 B978 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3978, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB978, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_443)
{
    // 3978 0062;	
    // (㥸) CJK UNIFIED IDEOGRAPH-3978	[FB80 B978 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3978, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB978, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_444)
{
    // 3979 0021;	
    // (㥹) CJK UNIFIED IDEOGRAPH-3979	[FB80 B979 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3979, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB979, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_445)
{
    // 3979 003F;	
    // (㥹) CJK UNIFIED IDEOGRAPH-3979	[FB80 B979 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3979, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB979, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_446)
{
    // 3979 0061;	
    // (㥹) CJK UNIFIED IDEOGRAPH-3979	[FB80 B979 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3979, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB979, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_447)
{
    // 3979 0041;	
    // (㥹) CJK UNIFIED IDEOGRAPH-3979	[FB80 B979 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3979, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB979, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_448)
{
    // 3979 0062;	
    // (㥹) CJK UNIFIED IDEOGRAPH-3979	[FB80 B979 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3979, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB979, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_449)
{
    // 397A 0021;	
    // (㥺) CJK UNIFIED IDEOGRAPH-397A	[FB80 B97A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB97A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_450)
{
    // 397A 003F;	
    // (㥺) CJK UNIFIED IDEOGRAPH-397A	[FB80 B97A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB97A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_451)
{
    // 397A 0061;	
    // (㥺) CJK UNIFIED IDEOGRAPH-397A	[FB80 B97A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB97A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_452)
{
    // 397A 0041;	
    // (㥺) CJK UNIFIED IDEOGRAPH-397A	[FB80 B97A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x397A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB97A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_453)
{
    // 397A 0062;	
    // (㥺) CJK UNIFIED IDEOGRAPH-397A	[FB80 B97A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB97A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_454)
{
    // 397B 0021;	
    // (㥻) CJK UNIFIED IDEOGRAPH-397B	[FB80 B97B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB97B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_455)
{
    // 397B 003F;	
    // (㥻) CJK UNIFIED IDEOGRAPH-397B	[FB80 B97B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB97B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_456)
{
    // 397B 0061;	
    // (㥻) CJK UNIFIED IDEOGRAPH-397B	[FB80 B97B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB97B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_457)
{
    // 397B 0041;	
    // (㥻) CJK UNIFIED IDEOGRAPH-397B	[FB80 B97B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x397B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB97B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_458)
{
    // 397B 0062;	
    // (㥻) CJK UNIFIED IDEOGRAPH-397B	[FB80 B97B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB97B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_459)
{
    // 397C 0021;	
    // (㥼) CJK UNIFIED IDEOGRAPH-397C	[FB80 B97C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB97C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_460)
{
    // 397C 003F;	
    // (㥼) CJK UNIFIED IDEOGRAPH-397C	[FB80 B97C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB97C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_461)
{
    // 397C 0061;	
    // (㥼) CJK UNIFIED IDEOGRAPH-397C	[FB80 B97C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB97C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_462)
{
    // 397C 0041;	
    // (㥼) CJK UNIFIED IDEOGRAPH-397C	[FB80 B97C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x397C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB97C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_463)
{
    // 397C 0062;	
    // (㥼) CJK UNIFIED IDEOGRAPH-397C	[FB80 B97C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB97C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_464)
{
    // 397D 0021;	
    // (㥽) CJK UNIFIED IDEOGRAPH-397D	[FB80 B97D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB97D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_465)
{
    // 397D 003F;	
    // (㥽) CJK UNIFIED IDEOGRAPH-397D	[FB80 B97D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB97D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_466)
{
    // 397D 0061;	
    // (㥽) CJK UNIFIED IDEOGRAPH-397D	[FB80 B97D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB97D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_467)
{
    // 397D 0041;	
    // (㥽) CJK UNIFIED IDEOGRAPH-397D	[FB80 B97D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x397D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB97D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_468)
{
    // 397D 0062;	
    // (㥽) CJK UNIFIED IDEOGRAPH-397D	[FB80 B97D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB97D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_469)
{
    // 397E 0021;	
    // (㥾) CJK UNIFIED IDEOGRAPH-397E	[FB80 B97E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB97E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_470)
{
    // 397E 003F;	
    // (㥾) CJK UNIFIED IDEOGRAPH-397E	[FB80 B97E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB97E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_471)
{
    // 397E 0061;	
    // (㥾) CJK UNIFIED IDEOGRAPH-397E	[FB80 B97E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB97E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_472)
{
    // 397E 0041;	
    // (㥾) CJK UNIFIED IDEOGRAPH-397E	[FB80 B97E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x397E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB97E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_473)
{
    // 397E 0062;	
    // (㥾) CJK UNIFIED IDEOGRAPH-397E	[FB80 B97E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB97E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_474)
{
    // 397F 0021;	
    // (㥿) CJK UNIFIED IDEOGRAPH-397F	[FB80 B97F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB97F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_475)
{
    // 397F 003F;	
    // (㥿) CJK UNIFIED IDEOGRAPH-397F	[FB80 B97F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB97F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_476)
{
    // 397F 0061;	
    // (㥿) CJK UNIFIED IDEOGRAPH-397F	[FB80 B97F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB97F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_477)
{
    // 397F 0041;	
    // (㥿) CJK UNIFIED IDEOGRAPH-397F	[FB80 B97F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x397F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB97F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_478)
{
    // 397F 0062;	
    // (㥿) CJK UNIFIED IDEOGRAPH-397F	[FB80 B97F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x397F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB97F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_479)
{
    // 3980 0021;	
    // (㦀) CJK UNIFIED IDEOGRAPH-3980	[FB80 B980 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3980, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB980, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_480)
{
    // 3980 003F;	
    // (㦀) CJK UNIFIED IDEOGRAPH-3980	[FB80 B980 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3980, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB980, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_481)
{
    // 3980 0061;	
    // (㦀) CJK UNIFIED IDEOGRAPH-3980	[FB80 B980 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3980, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB980, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_482)
{
    // 3980 0041;	
    // (㦀) CJK UNIFIED IDEOGRAPH-3980	[FB80 B980 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3980, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB980, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_483)
{
    // 3980 0062;	
    // (㦀) CJK UNIFIED IDEOGRAPH-3980	[FB80 B980 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3980, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB980, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_484)
{
    // 3981 0021;	
    // (㦁) CJK UNIFIED IDEOGRAPH-3981	[FB80 B981 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3981, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB981, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_485)
{
    // 3981 003F;	
    // (㦁) CJK UNIFIED IDEOGRAPH-3981	[FB80 B981 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3981, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB981, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_486)
{
    // 3981 0061;	
    // (㦁) CJK UNIFIED IDEOGRAPH-3981	[FB80 B981 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3981, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB981, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_487)
{
    // 3981 0041;	
    // (㦁) CJK UNIFIED IDEOGRAPH-3981	[FB80 B981 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3981, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB981, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_488)
{
    // 3981 0062;	
    // (㦁) CJK UNIFIED IDEOGRAPH-3981	[FB80 B981 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3981, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB981, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_489)
{
    // 3982 0021;	
    // (㦂) CJK UNIFIED IDEOGRAPH-3982	[FB80 B982 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3982, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB982, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_490)
{
    // 3982 003F;	
    // (㦂) CJK UNIFIED IDEOGRAPH-3982	[FB80 B982 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3982, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB982, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_491)
{
    // 3982 0061;	
    // (㦂) CJK UNIFIED IDEOGRAPH-3982	[FB80 B982 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3982, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB982, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_492)
{
    // 3982 0041;	
    // (㦂) CJK UNIFIED IDEOGRAPH-3982	[FB80 B982 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3982, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB982, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_493)
{
    // 3982 0062;	
    // (㦂) CJK UNIFIED IDEOGRAPH-3982	[FB80 B982 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3982, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB982, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_494)
{
    // 3983 0021;	
    // (㦃) CJK UNIFIED IDEOGRAPH-3983	[FB80 B983 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3983, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB983, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_495)
{
    // 3983 003F;	
    // (㦃) CJK UNIFIED IDEOGRAPH-3983	[FB80 B983 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3983, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xB983, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_496)
{
    // 3983 0061;	
    // (㦃) CJK UNIFIED IDEOGRAPH-3983	[FB80 B983 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3983, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xB983, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_497)
{
    // 3983 0041;	
    // (㦃) CJK UNIFIED IDEOGRAPH-3983	[FB80 B983 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3983, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xB983, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_498)
{
    // 3983 0062;	
    // (㦃) CJK UNIFIED IDEOGRAPH-3983	[FB80 B983 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3983, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xB983, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_340_499)
{
    // 3984 0021;	
    // (㦄) CJK UNIFIED IDEOGRAPH-3984	[FB80 B984 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3984, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xB984, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

