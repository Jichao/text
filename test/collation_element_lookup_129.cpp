// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_129_000)
{
    // 10B04 ; [.4ABB.0020.0002] 
    // AVESTAN LETTER AN

    uint32_t const cps[1] = { 0x10b04 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4abb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_001)
{
    // 10B05 ; [.4ABC.0020.0002] 
    // AVESTAN LETTER AAN

    uint32_t const cps[1] = { 0x10b05 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4abc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_002)
{
    // 10B06 ; [.4ABD.0020.0002] 
    // AVESTAN LETTER AE

    uint32_t const cps[1] = { 0x10b06 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4abd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_003)
{
    // 10B07 ; [.4ABE.0020.0002] 
    // AVESTAN LETTER AEE

    uint32_t const cps[1] = { 0x10b07 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4abe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_004)
{
    // 10B08 ; [.4ABF.0020.0002] 
    // AVESTAN LETTER E

    uint32_t const cps[1] = { 0x10b08 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4abf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_005)
{
    // 10B09 ; [.4AC0.0020.0002] 
    // AVESTAN LETTER EE

    uint32_t const cps[1] = { 0x10b09 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ac0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_006)
{
    // 10B0A ; [.4AC1.0020.0002] 
    // AVESTAN LETTER O

    uint32_t const cps[1] = { 0x10b0a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ac1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_007)
{
    // 10B0B ; [.4AC2.0020.0002] 
    // AVESTAN LETTER OO

    uint32_t const cps[1] = { 0x10b0b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ac2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_008)
{
    // 10B0C ; [.4AC3.0020.0002] 
    // AVESTAN LETTER I

    uint32_t const cps[1] = { 0x10b0c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ac3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_009)
{
    // 10B0D ; [.4AC4.0020.0002] 
    // AVESTAN LETTER II

    uint32_t const cps[1] = { 0x10b0d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ac4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_010)
{
    // 10B0E ; [.4AC5.0020.0002] 
    // AVESTAN LETTER U

    uint32_t const cps[1] = { 0x10b0e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ac5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_011)
{
    // 10B0F ; [.4AC6.0020.0002] 
    // AVESTAN LETTER UU

    uint32_t const cps[1] = { 0x10b0f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ac6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_012)
{
    // 10B10 ; [.4AC7.0020.0002] 
    // AVESTAN LETTER KE

    uint32_t const cps[1] = { 0x10b10 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ac7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_013)
{
    // 10B11 ; [.4AC8.0020.0002] 
    // AVESTAN LETTER XE

    uint32_t const cps[1] = { 0x10b11 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ac8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_014)
{
    // 10B12 ; [.4AC9.0020.0002] 
    // AVESTAN LETTER XYE

    uint32_t const cps[1] = { 0x10b12 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ac9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_015)
{
    // 10B13 ; [.4ACA.0020.0002] 
    // AVESTAN LETTER XVE

    uint32_t const cps[1] = { 0x10b13 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4aca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_016)
{
    // 10B14 ; [.4ACB.0020.0002] 
    // AVESTAN LETTER GE

    uint32_t const cps[1] = { 0x10b14 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4acb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_017)
{
    // 10B15 ; [.4ACC.0020.0002] 
    // AVESTAN LETTER GGE

    uint32_t const cps[1] = { 0x10b15 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4acc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_018)
{
    // 10B16 ; [.4ACD.0020.0002] 
    // AVESTAN LETTER GHE

    uint32_t const cps[1] = { 0x10b16 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4acd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_019)
{
    // 10B17 ; [.4ACE.0020.0002] 
    // AVESTAN LETTER CE

    uint32_t const cps[1] = { 0x10b17 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ace), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_020)
{
    // 10B18 ; [.4ACF.0020.0002] 
    // AVESTAN LETTER JE

    uint32_t const cps[1] = { 0x10b18 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4acf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_021)
{
    // 10B19 ; [.4AD0.0020.0002] 
    // AVESTAN LETTER TE

    uint32_t const cps[1] = { 0x10b19 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ad0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_022)
{
    // 10B1A ; [.4AD1.0020.0002] 
    // AVESTAN LETTER THE

    uint32_t const cps[1] = { 0x10b1a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ad1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_023)
{
    // 10B1B ; [.4AD2.0020.0002] 
    // AVESTAN LETTER DE

    uint32_t const cps[1] = { 0x10b1b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ad2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_024)
{
    // 10B1C ; [.4AD3.0020.0002] 
    // AVESTAN LETTER DHE

    uint32_t const cps[1] = { 0x10b1c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ad3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_025)
{
    // 10B1D ; [.4AD4.0020.0002] 
    // AVESTAN LETTER TTE

    uint32_t const cps[1] = { 0x10b1d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ad4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_026)
{
    // 10B1E ; [.4AD5.0020.0002] 
    // AVESTAN LETTER PE

    uint32_t const cps[1] = { 0x10b1e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ad5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_027)
{
    // 10B1F ; [.4AD6.0020.0002] 
    // AVESTAN LETTER FE

    uint32_t const cps[1] = { 0x10b1f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ad6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_028)
{
    // 10B20 ; [.4AD7.0020.0002] 
    // AVESTAN LETTER BE

    uint32_t const cps[1] = { 0x10b20 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ad7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_029)
{
    // 10B21 ; [.4AD8.0020.0002] 
    // AVESTAN LETTER BHE

    uint32_t const cps[1] = { 0x10b21 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ad8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_030)
{
    // 10B22 ; [.4AD9.0020.0002] 
    // AVESTAN LETTER NGE

    uint32_t const cps[1] = { 0x10b22 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ad9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_031)
{
    // 10B23 ; [.4ADA.0020.0002] 
    // AVESTAN LETTER NGYE

    uint32_t const cps[1] = { 0x10b23 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ada), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_032)
{
    // 10B24 ; [.4ADB.0020.0002] 
    // AVESTAN LETTER NGVE

    uint32_t const cps[1] = { 0x10b24 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4adb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_033)
{
    // 10B25 ; [.4ADC.0020.0002] 
    // AVESTAN LETTER NE

    uint32_t const cps[1] = { 0x10b25 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4adc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_034)
{
    // 10B26 ; [.4ADD.0020.0002] 
    // AVESTAN LETTER NYE

    uint32_t const cps[1] = { 0x10b26 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4add), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_035)
{
    // 10B27 ; [.4ADE.0020.0002] 
    // AVESTAN LETTER NNE

    uint32_t const cps[1] = { 0x10b27 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ade), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_036)
{
    // 10B28 ; [.4ADF.0020.0002] 
    // AVESTAN LETTER ME

    uint32_t const cps[1] = { 0x10b28 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4adf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_037)
{
    // 10B29 ; [.4AE0.0020.0002] 
    // AVESTAN LETTER HME

    uint32_t const cps[1] = { 0x10b29 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ae0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_038)
{
    // 10B2A ; [.4AE1.0020.0002] 
    // AVESTAN LETTER YYE

    uint32_t const cps[1] = { 0x10b2a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ae1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_039)
{
    // 10B2B ; [.4AE2.0020.0002] 
    // AVESTAN LETTER YE

    uint32_t const cps[1] = { 0x10b2b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ae2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_040)
{
    // 10B2C ; [.4AE3.0020.0002] 
    // AVESTAN LETTER VE

    uint32_t const cps[1] = { 0x10b2c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ae3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_041)
{
    // 10B2D ; [.4AE4.0020.0002] 
    // AVESTAN LETTER RE

    uint32_t const cps[1] = { 0x10b2d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ae4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_042)
{
    // 10B2E ; [.4AE4.0020.0004][.0000.0111.0004] 
    // AVESTAN LETTER LE

    uint32_t const cps[1] = { 0x10b2e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x4ae4), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_129_043)
{
    // 10B2F ; [.4AE5.0020.0002] 
    // AVESTAN LETTER SE

    uint32_t const cps[1] = { 0x10b2f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ae5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_044)
{
    // 10B30 ; [.4AE6.0020.0002] 
    // AVESTAN LETTER ZE

    uint32_t const cps[1] = { 0x10b30 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ae6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_045)
{
    // 10B31 ; [.4AE7.0020.0002] 
    // AVESTAN LETTER SHE

    uint32_t const cps[1] = { 0x10b31 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ae7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_046)
{
    // 10B32 ; [.4AE8.0020.0002] 
    // AVESTAN LETTER ZHE

    uint32_t const cps[1] = { 0x10b32 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ae8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_047)
{
    // 10B33 ; [.4AE9.0020.0002] 
    // AVESTAN LETTER SHYE

    uint32_t const cps[1] = { 0x10b33 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4ae9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_048)
{
    // 10B34 ; [.4AEA.0020.0002] 
    // AVESTAN LETTER SSHE

    uint32_t const cps[1] = { 0x10b34 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4aea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_049)
{
    // 10B35 ; [.4AEB.0020.0002] 
    // AVESTAN LETTER HE

    uint32_t const cps[1] = { 0x10b35 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4aeb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_050)
{
    // 10B39 ; [*0458.0020.0002] 
    // AVESTAN ABBREVIATION MARK

    uint32_t const cps[1] = { 0x10b39 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x458), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_051)
{
    // 10B3A ; [*02DB.0020.0002] 
    // TINY TWO DOTS OVER ONE DOT PUNCTUATION

    uint32_t const cps[1] = { 0x10b3a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2db), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_052)
{
    // 10B3B ; [*02DC.0020.0002] 
    // SMALL TWO DOTS OVER ONE DOT PUNCTUATION

    uint32_t const cps[1] = { 0x10b3b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_053)
{
    // 10B3C ; [*02DD.0020.0002] 
    // LARGE TWO DOTS OVER ONE DOT PUNCTUATION

    uint32_t const cps[1] = { 0x10b3c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_054)
{
    // 10B3D ; [*02DE.0020.0002] 
    // LARGE ONE DOT OVER TWO DOTS PUNCTUATION

    uint32_t const cps[1] = { 0x10b3d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2de), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_055)
{
    // 10B3E ; [*02DF.0020.0002] 
    // LARGE TWO RINGS OVER ONE RING PUNCTUATION

    uint32_t const cps[1] = { 0x10b3e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2df), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_056)
{
    // 10B3F ; [*02E0.0020.0002] 
    // LARGE ONE RING OVER TWO RINGS PUNCTUATION

    uint32_t const cps[1] = { 0x10b3f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2e0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_057)
{
    // 10B40 ; [.4B43.0020.0002] 
    // INSCRIPTIONAL PARTHIAN LETTER ALEPH

    uint32_t const cps[1] = { 0x10b40 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b43), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_058)
{
    // 10B41 ; [.4B44.0020.0002] 
    // INSCRIPTIONAL PARTHIAN LETTER BETH

    uint32_t const cps[1] = { 0x10b41 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b44), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_059)
{
    // 10B42 ; [.4B45.0020.0002] 
    // INSCRIPTIONAL PARTHIAN LETTER GIMEL

    uint32_t const cps[1] = { 0x10b42 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b45), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_060)
{
    // 10B43 ; [.4B46.0020.0002] 
    // INSCRIPTIONAL PARTHIAN LETTER DALETH

    uint32_t const cps[1] = { 0x10b43 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b46), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_061)
{
    // 10B44 ; [.4B47.0020.0002] 
    // INSCRIPTIONAL PARTHIAN LETTER HE

    uint32_t const cps[1] = { 0x10b44 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b47), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_062)
{
    // 10B45 ; [.4B48.0020.0002] 
    // INSCRIPTIONAL PARTHIAN LETTER WAW

    uint32_t const cps[1] = { 0x10b45 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b48), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_063)
{
    // 10B46 ; [.4B49.0020.0002] 
    // INSCRIPTIONAL PARTHIAN LETTER ZAYIN

    uint32_t const cps[1] = { 0x10b46 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b49), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_064)
{
    // 10B47 ; [.4B4A.0020.0002] 
    // INSCRIPTIONAL PARTHIAN LETTER HETH

    uint32_t const cps[1] = { 0x10b47 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b4a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_065)
{
    // 10B48 ; [.4B4B.0020.0002] 
    // INSCRIPTIONAL PARTHIAN LETTER TETH

    uint32_t const cps[1] = { 0x10b48 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b4b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_066)
{
    // 10B49 ; [.4B4C.0020.0002] 
    // INSCRIPTIONAL PARTHIAN LETTER YODH

    uint32_t const cps[1] = { 0x10b49 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b4c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_067)
{
    // 10B4A ; [.4B4D.0020.0002] 
    // INSCRIPTIONAL PARTHIAN LETTER KAPH

    uint32_t const cps[1] = { 0x10b4a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b4d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_068)
{
    // 10B4B ; [.4B4E.0020.0002] 
    // INSCRIPTIONAL PARTHIAN LETTER LAMEDH

    uint32_t const cps[1] = { 0x10b4b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b4e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_069)
{
    // 10B4C ; [.4B4F.0020.0002] 
    // INSCRIPTIONAL PARTHIAN LETTER MEM

    uint32_t const cps[1] = { 0x10b4c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b4f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_070)
{
    // 10B4D ; [.4B50.0020.0002] 
    // INSCRIPTIONAL PARTHIAN LETTER NUN

    uint32_t const cps[1] = { 0x10b4d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b50), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_071)
{
    // 10B4E ; [.4B51.0020.0002] 
    // INSCRIPTIONAL PARTHIAN LETTER SAMEKH

    uint32_t const cps[1] = { 0x10b4e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b51), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_072)
{
    // 10B4F ; [.4B52.0020.0002] 
    // INSCRIPTIONAL PARTHIAN LETTER AYIN

    uint32_t const cps[1] = { 0x10b4f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b52), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_073)
{
    // 10B50 ; [.4B53.0020.0002] 
    // INSCRIPTIONAL PARTHIAN LETTER PE

    uint32_t const cps[1] = { 0x10b50 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b53), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_074)
{
    // 10B51 ; [.4B54.0020.0002] 
    // INSCRIPTIONAL PARTHIAN LETTER SADHE

    uint32_t const cps[1] = { 0x10b51 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b54), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_075)
{
    // 10B52 ; [.4B55.0020.0002] 
    // INSCRIPTIONAL PARTHIAN LETTER QOPH

    uint32_t const cps[1] = { 0x10b52 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b55), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_076)
{
    // 10B53 ; [.4B56.0020.0002] 
    // INSCRIPTIONAL PARTHIAN LETTER RESH

    uint32_t const cps[1] = { 0x10b53 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b56), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_077)
{
    // 10B54 ; [.4B57.0020.0002] 
    // INSCRIPTIONAL PARTHIAN LETTER SHIN

    uint32_t const cps[1] = { 0x10b54 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b57), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_078)
{
    // 10B55 ; [.4B58.0020.0002] 
    // INSCRIPTIONAL PARTHIAN LETTER TAW

    uint32_t const cps[1] = { 0x10b55 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b58), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_079)
{
    // 10B58 ; [.1CA4.0020.0002] 
    // INSCRIPTIONAL PARTHIAN NUMBER ONE

    uint32_t const cps[1] = { 0x10b58 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_080)
{
    // 10B59 ; [.1CA5.0020.0002] 
    // INSCRIPTIONAL PARTHIAN NUMBER TWO

    uint32_t const cps[1] = { 0x10b59 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_081)
{
    // 10B5A ; [.1CA6.0020.0002] 
    // INSCRIPTIONAL PARTHIAN NUMBER THREE

    uint32_t const cps[1] = { 0x10b5a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_082)
{
    // 10B5B ; [.1CA7.0020.0002] 
    // INSCRIPTIONAL PARTHIAN NUMBER FOUR

    uint32_t const cps[1] = { 0x10b5b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_083)
{
    // 10B5C ; [*1BCA.0020.0002] 
    // INSCRIPTIONAL PARTHIAN NUMBER TEN

    uint32_t const cps[1] = { 0x10b5c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_084)
{
    // 10B5D ; [*1BCB.0020.0002] 
    // INSCRIPTIONAL PARTHIAN NUMBER TWENTY

    uint32_t const cps[1] = { 0x10b5d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bcb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_085)
{
    // 10B5E ; [*1BCC.0020.0002] 
    // INSCRIPTIONAL PARTHIAN NUMBER ONE HUNDRED

    uint32_t const cps[1] = { 0x10b5e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bcc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_086)
{
    // 10B5F ; [*1BCD.0020.0002] 
    // INSCRIPTIONAL PARTHIAN NUMBER ONE THOUSAND

    uint32_t const cps[1] = { 0x10b5f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bcd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_087)
{
    // 10B60 ; [.4B59.0020.0002] 
    // INSCRIPTIONAL PAHLAVI LETTER ALEPH

    uint32_t const cps[1] = { 0x10b60 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b59), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_088)
{
    // 10B61 ; [.4B5A.0020.0002] 
    // INSCRIPTIONAL PAHLAVI LETTER BETH

    uint32_t const cps[1] = { 0x10b61 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b5a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_089)
{
    // 10B62 ; [.4B5B.0020.0002] 
    // INSCRIPTIONAL PAHLAVI LETTER GIMEL

    uint32_t const cps[1] = { 0x10b62 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b5b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_090)
{
    // 10B63 ; [.4B5C.0020.0002] 
    // INSCRIPTIONAL PAHLAVI LETTER DALETH

    uint32_t const cps[1] = { 0x10b63 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b5c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_091)
{
    // 10B64 ; [.4B5D.0020.0002] 
    // INSCRIPTIONAL PAHLAVI LETTER HE

    uint32_t const cps[1] = { 0x10b64 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b5d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_092)
{
    // 10B65 ; [.4B5E.0020.0002] 
    // INSCRIPTIONAL PAHLAVI LETTER WAW-AYIN-RESH

    uint32_t const cps[1] = { 0x10b65 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b5e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_093)
{
    // 10B66 ; [.4B5F.0020.0002] 
    // INSCRIPTIONAL PAHLAVI LETTER ZAYIN

    uint32_t const cps[1] = { 0x10b66 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b5f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_094)
{
    // 10B67 ; [.4B60.0020.0002] 
    // INSCRIPTIONAL PAHLAVI LETTER HETH

    uint32_t const cps[1] = { 0x10b67 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b60), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_095)
{
    // 10B68 ; [.4B61.0020.0002] 
    // INSCRIPTIONAL PAHLAVI LETTER TETH

    uint32_t const cps[1] = { 0x10b68 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b61), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_096)
{
    // 10B69 ; [.4B62.0020.0002] 
    // INSCRIPTIONAL PAHLAVI LETTER YODH

    uint32_t const cps[1] = { 0x10b69 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b62), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_097)
{
    // 10B6A ; [.4B63.0020.0002] 
    // INSCRIPTIONAL PAHLAVI LETTER KAPH

    uint32_t const cps[1] = { 0x10b6a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b63), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_098)
{
    // 10B6B ; [.4B64.0020.0002] 
    // INSCRIPTIONAL PAHLAVI LETTER LAMEDH

    uint32_t const cps[1] = { 0x10b6b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b64), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_099)
{
    // 10B6C ; [.4B65.0020.0002] 
    // INSCRIPTIONAL PAHLAVI LETTER MEM-QOPH

    uint32_t const cps[1] = { 0x10b6c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b65), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_100)
{
    // 10B6D ; [.4B66.0020.0002] 
    // INSCRIPTIONAL PAHLAVI LETTER NUN

    uint32_t const cps[1] = { 0x10b6d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b66), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_101)
{
    // 10B6E ; [.4B67.0020.0002] 
    // INSCRIPTIONAL PAHLAVI LETTER SAMEKH

    uint32_t const cps[1] = { 0x10b6e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b67), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_102)
{
    // 10B6F ; [.4B68.0020.0002] 
    // INSCRIPTIONAL PAHLAVI LETTER PE

    uint32_t const cps[1] = { 0x10b6f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b68), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_103)
{
    // 10B70 ; [.4B69.0020.0002] 
    // INSCRIPTIONAL PAHLAVI LETTER SADHE

    uint32_t const cps[1] = { 0x10b70 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b69), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_104)
{
    // 10B71 ; [.4B6A.0020.0002] 
    // INSCRIPTIONAL PAHLAVI LETTER SHIN

    uint32_t const cps[1] = { 0x10b71 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b6a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_105)
{
    // 10B72 ; [.4B6B.0020.0002] 
    // INSCRIPTIONAL PAHLAVI LETTER TAW

    uint32_t const cps[1] = { 0x10b72 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b6b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_106)
{
    // 10B78 ; [.1CA4.0020.0002] 
    // INSCRIPTIONAL PAHLAVI NUMBER ONE

    uint32_t const cps[1] = { 0x10b78 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_107)
{
    // 10B79 ; [.1CA5.0020.0002] 
    // INSCRIPTIONAL PAHLAVI NUMBER TWO

    uint32_t const cps[1] = { 0x10b79 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_108)
{
    // 10B7A ; [.1CA6.0020.0002] 
    // INSCRIPTIONAL PAHLAVI NUMBER THREE

    uint32_t const cps[1] = { 0x10b7a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_109)
{
    // 10B7B ; [.1CA7.0020.0002] 
    // INSCRIPTIONAL PAHLAVI NUMBER FOUR

    uint32_t const cps[1] = { 0x10b7b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_110)
{
    // 10B7C ; [*1BCE.0020.0002] 
    // INSCRIPTIONAL PAHLAVI NUMBER TEN

    uint32_t const cps[1] = { 0x10b7c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_111)
{
    // 10B7D ; [*1BCF.0020.0002] 
    // INSCRIPTIONAL PAHLAVI NUMBER TWENTY

    uint32_t const cps[1] = { 0x10b7d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bcf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_112)
{
    // 10B7E ; [*1BD0.0020.0002] 
    // INSCRIPTIONAL PAHLAVI NUMBER ONE HUNDRED

    uint32_t const cps[1] = { 0x10b7e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bd0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_113)
{
    // 10B7F ; [*1BD1.0020.0002] 
    // INSCRIPTIONAL PAHLAVI NUMBER ONE THOUSAND

    uint32_t const cps[1] = { 0x10b7f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bd1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_114)
{
    // 10B80 ; [.4B6C.0020.0002] 
    // PSALTER PAHLAVI LETTER ALEPH

    uint32_t const cps[1] = { 0x10b80 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b6c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_115)
{
    // 10B81 ; [.4B6D.0020.0002] 
    // PSALTER PAHLAVI LETTER BETH

    uint32_t const cps[1] = { 0x10b81 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b6d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_116)
{
    // 10B82 ; [.4B6E.0020.0002] 
    // PSALTER PAHLAVI LETTER GIMEL

    uint32_t const cps[1] = { 0x10b82 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b6e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_117)
{
    // 10B83 ; [.4B6F.0020.0002] 
    // PSALTER PAHLAVI LETTER DALETH

    uint32_t const cps[1] = { 0x10b83 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b6f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_118)
{
    // 10B84 ; [.4B70.0020.0002] 
    // PSALTER PAHLAVI LETTER HE

    uint32_t const cps[1] = { 0x10b84 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b70), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_119)
{
    // 10B85 ; [.4B71.0020.0002] 
    // PSALTER PAHLAVI LETTER WAW-AYIN-RESH

    uint32_t const cps[1] = { 0x10b85 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b71), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_120)
{
    // 10B86 ; [.4B72.0020.0002] 
    // PSALTER PAHLAVI LETTER ZAYIN

    uint32_t const cps[1] = { 0x10b86 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b72), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_121)
{
    // 10B87 ; [.4B73.0020.0002] 
    // PSALTER PAHLAVI LETTER HETH

    uint32_t const cps[1] = { 0x10b87 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b73), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_122)
{
    // 10B88 ; [.4B74.0020.0002] 
    // PSALTER PAHLAVI LETTER YODH

    uint32_t const cps[1] = { 0x10b88 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b74), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_123)
{
    // 10B89 ; [.4B75.0020.0002] 
    // PSALTER PAHLAVI LETTER KAPH

    uint32_t const cps[1] = { 0x10b89 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b75), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_124)
{
    // 10B8A ; [.4B76.0020.0002] 
    // PSALTER PAHLAVI LETTER LAMEDH

    uint32_t const cps[1] = { 0x10b8a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b76), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_125)
{
    // 10B8B ; [.4B77.0020.0002] 
    // PSALTER PAHLAVI LETTER MEM-QOPH

    uint32_t const cps[1] = { 0x10b8b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b77), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_126)
{
    // 10B8C ; [.4B78.0020.0002] 
    // PSALTER PAHLAVI LETTER NUN

    uint32_t const cps[1] = { 0x10b8c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b78), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_127)
{
    // 10B8D ; [.4B79.0020.0002] 
    // PSALTER PAHLAVI LETTER SAMEKH

    uint32_t const cps[1] = { 0x10b8d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b79), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_128)
{
    // 10B8E ; [.4B7A.0020.0002] 
    // PSALTER PAHLAVI LETTER PE

    uint32_t const cps[1] = { 0x10b8e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b7a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_129)
{
    // 10B8F ; [.4B7B.0020.0002] 
    // PSALTER PAHLAVI LETTER SADHE

    uint32_t const cps[1] = { 0x10b8f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b7b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_130)
{
    // 10B90 ; [.4B7C.0020.0002] 
    // PSALTER PAHLAVI LETTER SHIN

    uint32_t const cps[1] = { 0x10b90 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b7c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_131)
{
    // 10B91 ; [.4B7D.0020.0002] 
    // PSALTER PAHLAVI LETTER TAW

    uint32_t const cps[1] = { 0x10b91 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x4b7d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_132)
{
    // 10B99 ; [*0460.0020.0002] 
    // PSALTER PAHLAVI SECTION MARK

    uint32_t const cps[1] = { 0x10b99 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x460), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_133)
{
    // 10B9A ; [*0461.0020.0002] 
    // PSALTER PAHLAVI TURNED SECTION MARK

    uint32_t const cps[1] = { 0x10b9a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x461), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_134)
{
    // 10B9B ; [*0462.0020.0002] 
    // PSALTER PAHLAVI FOUR DOTS WITH CROSS

    uint32_t const cps[1] = { 0x10b9b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x462), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_135)
{
    // 10B9C ; [*0463.0020.0002] 
    // PSALTER PAHLAVI FOUR DOTS WITH DOT

    uint32_t const cps[1] = { 0x10b9c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x463), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_136)
{
    // 10BA9 ; [.1CA4.0020.0002] 
    // PSALTER PAHLAVI NUMBER ONE

    uint32_t const cps[1] = { 0x10ba9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_137)
{
    // 10BAA ; [.1CA5.0020.0002] 
    // PSALTER PAHLAVI NUMBER TWO

    uint32_t const cps[1] = { 0x10baa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_138)
{
    // 10BAB ; [.1CA6.0020.0002] 
    // PSALTER PAHLAVI NUMBER THREE

    uint32_t const cps[1] = { 0x10bab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_139)
{
    // 10BAC ; [.1CA7.0020.0002] 
    // PSALTER PAHLAVI NUMBER FOUR

    uint32_t const cps[1] = { 0x10bac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_140)
{
    // 10BAD ; [*1BD2.0020.0002] 
    // PSALTER PAHLAVI NUMBER TEN

    uint32_t const cps[1] = { 0x10bad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bd2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_141)
{
    // 10BAE ; [*1BD3.0020.0002] 
    // PSALTER PAHLAVI NUMBER TWENTY

    uint32_t const cps[1] = { 0x10bae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bd3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_142)
{
    // 10BAF ; [*1BD4.0020.0002] 
    // PSALTER PAHLAVI NUMBER ONE HUNDRED

    uint32_t const cps[1] = { 0x10baf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1bd4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_143)
{
    // 10C00 ; [.3844.0020.0002] 
    // OLD TURKIC LETTER ORKHON A

    uint32_t const cps[1] = { 0x10c00 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3844), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_144)
{
    // 10C01 ; [.3844.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI A

    uint32_t const cps[1] = { 0x10c01 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x3844), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_129_145)
{
    // 10C02 ; [.3845.0020.0002] 
    // OLD TURKIC LETTER YENISEI AE

    uint32_t const cps[1] = { 0x10c02 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3845), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_146)
{
    // 10C03 ; [.3846.0020.0002] 
    // OLD TURKIC LETTER ORKHON I

    uint32_t const cps[1] = { 0x10c03 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3846), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_147)
{
    // 10C04 ; [.3846.0020.0004][.0000.0111.0004] 
    // OLD TURKIC LETTER YENISEI I

    uint32_t const cps[1] = { 0x10c04 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x3846), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_129_148)
{
    // 10C05 ; [.3847.0020.0002] 
    // OLD TURKIC LETTER YENISEI E

    uint32_t const cps[1] = { 0x10c05 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3847), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_129_149)
{
    // 10C06 ; [.3848.0020.0002] 
    // OLD TURKIC LETTER ORKHON O

    uint32_t const cps[1] = { 0x10c06 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3848), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

