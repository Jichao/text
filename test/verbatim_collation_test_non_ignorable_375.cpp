// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_375_000)
{
    // 46A2 003F;	
    // (䚢) CJK UNIFIED IDEOGRAPH-46A2	[FB80 C6A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_001)
{
    // 46A2 0061;	
    // (䚢) CJK UNIFIED IDEOGRAPH-46A2	[FB80 C6A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_002)
{
    // 46A2 0041;	
    // (䚢) CJK UNIFIED IDEOGRAPH-46A2	[FB80 C6A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46A2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_003)
{
    // 46A2 0062;	
    // (䚢) CJK UNIFIED IDEOGRAPH-46A2	[FB80 C6A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_004)
{
    // 46A3 0021;	
    // (䚣) CJK UNIFIED IDEOGRAPH-46A3	[FB80 C6A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_005)
{
    // 46A3 003F;	
    // (䚣) CJK UNIFIED IDEOGRAPH-46A3	[FB80 C6A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_006)
{
    // 46A3 0061;	
    // (䚣) CJK UNIFIED IDEOGRAPH-46A3	[FB80 C6A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_007)
{
    // 46A3 0041;	
    // (䚣) CJK UNIFIED IDEOGRAPH-46A3	[FB80 C6A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46A3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_008)
{
    // 46A3 0062;	
    // (䚣) CJK UNIFIED IDEOGRAPH-46A3	[FB80 C6A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_009)
{
    // 46A4 0021;	
    // (䚤) CJK UNIFIED IDEOGRAPH-46A4	[FB80 C6A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_010)
{
    // 46A4 003F;	
    // (䚤) CJK UNIFIED IDEOGRAPH-46A4	[FB80 C6A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_011)
{
    // 46A4 0061;	
    // (䚤) CJK UNIFIED IDEOGRAPH-46A4	[FB80 C6A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_012)
{
    // 46A4 0041;	
    // (䚤) CJK UNIFIED IDEOGRAPH-46A4	[FB80 C6A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46A4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_013)
{
    // 46A4 0062;	
    // (䚤) CJK UNIFIED IDEOGRAPH-46A4	[FB80 C6A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_014)
{
    // 46A5 0021;	
    // (䚥) CJK UNIFIED IDEOGRAPH-46A5	[FB80 C6A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_015)
{
    // 46A5 003F;	
    // (䚥) CJK UNIFIED IDEOGRAPH-46A5	[FB80 C6A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_016)
{
    // 46A5 0061;	
    // (䚥) CJK UNIFIED IDEOGRAPH-46A5	[FB80 C6A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_017)
{
    // 46A5 0041;	
    // (䚥) CJK UNIFIED IDEOGRAPH-46A5	[FB80 C6A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46A5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_018)
{
    // 46A5 0062;	
    // (䚥) CJK UNIFIED IDEOGRAPH-46A5	[FB80 C6A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_019)
{
    // 46A6 0021;	
    // (䚦) CJK UNIFIED IDEOGRAPH-46A6	[FB80 C6A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_020)
{
    // 46A6 003F;	
    // (䚦) CJK UNIFIED IDEOGRAPH-46A6	[FB80 C6A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_021)
{
    // 46A6 0061;	
    // (䚦) CJK UNIFIED IDEOGRAPH-46A6	[FB80 C6A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_022)
{
    // 46A6 0041;	
    // (䚦) CJK UNIFIED IDEOGRAPH-46A6	[FB80 C6A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46A6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_023)
{
    // 46A6 0062;	
    // (䚦) CJK UNIFIED IDEOGRAPH-46A6	[FB80 C6A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_024)
{
    // 46A7 0021;	
    // (䚧) CJK UNIFIED IDEOGRAPH-46A7	[FB80 C6A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_025)
{
    // 46A7 003F;	
    // (䚧) CJK UNIFIED IDEOGRAPH-46A7	[FB80 C6A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_026)
{
    // 46A7 0061;	
    // (䚧) CJK UNIFIED IDEOGRAPH-46A7	[FB80 C6A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_027)
{
    // 46A7 0041;	
    // (䚧) CJK UNIFIED IDEOGRAPH-46A7	[FB80 C6A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46A7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_028)
{
    // 46A7 0062;	
    // (䚧) CJK UNIFIED IDEOGRAPH-46A7	[FB80 C6A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_029)
{
    // 46A8 0021;	
    // (䚨) CJK UNIFIED IDEOGRAPH-46A8	[FB80 C6A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_030)
{
    // 46A8 003F;	
    // (䚨) CJK UNIFIED IDEOGRAPH-46A8	[FB80 C6A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_031)
{
    // 46A8 0061;	
    // (䚨) CJK UNIFIED IDEOGRAPH-46A8	[FB80 C6A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_032)
{
    // 46A8 0041;	
    // (䚨) CJK UNIFIED IDEOGRAPH-46A8	[FB80 C6A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46A8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_033)
{
    // 46A8 0062;	
    // (䚨) CJK UNIFIED IDEOGRAPH-46A8	[FB80 C6A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_034)
{
    // 46A9 0021;	
    // (䚩) CJK UNIFIED IDEOGRAPH-46A9	[FB80 C6A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_035)
{
    // 46A9 003F;	
    // (䚩) CJK UNIFIED IDEOGRAPH-46A9	[FB80 C6A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_036)
{
    // 46A9 0061;	
    // (䚩) CJK UNIFIED IDEOGRAPH-46A9	[FB80 C6A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_037)
{
    // 46A9 0041;	
    // (䚩) CJK UNIFIED IDEOGRAPH-46A9	[FB80 C6A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46A9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_038)
{
    // 46A9 0062;	
    // (䚩) CJK UNIFIED IDEOGRAPH-46A9	[FB80 C6A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46A9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_039)
{
    // 46AA 0021;	
    // (䚪) CJK UNIFIED IDEOGRAPH-46AA	[FB80 C6AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_040)
{
    // 46AA 003F;	
    // (䚪) CJK UNIFIED IDEOGRAPH-46AA	[FB80 C6AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_041)
{
    // 46AA 0061;	
    // (䚪) CJK UNIFIED IDEOGRAPH-46AA	[FB80 C6AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_042)
{
    // 46AA 0041;	
    // (䚪) CJK UNIFIED IDEOGRAPH-46AA	[FB80 C6AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46AA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_043)
{
    // 46AA 0062;	
    // (䚪) CJK UNIFIED IDEOGRAPH-46AA	[FB80 C6AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_044)
{
    // 46AB 0021;	
    // (䚫) CJK UNIFIED IDEOGRAPH-46AB	[FB80 C6AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_045)
{
    // 46AB 003F;	
    // (䚫) CJK UNIFIED IDEOGRAPH-46AB	[FB80 C6AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_046)
{
    // 46AB 0061;	
    // (䚫) CJK UNIFIED IDEOGRAPH-46AB	[FB80 C6AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_047)
{
    // 46AB 0041;	
    // (䚫) CJK UNIFIED IDEOGRAPH-46AB	[FB80 C6AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46AB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_048)
{
    // 46AB 0062;	
    // (䚫) CJK UNIFIED IDEOGRAPH-46AB	[FB80 C6AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_049)
{
    // 46AC 0021;	
    // (䚬) CJK UNIFIED IDEOGRAPH-46AC	[FB80 C6AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_050)
{
    // 46AC 003F;	
    // (䚬) CJK UNIFIED IDEOGRAPH-46AC	[FB80 C6AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_051)
{
    // 46AC 0061;	
    // (䚬) CJK UNIFIED IDEOGRAPH-46AC	[FB80 C6AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_052)
{
    // 46AC 0041;	
    // (䚬) CJK UNIFIED IDEOGRAPH-46AC	[FB80 C6AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46AC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_053)
{
    // 46AC 0062;	
    // (䚬) CJK UNIFIED IDEOGRAPH-46AC	[FB80 C6AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_054)
{
    // 46AD 0021;	
    // (䚭) CJK UNIFIED IDEOGRAPH-46AD	[FB80 C6AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_055)
{
    // 46AD 003F;	
    // (䚭) CJK UNIFIED IDEOGRAPH-46AD	[FB80 C6AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_056)
{
    // 46AD 0061;	
    // (䚭) CJK UNIFIED IDEOGRAPH-46AD	[FB80 C6AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_057)
{
    // 46AD 0041;	
    // (䚭) CJK UNIFIED IDEOGRAPH-46AD	[FB80 C6AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46AD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_058)
{
    // 46AD 0062;	
    // (䚭) CJK UNIFIED IDEOGRAPH-46AD	[FB80 C6AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_059)
{
    // 46AE 0021;	
    // (䚮) CJK UNIFIED IDEOGRAPH-46AE	[FB80 C6AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_060)
{
    // 46AE 003F;	
    // (䚮) CJK UNIFIED IDEOGRAPH-46AE	[FB80 C6AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_061)
{
    // 46AE 0061;	
    // (䚮) CJK UNIFIED IDEOGRAPH-46AE	[FB80 C6AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_062)
{
    // 46AE 0041;	
    // (䚮) CJK UNIFIED IDEOGRAPH-46AE	[FB80 C6AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46AE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_063)
{
    // 46AE 0062;	
    // (䚮) CJK UNIFIED IDEOGRAPH-46AE	[FB80 C6AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_064)
{
    // 46AF 0021;	
    // (䚯) CJK UNIFIED IDEOGRAPH-46AF	[FB80 C6AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_065)
{
    // 46AF 003F;	
    // (䚯) CJK UNIFIED IDEOGRAPH-46AF	[FB80 C6AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_066)
{
    // 46AF 0061;	
    // (䚯) CJK UNIFIED IDEOGRAPH-46AF	[FB80 C6AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_067)
{
    // 46AF 0041;	
    // (䚯) CJK UNIFIED IDEOGRAPH-46AF	[FB80 C6AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46AF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_068)
{
    // 46AF 0062;	
    // (䚯) CJK UNIFIED IDEOGRAPH-46AF	[FB80 C6AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46AF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_069)
{
    // 46B0 0021;	
    // (䚰) CJK UNIFIED IDEOGRAPH-46B0	[FB80 C6B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_070)
{
    // 46B0 003F;	
    // (䚰) CJK UNIFIED IDEOGRAPH-46B0	[FB80 C6B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_071)
{
    // 46B0 0061;	
    // (䚰) CJK UNIFIED IDEOGRAPH-46B0	[FB80 C6B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_072)
{
    // 46B0 0041;	
    // (䚰) CJK UNIFIED IDEOGRAPH-46B0	[FB80 C6B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46B0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_073)
{
    // 46B0 0062;	
    // (䚰) CJK UNIFIED IDEOGRAPH-46B0	[FB80 C6B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_074)
{
    // 46B1 0021;	
    // (䚱) CJK UNIFIED IDEOGRAPH-46B1	[FB80 C6B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_075)
{
    // 46B1 003F;	
    // (䚱) CJK UNIFIED IDEOGRAPH-46B1	[FB80 C6B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_076)
{
    // 46B1 0061;	
    // (䚱) CJK UNIFIED IDEOGRAPH-46B1	[FB80 C6B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_077)
{
    // 46B1 0041;	
    // (䚱) CJK UNIFIED IDEOGRAPH-46B1	[FB80 C6B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46B1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_078)
{
    // 46B1 0062;	
    // (䚱) CJK UNIFIED IDEOGRAPH-46B1	[FB80 C6B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_079)
{
    // 46B2 0021;	
    // (䚲) CJK UNIFIED IDEOGRAPH-46B2	[FB80 C6B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_080)
{
    // 46B2 003F;	
    // (䚲) CJK UNIFIED IDEOGRAPH-46B2	[FB80 C6B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_081)
{
    // 46B2 0061;	
    // (䚲) CJK UNIFIED IDEOGRAPH-46B2	[FB80 C6B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_082)
{
    // 46B2 0041;	
    // (䚲) CJK UNIFIED IDEOGRAPH-46B2	[FB80 C6B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46B2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_083)
{
    // 46B2 0062;	
    // (䚲) CJK UNIFIED IDEOGRAPH-46B2	[FB80 C6B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_084)
{
    // 46B3 0021;	
    // (䚳) CJK UNIFIED IDEOGRAPH-46B3	[FB80 C6B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_085)
{
    // 46B3 003F;	
    // (䚳) CJK UNIFIED IDEOGRAPH-46B3	[FB80 C6B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_086)
{
    // 46B3 0061;	
    // (䚳) CJK UNIFIED IDEOGRAPH-46B3	[FB80 C6B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_087)
{
    // 46B3 0041;	
    // (䚳) CJK UNIFIED IDEOGRAPH-46B3	[FB80 C6B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46B3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_088)
{
    // 46B3 0062;	
    // (䚳) CJK UNIFIED IDEOGRAPH-46B3	[FB80 C6B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_089)
{
    // 46B4 0021;	
    // (䚴) CJK UNIFIED IDEOGRAPH-46B4	[FB80 C6B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_090)
{
    // 46B4 003F;	
    // (䚴) CJK UNIFIED IDEOGRAPH-46B4	[FB80 C6B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_091)
{
    // 46B4 0061;	
    // (䚴) CJK UNIFIED IDEOGRAPH-46B4	[FB80 C6B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_092)
{
    // 46B4 0041;	
    // (䚴) CJK UNIFIED IDEOGRAPH-46B4	[FB80 C6B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46B4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_093)
{
    // 46B4 0062;	
    // (䚴) CJK UNIFIED IDEOGRAPH-46B4	[FB80 C6B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_094)
{
    // 46B5 0021;	
    // (䚵) CJK UNIFIED IDEOGRAPH-46B5	[FB80 C6B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_095)
{
    // 46B5 003F;	
    // (䚵) CJK UNIFIED IDEOGRAPH-46B5	[FB80 C6B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_096)
{
    // 46B5 0061;	
    // (䚵) CJK UNIFIED IDEOGRAPH-46B5	[FB80 C6B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_097)
{
    // 46B5 0041;	
    // (䚵) CJK UNIFIED IDEOGRAPH-46B5	[FB80 C6B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46B5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_098)
{
    // 46B5 0062;	
    // (䚵) CJK UNIFIED IDEOGRAPH-46B5	[FB80 C6B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_099)
{
    // 46B6 0021;	
    // (䚶) CJK UNIFIED IDEOGRAPH-46B6	[FB80 C6B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_100)
{
    // 46B6 003F;	
    // (䚶) CJK UNIFIED IDEOGRAPH-46B6	[FB80 C6B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_101)
{
    // 46B6 0061;	
    // (䚶) CJK UNIFIED IDEOGRAPH-46B6	[FB80 C6B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_102)
{
    // 46B6 0041;	
    // (䚶) CJK UNIFIED IDEOGRAPH-46B6	[FB80 C6B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46B6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_103)
{
    // 46B6 0062;	
    // (䚶) CJK UNIFIED IDEOGRAPH-46B6	[FB80 C6B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_104)
{
    // 46B7 0021;	
    // (䚷) CJK UNIFIED IDEOGRAPH-46B7	[FB80 C6B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_105)
{
    // 46B7 003F;	
    // (䚷) CJK UNIFIED IDEOGRAPH-46B7	[FB80 C6B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_106)
{
    // 46B7 0061;	
    // (䚷) CJK UNIFIED IDEOGRAPH-46B7	[FB80 C6B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_107)
{
    // 46B7 0041;	
    // (䚷) CJK UNIFIED IDEOGRAPH-46B7	[FB80 C6B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46B7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_108)
{
    // 46B7 0062;	
    // (䚷) CJK UNIFIED IDEOGRAPH-46B7	[FB80 C6B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_109)
{
    // 46B8 0021;	
    // (䚸) CJK UNIFIED IDEOGRAPH-46B8	[FB80 C6B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_110)
{
    // 46B8 003F;	
    // (䚸) CJK UNIFIED IDEOGRAPH-46B8	[FB80 C6B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_111)
{
    // 46B8 0061;	
    // (䚸) CJK UNIFIED IDEOGRAPH-46B8	[FB80 C6B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_112)
{
    // 46B8 0041;	
    // (䚸) CJK UNIFIED IDEOGRAPH-46B8	[FB80 C6B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46B8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_113)
{
    // 46B8 0062;	
    // (䚸) CJK UNIFIED IDEOGRAPH-46B8	[FB80 C6B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_114)
{
    // 46B9 0021;	
    // (䚹) CJK UNIFIED IDEOGRAPH-46B9	[FB80 C6B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_115)
{
    // 46B9 003F;	
    // (䚹) CJK UNIFIED IDEOGRAPH-46B9	[FB80 C6B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_116)
{
    // 46B9 0061;	
    // (䚹) CJK UNIFIED IDEOGRAPH-46B9	[FB80 C6B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_117)
{
    // 46B9 0041;	
    // (䚹) CJK UNIFIED IDEOGRAPH-46B9	[FB80 C6B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46B9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_118)
{
    // 46B9 0062;	
    // (䚹) CJK UNIFIED IDEOGRAPH-46B9	[FB80 C6B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46B9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_119)
{
    // 46BA 0021;	
    // (䚺) CJK UNIFIED IDEOGRAPH-46BA	[FB80 C6BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_120)
{
    // 46BA 003F;	
    // (䚺) CJK UNIFIED IDEOGRAPH-46BA	[FB80 C6BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_121)
{
    // 46BA 0061;	
    // (䚺) CJK UNIFIED IDEOGRAPH-46BA	[FB80 C6BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_122)
{
    // 46BA 0041;	
    // (䚺) CJK UNIFIED IDEOGRAPH-46BA	[FB80 C6BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46BA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_123)
{
    // 46BA 0062;	
    // (䚺) CJK UNIFIED IDEOGRAPH-46BA	[FB80 C6BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_124)
{
    // 46BB 0021;	
    // (䚻) CJK UNIFIED IDEOGRAPH-46BB	[FB80 C6BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_125)
{
    // 46BB 003F;	
    // (䚻) CJK UNIFIED IDEOGRAPH-46BB	[FB80 C6BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_126)
{
    // 46BB 0061;	
    // (䚻) CJK UNIFIED IDEOGRAPH-46BB	[FB80 C6BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_127)
{
    // 46BB 0041;	
    // (䚻) CJK UNIFIED IDEOGRAPH-46BB	[FB80 C6BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46BB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_128)
{
    // 46BB 0062;	
    // (䚻) CJK UNIFIED IDEOGRAPH-46BB	[FB80 C6BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_129)
{
    // 46BC 0021;	
    // (䚼) CJK UNIFIED IDEOGRAPH-46BC	[FB80 C6BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_130)
{
    // 46BC 003F;	
    // (䚼) CJK UNIFIED IDEOGRAPH-46BC	[FB80 C6BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_131)
{
    // 46BC 0061;	
    // (䚼) CJK UNIFIED IDEOGRAPH-46BC	[FB80 C6BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_132)
{
    // 46BC 0041;	
    // (䚼) CJK UNIFIED IDEOGRAPH-46BC	[FB80 C6BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46BC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_133)
{
    // 46BC 0062;	
    // (䚼) CJK UNIFIED IDEOGRAPH-46BC	[FB80 C6BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_134)
{
    // 46BD 0021;	
    // (䚽) CJK UNIFIED IDEOGRAPH-46BD	[FB80 C6BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_135)
{
    // 46BD 003F;	
    // (䚽) CJK UNIFIED IDEOGRAPH-46BD	[FB80 C6BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_136)
{
    // 46BD 0061;	
    // (䚽) CJK UNIFIED IDEOGRAPH-46BD	[FB80 C6BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_137)
{
    // 46BD 0041;	
    // (䚽) CJK UNIFIED IDEOGRAPH-46BD	[FB80 C6BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46BD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_138)
{
    // 46BD 0062;	
    // (䚽) CJK UNIFIED IDEOGRAPH-46BD	[FB80 C6BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_139)
{
    // 46BE 0021;	
    // (䚾) CJK UNIFIED IDEOGRAPH-46BE	[FB80 C6BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_140)
{
    // 2F9CD 0021;	
    // (䚾) CJK COMPATIBILITY IDEOGRAPH-2F9CD	[FB80 C6BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9CD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_141)
{
    // 46BE 003F;	
    // (䚾) CJK UNIFIED IDEOGRAPH-46BE	[FB80 C6BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_142)
{
    // 2F9CD 003F;	
    // (䚾) CJK COMPATIBILITY IDEOGRAPH-2F9CD	[FB80 C6BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9CD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_143)
{
    // 46BE 0061;	
    // (䚾) CJK UNIFIED IDEOGRAPH-46BE	[FB80 C6BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_144)
{
    // 2F9CD 0061;	
    // (䚾) CJK COMPATIBILITY IDEOGRAPH-2F9CD	[FB80 C6BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9CD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_145)
{
    // 46BE 0041;	
    // (䚾) CJK UNIFIED IDEOGRAPH-46BE	[FB80 C6BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46BE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_146)
{
    // 2F9CD 0041;	
    // (䚾) CJK COMPATIBILITY IDEOGRAPH-2F9CD	[FB80 C6BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9CD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_147)
{
    // 46BE 0062;	
    // (䚾) CJK UNIFIED IDEOGRAPH-46BE	[FB80 C6BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_148)
{
    // 2F9CD 0062;	
    // (䚾) CJK COMPATIBILITY IDEOGRAPH-2F9CD	[FB80 C6BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9CD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_149)
{
    // 46BF 0021;	
    // (䚿) CJK UNIFIED IDEOGRAPH-46BF	[FB80 C6BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_150)
{
    // 46BF 003F;	
    // (䚿) CJK UNIFIED IDEOGRAPH-46BF	[FB80 C6BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_151)
{
    // 46BF 0061;	
    // (䚿) CJK UNIFIED IDEOGRAPH-46BF	[FB80 C6BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_152)
{
    // 46BF 0041;	
    // (䚿) CJK UNIFIED IDEOGRAPH-46BF	[FB80 C6BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46BF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_153)
{
    // 46BF 0062;	
    // (䚿) CJK UNIFIED IDEOGRAPH-46BF	[FB80 C6BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46BF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_154)
{
    // 46C0 0021;	
    // (䛀) CJK UNIFIED IDEOGRAPH-46C0	[FB80 C6C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_155)
{
    // 46C0 003F;	
    // (䛀) CJK UNIFIED IDEOGRAPH-46C0	[FB80 C6C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_156)
{
    // 46C0 0061;	
    // (䛀) CJK UNIFIED IDEOGRAPH-46C0	[FB80 C6C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_157)
{
    // 46C0 0041;	
    // (䛀) CJK UNIFIED IDEOGRAPH-46C0	[FB80 C6C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46C0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_158)
{
    // 46C0 0062;	
    // (䛀) CJK UNIFIED IDEOGRAPH-46C0	[FB80 C6C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_159)
{
    // 46C1 0021;	
    // (䛁) CJK UNIFIED IDEOGRAPH-46C1	[FB80 C6C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_160)
{
    // 46C1 003F;	
    // (䛁) CJK UNIFIED IDEOGRAPH-46C1	[FB80 C6C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_161)
{
    // 46C1 0061;	
    // (䛁) CJK UNIFIED IDEOGRAPH-46C1	[FB80 C6C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_162)
{
    // 46C1 0041;	
    // (䛁) CJK UNIFIED IDEOGRAPH-46C1	[FB80 C6C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46C1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_163)
{
    // 46C1 0062;	
    // (䛁) CJK UNIFIED IDEOGRAPH-46C1	[FB80 C6C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_164)
{
    // 46C2 0021;	
    // (䛂) CJK UNIFIED IDEOGRAPH-46C2	[FB80 C6C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_165)
{
    // 46C2 003F;	
    // (䛂) CJK UNIFIED IDEOGRAPH-46C2	[FB80 C6C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_166)
{
    // 46C2 0061;	
    // (䛂) CJK UNIFIED IDEOGRAPH-46C2	[FB80 C6C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_167)
{
    // 46C2 0041;	
    // (䛂) CJK UNIFIED IDEOGRAPH-46C2	[FB80 C6C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46C2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_168)
{
    // 46C2 0062;	
    // (䛂) CJK UNIFIED IDEOGRAPH-46C2	[FB80 C6C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_169)
{
    // 46C3 0021;	
    // (䛃) CJK UNIFIED IDEOGRAPH-46C3	[FB80 C6C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_170)
{
    // 46C3 003F;	
    // (䛃) CJK UNIFIED IDEOGRAPH-46C3	[FB80 C6C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_171)
{
    // 46C3 0061;	
    // (䛃) CJK UNIFIED IDEOGRAPH-46C3	[FB80 C6C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_172)
{
    // 46C3 0041;	
    // (䛃) CJK UNIFIED IDEOGRAPH-46C3	[FB80 C6C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46C3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_173)
{
    // 46C3 0062;	
    // (䛃) CJK UNIFIED IDEOGRAPH-46C3	[FB80 C6C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_174)
{
    // 46C4 0021;	
    // (䛄) CJK UNIFIED IDEOGRAPH-46C4	[FB80 C6C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_175)
{
    // 46C4 003F;	
    // (䛄) CJK UNIFIED IDEOGRAPH-46C4	[FB80 C6C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_176)
{
    // 46C4 0061;	
    // (䛄) CJK UNIFIED IDEOGRAPH-46C4	[FB80 C6C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_177)
{
    // 46C4 0041;	
    // (䛄) CJK UNIFIED IDEOGRAPH-46C4	[FB80 C6C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46C4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_178)
{
    // 46C4 0062;	
    // (䛄) CJK UNIFIED IDEOGRAPH-46C4	[FB80 C6C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_179)
{
    // 46C5 0021;	
    // (䛅) CJK UNIFIED IDEOGRAPH-46C5	[FB80 C6C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_180)
{
    // 46C5 003F;	
    // (䛅) CJK UNIFIED IDEOGRAPH-46C5	[FB80 C6C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_181)
{
    // 46C5 0061;	
    // (䛅) CJK UNIFIED IDEOGRAPH-46C5	[FB80 C6C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_182)
{
    // 46C5 0041;	
    // (䛅) CJK UNIFIED IDEOGRAPH-46C5	[FB80 C6C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46C5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_183)
{
    // 46C5 0062;	
    // (䛅) CJK UNIFIED IDEOGRAPH-46C5	[FB80 C6C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_184)
{
    // 46C6 0021;	
    // (䛆) CJK UNIFIED IDEOGRAPH-46C6	[FB80 C6C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_185)
{
    // 46C6 003F;	
    // (䛆) CJK UNIFIED IDEOGRAPH-46C6	[FB80 C6C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_186)
{
    // 46C6 0061;	
    // (䛆) CJK UNIFIED IDEOGRAPH-46C6	[FB80 C6C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_187)
{
    // 46C6 0041;	
    // (䛆) CJK UNIFIED IDEOGRAPH-46C6	[FB80 C6C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46C6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_188)
{
    // 46C6 0062;	
    // (䛆) CJK UNIFIED IDEOGRAPH-46C6	[FB80 C6C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_189)
{
    // 46C7 0021;	
    // (䛇) CJK UNIFIED IDEOGRAPH-46C7	[FB80 C6C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_190)
{
    // 2F9CE 0021;	
    // (䛇) CJK COMPATIBILITY IDEOGRAPH-2F9CE	[FB80 C6C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9CE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_191)
{
    // 46C7 003F;	
    // (䛇) CJK UNIFIED IDEOGRAPH-46C7	[FB80 C6C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_192)
{
    // 2F9CE 003F;	
    // (䛇) CJK COMPATIBILITY IDEOGRAPH-2F9CE	[FB80 C6C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9CE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_193)
{
    // 46C7 0061;	
    // (䛇) CJK UNIFIED IDEOGRAPH-46C7	[FB80 C6C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_194)
{
    // 2F9CE 0061;	
    // (䛇) CJK COMPATIBILITY IDEOGRAPH-2F9CE	[FB80 C6C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9CE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_195)
{
    // 46C7 0041;	
    // (䛇) CJK UNIFIED IDEOGRAPH-46C7	[FB80 C6C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46C7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_196)
{
    // 2F9CE 0041;	
    // (䛇) CJK COMPATIBILITY IDEOGRAPH-2F9CE	[FB80 C6C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9CE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_197)
{
    // 46C7 0062;	
    // (䛇) CJK UNIFIED IDEOGRAPH-46C7	[FB80 C6C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_198)
{
    // 2F9CE 0062;	
    // (䛇) CJK COMPATIBILITY IDEOGRAPH-2F9CE	[FB80 C6C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9CE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_199)
{
    // 46C8 0021;	
    // (䛈) CJK UNIFIED IDEOGRAPH-46C8	[FB80 C6C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_200)
{
    // 46C8 003F;	
    // (䛈) CJK UNIFIED IDEOGRAPH-46C8	[FB80 C6C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_201)
{
    // 46C8 0061;	
    // (䛈) CJK UNIFIED IDEOGRAPH-46C8	[FB80 C6C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_202)
{
    // 46C8 0041;	
    // (䛈) CJK UNIFIED IDEOGRAPH-46C8	[FB80 C6C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46C8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_203)
{
    // 46C8 0062;	
    // (䛈) CJK UNIFIED IDEOGRAPH-46C8	[FB80 C6C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_204)
{
    // 46C9 0021;	
    // (䛉) CJK UNIFIED IDEOGRAPH-46C9	[FB80 C6C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_205)
{
    // 46C9 003F;	
    // (䛉) CJK UNIFIED IDEOGRAPH-46C9	[FB80 C6C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_206)
{
    // 46C9 0061;	
    // (䛉) CJK UNIFIED IDEOGRAPH-46C9	[FB80 C6C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_207)
{
    // 46C9 0041;	
    // (䛉) CJK UNIFIED IDEOGRAPH-46C9	[FB80 C6C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46C9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_208)
{
    // 46C9 0062;	
    // (䛉) CJK UNIFIED IDEOGRAPH-46C9	[FB80 C6C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46C9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_209)
{
    // 46CA 0021;	
    // (䛊) CJK UNIFIED IDEOGRAPH-46CA	[FB80 C6CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_210)
{
    // 46CA 003F;	
    // (䛊) CJK UNIFIED IDEOGRAPH-46CA	[FB80 C6CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_211)
{
    // 46CA 0061;	
    // (䛊) CJK UNIFIED IDEOGRAPH-46CA	[FB80 C6CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_212)
{
    // 46CA 0041;	
    // (䛊) CJK UNIFIED IDEOGRAPH-46CA	[FB80 C6CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46CA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_213)
{
    // 46CA 0062;	
    // (䛊) CJK UNIFIED IDEOGRAPH-46CA	[FB80 C6CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_214)
{
    // 46CB 0021;	
    // (䛋) CJK UNIFIED IDEOGRAPH-46CB	[FB80 C6CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_215)
{
    // 46CB 003F;	
    // (䛋) CJK UNIFIED IDEOGRAPH-46CB	[FB80 C6CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_216)
{
    // 46CB 0061;	
    // (䛋) CJK UNIFIED IDEOGRAPH-46CB	[FB80 C6CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_217)
{
    // 46CB 0041;	
    // (䛋) CJK UNIFIED IDEOGRAPH-46CB	[FB80 C6CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46CB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_218)
{
    // 46CB 0062;	
    // (䛋) CJK UNIFIED IDEOGRAPH-46CB	[FB80 C6CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_219)
{
    // 46CC 0021;	
    // (䛌) CJK UNIFIED IDEOGRAPH-46CC	[FB80 C6CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_220)
{
    // 46CC 003F;	
    // (䛌) CJK UNIFIED IDEOGRAPH-46CC	[FB80 C6CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_221)
{
    // 46CC 0061;	
    // (䛌) CJK UNIFIED IDEOGRAPH-46CC	[FB80 C6CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_222)
{
    // 46CC 0041;	
    // (䛌) CJK UNIFIED IDEOGRAPH-46CC	[FB80 C6CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46CC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_223)
{
    // 46CC 0062;	
    // (䛌) CJK UNIFIED IDEOGRAPH-46CC	[FB80 C6CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_224)
{
    // 46CD 0021;	
    // (䛍) CJK UNIFIED IDEOGRAPH-46CD	[FB80 C6CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_225)
{
    // 46CD 003F;	
    // (䛍) CJK UNIFIED IDEOGRAPH-46CD	[FB80 C6CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_226)
{
    // 46CD 0061;	
    // (䛍) CJK UNIFIED IDEOGRAPH-46CD	[FB80 C6CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_227)
{
    // 46CD 0041;	
    // (䛍) CJK UNIFIED IDEOGRAPH-46CD	[FB80 C6CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46CD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_228)
{
    // 46CD 0062;	
    // (䛍) CJK UNIFIED IDEOGRAPH-46CD	[FB80 C6CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_229)
{
    // 46CE 0021;	
    // (䛎) CJK UNIFIED IDEOGRAPH-46CE	[FB80 C6CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_230)
{
    // 46CE 003F;	
    // (䛎) CJK UNIFIED IDEOGRAPH-46CE	[FB80 C6CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_231)
{
    // 46CE 0061;	
    // (䛎) CJK UNIFIED IDEOGRAPH-46CE	[FB80 C6CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_232)
{
    // 46CE 0041;	
    // (䛎) CJK UNIFIED IDEOGRAPH-46CE	[FB80 C6CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46CE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_233)
{
    // 46CE 0062;	
    // (䛎) CJK UNIFIED IDEOGRAPH-46CE	[FB80 C6CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_234)
{
    // 46CF 0021;	
    // (䛏) CJK UNIFIED IDEOGRAPH-46CF	[FB80 C6CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_235)
{
    // 46CF 003F;	
    // (䛏) CJK UNIFIED IDEOGRAPH-46CF	[FB80 C6CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_236)
{
    // 46CF 0061;	
    // (䛏) CJK UNIFIED IDEOGRAPH-46CF	[FB80 C6CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_237)
{
    // 46CF 0041;	
    // (䛏) CJK UNIFIED IDEOGRAPH-46CF	[FB80 C6CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46CF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_238)
{
    // 46CF 0062;	
    // (䛏) CJK UNIFIED IDEOGRAPH-46CF	[FB80 C6CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46CF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_239)
{
    // 46D0 0021;	
    // (䛐) CJK UNIFIED IDEOGRAPH-46D0	[FB80 C6D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_240)
{
    // 46D0 003F;	
    // (䛐) CJK UNIFIED IDEOGRAPH-46D0	[FB80 C6D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_241)
{
    // 46D0 0061;	
    // (䛐) CJK UNIFIED IDEOGRAPH-46D0	[FB80 C6D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_242)
{
    // 46D0 0041;	
    // (䛐) CJK UNIFIED IDEOGRAPH-46D0	[FB80 C6D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46D0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_243)
{
    // 46D0 0062;	
    // (䛐) CJK UNIFIED IDEOGRAPH-46D0	[FB80 C6D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_244)
{
    // 46D1 0021;	
    // (䛑) CJK UNIFIED IDEOGRAPH-46D1	[FB80 C6D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_245)
{
    // 46D1 003F;	
    // (䛑) CJK UNIFIED IDEOGRAPH-46D1	[FB80 C6D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_246)
{
    // 46D1 0061;	
    // (䛑) CJK UNIFIED IDEOGRAPH-46D1	[FB80 C6D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_247)
{
    // 46D1 0041;	
    // (䛑) CJK UNIFIED IDEOGRAPH-46D1	[FB80 C6D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46D1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_248)
{
    // 46D1 0062;	
    // (䛑) CJK UNIFIED IDEOGRAPH-46D1	[FB80 C6D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_249)
{
    // 46D2 0021;	
    // (䛒) CJK UNIFIED IDEOGRAPH-46D2	[FB80 C6D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_250)
{
    // 46D2 003F;	
    // (䛒) CJK UNIFIED IDEOGRAPH-46D2	[FB80 C6D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_251)
{
    // 46D2 0061;	
    // (䛒) CJK UNIFIED IDEOGRAPH-46D2	[FB80 C6D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_252)
{
    // 46D2 0041;	
    // (䛒) CJK UNIFIED IDEOGRAPH-46D2	[FB80 C6D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46D2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_253)
{
    // 46D2 0062;	
    // (䛒) CJK UNIFIED IDEOGRAPH-46D2	[FB80 C6D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_254)
{
    // 46D3 0021;	
    // (䛓) CJK UNIFIED IDEOGRAPH-46D3	[FB80 C6D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_255)
{
    // 46D3 003F;	
    // (䛓) CJK UNIFIED IDEOGRAPH-46D3	[FB80 C6D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_256)
{
    // 46D3 0061;	
    // (䛓) CJK UNIFIED IDEOGRAPH-46D3	[FB80 C6D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_257)
{
    // 46D3 0041;	
    // (䛓) CJK UNIFIED IDEOGRAPH-46D3	[FB80 C6D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46D3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_258)
{
    // 46D3 0062;	
    // (䛓) CJK UNIFIED IDEOGRAPH-46D3	[FB80 C6D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_259)
{
    // 46D4 0021;	
    // (䛔) CJK UNIFIED IDEOGRAPH-46D4	[FB80 C6D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_260)
{
    // 46D4 003F;	
    // (䛔) CJK UNIFIED IDEOGRAPH-46D4	[FB80 C6D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_261)
{
    // 46D4 0061;	
    // (䛔) CJK UNIFIED IDEOGRAPH-46D4	[FB80 C6D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_262)
{
    // 46D4 0041;	
    // (䛔) CJK UNIFIED IDEOGRAPH-46D4	[FB80 C6D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46D4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_263)
{
    // 46D4 0062;	
    // (䛔) CJK UNIFIED IDEOGRAPH-46D4	[FB80 C6D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_264)
{
    // 46D5 0021;	
    // (䛕) CJK UNIFIED IDEOGRAPH-46D5	[FB80 C6D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_265)
{
    // 46D5 003F;	
    // (䛕) CJK UNIFIED IDEOGRAPH-46D5	[FB80 C6D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_266)
{
    // 46D5 0061;	
    // (䛕) CJK UNIFIED IDEOGRAPH-46D5	[FB80 C6D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_267)
{
    // 46D5 0041;	
    // (䛕) CJK UNIFIED IDEOGRAPH-46D5	[FB80 C6D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46D5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_268)
{
    // 46D5 0062;	
    // (䛕) CJK UNIFIED IDEOGRAPH-46D5	[FB80 C6D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_269)
{
    // 46D6 0021;	
    // (䛖) CJK UNIFIED IDEOGRAPH-46D6	[FB80 C6D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_270)
{
    // 46D6 003F;	
    // (䛖) CJK UNIFIED IDEOGRAPH-46D6	[FB80 C6D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_271)
{
    // 46D6 0061;	
    // (䛖) CJK UNIFIED IDEOGRAPH-46D6	[FB80 C6D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_272)
{
    // 46D6 0041;	
    // (䛖) CJK UNIFIED IDEOGRAPH-46D6	[FB80 C6D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46D6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_273)
{
    // 46D6 0062;	
    // (䛖) CJK UNIFIED IDEOGRAPH-46D6	[FB80 C6D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_274)
{
    // 46D7 0021;	
    // (䛗) CJK UNIFIED IDEOGRAPH-46D7	[FB80 C6D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_275)
{
    // 46D7 003F;	
    // (䛗) CJK UNIFIED IDEOGRAPH-46D7	[FB80 C6D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_276)
{
    // 46D7 0061;	
    // (䛗) CJK UNIFIED IDEOGRAPH-46D7	[FB80 C6D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_277)
{
    // 46D7 0041;	
    // (䛗) CJK UNIFIED IDEOGRAPH-46D7	[FB80 C6D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46D7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_278)
{
    // 46D7 0062;	
    // (䛗) CJK UNIFIED IDEOGRAPH-46D7	[FB80 C6D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_279)
{
    // 46D8 0021;	
    // (䛘) CJK UNIFIED IDEOGRAPH-46D8	[FB80 C6D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_280)
{
    // 46D8 003F;	
    // (䛘) CJK UNIFIED IDEOGRAPH-46D8	[FB80 C6D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_281)
{
    // 46D8 0061;	
    // (䛘) CJK UNIFIED IDEOGRAPH-46D8	[FB80 C6D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_282)
{
    // 46D8 0041;	
    // (䛘) CJK UNIFIED IDEOGRAPH-46D8	[FB80 C6D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46D8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_283)
{
    // 46D8 0062;	
    // (䛘) CJK UNIFIED IDEOGRAPH-46D8	[FB80 C6D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_284)
{
    // 46D9 0021;	
    // (䛙) CJK UNIFIED IDEOGRAPH-46D9	[FB80 C6D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_285)
{
    // 46D9 003F;	
    // (䛙) CJK UNIFIED IDEOGRAPH-46D9	[FB80 C6D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_286)
{
    // 46D9 0061;	
    // (䛙) CJK UNIFIED IDEOGRAPH-46D9	[FB80 C6D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_287)
{
    // 46D9 0041;	
    // (䛙) CJK UNIFIED IDEOGRAPH-46D9	[FB80 C6D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46D9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_288)
{
    // 46D9 0062;	
    // (䛙) CJK UNIFIED IDEOGRAPH-46D9	[FB80 C6D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46D9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_289)
{
    // 46DA 0021;	
    // (䛚) CJK UNIFIED IDEOGRAPH-46DA	[FB80 C6DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_290)
{
    // 46DA 003F;	
    // (䛚) CJK UNIFIED IDEOGRAPH-46DA	[FB80 C6DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_291)
{
    // 46DA 0061;	
    // (䛚) CJK UNIFIED IDEOGRAPH-46DA	[FB80 C6DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_292)
{
    // 46DA 0041;	
    // (䛚) CJK UNIFIED IDEOGRAPH-46DA	[FB80 C6DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46DA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_293)
{
    // 46DA 0062;	
    // (䛚) CJK UNIFIED IDEOGRAPH-46DA	[FB80 C6DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_294)
{
    // 46DB 0021;	
    // (䛛) CJK UNIFIED IDEOGRAPH-46DB	[FB80 C6DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_295)
{
    // 46DB 003F;	
    // (䛛) CJK UNIFIED IDEOGRAPH-46DB	[FB80 C6DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_296)
{
    // 46DB 0061;	
    // (䛛) CJK UNIFIED IDEOGRAPH-46DB	[FB80 C6DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_297)
{
    // 46DB 0041;	
    // (䛛) CJK UNIFIED IDEOGRAPH-46DB	[FB80 C6DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46DB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_298)
{
    // 46DB 0062;	
    // (䛛) CJK UNIFIED IDEOGRAPH-46DB	[FB80 C6DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_299)
{
    // 46DC 0021;	
    // (䛜) CJK UNIFIED IDEOGRAPH-46DC	[FB80 C6DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_300)
{
    // 46DC 003F;	
    // (䛜) CJK UNIFIED IDEOGRAPH-46DC	[FB80 C6DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_301)
{
    // 46DC 0061;	
    // (䛜) CJK UNIFIED IDEOGRAPH-46DC	[FB80 C6DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_302)
{
    // 46DC 0041;	
    // (䛜) CJK UNIFIED IDEOGRAPH-46DC	[FB80 C6DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46DC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_303)
{
    // 46DC 0062;	
    // (䛜) CJK UNIFIED IDEOGRAPH-46DC	[FB80 C6DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_304)
{
    // 46DD 0021;	
    // (䛝) CJK UNIFIED IDEOGRAPH-46DD	[FB80 C6DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_305)
{
    // 46DD 003F;	
    // (䛝) CJK UNIFIED IDEOGRAPH-46DD	[FB80 C6DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_306)
{
    // 46DD 0061;	
    // (䛝) CJK UNIFIED IDEOGRAPH-46DD	[FB80 C6DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_307)
{
    // 46DD 0041;	
    // (䛝) CJK UNIFIED IDEOGRAPH-46DD	[FB80 C6DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46DD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_308)
{
    // 46DD 0062;	
    // (䛝) CJK UNIFIED IDEOGRAPH-46DD	[FB80 C6DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_309)
{
    // 46DE 0021;	
    // (䛞) CJK UNIFIED IDEOGRAPH-46DE	[FB80 C6DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_310)
{
    // 46DE 003F;	
    // (䛞) CJK UNIFIED IDEOGRAPH-46DE	[FB80 C6DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_311)
{
    // 46DE 0061;	
    // (䛞) CJK UNIFIED IDEOGRAPH-46DE	[FB80 C6DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_312)
{
    // 46DE 0041;	
    // (䛞) CJK UNIFIED IDEOGRAPH-46DE	[FB80 C6DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46DE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_313)
{
    // 46DE 0062;	
    // (䛞) CJK UNIFIED IDEOGRAPH-46DE	[FB80 C6DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_314)
{
    // 46DF 0021;	
    // (䛟) CJK UNIFIED IDEOGRAPH-46DF	[FB80 C6DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_315)
{
    // 46DF 003F;	
    // (䛟) CJK UNIFIED IDEOGRAPH-46DF	[FB80 C6DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_316)
{
    // 46DF 0061;	
    // (䛟) CJK UNIFIED IDEOGRAPH-46DF	[FB80 C6DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_317)
{
    // 46DF 0041;	
    // (䛟) CJK UNIFIED IDEOGRAPH-46DF	[FB80 C6DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46DF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_318)
{
    // 46DF 0062;	
    // (䛟) CJK UNIFIED IDEOGRAPH-46DF	[FB80 C6DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46DF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_319)
{
    // 46E0 0021;	
    // (䛠) CJK UNIFIED IDEOGRAPH-46E0	[FB80 C6E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_320)
{
    // 46E0 003F;	
    // (䛠) CJK UNIFIED IDEOGRAPH-46E0	[FB80 C6E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_321)
{
    // 46E0 0061;	
    // (䛠) CJK UNIFIED IDEOGRAPH-46E0	[FB80 C6E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_322)
{
    // 46E0 0041;	
    // (䛠) CJK UNIFIED IDEOGRAPH-46E0	[FB80 C6E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46E0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_323)
{
    // 46E0 0062;	
    // (䛠) CJK UNIFIED IDEOGRAPH-46E0	[FB80 C6E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_324)
{
    // 46E1 0021;	
    // (䛡) CJK UNIFIED IDEOGRAPH-46E1	[FB80 C6E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_325)
{
    // 46E1 003F;	
    // (䛡) CJK UNIFIED IDEOGRAPH-46E1	[FB80 C6E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_326)
{
    // 46E1 0061;	
    // (䛡) CJK UNIFIED IDEOGRAPH-46E1	[FB80 C6E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_327)
{
    // 46E1 0041;	
    // (䛡) CJK UNIFIED IDEOGRAPH-46E1	[FB80 C6E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46E1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_328)
{
    // 46E1 0062;	
    // (䛡) CJK UNIFIED IDEOGRAPH-46E1	[FB80 C6E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_329)
{
    // 46E2 0021;	
    // (䛢) CJK UNIFIED IDEOGRAPH-46E2	[FB80 C6E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_330)
{
    // 46E2 003F;	
    // (䛢) CJK UNIFIED IDEOGRAPH-46E2	[FB80 C6E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_331)
{
    // 46E2 0061;	
    // (䛢) CJK UNIFIED IDEOGRAPH-46E2	[FB80 C6E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_332)
{
    // 46E2 0041;	
    // (䛢) CJK UNIFIED IDEOGRAPH-46E2	[FB80 C6E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46E2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_333)
{
    // 46E2 0062;	
    // (䛢) CJK UNIFIED IDEOGRAPH-46E2	[FB80 C6E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_334)
{
    // 46E3 0021;	
    // (䛣) CJK UNIFIED IDEOGRAPH-46E3	[FB80 C6E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_335)
{
    // 46E3 003F;	
    // (䛣) CJK UNIFIED IDEOGRAPH-46E3	[FB80 C6E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_336)
{
    // 46E3 0061;	
    // (䛣) CJK UNIFIED IDEOGRAPH-46E3	[FB80 C6E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_337)
{
    // 46E3 0041;	
    // (䛣) CJK UNIFIED IDEOGRAPH-46E3	[FB80 C6E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46E3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_338)
{
    // 46E3 0062;	
    // (䛣) CJK UNIFIED IDEOGRAPH-46E3	[FB80 C6E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_339)
{
    // 46E4 0021;	
    // (䛤) CJK UNIFIED IDEOGRAPH-46E4	[FB80 C6E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_340)
{
    // 46E4 003F;	
    // (䛤) CJK UNIFIED IDEOGRAPH-46E4	[FB80 C6E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_341)
{
    // 46E4 0061;	
    // (䛤) CJK UNIFIED IDEOGRAPH-46E4	[FB80 C6E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_342)
{
    // 46E4 0041;	
    // (䛤) CJK UNIFIED IDEOGRAPH-46E4	[FB80 C6E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46E4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_343)
{
    // 46E4 0062;	
    // (䛤) CJK UNIFIED IDEOGRAPH-46E4	[FB80 C6E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_344)
{
    // 46E5 0021;	
    // (䛥) CJK UNIFIED IDEOGRAPH-46E5	[FB80 C6E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_345)
{
    // 46E5 003F;	
    // (䛥) CJK UNIFIED IDEOGRAPH-46E5	[FB80 C6E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_346)
{
    // 46E5 0061;	
    // (䛥) CJK UNIFIED IDEOGRAPH-46E5	[FB80 C6E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_347)
{
    // 46E5 0041;	
    // (䛥) CJK UNIFIED IDEOGRAPH-46E5	[FB80 C6E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46E5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_348)
{
    // 46E5 0062;	
    // (䛥) CJK UNIFIED IDEOGRAPH-46E5	[FB80 C6E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_349)
{
    // 46E6 0021;	
    // (䛦) CJK UNIFIED IDEOGRAPH-46E6	[FB80 C6E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_350)
{
    // 46E6 003F;	
    // (䛦) CJK UNIFIED IDEOGRAPH-46E6	[FB80 C6E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_351)
{
    // 46E6 0061;	
    // (䛦) CJK UNIFIED IDEOGRAPH-46E6	[FB80 C6E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_352)
{
    // 46E6 0041;	
    // (䛦) CJK UNIFIED IDEOGRAPH-46E6	[FB80 C6E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46E6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_353)
{
    // 46E6 0062;	
    // (䛦) CJK UNIFIED IDEOGRAPH-46E6	[FB80 C6E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_354)
{
    // 46E7 0021;	
    // (䛧) CJK UNIFIED IDEOGRAPH-46E7	[FB80 C6E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_355)
{
    // 46E7 003F;	
    // (䛧) CJK UNIFIED IDEOGRAPH-46E7	[FB80 C6E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_356)
{
    // 46E7 0061;	
    // (䛧) CJK UNIFIED IDEOGRAPH-46E7	[FB80 C6E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_357)
{
    // 46E7 0041;	
    // (䛧) CJK UNIFIED IDEOGRAPH-46E7	[FB80 C6E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46E7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_358)
{
    // 46E7 0062;	
    // (䛧) CJK UNIFIED IDEOGRAPH-46E7	[FB80 C6E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_359)
{
    // 46E8 0021;	
    // (䛨) CJK UNIFIED IDEOGRAPH-46E8	[FB80 C6E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_360)
{
    // 46E8 003F;	
    // (䛨) CJK UNIFIED IDEOGRAPH-46E8	[FB80 C6E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_361)
{
    // 46E8 0061;	
    // (䛨) CJK UNIFIED IDEOGRAPH-46E8	[FB80 C6E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_362)
{
    // 46E8 0041;	
    // (䛨) CJK UNIFIED IDEOGRAPH-46E8	[FB80 C6E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46E8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_363)
{
    // 46E8 0062;	
    // (䛨) CJK UNIFIED IDEOGRAPH-46E8	[FB80 C6E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_364)
{
    // 46E9 0021;	
    // (䛩) CJK UNIFIED IDEOGRAPH-46E9	[FB80 C6E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_365)
{
    // 46E9 003F;	
    // (䛩) CJK UNIFIED IDEOGRAPH-46E9	[FB80 C6E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_366)
{
    // 46E9 0061;	
    // (䛩) CJK UNIFIED IDEOGRAPH-46E9	[FB80 C6E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_367)
{
    // 46E9 0041;	
    // (䛩) CJK UNIFIED IDEOGRAPH-46E9	[FB80 C6E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46E9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_368)
{
    // 46E9 0062;	
    // (䛩) CJK UNIFIED IDEOGRAPH-46E9	[FB80 C6E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46E9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_369)
{
    // 46EA 0021;	
    // (䛪) CJK UNIFIED IDEOGRAPH-46EA	[FB80 C6EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46EA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_370)
{
    // 46EA 003F;	
    // (䛪) CJK UNIFIED IDEOGRAPH-46EA	[FB80 C6EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46EA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_371)
{
    // 46EA 0061;	
    // (䛪) CJK UNIFIED IDEOGRAPH-46EA	[FB80 C6EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46EA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_372)
{
    // 46EA 0041;	
    // (䛪) CJK UNIFIED IDEOGRAPH-46EA	[FB80 C6EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46EA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_373)
{
    // 46EA 0062;	
    // (䛪) CJK UNIFIED IDEOGRAPH-46EA	[FB80 C6EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46EA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_374)
{
    // 46EB 0021;	
    // (䛫) CJK UNIFIED IDEOGRAPH-46EB	[FB80 C6EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46EB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_375)
{
    // 46EB 003F;	
    // (䛫) CJK UNIFIED IDEOGRAPH-46EB	[FB80 C6EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46EB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_376)
{
    // 46EB 0061;	
    // (䛫) CJK UNIFIED IDEOGRAPH-46EB	[FB80 C6EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46EB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_377)
{
    // 46EB 0041;	
    // (䛫) CJK UNIFIED IDEOGRAPH-46EB	[FB80 C6EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46EB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_378)
{
    // 46EB 0062;	
    // (䛫) CJK UNIFIED IDEOGRAPH-46EB	[FB80 C6EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46EB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_379)
{
    // 46EC 0021;	
    // (䛬) CJK UNIFIED IDEOGRAPH-46EC	[FB80 C6EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46EC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_380)
{
    // 46EC 003F;	
    // (䛬) CJK UNIFIED IDEOGRAPH-46EC	[FB80 C6EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46EC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_381)
{
    // 46EC 0061;	
    // (䛬) CJK UNIFIED IDEOGRAPH-46EC	[FB80 C6EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46EC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_382)
{
    // 46EC 0041;	
    // (䛬) CJK UNIFIED IDEOGRAPH-46EC	[FB80 C6EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46EC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_383)
{
    // 46EC 0062;	
    // (䛬) CJK UNIFIED IDEOGRAPH-46EC	[FB80 C6EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46EC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_384)
{
    // 46ED 0021;	
    // (䛭) CJK UNIFIED IDEOGRAPH-46ED	[FB80 C6ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46ED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_385)
{
    // 46ED 003F;	
    // (䛭) CJK UNIFIED IDEOGRAPH-46ED	[FB80 C6ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46ED, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_386)
{
    // 46ED 0061;	
    // (䛭) CJK UNIFIED IDEOGRAPH-46ED	[FB80 C6ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46ED, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_387)
{
    // 46ED 0041;	
    // (䛭) CJK UNIFIED IDEOGRAPH-46ED	[FB80 C6ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46ED, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_388)
{
    // 46ED 0062;	
    // (䛭) CJK UNIFIED IDEOGRAPH-46ED	[FB80 C6ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46ED, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_389)
{
    // 46EE 0021;	
    // (䛮) CJK UNIFIED IDEOGRAPH-46EE	[FB80 C6EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46EE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_390)
{
    // 46EE 003F;	
    // (䛮) CJK UNIFIED IDEOGRAPH-46EE	[FB80 C6EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46EE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_391)
{
    // 46EE 0061;	
    // (䛮) CJK UNIFIED IDEOGRAPH-46EE	[FB80 C6EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46EE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_392)
{
    // 46EE 0041;	
    // (䛮) CJK UNIFIED IDEOGRAPH-46EE	[FB80 C6EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46EE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_393)
{
    // 46EE 0062;	
    // (䛮) CJK UNIFIED IDEOGRAPH-46EE	[FB80 C6EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46EE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_394)
{
    // 46EF 0021;	
    // (䛯) CJK UNIFIED IDEOGRAPH-46EF	[FB80 C6EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46EF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_395)
{
    // 46EF 003F;	
    // (䛯) CJK UNIFIED IDEOGRAPH-46EF	[FB80 C6EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46EF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_396)
{
    // 46EF 0061;	
    // (䛯) CJK UNIFIED IDEOGRAPH-46EF	[FB80 C6EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46EF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_397)
{
    // 46EF 0041;	
    // (䛯) CJK UNIFIED IDEOGRAPH-46EF	[FB80 C6EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46EF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_398)
{
    // 46EF 0062;	
    // (䛯) CJK UNIFIED IDEOGRAPH-46EF	[FB80 C6EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46EF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_399)
{
    // 46F0 0021;	
    // (䛰) CJK UNIFIED IDEOGRAPH-46F0	[FB80 C6F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_400)
{
    // 46F0 003F;	
    // (䛰) CJK UNIFIED IDEOGRAPH-46F0	[FB80 C6F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_401)
{
    // 46F0 0061;	
    // (䛰) CJK UNIFIED IDEOGRAPH-46F0	[FB80 C6F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_402)
{
    // 46F0 0041;	
    // (䛰) CJK UNIFIED IDEOGRAPH-46F0	[FB80 C6F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46F0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_403)
{
    // 46F0 0062;	
    // (䛰) CJK UNIFIED IDEOGRAPH-46F0	[FB80 C6F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_404)
{
    // 46F1 0021;	
    // (䛱) CJK UNIFIED IDEOGRAPH-46F1	[FB80 C6F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_405)
{
    // 46F1 003F;	
    // (䛱) CJK UNIFIED IDEOGRAPH-46F1	[FB80 C6F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_406)
{
    // 46F1 0061;	
    // (䛱) CJK UNIFIED IDEOGRAPH-46F1	[FB80 C6F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_407)
{
    // 46F1 0041;	
    // (䛱) CJK UNIFIED IDEOGRAPH-46F1	[FB80 C6F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46F1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_408)
{
    // 46F1 0062;	
    // (䛱) CJK UNIFIED IDEOGRAPH-46F1	[FB80 C6F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_409)
{
    // 46F2 0021;	
    // (䛲) CJK UNIFIED IDEOGRAPH-46F2	[FB80 C6F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_410)
{
    // 46F2 003F;	
    // (䛲) CJK UNIFIED IDEOGRAPH-46F2	[FB80 C6F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_411)
{
    // 46F2 0061;	
    // (䛲) CJK UNIFIED IDEOGRAPH-46F2	[FB80 C6F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_412)
{
    // 46F2 0041;	
    // (䛲) CJK UNIFIED IDEOGRAPH-46F2	[FB80 C6F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46F2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_413)
{
    // 46F2 0062;	
    // (䛲) CJK UNIFIED IDEOGRAPH-46F2	[FB80 C6F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_414)
{
    // 46F3 0021;	
    // (䛳) CJK UNIFIED IDEOGRAPH-46F3	[FB80 C6F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_415)
{
    // 46F3 003F;	
    // (䛳) CJK UNIFIED IDEOGRAPH-46F3	[FB80 C6F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_416)
{
    // 46F3 0061;	
    // (䛳) CJK UNIFIED IDEOGRAPH-46F3	[FB80 C6F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_417)
{
    // 46F3 0041;	
    // (䛳) CJK UNIFIED IDEOGRAPH-46F3	[FB80 C6F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46F3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_418)
{
    // 46F3 0062;	
    // (䛳) CJK UNIFIED IDEOGRAPH-46F3	[FB80 C6F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_419)
{
    // 46F4 0021;	
    // (䛴) CJK UNIFIED IDEOGRAPH-46F4	[FB80 C6F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_420)
{
    // 46F4 003F;	
    // (䛴) CJK UNIFIED IDEOGRAPH-46F4	[FB80 C6F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_421)
{
    // 46F4 0061;	
    // (䛴) CJK UNIFIED IDEOGRAPH-46F4	[FB80 C6F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_422)
{
    // 46F4 0041;	
    // (䛴) CJK UNIFIED IDEOGRAPH-46F4	[FB80 C6F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46F4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_423)
{
    // 46F4 0062;	
    // (䛴) CJK UNIFIED IDEOGRAPH-46F4	[FB80 C6F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_424)
{
    // 46F5 0021;	
    // (䛵) CJK UNIFIED IDEOGRAPH-46F5	[FB80 C6F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_425)
{
    // 46F5 003F;	
    // (䛵) CJK UNIFIED IDEOGRAPH-46F5	[FB80 C6F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_426)
{
    // 46F5 0061;	
    // (䛵) CJK UNIFIED IDEOGRAPH-46F5	[FB80 C6F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_427)
{
    // 46F5 0041;	
    // (䛵) CJK UNIFIED IDEOGRAPH-46F5	[FB80 C6F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46F5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_428)
{
    // 46F5 0062;	
    // (䛵) CJK UNIFIED IDEOGRAPH-46F5	[FB80 C6F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_429)
{
    // 46F6 0021;	
    // (䛶) CJK UNIFIED IDEOGRAPH-46F6	[FB80 C6F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_430)
{
    // 46F6 003F;	
    // (䛶) CJK UNIFIED IDEOGRAPH-46F6	[FB80 C6F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_431)
{
    // 46F6 0061;	
    // (䛶) CJK UNIFIED IDEOGRAPH-46F6	[FB80 C6F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_432)
{
    // 46F6 0041;	
    // (䛶) CJK UNIFIED IDEOGRAPH-46F6	[FB80 C6F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46F6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_433)
{
    // 46F6 0062;	
    // (䛶) CJK UNIFIED IDEOGRAPH-46F6	[FB80 C6F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_434)
{
    // 46F7 0021;	
    // (䛷) CJK UNIFIED IDEOGRAPH-46F7	[FB80 C6F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_435)
{
    // 46F7 003F;	
    // (䛷) CJK UNIFIED IDEOGRAPH-46F7	[FB80 C6F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_436)
{
    // 46F7 0061;	
    // (䛷) CJK UNIFIED IDEOGRAPH-46F7	[FB80 C6F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_437)
{
    // 46F7 0041;	
    // (䛷) CJK UNIFIED IDEOGRAPH-46F7	[FB80 C6F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46F7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_438)
{
    // 46F7 0062;	
    // (䛷) CJK UNIFIED IDEOGRAPH-46F7	[FB80 C6F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_439)
{
    // 46F8 0021;	
    // (䛸) CJK UNIFIED IDEOGRAPH-46F8	[FB80 C6F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_440)
{
    // 46F8 003F;	
    // (䛸) CJK UNIFIED IDEOGRAPH-46F8	[FB80 C6F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_441)
{
    // 46F8 0061;	
    // (䛸) CJK UNIFIED IDEOGRAPH-46F8	[FB80 C6F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_442)
{
    // 46F8 0041;	
    // (䛸) CJK UNIFIED IDEOGRAPH-46F8	[FB80 C6F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46F8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_443)
{
    // 46F8 0062;	
    // (䛸) CJK UNIFIED IDEOGRAPH-46F8	[FB80 C6F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_444)
{
    // 46F9 0021;	
    // (䛹) CJK UNIFIED IDEOGRAPH-46F9	[FB80 C6F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_445)
{
    // 46F9 003F;	
    // (䛹) CJK UNIFIED IDEOGRAPH-46F9	[FB80 C6F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_446)
{
    // 46F9 0061;	
    // (䛹) CJK UNIFIED IDEOGRAPH-46F9	[FB80 C6F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_447)
{
    // 46F9 0041;	
    // (䛹) CJK UNIFIED IDEOGRAPH-46F9	[FB80 C6F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46F9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_448)
{
    // 46F9 0062;	
    // (䛹) CJK UNIFIED IDEOGRAPH-46F9	[FB80 C6F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46F9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_449)
{
    // 46FA 0021;	
    // (䛺) CJK UNIFIED IDEOGRAPH-46FA	[FB80 C6FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_450)
{
    // 46FA 003F;	
    // (䛺) CJK UNIFIED IDEOGRAPH-46FA	[FB80 C6FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_451)
{
    // 46FA 0061;	
    // (䛺) CJK UNIFIED IDEOGRAPH-46FA	[FB80 C6FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_452)
{
    // 46FA 0041;	
    // (䛺) CJK UNIFIED IDEOGRAPH-46FA	[FB80 C6FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46FA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_453)
{
    // 46FA 0062;	
    // (䛺) CJK UNIFIED IDEOGRAPH-46FA	[FB80 C6FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_454)
{
    // 46FB 0021;	
    // (䛻) CJK UNIFIED IDEOGRAPH-46FB	[FB80 C6FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_455)
{
    // 46FB 003F;	
    // (䛻) CJK UNIFIED IDEOGRAPH-46FB	[FB80 C6FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_456)
{
    // 46FB 0061;	
    // (䛻) CJK UNIFIED IDEOGRAPH-46FB	[FB80 C6FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_457)
{
    // 46FB 0041;	
    // (䛻) CJK UNIFIED IDEOGRAPH-46FB	[FB80 C6FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46FB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_458)
{
    // 46FB 0062;	
    // (䛻) CJK UNIFIED IDEOGRAPH-46FB	[FB80 C6FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_459)
{
    // 46FC 0021;	
    // (䛼) CJK UNIFIED IDEOGRAPH-46FC	[FB80 C6FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_460)
{
    // 46FC 003F;	
    // (䛼) CJK UNIFIED IDEOGRAPH-46FC	[FB80 C6FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_461)
{
    // 46FC 0061;	
    // (䛼) CJK UNIFIED IDEOGRAPH-46FC	[FB80 C6FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_462)
{
    // 46FC 0041;	
    // (䛼) CJK UNIFIED IDEOGRAPH-46FC	[FB80 C6FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46FC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_463)
{
    // 46FC 0062;	
    // (䛼) CJK UNIFIED IDEOGRAPH-46FC	[FB80 C6FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_464)
{
    // 46FD 0021;	
    // (䛽) CJK UNIFIED IDEOGRAPH-46FD	[FB80 C6FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_465)
{
    // 46FD 003F;	
    // (䛽) CJK UNIFIED IDEOGRAPH-46FD	[FB80 C6FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_466)
{
    // 46FD 0061;	
    // (䛽) CJK UNIFIED IDEOGRAPH-46FD	[FB80 C6FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_467)
{
    // 46FD 0041;	
    // (䛽) CJK UNIFIED IDEOGRAPH-46FD	[FB80 C6FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46FD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_468)
{
    // 46FD 0062;	
    // (䛽) CJK UNIFIED IDEOGRAPH-46FD	[FB80 C6FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_469)
{
    // 46FE 0021;	
    // (䛾) CJK UNIFIED IDEOGRAPH-46FE	[FB80 C6FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_470)
{
    // 46FE 003F;	
    // (䛾) CJK UNIFIED IDEOGRAPH-46FE	[FB80 C6FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_471)
{
    // 46FE 0061;	
    // (䛾) CJK UNIFIED IDEOGRAPH-46FE	[FB80 C6FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_472)
{
    // 46FE 0041;	
    // (䛾) CJK UNIFIED IDEOGRAPH-46FE	[FB80 C6FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46FE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_473)
{
    // 46FE 0062;	
    // (䛾) CJK UNIFIED IDEOGRAPH-46FE	[FB80 C6FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_474)
{
    // 46FF 0021;	
    // (䛿) CJK UNIFIED IDEOGRAPH-46FF	[FB80 C6FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_475)
{
    // 46FF 003F;	
    // (䛿) CJK UNIFIED IDEOGRAPH-46FF	[FB80 C6FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC6FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_476)
{
    // 46FF 0061;	
    // (䛿) CJK UNIFIED IDEOGRAPH-46FF	[FB80 C6FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_477)
{
    // 46FF 0041;	
    // (䛿) CJK UNIFIED IDEOGRAPH-46FF	[FB80 C6FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x46FF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_478)
{
    // 46FF 0062;	
    // (䛿) CJK UNIFIED IDEOGRAPH-46FF	[FB80 C6FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x46FF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC6FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_479)
{
    // 4700 0021;	
    // (䜀) CJK UNIFIED IDEOGRAPH-4700	[FB80 C700 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4700, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC700, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_480)
{
    // 4700 003F;	
    // (䜀) CJK UNIFIED IDEOGRAPH-4700	[FB80 C700 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4700, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC700, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_481)
{
    // 4700 0061;	
    // (䜀) CJK UNIFIED IDEOGRAPH-4700	[FB80 C700 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4700, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC700, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_482)
{
    // 4700 0041;	
    // (䜀) CJK UNIFIED IDEOGRAPH-4700	[FB80 C700 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4700, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC700, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_483)
{
    // 4700 0062;	
    // (䜀) CJK UNIFIED IDEOGRAPH-4700	[FB80 C700 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4700, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC700, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_484)
{
    // 4701 0021;	
    // (䜁) CJK UNIFIED IDEOGRAPH-4701	[FB80 C701 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4701, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC701, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_485)
{
    // 4701 003F;	
    // (䜁) CJK UNIFIED IDEOGRAPH-4701	[FB80 C701 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4701, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC701, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_486)
{
    // 4701 0061;	
    // (䜁) CJK UNIFIED IDEOGRAPH-4701	[FB80 C701 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4701, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC701, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_487)
{
    // 4701 0041;	
    // (䜁) CJK UNIFIED IDEOGRAPH-4701	[FB80 C701 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4701, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC701, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_488)
{
    // 4701 0062;	
    // (䜁) CJK UNIFIED IDEOGRAPH-4701	[FB80 C701 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4701, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC701, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_489)
{
    // 4702 0021;	
    // (䜂) CJK UNIFIED IDEOGRAPH-4702	[FB80 C702 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4702, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC702, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_490)
{
    // 4702 003F;	
    // (䜂) CJK UNIFIED IDEOGRAPH-4702	[FB80 C702 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4702, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC702, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_491)
{
    // 4702 0061;	
    // (䜂) CJK UNIFIED IDEOGRAPH-4702	[FB80 C702 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4702, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC702, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_492)
{
    // 4702 0041;	
    // (䜂) CJK UNIFIED IDEOGRAPH-4702	[FB80 C702 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4702, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC702, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_493)
{
    // 4702 0062;	
    // (䜂) CJK UNIFIED IDEOGRAPH-4702	[FB80 C702 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4702, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC702, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_494)
{
    // 4703 0021;	
    // (䜃) CJK UNIFIED IDEOGRAPH-4703	[FB80 C703 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4703, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC703, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_495)
{
    // 4703 003F;	
    // (䜃) CJK UNIFIED IDEOGRAPH-4703	[FB80 C703 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4703, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC703, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_496)
{
    // 4703 0061;	
    // (䜃) CJK UNIFIED IDEOGRAPH-4703	[FB80 C703 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4703, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC703, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_497)
{
    // 4703 0041;	
    // (䜃) CJK UNIFIED IDEOGRAPH-4703	[FB80 C703 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4703, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC703, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_498)
{
    // 4703 0062;	
    // (䜃) CJK UNIFIED IDEOGRAPH-4703	[FB80 C703 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4703, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC703, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_375_499)
{
    // 4704 0021;	
    // (䜄) CJK UNIFIED IDEOGRAPH-4704	[FB80 C704 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4704, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC704, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

