// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_017_000)
{
    // 1144E 0062;	
    // (𑑎) NEWA GAP FILLER	[0472 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1144E, 0x0062 };
    uint32_t const ces[9] = { 0x0472, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_001)
{
    // 1144F 0021;	
    // (𑑏) NEWA ABBREVIATION SIGN	[0473 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1144F, 0x0021 };
    uint32_t const ces[9] = { 0x0473, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_002)
{
    // 1144F 003F;	
    // (𑑏) NEWA ABBREVIATION SIGN	[0473 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1144F, 0x003F };
    uint32_t const ces[9] = { 0x0473, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_003)
{
    // 1144F 0061;	
    // (𑑏) NEWA ABBREVIATION SIGN	[0473 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1144F, 0x0061 };
    uint32_t const ces[9] = { 0x0473, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_004)
{
    // 1144F 0041;	
    // (𑑏) NEWA ABBREVIATION SIGN	[0473 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1144F, 0x0041 };
    uint32_t const ces[9] = { 0x0473, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_005)
{
    // 1144F 0062;	
    // (𑑏) NEWA ABBREVIATION SIGN	[0473 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1144F, 0x0062 };
    uint32_t const ces[9] = { 0x0473, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_006)
{
    // 1145B 0021;	
    // (𑑛) NEWA PLACEHOLDER MARK	[0474 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1145B, 0x0021 };
    uint32_t const ces[9] = { 0x0474, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_007)
{
    // 1145B 003F;	
    // (𑑛) NEWA PLACEHOLDER MARK	[0474 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1145B, 0x003F };
    uint32_t const ces[9] = { 0x0474, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_008)
{
    // 1145B 0061;	
    // (𑑛) NEWA PLACEHOLDER MARK	[0474 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1145B, 0x0061 };
    uint32_t const ces[9] = { 0x0474, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_009)
{
    // 1145B 0041;	
    // (𑑛) NEWA PLACEHOLDER MARK	[0474 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1145B, 0x0041 };
    uint32_t const ces[9] = { 0x0474, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_010)
{
    // 1145B 0062;	
    // (𑑛) NEWA PLACEHOLDER MARK	[0474 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1145B, 0x0062 };
    uint32_t const ces[9] = { 0x0474, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_011)
{
    // 1145D 0021;	
    // (𑑝) NEWA INSERTION SIGN	[0475 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1145D, 0x0021 };
    uint32_t const ces[9] = { 0x0475, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_012)
{
    // 1145D 003F;	
    // (𑑝) NEWA INSERTION SIGN	[0475 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1145D, 0x003F };
    uint32_t const ces[9] = { 0x0475, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_013)
{
    // 1145D 0061;	
    // (𑑝) NEWA INSERTION SIGN	[0475 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1145D, 0x0061 };
    uint32_t const ces[9] = { 0x0475, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_014)
{
    // 1145D 0041;	
    // (𑑝) NEWA INSERTION SIGN	[0475 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1145D, 0x0041 };
    uint32_t const ces[9] = { 0x0475, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_015)
{
    // 1145D 0062;	
    // (𑑝) NEWA INSERTION SIGN	[0475 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1145D, 0x0062 };
    uint32_t const ces[9] = { 0x0475, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_016)
{
    // 114C6 0021;	
    // (𑓆) TIRHUTA ABBREVIATION SIGN	[0476 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C6, 0x0021 };
    uint32_t const ces[9] = { 0x0476, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_017)
{
    // 114C6 003F;	
    // (𑓆) TIRHUTA ABBREVIATION SIGN	[0476 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C6, 0x003F };
    uint32_t const ces[9] = { 0x0476, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_018)
{
    // 114C6 0061;	
    // (𑓆) TIRHUTA ABBREVIATION SIGN	[0476 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C6, 0x0061 };
    uint32_t const ces[9] = { 0x0476, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_019)
{
    // 114C6 0041;	
    // (𑓆) TIRHUTA ABBREVIATION SIGN	[0476 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x114C6, 0x0041 };
    uint32_t const ces[9] = { 0x0476, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_020)
{
    // 114C6 0062;	
    // (𑓆) TIRHUTA ABBREVIATION SIGN	[0476 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x114C6, 0x0062 };
    uint32_t const ces[9] = { 0x0476, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_021)
{
    // 115C1 0021;	
    // (𑗁) SIDDHAM SIGN SIDDHAM	[0477 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C1, 0x0021 };
    uint32_t const ces[9] = { 0x0477, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_022)
{
    // 115C1 003F;	
    // (𑗁) SIDDHAM SIGN SIDDHAM	[0477 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C1, 0x003F };
    uint32_t const ces[9] = { 0x0477, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_023)
{
    // 115C1 0061;	
    // (𑗁) SIDDHAM SIGN SIDDHAM	[0477 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C1, 0x0061 };
    uint32_t const ces[9] = { 0x0477, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_024)
{
    // 115C1 0041;	
    // (𑗁) SIDDHAM SIGN SIDDHAM	[0477 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115C1, 0x0041 };
    uint32_t const ces[9] = { 0x0477, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_025)
{
    // 115C1 0062;	
    // (𑗁) SIDDHAM SIGN SIDDHAM	[0477 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C1, 0x0062 };
    uint32_t const ces[9] = { 0x0477, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_026)
{
    // 115C4 0021;	
    // (𑗄) SIDDHAM SEPARATOR DOT	[0478 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C4, 0x0021 };
    uint32_t const ces[9] = { 0x0478, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_027)
{
    // 115C4 003F;	
    // (𑗄) SIDDHAM SEPARATOR DOT	[0478 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C4, 0x003F };
    uint32_t const ces[9] = { 0x0478, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_028)
{
    // 115C4 0061;	
    // (𑗄) SIDDHAM SEPARATOR DOT	[0478 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C4, 0x0061 };
    uint32_t const ces[9] = { 0x0478, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_029)
{
    // 115C4 0041;	
    // (𑗄) SIDDHAM SEPARATOR DOT	[0478 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115C4, 0x0041 };
    uint32_t const ces[9] = { 0x0478, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_030)
{
    // 115C4 0062;	
    // (𑗄) SIDDHAM SEPARATOR DOT	[0478 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C4, 0x0062 };
    uint32_t const ces[9] = { 0x0478, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_031)
{
    // 115C5 0021;	
    // (𑗅) SIDDHAM SEPARATOR BAR	[0479 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C5, 0x0021 };
    uint32_t const ces[9] = { 0x0479, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_032)
{
    // 115C5 003F;	
    // (𑗅) SIDDHAM SEPARATOR BAR	[0479 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C5, 0x003F };
    uint32_t const ces[9] = { 0x0479, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_033)
{
    // 115C5 0061;	
    // (𑗅) SIDDHAM SEPARATOR BAR	[0479 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C5, 0x0061 };
    uint32_t const ces[9] = { 0x0479, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_034)
{
    // 115C5 0041;	
    // (𑗅) SIDDHAM SEPARATOR BAR	[0479 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115C5, 0x0041 };
    uint32_t const ces[9] = { 0x0479, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_035)
{
    // 115C5 0062;	
    // (𑗅) SIDDHAM SEPARATOR BAR	[0479 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C5, 0x0062 };
    uint32_t const ces[9] = { 0x0479, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_036)
{
    // 115C6 0021;	
    // (𑗆) SIDDHAM REPETITION MARK-1	[047A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C6, 0x0021 };
    uint32_t const ces[9] = { 0x047A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_037)
{
    // 115C6 003F;	
    // (𑗆) SIDDHAM REPETITION MARK-1	[047A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C6, 0x003F };
    uint32_t const ces[9] = { 0x047A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_038)
{
    // 115C6 0061;	
    // (𑗆) SIDDHAM REPETITION MARK-1	[047A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C6, 0x0061 };
    uint32_t const ces[9] = { 0x047A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_039)
{
    // 115C6 0041;	
    // (𑗆) SIDDHAM REPETITION MARK-1	[047A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115C6, 0x0041 };
    uint32_t const ces[9] = { 0x047A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_040)
{
    // 115C6 0062;	
    // (𑗆) SIDDHAM REPETITION MARK-1	[047A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C6, 0x0062 };
    uint32_t const ces[9] = { 0x047A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_041)
{
    // 115C7 0021;	
    // (𑗇) SIDDHAM REPETITION MARK-2	[047B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C7, 0x0021 };
    uint32_t const ces[9] = { 0x047B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_042)
{
    // 115C7 003F;	
    // (𑗇) SIDDHAM REPETITION MARK-2	[047B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C7, 0x003F };
    uint32_t const ces[9] = { 0x047B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_043)
{
    // 115C7 0061;	
    // (𑗇) SIDDHAM REPETITION MARK-2	[047B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C7, 0x0061 };
    uint32_t const ces[9] = { 0x047B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_044)
{
    // 115C7 0041;	
    // (𑗇) SIDDHAM REPETITION MARK-2	[047B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115C7, 0x0041 };
    uint32_t const ces[9] = { 0x047B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_045)
{
    // 115C7 0062;	
    // (𑗇) SIDDHAM REPETITION MARK-2	[047B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C7, 0x0062 };
    uint32_t const ces[9] = { 0x047B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_046)
{
    // 115C8 0021;	
    // (𑗈) SIDDHAM REPETITION MARK-3	[047C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C8, 0x0021 };
    uint32_t const ces[9] = { 0x047C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_047)
{
    // 115C8 003F;	
    // (𑗈) SIDDHAM REPETITION MARK-3	[047C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C8, 0x003F };
    uint32_t const ces[9] = { 0x047C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_048)
{
    // 115C8 0061;	
    // (𑗈) SIDDHAM REPETITION MARK-3	[047C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C8, 0x0061 };
    uint32_t const ces[9] = { 0x047C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_049)
{
    // 115C8 0041;	
    // (𑗈) SIDDHAM REPETITION MARK-3	[047C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115C8, 0x0041 };
    uint32_t const ces[9] = { 0x047C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_050)
{
    // 115C8 0062;	
    // (𑗈) SIDDHAM REPETITION MARK-3	[047C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C8, 0x0062 };
    uint32_t const ces[9] = { 0x047C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_051)
{
    // 115C9 0021;	
    // (𑗉) SIDDHAM END OF TEXT MARK	[047D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C9, 0x0021 };
    uint32_t const ces[9] = { 0x047D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_052)
{
    // 115C9 003F;	
    // (𑗉) SIDDHAM END OF TEXT MARK	[047D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C9, 0x003F };
    uint32_t const ces[9] = { 0x047D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_053)
{
    // 115C9 0061;	
    // (𑗉) SIDDHAM END OF TEXT MARK	[047D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C9, 0x0061 };
    uint32_t const ces[9] = { 0x047D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_054)
{
    // 115C9 0041;	
    // (𑗉) SIDDHAM END OF TEXT MARK	[047D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115C9, 0x0041 };
    uint32_t const ces[9] = { 0x047D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_055)
{
    // 115C9 0062;	
    // (𑗉) SIDDHAM END OF TEXT MARK	[047D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115C9, 0x0062 };
    uint32_t const ces[9] = { 0x047D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_056)
{
    // 115CA 0021;	
    // (𑗊) SIDDHAM SECTION MARK WITH TRIDENT AND U-SHAPED ORNAMENTS	[047E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CA, 0x0021 };
    uint32_t const ces[9] = { 0x047E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_057)
{
    // 115CA 003F;	
    // (𑗊) SIDDHAM SECTION MARK WITH TRIDENT AND U-SHAPED ORNAMENTS	[047E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CA, 0x003F };
    uint32_t const ces[9] = { 0x047E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_058)
{
    // 115CA 0061;	
    // (𑗊) SIDDHAM SECTION MARK WITH TRIDENT AND U-SHAPED ORNAMENTS	[047E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CA, 0x0061 };
    uint32_t const ces[9] = { 0x047E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_059)
{
    // 115CA 0041;	
    // (𑗊) SIDDHAM SECTION MARK WITH TRIDENT AND U-SHAPED ORNAMENTS	[047E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115CA, 0x0041 };
    uint32_t const ces[9] = { 0x047E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_060)
{
    // 115CA 0062;	
    // (𑗊) SIDDHAM SECTION MARK WITH TRIDENT AND U-SHAPED ORNAMENTS	[047E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CA, 0x0062 };
    uint32_t const ces[9] = { 0x047E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_061)
{
    // 115CB 0021;	
    // (𑗋) SIDDHAM SECTION MARK WITH TRIDENT AND DOTTED CRESCENTS	[047F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CB, 0x0021 };
    uint32_t const ces[9] = { 0x047F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_062)
{
    // 115CB 003F;	
    // (𑗋) SIDDHAM SECTION MARK WITH TRIDENT AND DOTTED CRESCENTS	[047F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CB, 0x003F };
    uint32_t const ces[9] = { 0x047F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_063)
{
    // 115CB 0061;	
    // (𑗋) SIDDHAM SECTION MARK WITH TRIDENT AND DOTTED CRESCENTS	[047F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CB, 0x0061 };
    uint32_t const ces[9] = { 0x047F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_064)
{
    // 115CB 0041;	
    // (𑗋) SIDDHAM SECTION MARK WITH TRIDENT AND DOTTED CRESCENTS	[047F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115CB, 0x0041 };
    uint32_t const ces[9] = { 0x047F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_065)
{
    // 115CB 0062;	
    // (𑗋) SIDDHAM SECTION MARK WITH TRIDENT AND DOTTED CRESCENTS	[047F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CB, 0x0062 };
    uint32_t const ces[9] = { 0x047F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_066)
{
    // 115CC 0021;	
    // (𑗌) SIDDHAM SECTION MARK WITH RAYS AND DOTTED CRESCENTS	[0480 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CC, 0x0021 };
    uint32_t const ces[9] = { 0x0480, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_067)
{
    // 115CC 003F;	
    // (𑗌) SIDDHAM SECTION MARK WITH RAYS AND DOTTED CRESCENTS	[0480 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CC, 0x003F };
    uint32_t const ces[9] = { 0x0480, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_068)
{
    // 115CC 0061;	
    // (𑗌) SIDDHAM SECTION MARK WITH RAYS AND DOTTED CRESCENTS	[0480 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CC, 0x0061 };
    uint32_t const ces[9] = { 0x0480, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_069)
{
    // 115CC 0041;	
    // (𑗌) SIDDHAM SECTION MARK WITH RAYS AND DOTTED CRESCENTS	[0480 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115CC, 0x0041 };
    uint32_t const ces[9] = { 0x0480, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_070)
{
    // 115CC 0062;	
    // (𑗌) SIDDHAM SECTION MARK WITH RAYS AND DOTTED CRESCENTS	[0480 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CC, 0x0062 };
    uint32_t const ces[9] = { 0x0480, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_071)
{
    // 115CD 0021;	
    // (𑗍) SIDDHAM SECTION MARK WITH RAYS AND DOTTED DOUBLE CRESCENTS	[0481 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CD, 0x0021 };
    uint32_t const ces[9] = { 0x0481, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_072)
{
    // 115CD 003F;	
    // (𑗍) SIDDHAM SECTION MARK WITH RAYS AND DOTTED DOUBLE CRESCENTS	[0481 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CD, 0x003F };
    uint32_t const ces[9] = { 0x0481, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_073)
{
    // 115CD 0061;	
    // (𑗍) SIDDHAM SECTION MARK WITH RAYS AND DOTTED DOUBLE CRESCENTS	[0481 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CD, 0x0061 };
    uint32_t const ces[9] = { 0x0481, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_074)
{
    // 115CD 0041;	
    // (𑗍) SIDDHAM SECTION MARK WITH RAYS AND DOTTED DOUBLE CRESCENTS	[0481 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115CD, 0x0041 };
    uint32_t const ces[9] = { 0x0481, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_075)
{
    // 115CD 0062;	
    // (𑗍) SIDDHAM SECTION MARK WITH RAYS AND DOTTED DOUBLE CRESCENTS	[0481 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CD, 0x0062 };
    uint32_t const ces[9] = { 0x0481, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_076)
{
    // 115CE 0021;	
    // (𑗎) SIDDHAM SECTION MARK WITH RAYS AND DOTTED TRIPLE CRESCENTS	[0482 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CE, 0x0021 };
    uint32_t const ces[9] = { 0x0482, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_077)
{
    // 115CE 003F;	
    // (𑗎) SIDDHAM SECTION MARK WITH RAYS AND DOTTED TRIPLE CRESCENTS	[0482 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CE, 0x003F };
    uint32_t const ces[9] = { 0x0482, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_078)
{
    // 115CE 0061;	
    // (𑗎) SIDDHAM SECTION MARK WITH RAYS AND DOTTED TRIPLE CRESCENTS	[0482 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CE, 0x0061 };
    uint32_t const ces[9] = { 0x0482, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_079)
{
    // 115CE 0041;	
    // (𑗎) SIDDHAM SECTION MARK WITH RAYS AND DOTTED TRIPLE CRESCENTS	[0482 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115CE, 0x0041 };
    uint32_t const ces[9] = { 0x0482, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_080)
{
    // 115CE 0062;	
    // (𑗎) SIDDHAM SECTION MARK WITH RAYS AND DOTTED TRIPLE CRESCENTS	[0482 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CE, 0x0062 };
    uint32_t const ces[9] = { 0x0482, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_081)
{
    // 115CF 0021;	
    // (𑗏) SIDDHAM SECTION MARK DOUBLE RING	[0483 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CF, 0x0021 };
    uint32_t const ces[9] = { 0x0483, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_082)
{
    // 115CF 003F;	
    // (𑗏) SIDDHAM SECTION MARK DOUBLE RING	[0483 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CF, 0x003F };
    uint32_t const ces[9] = { 0x0483, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_083)
{
    // 115CF 0061;	
    // (𑗏) SIDDHAM SECTION MARK DOUBLE RING	[0483 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CF, 0x0061 };
    uint32_t const ces[9] = { 0x0483, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_084)
{
    // 115CF 0041;	
    // (𑗏) SIDDHAM SECTION MARK DOUBLE RING	[0483 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115CF, 0x0041 };
    uint32_t const ces[9] = { 0x0483, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_085)
{
    // 115CF 0062;	
    // (𑗏) SIDDHAM SECTION MARK DOUBLE RING	[0483 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115CF, 0x0062 };
    uint32_t const ces[9] = { 0x0483, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_086)
{
    // 115D0 0021;	
    // (𑗐) SIDDHAM SECTION MARK DOUBLE RING WITH RAYS	[0484 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D0, 0x0021 };
    uint32_t const ces[9] = { 0x0484, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_087)
{
    // 115D0 003F;	
    // (𑗐) SIDDHAM SECTION MARK DOUBLE RING WITH RAYS	[0484 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D0, 0x003F };
    uint32_t const ces[9] = { 0x0484, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_088)
{
    // 115D0 0061;	
    // (𑗐) SIDDHAM SECTION MARK DOUBLE RING WITH RAYS	[0484 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D0, 0x0061 };
    uint32_t const ces[9] = { 0x0484, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_089)
{
    // 115D0 0041;	
    // (𑗐) SIDDHAM SECTION MARK DOUBLE RING WITH RAYS	[0484 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115D0, 0x0041 };
    uint32_t const ces[9] = { 0x0484, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_090)
{
    // 115D0 0062;	
    // (𑗐) SIDDHAM SECTION MARK DOUBLE RING WITH RAYS	[0484 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D0, 0x0062 };
    uint32_t const ces[9] = { 0x0484, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_091)
{
    // 115D1 0021;	
    // (𑗑) SIDDHAM SECTION MARK WITH DOUBLE CRESCENTS	[0485 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D1, 0x0021 };
    uint32_t const ces[9] = { 0x0485, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_092)
{
    // 115D1 003F;	
    // (𑗑) SIDDHAM SECTION MARK WITH DOUBLE CRESCENTS	[0485 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D1, 0x003F };
    uint32_t const ces[9] = { 0x0485, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_093)
{
    // 115D1 0061;	
    // (𑗑) SIDDHAM SECTION MARK WITH DOUBLE CRESCENTS	[0485 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D1, 0x0061 };
    uint32_t const ces[9] = { 0x0485, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_094)
{
    // 115D1 0041;	
    // (𑗑) SIDDHAM SECTION MARK WITH DOUBLE CRESCENTS	[0485 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115D1, 0x0041 };
    uint32_t const ces[9] = { 0x0485, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_095)
{
    // 115D1 0062;	
    // (𑗑) SIDDHAM SECTION MARK WITH DOUBLE CRESCENTS	[0485 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D1, 0x0062 };
    uint32_t const ces[9] = { 0x0485, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_096)
{
    // 115D2 0021;	
    // (𑗒) SIDDHAM SECTION MARK WITH TRIPLE CRESCENTS	[0486 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D2, 0x0021 };
    uint32_t const ces[9] = { 0x0486, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_097)
{
    // 115D2 003F;	
    // (𑗒) SIDDHAM SECTION MARK WITH TRIPLE CRESCENTS	[0486 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D2, 0x003F };
    uint32_t const ces[9] = { 0x0486, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_098)
{
    // 115D2 0061;	
    // (𑗒) SIDDHAM SECTION MARK WITH TRIPLE CRESCENTS	[0486 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D2, 0x0061 };
    uint32_t const ces[9] = { 0x0486, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_099)
{
    // 115D2 0041;	
    // (𑗒) SIDDHAM SECTION MARK WITH TRIPLE CRESCENTS	[0486 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115D2, 0x0041 };
    uint32_t const ces[9] = { 0x0486, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_100)
{
    // 115D2 0062;	
    // (𑗒) SIDDHAM SECTION MARK WITH TRIPLE CRESCENTS	[0486 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D2, 0x0062 };
    uint32_t const ces[9] = { 0x0486, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_101)
{
    // 115D3 0021;	
    // (𑗓) SIDDHAM SECTION MARK WITH QUADRUPLE CRESCENTS	[0487 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D3, 0x0021 };
    uint32_t const ces[9] = { 0x0487, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_102)
{
    // 115D3 003F;	
    // (𑗓) SIDDHAM SECTION MARK WITH QUADRUPLE CRESCENTS	[0487 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D3, 0x003F };
    uint32_t const ces[9] = { 0x0487, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_103)
{
    // 115D3 0061;	
    // (𑗓) SIDDHAM SECTION MARK WITH QUADRUPLE CRESCENTS	[0487 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D3, 0x0061 };
    uint32_t const ces[9] = { 0x0487, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_104)
{
    // 115D3 0041;	
    // (𑗓) SIDDHAM SECTION MARK WITH QUADRUPLE CRESCENTS	[0487 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115D3, 0x0041 };
    uint32_t const ces[9] = { 0x0487, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_105)
{
    // 115D3 0062;	
    // (𑗓) SIDDHAM SECTION MARK WITH QUADRUPLE CRESCENTS	[0487 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D3, 0x0062 };
    uint32_t const ces[9] = { 0x0487, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_106)
{
    // 115D4 0021;	
    // (𑗔) SIDDHAM SECTION MARK WITH SEPTUPLE CRESCENTS	[0488 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D4, 0x0021 };
    uint32_t const ces[9] = { 0x0488, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_107)
{
    // 115D4 003F;	
    // (𑗔) SIDDHAM SECTION MARK WITH SEPTUPLE CRESCENTS	[0488 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D4, 0x003F };
    uint32_t const ces[9] = { 0x0488, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_108)
{
    // 115D4 0061;	
    // (𑗔) SIDDHAM SECTION MARK WITH SEPTUPLE CRESCENTS	[0488 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D4, 0x0061 };
    uint32_t const ces[9] = { 0x0488, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_109)
{
    // 115D4 0041;	
    // (𑗔) SIDDHAM SECTION MARK WITH SEPTUPLE CRESCENTS	[0488 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115D4, 0x0041 };
    uint32_t const ces[9] = { 0x0488, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_110)
{
    // 115D4 0062;	
    // (𑗔) SIDDHAM SECTION MARK WITH SEPTUPLE CRESCENTS	[0488 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D4, 0x0062 };
    uint32_t const ces[9] = { 0x0488, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_111)
{
    // 115D5 0021;	
    // (𑗕) SIDDHAM SECTION MARK WITH CIRCLES AND RAYS	[0489 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D5, 0x0021 };
    uint32_t const ces[9] = { 0x0489, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_112)
{
    // 115D5 003F;	
    // (𑗕) SIDDHAM SECTION MARK WITH CIRCLES AND RAYS	[0489 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D5, 0x003F };
    uint32_t const ces[9] = { 0x0489, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_113)
{
    // 115D5 0061;	
    // (𑗕) SIDDHAM SECTION MARK WITH CIRCLES AND RAYS	[0489 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D5, 0x0061 };
    uint32_t const ces[9] = { 0x0489, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_114)
{
    // 115D5 0041;	
    // (𑗕) SIDDHAM SECTION MARK WITH CIRCLES AND RAYS	[0489 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115D5, 0x0041 };
    uint32_t const ces[9] = { 0x0489, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_115)
{
    // 115D5 0062;	
    // (𑗕) SIDDHAM SECTION MARK WITH CIRCLES AND RAYS	[0489 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D5, 0x0062 };
    uint32_t const ces[9] = { 0x0489, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_116)
{
    // 115D6 0021;	
    // (𑗖) SIDDHAM SECTION MARK WITH CIRCLES AND TWO ENCLOSURES	[048A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D6, 0x0021 };
    uint32_t const ces[9] = { 0x048A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_117)
{
    // 115D6 003F;	
    // (𑗖) SIDDHAM SECTION MARK WITH CIRCLES AND TWO ENCLOSURES	[048A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D6, 0x003F };
    uint32_t const ces[9] = { 0x048A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_118)
{
    // 115D6 0061;	
    // (𑗖) SIDDHAM SECTION MARK WITH CIRCLES AND TWO ENCLOSURES	[048A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D6, 0x0061 };
    uint32_t const ces[9] = { 0x048A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_119)
{
    // 115D6 0041;	
    // (𑗖) SIDDHAM SECTION MARK WITH CIRCLES AND TWO ENCLOSURES	[048A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115D6, 0x0041 };
    uint32_t const ces[9] = { 0x048A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_120)
{
    // 115D6 0062;	
    // (𑗖) SIDDHAM SECTION MARK WITH CIRCLES AND TWO ENCLOSURES	[048A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D6, 0x0062 };
    uint32_t const ces[9] = { 0x048A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_121)
{
    // 115D7 0021;	
    // (𑗗) SIDDHAM SECTION MARK WITH CIRCLES AND FOUR ENCLOSURES	[048B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D7, 0x0021 };
    uint32_t const ces[9] = { 0x048B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_122)
{
    // 115D7 003F;	
    // (𑗗) SIDDHAM SECTION MARK WITH CIRCLES AND FOUR ENCLOSURES	[048B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D7, 0x003F };
    uint32_t const ces[9] = { 0x048B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_123)
{
    // 115D7 0061;	
    // (𑗗) SIDDHAM SECTION MARK WITH CIRCLES AND FOUR ENCLOSURES	[048B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D7, 0x0061 };
    uint32_t const ces[9] = { 0x048B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_124)
{
    // 115D7 0041;	
    // (𑗗) SIDDHAM SECTION MARK WITH CIRCLES AND FOUR ENCLOSURES	[048B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115D7, 0x0041 };
    uint32_t const ces[9] = { 0x048B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_125)
{
    // 115D7 0062;	
    // (𑗗) SIDDHAM SECTION MARK WITH CIRCLES AND FOUR ENCLOSURES	[048B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115D7, 0x0062 };
    uint32_t const ces[9] = { 0x048B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_126)
{
    // 11643 0021;	
    // (𑙃) MODI ABBREVIATION SIGN	[048C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11643, 0x0021 };
    uint32_t const ces[9] = { 0x048C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_127)
{
    // 11643 003F;	
    // (𑙃) MODI ABBREVIATION SIGN	[048C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11643, 0x003F };
    uint32_t const ces[9] = { 0x048C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_128)
{
    // 11643 0061;	
    // (𑙃) MODI ABBREVIATION SIGN	[048C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11643, 0x0061 };
    uint32_t const ces[9] = { 0x048C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_129)
{
    // 11643 0041;	
    // (𑙃) MODI ABBREVIATION SIGN	[048C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11643, 0x0041 };
    uint32_t const ces[9] = { 0x048C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_130)
{
    // 11643 0062;	
    // (𑙃) MODI ABBREVIATION SIGN	[048C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11643, 0x0062 };
    uint32_t const ces[9] = { 0x048C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_131)
{
    // 16B37 0021;	
    // (𖬷) PAHAWH HMONG SIGN VOS THOM	[048D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B37, 0x0021 };
    uint32_t const ces[9] = { 0x048D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_132)
{
    // 16B37 003F;	
    // (𖬷) PAHAWH HMONG SIGN VOS THOM	[048D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B37, 0x003F };
    uint32_t const ces[9] = { 0x048D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_133)
{
    // 16B37 0061;	
    // (𖬷) PAHAWH HMONG SIGN VOS THOM	[048D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B37, 0x0061 };
    uint32_t const ces[9] = { 0x048D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_134)
{
    // 16B37 0041;	
    // (𖬷) PAHAWH HMONG SIGN VOS THOM	[048D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B37, 0x0041 };
    uint32_t const ces[9] = { 0x048D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_135)
{
    // 16B37 0062;	
    // (𖬷) PAHAWH HMONG SIGN VOS THOM	[048D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B37, 0x0062 };
    uint32_t const ces[9] = { 0x048D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_136)
{
    // 16B38 0021;	
    // (𖬸) PAHAWH HMONG SIGN VOS TSHAB CEEB	[048E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B38, 0x0021 };
    uint32_t const ces[9] = { 0x048E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_137)
{
    // 16B38 003F;	
    // (𖬸) PAHAWH HMONG SIGN VOS TSHAB CEEB	[048E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B38, 0x003F };
    uint32_t const ces[9] = { 0x048E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_138)
{
    // 16B38 0061;	
    // (𖬸) PAHAWH HMONG SIGN VOS TSHAB CEEB	[048E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B38, 0x0061 };
    uint32_t const ces[9] = { 0x048E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_139)
{
    // 16B38 0041;	
    // (𖬸) PAHAWH HMONG SIGN VOS TSHAB CEEB	[048E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B38, 0x0041 };
    uint32_t const ces[9] = { 0x048E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_140)
{
    // 16B38 0062;	
    // (𖬸) PAHAWH HMONG SIGN VOS TSHAB CEEB	[048E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B38, 0x0062 };
    uint32_t const ces[9] = { 0x048E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_141)
{
    // 16B39 0021;	
    // (𖬹) PAHAWH HMONG SIGN CIM CHEEM	[048F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B39, 0x0021 };
    uint32_t const ces[9] = { 0x048F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_142)
{
    // 16B39 003F;	
    // (𖬹) PAHAWH HMONG SIGN CIM CHEEM	[048F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B39, 0x003F };
    uint32_t const ces[9] = { 0x048F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_143)
{
    // 16B39 0061;	
    // (𖬹) PAHAWH HMONG SIGN CIM CHEEM	[048F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B39, 0x0061 };
    uint32_t const ces[9] = { 0x048F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_144)
{
    // 16B39 0041;	
    // (𖬹) PAHAWH HMONG SIGN CIM CHEEM	[048F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B39, 0x0041 };
    uint32_t const ces[9] = { 0x048F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_145)
{
    // 16B39 0062;	
    // (𖬹) PAHAWH HMONG SIGN CIM CHEEM	[048F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B39, 0x0062 };
    uint32_t const ces[9] = { 0x048F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_146)
{
    // 16B3A 0021;	
    // (𖬺) PAHAWH HMONG SIGN VOS THIAB	[0490 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B3A, 0x0021 };
    uint32_t const ces[9] = { 0x0490, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_147)
{
    // 16B3A 003F;	
    // (𖬺) PAHAWH HMONG SIGN VOS THIAB	[0490 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B3A, 0x003F };
    uint32_t const ces[9] = { 0x0490, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_148)
{
    // 16B3A 0061;	
    // (𖬺) PAHAWH HMONG SIGN VOS THIAB	[0490 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B3A, 0x0061 };
    uint32_t const ces[9] = { 0x0490, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_149)
{
    // 16B3A 0041;	
    // (𖬺) PAHAWH HMONG SIGN VOS THIAB	[0490 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B3A, 0x0041 };
    uint32_t const ces[9] = { 0x0490, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_150)
{
    // 16B3A 0062;	
    // (𖬺) PAHAWH HMONG SIGN VOS THIAB	[0490 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B3A, 0x0062 };
    uint32_t const ces[9] = { 0x0490, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_151)
{
    // 16B3B 0021;	
    // (𖬻) PAHAWH HMONG SIGN VOS FEEM	[0491 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B3B, 0x0021 };
    uint32_t const ces[9] = { 0x0491, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_152)
{
    // 16B3B 003F;	
    // (𖬻) PAHAWH HMONG SIGN VOS FEEM	[0491 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B3B, 0x003F };
    uint32_t const ces[9] = { 0x0491, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_153)
{
    // 16B3B 0061;	
    // (𖬻) PAHAWH HMONG SIGN VOS FEEM	[0491 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B3B, 0x0061 };
    uint32_t const ces[9] = { 0x0491, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_154)
{
    // 16B3B 0041;	
    // (𖬻) PAHAWH HMONG SIGN VOS FEEM	[0491 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B3B, 0x0041 };
    uint32_t const ces[9] = { 0x0491, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_155)
{
    // 16B3B 0062;	
    // (𖬻) PAHAWH HMONG SIGN VOS FEEM	[0491 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B3B, 0x0062 };
    uint32_t const ces[9] = { 0x0491, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_156)
{
    // 16B44 0021;	
    // (𖭄) PAHAWH HMONG SIGN XAUS	[0492 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B44, 0x0021 };
    uint32_t const ces[9] = { 0x0492, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_157)
{
    // 16B44 003F;	
    // (𖭄) PAHAWH HMONG SIGN XAUS	[0492 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B44, 0x003F };
    uint32_t const ces[9] = { 0x0492, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_158)
{
    // 16B44 0061;	
    // (𖭄) PAHAWH HMONG SIGN XAUS	[0492 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B44, 0x0061 };
    uint32_t const ces[9] = { 0x0492, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_159)
{
    // 16B44 0041;	
    // (𖭄) PAHAWH HMONG SIGN XAUS	[0492 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x16B44, 0x0041 };
    uint32_t const ces[9] = { 0x0492, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_160)
{
    // 16B44 0062;	
    // (𖭄) PAHAWH HMONG SIGN XAUS	[0492 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x16B44, 0x0062 };
    uint32_t const ces[9] = { 0x0492, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_161)
{
    // 1DA87 0021;	
    // (𝪇) SIGNWRITING COMMA	[0493 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA87, 0x0021 };
    uint32_t const ces[9] = { 0x0493, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_162)
{
    // 1DA87 003F;	
    // (𝪇) SIGNWRITING COMMA	[0493 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA87, 0x003F };
    uint32_t const ces[9] = { 0x0493, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_163)
{
    // 1DA87 0061;	
    // (𝪇) SIGNWRITING COMMA	[0493 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA87, 0x0061 };
    uint32_t const ces[9] = { 0x0493, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_164)
{
    // 1DA87 0041;	
    // (𝪇) SIGNWRITING COMMA	[0493 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA87, 0x0041 };
    uint32_t const ces[9] = { 0x0493, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_165)
{
    // 1DA87 0062;	
    // (𝪇) SIGNWRITING COMMA	[0493 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA87, 0x0062 };
    uint32_t const ces[9] = { 0x0493, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_166)
{
    // 1DA88 0021;	
    // (𝪈) SIGNWRITING FULL STOP	[0494 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA88, 0x0021 };
    uint32_t const ces[9] = { 0x0494, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_167)
{
    // 1DA88 003F;	
    // (𝪈) SIGNWRITING FULL STOP	[0494 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA88, 0x003F };
    uint32_t const ces[9] = { 0x0494, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_168)
{
    // 1DA88 0061;	
    // (𝪈) SIGNWRITING FULL STOP	[0494 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA88, 0x0061 };
    uint32_t const ces[9] = { 0x0494, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_169)
{
    // 1DA88 0041;	
    // (𝪈) SIGNWRITING FULL STOP	[0494 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA88, 0x0041 };
    uint32_t const ces[9] = { 0x0494, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_170)
{
    // 1DA88 0062;	
    // (𝪈) SIGNWRITING FULL STOP	[0494 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA88, 0x0062 };
    uint32_t const ces[9] = { 0x0494, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_171)
{
    // 1DA89 0021;	
    // (𝪉) SIGNWRITING SEMICOLON	[0495 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA89, 0x0021 };
    uint32_t const ces[9] = { 0x0495, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_172)
{
    // 1DA89 003F;	
    // (𝪉) SIGNWRITING SEMICOLON	[0495 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA89, 0x003F };
    uint32_t const ces[9] = { 0x0495, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_173)
{
    // 1DA89 0061;	
    // (𝪉) SIGNWRITING SEMICOLON	[0495 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA89, 0x0061 };
    uint32_t const ces[9] = { 0x0495, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_174)
{
    // 1DA89 0041;	
    // (𝪉) SIGNWRITING SEMICOLON	[0495 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA89, 0x0041 };
    uint32_t const ces[9] = { 0x0495, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_175)
{
    // 1DA89 0062;	
    // (𝪉) SIGNWRITING SEMICOLON	[0495 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA89, 0x0062 };
    uint32_t const ces[9] = { 0x0495, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_176)
{
    // 1DA8A 0021;	
    // (𝪊) SIGNWRITING COLON	[0496 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA8A, 0x0021 };
    uint32_t const ces[9] = { 0x0496, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_177)
{
    // 1DA8A 003F;	
    // (𝪊) SIGNWRITING COLON	[0496 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA8A, 0x003F };
    uint32_t const ces[9] = { 0x0496, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_178)
{
    // 1DA8A 0061;	
    // (𝪊) SIGNWRITING COLON	[0496 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA8A, 0x0061 };
    uint32_t const ces[9] = { 0x0496, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_179)
{
    // 1DA8A 0041;	
    // (𝪊) SIGNWRITING COLON	[0496 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA8A, 0x0041 };
    uint32_t const ces[9] = { 0x0496, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_180)
{
    // 1DA8A 0062;	
    // (𝪊) SIGNWRITING COLON	[0496 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA8A, 0x0062 };
    uint32_t const ces[9] = { 0x0496, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_181)
{
    // 1DA8B 0021;	
    // (𝪋) SIGNWRITING PARENTHESIS	[0497 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA8B, 0x0021 };
    uint32_t const ces[9] = { 0x0497, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_182)
{
    // 1DA8B 003F;	
    // (𝪋) SIGNWRITING PARENTHESIS	[0497 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA8B, 0x003F };
    uint32_t const ces[9] = { 0x0497, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_183)
{
    // 1DA8B 0061;	
    // (𝪋) SIGNWRITING PARENTHESIS	[0497 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA8B, 0x0061 };
    uint32_t const ces[9] = { 0x0497, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_184)
{
    // 1DA8B 0041;	
    // (𝪋) SIGNWRITING PARENTHESIS	[0497 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1DA8B, 0x0041 };
    uint32_t const ces[9] = { 0x0497, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_185)
{
    // 1DA8B 0062;	
    // (𝪋) SIGNWRITING PARENTHESIS	[0497 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1DA8B, 0x0062 };
    uint32_t const ces[9] = { 0x0497, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_186)
{
    // 0060 0021;	
    // ('`') GRAVE ACCENT	[0498 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0060, 0x0021 };
    uint32_t const ces[9] = { 0x0498, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_187)
{
    // 1FEF 0021;	
    // ('`') GREEK VARIA	[0498 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FEF, 0x0021 };
    uint32_t const ces[9] = { 0x0498, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_188)
{
    // FF40 0021;	
    // (｀) FULLWIDTH GRAVE ACCENT	[0498 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF40, 0x0021 };
    uint32_t const ces[9] = { 0x0498, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_189)
{
    // 0060 003F;	
    // ('`') GRAVE ACCENT	[0498 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0060, 0x003F };
    uint32_t const ces[9] = { 0x0498, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_190)
{
    // 1FEF 003F;	
    // ('`') GREEK VARIA	[0498 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FEF, 0x003F };
    uint32_t const ces[9] = { 0x0498, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_191)
{
    // FF40 003F;	
    // (｀) FULLWIDTH GRAVE ACCENT	[0498 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF40, 0x003F };
    uint32_t const ces[9] = { 0x0498, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_192)
{
    // 0060 0061;	
    // ('`') GRAVE ACCENT	[0498 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0060, 0x0061 };
    uint32_t const ces[9] = { 0x0498, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_193)
{
    // 1FEF 0061;	
    // ('`') GREEK VARIA	[0498 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FEF, 0x0061 };
    uint32_t const ces[9] = { 0x0498, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_194)
{
    // 0060 0041;	
    // ('`') GRAVE ACCENT	[0498 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0060, 0x0041 };
    uint32_t const ces[9] = { 0x0498, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_195)
{
    // 1FEF 0041;	
    // ('`') GREEK VARIA	[0498 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1FEF, 0x0041 };
    uint32_t const ces[9] = { 0x0498, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_196)
{
    // FF40 0061;	
    // (｀) FULLWIDTH GRAVE ACCENT	[0498 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF40, 0x0061 };
    uint32_t const ces[9] = { 0x0498, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_197)
{
    // FF40 0041;	
    // (｀) FULLWIDTH GRAVE ACCENT	[0498 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF40, 0x0041 };
    uint32_t const ces[9] = { 0x0498, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_198)
{
    // 0060 0062;	
    // ('`') GRAVE ACCENT	[0498 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0060, 0x0062 };
    uint32_t const ces[9] = { 0x0498, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_199)
{
    // 1FEF 0062;	
    // ('`') GREEK VARIA	[0498 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FEF, 0x0062 };
    uint32_t const ces[9] = { 0x0498, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_200)
{
    // FF40 0062;	
    // (｀) FULLWIDTH GRAVE ACCENT	[0498 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF40, 0x0062 };
    uint32_t const ces[9] = { 0x0498, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_201)
{
    // 00B4 0021;	
    // (´) ACUTE ACCENT	[0499 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00B4, 0x0021 };
    uint32_t const ces[9] = { 0x0499, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_202)
{
    // 1FFD 0021;	
    // (´) GREEK OXIA	[0499 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FFD, 0x0021 };
    uint32_t const ces[9] = { 0x0499, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_203)
{
    // 0384 0021;	
    // (΄) GREEK TONOS	[0499 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0384, 0x0021 };
    uint32_t const ces[9] = { 0x0499, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_204)
{
    // 00B4 003F;	
    // (´) ACUTE ACCENT	[0499 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00B4, 0x003F };
    uint32_t const ces[9] = { 0x0499, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_205)
{
    // 1FFD 003F;	
    // (´) GREEK OXIA	[0499 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FFD, 0x003F };
    uint32_t const ces[9] = { 0x0499, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_206)
{
    // 0384 003F;	
    // (΄) GREEK TONOS	[0499 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0384, 0x003F };
    uint32_t const ces[9] = { 0x0499, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_207)
{
    // 00B4 0061;	
    // (´) ACUTE ACCENT	[0499 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00B4, 0x0061 };
    uint32_t const ces[9] = { 0x0499, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_208)
{
    // 1FFD 0061;	
    // (´) GREEK OXIA	[0499 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FFD, 0x0061 };
    uint32_t const ces[9] = { 0x0499, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_209)
{
    // 0384 0061;	
    // (΄) GREEK TONOS	[0499 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0384, 0x0061 };
    uint32_t const ces[9] = { 0x0499, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_210)
{
    // 00B4 0041;	
    // (´) ACUTE ACCENT	[0499 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x00B4, 0x0041 };
    uint32_t const ces[9] = { 0x0499, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_211)
{
    // 1FFD 0041;	
    // (´) GREEK OXIA	[0499 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1FFD, 0x0041 };
    uint32_t const ces[9] = { 0x0499, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_212)
{
    // 0384 0041;	
    // (΄) GREEK TONOS	[0499 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0384, 0x0041 };
    uint32_t const ces[9] = { 0x0499, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_213)
{
    // 00B4 0062;	
    // (´) ACUTE ACCENT	[0499 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00B4, 0x0062 };
    uint32_t const ces[9] = { 0x0499, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_214)
{
    // 1FFD 0062;	
    // (´) GREEK OXIA	[0499 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FFD, 0x0062 };
    uint32_t const ces[9] = { 0x0499, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_215)
{
    // 0384 0062;	
    // (΄) GREEK TONOS	[0499 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0384, 0x0062 };
    uint32_t const ces[9] = { 0x0499, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_216)
{
    // 02DC 0021;	
    // (˜) SMALL TILDE	[049A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02DC, 0x0021 };
    uint32_t const ces[9] = { 0x049A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_217)
{
    // 02DC 003F;	
    // (˜) SMALL TILDE	[049A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02DC, 0x003F };
    uint32_t const ces[9] = { 0x049A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_218)
{
    // 02DC 0061;	
    // (˜) SMALL TILDE	[049A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02DC, 0x0061 };
    uint32_t const ces[9] = { 0x049A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_219)
{
    // 02DC 0041;	
    // (˜) SMALL TILDE	[049A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02DC, 0x0041 };
    uint32_t const ces[9] = { 0x049A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_220)
{
    // 02DC 0062;	
    // (˜) SMALL TILDE	[049A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02DC, 0x0062 };
    uint32_t const ces[9] = { 0x049A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_221)
{
    // 005E 0021;	
    // ('^') CIRCUMFLEX ACCENT	[049B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x005E, 0x0021 };
    uint32_t const ces[9] = { 0x049B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_222)
{
    // FF3E 0021;	
    // (＾) FULLWIDTH CIRCUMFLEX ACCENT	[049B 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF3E, 0x0021 };
    uint32_t const ces[9] = { 0x049B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_223)
{
    // 005E 003F;	
    // ('^') CIRCUMFLEX ACCENT	[049B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x005E, 0x003F };
    uint32_t const ces[9] = { 0x049B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_224)
{
    // FF3E 003F;	
    // (＾) FULLWIDTH CIRCUMFLEX ACCENT	[049B 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF3E, 0x003F };
    uint32_t const ces[9] = { 0x049B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_225)
{
    // 005E 0061;	
    // ('^') CIRCUMFLEX ACCENT	[049B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x005E, 0x0061 };
    uint32_t const ces[9] = { 0x049B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_226)
{
    // 005E 0041;	
    // ('^') CIRCUMFLEX ACCENT	[049B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x005E, 0x0041 };
    uint32_t const ces[9] = { 0x049B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_227)
{
    // FF3E 0061;	
    // (＾) FULLWIDTH CIRCUMFLEX ACCENT	[049B 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF3E, 0x0061 };
    uint32_t const ces[9] = { 0x049B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_228)
{
    // FF3E 0041;	
    // (＾) FULLWIDTH CIRCUMFLEX ACCENT	[049B 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF3E, 0x0041 };
    uint32_t const ces[9] = { 0x049B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_229)
{
    // 005E 0062;	
    // ('^') CIRCUMFLEX ACCENT	[049B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x005E, 0x0062 };
    uint32_t const ces[9] = { 0x049B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_230)
{
    // FF3E 0062;	
    // (＾) FULLWIDTH CIRCUMFLEX ACCENT	[049B 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF3E, 0x0062 };
    uint32_t const ces[9] = { 0x049B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_231)
{
    // 00AF 0021;	
    // (¯) MACRON	[049C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00AF, 0x0021 };
    uint32_t const ces[9] = { 0x049C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_232)
{
    // FFE3 0021;	
    // (￣) FULLWIDTH MACRON	[049C 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE3, 0x0021 };
    uint32_t const ces[9] = { 0x049C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_233)
{
    // 00AF 003F;	
    // (¯) MACRON	[049C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00AF, 0x003F };
    uint32_t const ces[9] = { 0x049C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_234)
{
    // FFE3 003F;	
    // (￣) FULLWIDTH MACRON	[049C 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE3, 0x003F };
    uint32_t const ces[9] = { 0x049C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_235)
{
    // 00AF 0061;	
    // (¯) MACRON	[049C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00AF, 0x0061 };
    uint32_t const ces[9] = { 0x049C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_236)
{
    // 00AF 0041;	
    // (¯) MACRON	[049C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x00AF, 0x0041 };
    uint32_t const ces[9] = { 0x049C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_237)
{
    // FFE3 0061;	
    // (￣) FULLWIDTH MACRON	[049C 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE3, 0x0061 };
    uint32_t const ces[9] = { 0x049C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_238)
{
    // FFE3 0041;	
    // (￣) FULLWIDTH MACRON	[049C 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFFE3, 0x0041 };
    uint32_t const ces[9] = { 0x049C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_239)
{
    // 00AF 0062;	
    // (¯) MACRON	[049C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00AF, 0x0062 };
    uint32_t const ces[9] = { 0x049C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_240)
{
    // FFE3 0062;	
    // (￣) FULLWIDTH MACRON	[049C 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFFE3, 0x0062 };
    uint32_t const ces[9] = { 0x049C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_241)
{
    // 02D8 0021;	
    // (˘) BREVE	[049D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D8, 0x0021 };
    uint32_t const ces[9] = { 0x049D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_242)
{
    // 02D8 003F;	
    // (˘) BREVE	[049D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D8, 0x003F };
    uint32_t const ces[9] = { 0x049D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_243)
{
    // 02D8 0061;	
    // (˘) BREVE	[049D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D8, 0x0061 };
    uint32_t const ces[9] = { 0x049D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_244)
{
    // 02D8 0041;	
    // (˘) BREVE	[049D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02D8, 0x0041 };
    uint32_t const ces[9] = { 0x049D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_245)
{
    // 02D8 0062;	
    // (˘) BREVE	[049D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D8, 0x0062 };
    uint32_t const ces[9] = { 0x049D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_246)
{
    // 02D9 0021;	
    // (˙) DOT ABOVE	[049E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D9, 0x0021 };
    uint32_t const ces[9] = { 0x049E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_247)
{
    // 02D9 003F;	
    // (˙) DOT ABOVE	[049E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D9, 0x003F };
    uint32_t const ces[9] = { 0x049E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_248)
{
    // 02D9 0061;	
    // (˙) DOT ABOVE	[049E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D9, 0x0061 };
    uint32_t const ces[9] = { 0x049E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_249)
{
    // 02D9 0041;	
    // (˙) DOT ABOVE	[049E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02D9, 0x0041 };
    uint32_t const ces[9] = { 0x049E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_250)
{
    // 02D9 0062;	
    // (˙) DOT ABOVE	[049E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D9, 0x0062 };
    uint32_t const ces[9] = { 0x049E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_251)
{
    // 00A8 0301 0334;	
    // (΅) DIAERESIS, COMBINING ACUTE ACCENT	[049F | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00A8, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x049F, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_252)
{
    // 00A8 0334 0301;	
    // (¨̴) DIAERESIS, COMBINING TILDE OVERLAY	[049F | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00A8, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x049F, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_253)
{
    // 00A8 0334 0341;	
    // (¨̴) DIAERESIS, COMBINING TILDE OVERLAY	[049F | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00A8, 0x0334, 0x0341 };
    uint32_t const ces[10] = { 0x049F, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_254)
{
    // 1FEE 0334;	
    // (΅) GREEK DIALYTIKA AND OXIA	[049F | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FEE, 0x0334 };
    uint32_t const ces[10] = { 0x049F, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_255)
{
    // 00A8 0300 0334;	
    // (῭) DIAERESIS, COMBINING GRAVE ACCENT	[049F | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00A8, 0x0300, 0x0334 };
    uint32_t const ces[10] = { 0x049F, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_256)
{
    // 00A8 0334 0300;	
    // (¨̴) DIAERESIS, COMBINING TILDE OVERLAY	[049F | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00A8, 0x0334, 0x0300 };
    uint32_t const ces[10] = { 0x049F, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_257)
{
    // 00A8 0334 0340;	
    // (¨̴) DIAERESIS, COMBINING TILDE OVERLAY	[049F | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00A8, 0x0334, 0x0340 };
    uint32_t const ces[10] = { 0x049F, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_258)
{
    // 1FED 0334;	
    // (῭) GREEK DIALYTIKA AND VARIA	[049F | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FED, 0x0334 };
    uint32_t const ces[10] = { 0x049F, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_259)
{
    // 00A8 0334 0342;	
    // (¨̴) DIAERESIS, COMBINING TILDE OVERLAY	[049F | 0020 004A 002A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00A8, 0x0334, 0x0342 };
    uint32_t const ces[10] = { 0x049F, 0x0000, 0x0020, 0x004A, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_260)
{
    // 00A8 0342 0334;	
    // (῁) DIAERESIS, COMBINING GREEK PERISPOMENI	[049F | 0020 004A 002A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x00A8, 0x0342, 0x0334 };
    uint32_t const ces[10] = { 0x049F, 0x0000, 0x0020, 0x004A, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_261)
{
    // 1FC1 0334;	
    // (῁) GREEK DIALYTIKA AND PERISPOMENI	[049F | 0020 004A 002A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FC1, 0x0334 };
    uint32_t const ces[10] = { 0x049F, 0x0000, 0x0020, 0x004A, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_262)
{
    // 00A8 0021;	
    // (¨) DIAERESIS	[049F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A8, 0x0021 };
    uint32_t const ces[9] = { 0x049F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_263)
{
    // 0385 0021;	
    // (΅) GREEK DIALYTIKA TONOS	[049F 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0385, 0x0021 };
    uint32_t const ces[11] = { 0x049F, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_264)
{
    // 1FEE 0021;	
    // (΅) GREEK DIALYTIKA AND OXIA	[049F 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FEE, 0x0021 };
    uint32_t const ces[11] = { 0x049F, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_265)
{
    // 1FED 0021;	
    // (῭) GREEK DIALYTIKA AND VARIA	[049F 0261 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FED, 0x0021 };
    uint32_t const ces[11] = { 0x049F, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_266)
{
    // 1FC1 0021;	
    // (῁) GREEK DIALYTIKA AND PERISPOMENI	[049F 0261 | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FC1, 0x0021 };
    uint32_t const ces[11] = { 0x049F, 0x0261, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_267)
{
    // 00A8 003F;	
    // (¨) DIAERESIS	[049F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A8, 0x003F };
    uint32_t const ces[9] = { 0x049F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_268)
{
    // 0385 003F;	
    // (΅) GREEK DIALYTIKA TONOS	[049F 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0385, 0x003F };
    uint32_t const ces[11] = { 0x049F, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_269)
{
    // 1FEE 003F;	
    // (΅) GREEK DIALYTIKA AND OXIA	[049F 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FEE, 0x003F };
    uint32_t const ces[11] = { 0x049F, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_270)
{
    // 1FED 003F;	
    // (῭) GREEK DIALYTIKA AND VARIA	[049F 0267 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FED, 0x003F };
    uint32_t const ces[11] = { 0x049F, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_271)
{
    // 1FC1 003F;	
    // (῁) GREEK DIALYTIKA AND PERISPOMENI	[049F 0267 | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FC1, 0x003F };
    uint32_t const ces[11] = { 0x049F, 0x0267, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_272)
{
    // 00A8 0061;	
    // (¨) DIAERESIS	[049F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A8, 0x0061 };
    uint32_t const ces[9] = { 0x049F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_273)
{
    // 00A8 0041;	
    // (¨) DIAERESIS	[049F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x00A8, 0x0041 };
    uint32_t const ces[9] = { 0x049F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_274)
{
    // 0385 0061;	
    // (΅) GREEK DIALYTIKA TONOS	[049F 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0385, 0x0061 };
    uint32_t const ces[11] = { 0x049F, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_275)
{
    // 1FEE 0061;	
    // (΅) GREEK DIALYTIKA AND OXIA	[049F 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FEE, 0x0061 };
    uint32_t const ces[11] = { 0x049F, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_276)
{
    // 0385 0041;	
    // (΅) GREEK DIALYTIKA TONOS	[049F 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x0385, 0x0041 };
    uint32_t const ces[11] = { 0x049F, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_277)
{
    // 1FEE 0041;	
    // (΅) GREEK DIALYTIKA AND OXIA	[049F 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FEE, 0x0041 };
    uint32_t const ces[11] = { 0x049F, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_278)
{
    // 1FED 0061;	
    // (῭) GREEK DIALYTIKA AND VARIA	[049F 1CAD | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FED, 0x0061 };
    uint32_t const ces[11] = { 0x049F, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_279)
{
    // 1FED 0041;	
    // (῭) GREEK DIALYTIKA AND VARIA	[049F 1CAD | 0020 0025 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FED, 0x0041 };
    uint32_t const ces[11] = { 0x049F, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_280)
{
    // 1FC1 0061;	
    // (῁) GREEK DIALYTIKA AND PERISPOMENI	[049F 1CAD | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FC1, 0x0061 };
    uint32_t const ces[11] = { 0x049F, 0x1CAD, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_281)
{
    // 1FC1 0041;	
    // (῁) GREEK DIALYTIKA AND PERISPOMENI	[049F 1CAD | 0020 002A 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FC1, 0x0041 };
    uint32_t const ces[11] = { 0x049F, 0x1CAD, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_282)
{
    // 00A8 0062;	
    // (¨) DIAERESIS	[049F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00A8, 0x0062 };
    uint32_t const ces[9] = { 0x049F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_283)
{
    // 0385 0062;	
    // (΅) GREEK DIALYTIKA TONOS	[049F 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x0385, 0x0062 };
    uint32_t const ces[11] = { 0x049F, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_284)
{
    // 1FEE 0062;	
    // (΅) GREEK DIALYTIKA AND OXIA	[049F 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FEE, 0x0062 };
    uint32_t const ces[11] = { 0x049F, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_285)
{
    // 1FED 0062;	
    // (῭) GREEK DIALYTIKA AND VARIA	[049F 1CC6 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FED, 0x0062 };
    uint32_t const ces[11] = { 0x049F, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_286)
{
    // 1FC1 0062;	
    // (῁) GREEK DIALYTIKA AND PERISPOMENI	[049F 1CC6 | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FC1, 0x0062 };
    uint32_t const ces[11] = { 0x049F, 0x1CC6, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_287)
{
    // 02DA 0021;	
    // (˚) RING ABOVE	[04A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02DA, 0x0021 };
    uint32_t const ces[9] = { 0x04A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_288)
{
    // 02DA 003F;	
    // (˚) RING ABOVE	[04A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02DA, 0x003F };
    uint32_t const ces[9] = { 0x04A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_289)
{
    // 02DA 0061;	
    // (˚) RING ABOVE	[04A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02DA, 0x0061 };
    uint32_t const ces[9] = { 0x04A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_290)
{
    // 02DA 0041;	
    // (˚) RING ABOVE	[04A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02DA, 0x0041 };
    uint32_t const ces[9] = { 0x04A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_291)
{
    // 02DA 0062;	
    // (˚) RING ABOVE	[04A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02DA, 0x0062 };
    uint32_t const ces[9] = { 0x04A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_292)
{
    // 02DD 0021;	
    // (˝) DOUBLE ACUTE ACCENT	[04A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02DD, 0x0021 };
    uint32_t const ces[9] = { 0x04A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_293)
{
    // 02DD 003F;	
    // (˝) DOUBLE ACUTE ACCENT	[04A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02DD, 0x003F };
    uint32_t const ces[9] = { 0x04A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_294)
{
    // 02DD 0061;	
    // (˝) DOUBLE ACUTE ACCENT	[04A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02DD, 0x0061 };
    uint32_t const ces[9] = { 0x04A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_295)
{
    // 02DD 0041;	
    // (˝) DOUBLE ACUTE ACCENT	[04A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02DD, 0x0041 };
    uint32_t const ces[9] = { 0x04A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_296)
{
    // 02DD 0062;	
    // (˝) DOUBLE ACUTE ACCENT	[04A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02DD, 0x0062 };
    uint32_t const ces[9] = { 0x04A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_297)
{
    // 00B8 0021;	
    // (¸) CEDILLA	[04A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00B8, 0x0021 };
    uint32_t const ces[9] = { 0x04A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_298)
{
    // 00B8 003F;	
    // (¸) CEDILLA	[04A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00B8, 0x003F };
    uint32_t const ces[9] = { 0x04A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_299)
{
    // 00B8 0061;	
    // (¸) CEDILLA	[04A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00B8, 0x0061 };
    uint32_t const ces[9] = { 0x04A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_300)
{
    // 00B8 0041;	
    // (¸) CEDILLA	[04A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x00B8, 0x0041 };
    uint32_t const ces[9] = { 0x04A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_301)
{
    // 00B8 0062;	
    // (¸) CEDILLA	[04A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x00B8, 0x0062 };
    uint32_t const ces[9] = { 0x04A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_302)
{
    // 02DB 0021;	
    // (˛) OGONEK	[04A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02DB, 0x0021 };
    uint32_t const ces[9] = { 0x04A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_303)
{
    // 02DB 003F;	
    // (˛) OGONEK	[04A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02DB, 0x003F };
    uint32_t const ces[9] = { 0x04A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_304)
{
    // 02DB 0061;	
    // (˛) OGONEK	[04A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02DB, 0x0061 };
    uint32_t const ces[9] = { 0x04A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_305)
{
    // 02DB 0041;	
    // (˛) OGONEK	[04A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02DB, 0x0041 };
    uint32_t const ces[9] = { 0x04A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_306)
{
    // 02DB 0062;	
    // (˛) OGONEK	[04A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02DB, 0x0062 };
    uint32_t const ces[9] = { 0x04A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_307)
{
    // 1FBF 0301 0334;	
    // (῎) GREEK PSILI, COMBINING ACUTE ACCENT	[04A4 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FBF, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x04A4, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_308)
{
    // 1FBF 0334 0301;	
    // (᾿̴) GREEK PSILI, COMBINING TILDE OVERLAY	[04A4 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FBF, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x04A4, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_309)
{
    // 1FBF 0341 0334;	
    // (῎) GREEK PSILI, COMBINING ACUTE TONE MARK	[04A4 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FBF, 0x0341, 0x0334 };
    uint32_t const ces[10] = { 0x04A4, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_310)
{
    // 1FCE 0334;	
    // (῎) GREEK PSILI AND OXIA	[04A4 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FCE, 0x0334 };
    uint32_t const ces[10] = { 0x04A4, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_311)
{
    // 1FBF 0300 0334;	
    // (῍) GREEK PSILI, COMBINING GRAVE ACCENT	[04A4 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FBF, 0x0300, 0x0334 };
    uint32_t const ces[10] = { 0x04A4, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_312)
{
    // 1FBF 0334 0300;	
    // (᾿̴) GREEK PSILI, COMBINING TILDE OVERLAY	[04A4 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FBF, 0x0334, 0x0300 };
    uint32_t const ces[10] = { 0x04A4, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_313)
{
    // 1FBF 0340 0334;	
    // (῍) GREEK PSILI, COMBINING GRAVE TONE MARK	[04A4 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FBF, 0x0340, 0x0334 };
    uint32_t const ces[10] = { 0x04A4, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_314)
{
    // 1FCD 0334;	
    // (῍) GREEK PSILI AND VARIA	[04A4 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FCD, 0x0334 };
    uint32_t const ces[10] = { 0x04A4, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_315)
{
    // 1FBF 0334 0342;	
    // (᾿̴) GREEK PSILI, COMBINING TILDE OVERLAY	[04A4 | 0020 004A 002A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FBF, 0x0334, 0x0342 };
    uint32_t const ces[10] = { 0x04A4, 0x0000, 0x0020, 0x004A, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_316)
{
    // 1FBF 0342 0334;	
    // (῏) GREEK PSILI, COMBINING GREEK PERISPOMENI	[04A4 | 0020 004A 002A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FBF, 0x0342, 0x0334 };
    uint32_t const ces[10] = { 0x04A4, 0x0000, 0x0020, 0x004A, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_317)
{
    // 1FCF 0334;	
    // (῏) GREEK PSILI AND PERISPOMENI	[04A4 | 0020 004A 002A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FCF, 0x0334 };
    uint32_t const ces[10] = { 0x04A4, 0x0000, 0x0020, 0x004A, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_318)
{
    // 1FBD 0021;	
    // (᾽) GREEK KORONIS	[04A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FBD, 0x0021 };
    uint32_t const ces[9] = { 0x04A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_319)
{
    // 1FBF 0021;	
    // (᾿) GREEK PSILI	[04A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FBF, 0x0021 };
    uint32_t const ces[9] = { 0x04A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_320)
{
    // 1FCE 0021;	
    // (῎) GREEK PSILI AND OXIA	[04A4 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FCE, 0x0021 };
    uint32_t const ces[11] = { 0x04A4, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_321)
{
    // 1FCD 0021;	
    // (῍) GREEK PSILI AND VARIA	[04A4 0261 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FCD, 0x0021 };
    uint32_t const ces[11] = { 0x04A4, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_322)
{
    // 1FCF 0021;	
    // (῏) GREEK PSILI AND PERISPOMENI	[04A4 0261 | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FCF, 0x0021 };
    uint32_t const ces[11] = { 0x04A4, 0x0261, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_323)
{
    // 1FBD 003F;	
    // (᾽) GREEK KORONIS	[04A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FBD, 0x003F };
    uint32_t const ces[9] = { 0x04A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_324)
{
    // 1FBF 003F;	
    // (᾿) GREEK PSILI	[04A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FBF, 0x003F };
    uint32_t const ces[9] = { 0x04A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_325)
{
    // 1FCE 003F;	
    // (῎) GREEK PSILI AND OXIA	[04A4 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FCE, 0x003F };
    uint32_t const ces[11] = { 0x04A4, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_326)
{
    // 1FCD 003F;	
    // (῍) GREEK PSILI AND VARIA	[04A4 0267 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FCD, 0x003F };
    uint32_t const ces[11] = { 0x04A4, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_327)
{
    // 1FCF 003F;	
    // (῏) GREEK PSILI AND PERISPOMENI	[04A4 0267 | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FCF, 0x003F };
    uint32_t const ces[11] = { 0x04A4, 0x0267, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_328)
{
    // 1FBD 0061;	
    // (᾽) GREEK KORONIS	[04A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FBD, 0x0061 };
    uint32_t const ces[9] = { 0x04A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_329)
{
    // 1FBF 0061;	
    // (᾿) GREEK PSILI	[04A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FBF, 0x0061 };
    uint32_t const ces[9] = { 0x04A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_330)
{
    // 1FBD 0041;	
    // (᾽) GREEK KORONIS	[04A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1FBD, 0x0041 };
    uint32_t const ces[9] = { 0x04A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_331)
{
    // 1FBF 0041;	
    // (᾿) GREEK PSILI	[04A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1FBF, 0x0041 };
    uint32_t const ces[9] = { 0x04A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_332)
{
    // 1FCE 0061;	
    // (῎) GREEK PSILI AND OXIA	[04A4 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FCE, 0x0061 };
    uint32_t const ces[11] = { 0x04A4, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_333)
{
    // 1FCE 0041;	
    // (῎) GREEK PSILI AND OXIA	[04A4 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FCE, 0x0041 };
    uint32_t const ces[11] = { 0x04A4, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_334)
{
    // 1FCD 0061;	
    // (῍) GREEK PSILI AND VARIA	[04A4 1CAD | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FCD, 0x0061 };
    uint32_t const ces[11] = { 0x04A4, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_335)
{
    // 1FCD 0041;	
    // (῍) GREEK PSILI AND VARIA	[04A4 1CAD | 0020 0025 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FCD, 0x0041 };
    uint32_t const ces[11] = { 0x04A4, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_336)
{
    // 1FCF 0061;	
    // (῏) GREEK PSILI AND PERISPOMENI	[04A4 1CAD | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FCF, 0x0061 };
    uint32_t const ces[11] = { 0x04A4, 0x1CAD, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_337)
{
    // 1FCF 0041;	
    // (῏) GREEK PSILI AND PERISPOMENI	[04A4 1CAD | 0020 002A 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FCF, 0x0041 };
    uint32_t const ces[11] = { 0x04A4, 0x1CAD, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_338)
{
    // 1FBD 0062;	
    // (᾽) GREEK KORONIS	[04A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FBD, 0x0062 };
    uint32_t const ces[9] = { 0x04A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_339)
{
    // 1FBF 0062;	
    // (᾿) GREEK PSILI	[04A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FBF, 0x0062 };
    uint32_t const ces[9] = { 0x04A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_340)
{
    // 1FCE 0062;	
    // (῎) GREEK PSILI AND OXIA	[04A4 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FCE, 0x0062 };
    uint32_t const ces[11] = { 0x04A4, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_341)
{
    // 1FCD 0062;	
    // (῍) GREEK PSILI AND VARIA	[04A4 1CC6 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FCD, 0x0062 };
    uint32_t const ces[11] = { 0x04A4, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_342)
{
    // 1FCF 0062;	
    // (῏) GREEK PSILI AND PERISPOMENI	[04A4 1CC6 | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FCF, 0x0062 };
    uint32_t const ces[11] = { 0x04A4, 0x1CC6, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_343)
{
    // 1FDE 0334;	
    // (῞) GREEK DASIA AND OXIA	[04A5 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FDE, 0x0334 };
    uint32_t const ces[10] = { 0x04A5, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_344)
{
    // 1FFE 0301 0334;	
    // (῞) GREEK DASIA, COMBINING ACUTE ACCENT	[04A5 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FFE, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x04A5, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_345)
{
    // 1FFE 0334 0301;	
    // (῾̴) GREEK DASIA, COMBINING TILDE OVERLAY	[04A5 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FFE, 0x0334, 0x0301 };
    uint32_t const ces[10] = { 0x04A5, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_346)
{
    // 1FFE 0334 0341;	
    // (῾̴) GREEK DASIA, COMBINING TILDE OVERLAY	[04A5 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FFE, 0x0334, 0x0341 };
    uint32_t const ces[10] = { 0x04A5, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_347)
{
    // 1FDD 0334;	
    // (῝) GREEK DASIA AND VARIA	[04A5 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FDD, 0x0334 };
    uint32_t const ces[10] = { 0x04A5, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_348)
{
    // 1FFE 0300 0334;	
    // (῝) GREEK DASIA, COMBINING GRAVE ACCENT	[04A5 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FFE, 0x0300, 0x0334 };
    uint32_t const ces[10] = { 0x04A5, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_349)
{
    // 1FFE 0334 0300;	
    // (῾̴) GREEK DASIA, COMBINING TILDE OVERLAY	[04A5 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FFE, 0x0334, 0x0300 };
    uint32_t const ces[10] = { 0x04A5, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_350)
{
    // 1FFE 0334 0340;	
    // (῾̴) GREEK DASIA, COMBINING TILDE OVERLAY	[04A5 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FFE, 0x0334, 0x0340 };
    uint32_t const ces[10] = { 0x04A5, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_351)
{
    // 1FDF 0334;	
    // (῟) GREEK DASIA AND PERISPOMENI	[04A5 | 0020 004A 002A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FDF, 0x0334 };
    uint32_t const ces[10] = { 0x04A5, 0x0000, 0x0020, 0x004A, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_352)
{
    // 1FFE 0334 0342;	
    // (῾̴) GREEK DASIA, COMBINING TILDE OVERLAY	[04A5 | 0020 004A 002A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FFE, 0x0334, 0x0342 };
    uint32_t const ces[10] = { 0x04A5, 0x0000, 0x0020, 0x004A, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_353)
{
    // 1FFE 0342 0334;	
    // (῟) GREEK DASIA, COMBINING GREEK PERISPOMENI	[04A5 | 0020 004A 002A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FFE, 0x0342, 0x0334 };
    uint32_t const ces[10] = { 0x04A5, 0x0000, 0x0020, 0x004A, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_354)
{
    // 1FFE 0021;	
    // (῾) GREEK DASIA	[04A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FFE, 0x0021 };
    uint32_t const ces[9] = { 0x04A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_355)
{
    // 1FDE 0021;	
    // (῞) GREEK DASIA AND OXIA	[04A5 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FDE, 0x0021 };
    uint32_t const ces[11] = { 0x04A5, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_356)
{
    // 1FDD 0021;	
    // (῝) GREEK DASIA AND VARIA	[04A5 0261 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FDD, 0x0021 };
    uint32_t const ces[11] = { 0x04A5, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_357)
{
    // 1FDF 0021;	
    // (῟) GREEK DASIA AND PERISPOMENI	[04A5 0261 | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FDF, 0x0021 };
    uint32_t const ces[11] = { 0x04A5, 0x0261, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_358)
{
    // 1FFE 003F;	
    // (῾) GREEK DASIA	[04A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FFE, 0x003F };
    uint32_t const ces[9] = { 0x04A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_359)
{
    // 1FDE 003F;	
    // (῞) GREEK DASIA AND OXIA	[04A5 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FDE, 0x003F };
    uint32_t const ces[11] = { 0x04A5, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_360)
{
    // 1FDD 003F;	
    // (῝) GREEK DASIA AND VARIA	[04A5 0267 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FDD, 0x003F };
    uint32_t const ces[11] = { 0x04A5, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_361)
{
    // 1FDF 003F;	
    // (῟) GREEK DASIA AND PERISPOMENI	[04A5 0267 | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FDF, 0x003F };
    uint32_t const ces[11] = { 0x04A5, 0x0267, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_362)
{
    // 1FFE 0061;	
    // (῾) GREEK DASIA	[04A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FFE, 0x0061 };
    uint32_t const ces[9] = { 0x04A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_363)
{
    // 1FFE 0041;	
    // (῾) GREEK DASIA	[04A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1FFE, 0x0041 };
    uint32_t const ces[9] = { 0x04A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_364)
{
    // 1FDE 0061;	
    // (῞) GREEK DASIA AND OXIA	[04A5 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FDE, 0x0061 };
    uint32_t const ces[11] = { 0x04A5, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_365)
{
    // 1FDE 0041;	
    // (῞) GREEK DASIA AND OXIA	[04A5 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FDE, 0x0041 };
    uint32_t const ces[11] = { 0x04A5, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_366)
{
    // 1FDD 0061;	
    // (῝) GREEK DASIA AND VARIA	[04A5 1CAD | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FDD, 0x0061 };
    uint32_t const ces[11] = { 0x04A5, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_367)
{
    // 1FDD 0041;	
    // (῝) GREEK DASIA AND VARIA	[04A5 1CAD | 0020 0025 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FDD, 0x0041 };
    uint32_t const ces[11] = { 0x04A5, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_368)
{
    // 1FDF 0061;	
    // (῟) GREEK DASIA AND PERISPOMENI	[04A5 1CAD | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FDF, 0x0061 };
    uint32_t const ces[11] = { 0x04A5, 0x1CAD, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_369)
{
    // 1FDF 0041;	
    // (῟) GREEK DASIA AND PERISPOMENI	[04A5 1CAD | 0020 002A 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FDF, 0x0041 };
    uint32_t const ces[11] = { 0x04A5, 0x1CAD, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_370)
{
    // 1FFE 0062;	
    // (῾) GREEK DASIA	[04A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FFE, 0x0062 };
    uint32_t const ces[9] = { 0x04A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_371)
{
    // 1FDE 0062;	
    // (῞) GREEK DASIA AND OXIA	[04A5 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FDE, 0x0062 };
    uint32_t const ces[11] = { 0x04A5, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_372)
{
    // 1FDD 0062;	
    // (῝) GREEK DASIA AND VARIA	[04A5 1CC6 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FDD, 0x0062 };
    uint32_t const ces[11] = { 0x04A5, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_373)
{
    // 1FDF 0062;	
    // (῟) GREEK DASIA AND PERISPOMENI	[04A5 1CC6 | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FDF, 0x0062 };
    uint32_t const ces[11] = { 0x04A5, 0x1CC6, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_374)
{
    // 1FC0 0021;	
    // (῀) GREEK PERISPOMENI	[04A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FC0, 0x0021 };
    uint32_t const ces[9] = { 0x04A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_375)
{
    // 1FC0 003F;	
    // (῀) GREEK PERISPOMENI	[04A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FC0, 0x003F };
    uint32_t const ces[9] = { 0x04A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_376)
{
    // 1FC0 0061;	
    // (῀) GREEK PERISPOMENI	[04A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FC0, 0x0061 };
    uint32_t const ces[9] = { 0x04A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_377)
{
    // 1FC0 0041;	
    // (῀) GREEK PERISPOMENI	[04A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1FC0, 0x0041 };
    uint32_t const ces[9] = { 0x04A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_378)
{
    // 1FC0 0062;	
    // (῀) GREEK PERISPOMENI	[04A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FC0, 0x0062 };
    uint32_t const ces[9] = { 0x04A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_379)
{
    // 309B 0021;	
    // (゛) KATAKANA-HIRAGANA VOICED SOUND MARK	[04A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x309B, 0x0021 };
    uint32_t const ces[9] = { 0x04A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_380)
{
    // 309B 003F;	
    // (゛) KATAKANA-HIRAGANA VOICED SOUND MARK	[04A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x309B, 0x003F };
    uint32_t const ces[9] = { 0x04A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_381)
{
    // 309B 0061;	
    // (゛) KATAKANA-HIRAGANA VOICED SOUND MARK	[04A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x309B, 0x0061 };
    uint32_t const ces[9] = { 0x04A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_382)
{
    // 309B 0041;	
    // (゛) KATAKANA-HIRAGANA VOICED SOUND MARK	[04A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x309B, 0x0041 };
    uint32_t const ces[9] = { 0x04A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_383)
{
    // 309B 0062;	
    // (゛) KATAKANA-HIRAGANA VOICED SOUND MARK	[04A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x309B, 0x0062 };
    uint32_t const ces[9] = { 0x04A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_384)
{
    // 309C 0021;	
    // (゜) KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[04A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x309C, 0x0021 };
    uint32_t const ces[9] = { 0x04A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_385)
{
    // 309C 003F;	
    // (゜) KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[04A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x309C, 0x003F };
    uint32_t const ces[9] = { 0x04A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_386)
{
    // 309C 0061;	
    // (゜) KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[04A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x309C, 0x0061 };
    uint32_t const ces[9] = { 0x04A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_387)
{
    // 309C 0041;	
    // (゜) KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[04A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x309C, 0x0041 };
    uint32_t const ces[9] = { 0x04A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_388)
{
    // 309C 0062;	
    // (゜) KATAKANA-HIRAGANA SEMI-VOICED SOUND MARK	[04A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x309C, 0x0062 };
    uint32_t const ces[9] = { 0x04A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_389)
{
    // 02B9 0021;	
    // (ʹ) MODIFIER LETTER PRIME	[04A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02B9, 0x0021 };
    uint32_t const ces[9] = { 0x04A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_390)
{
    // 0374 0021;	
    // (ʹ) GREEK NUMERAL SIGN	[04A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0374, 0x0021 };
    uint32_t const ces[9] = { 0x04A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_391)
{
    // 02B9 003F;	
    // (ʹ) MODIFIER LETTER PRIME	[04A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02B9, 0x003F };
    uint32_t const ces[9] = { 0x04A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_392)
{
    // 0374 003F;	
    // (ʹ) GREEK NUMERAL SIGN	[04A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0374, 0x003F };
    uint32_t const ces[9] = { 0x04A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_393)
{
    // 02B9 0061;	
    // (ʹ) MODIFIER LETTER PRIME	[04A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02B9, 0x0061 };
    uint32_t const ces[9] = { 0x04A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_394)
{
    // 0374 0061;	
    // (ʹ) GREEK NUMERAL SIGN	[04A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0374, 0x0061 };
    uint32_t const ces[9] = { 0x04A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_395)
{
    // 02B9 0041;	
    // (ʹ) MODIFIER LETTER PRIME	[04A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02B9, 0x0041 };
    uint32_t const ces[9] = { 0x04A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_396)
{
    // 0374 0041;	
    // (ʹ) GREEK NUMERAL SIGN	[04A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0374, 0x0041 };
    uint32_t const ces[9] = { 0x04A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_397)
{
    // 02B9 0062;	
    // (ʹ) MODIFIER LETTER PRIME	[04A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02B9, 0x0062 };
    uint32_t const ces[9] = { 0x04A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_398)
{
    // 0374 0062;	
    // (ʹ) GREEK NUMERAL SIGN	[04A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0374, 0x0062 };
    uint32_t const ces[9] = { 0x04A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_399)
{
    // 0375 0021;	
    // (͵) GREEK LOWER NUMERAL SIGN	[04AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0375, 0x0021 };
    uint32_t const ces[9] = { 0x04AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_400)
{
    // 0375 003F;	
    // (͵) GREEK LOWER NUMERAL SIGN	[04AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0375, 0x003F };
    uint32_t const ces[9] = { 0x04AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_401)
{
    // 0375 0061;	
    // (͵) GREEK LOWER NUMERAL SIGN	[04AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0375, 0x0061 };
    uint32_t const ces[9] = { 0x04AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_402)
{
    // 0375 0041;	
    // (͵) GREEK LOWER NUMERAL SIGN	[04AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0375, 0x0041 };
    uint32_t const ces[9] = { 0x04AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_403)
{
    // 0375 0062;	
    // (͵) GREEK LOWER NUMERAL SIGN	[04AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0375, 0x0062 };
    uint32_t const ces[9] = { 0x04AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_404)
{
    // 02BA 0021;	
    // (ʺ) MODIFIER LETTER DOUBLE PRIME	[04AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02BA, 0x0021 };
    uint32_t const ces[9] = { 0x04AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_405)
{
    // 02BA 003F;	
    // (ʺ) MODIFIER LETTER DOUBLE PRIME	[04AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02BA, 0x003F };
    uint32_t const ces[9] = { 0x04AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_406)
{
    // 02BA 0061;	
    // (ʺ) MODIFIER LETTER DOUBLE PRIME	[04AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02BA, 0x0061 };
    uint32_t const ces[9] = { 0x04AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_407)
{
    // 02BA 0041;	
    // (ʺ) MODIFIER LETTER DOUBLE PRIME	[04AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02BA, 0x0041 };
    uint32_t const ces[9] = { 0x04AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_408)
{
    // 02BA 0062;	
    // (ʺ) MODIFIER LETTER DOUBLE PRIME	[04AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02BA, 0x0062 };
    uint32_t const ces[9] = { 0x04AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_409)
{
    // 02C2 0021;	
    // (˂) MODIFIER LETTER LEFT ARROWHEAD	[04AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C2, 0x0021 };
    uint32_t const ces[9] = { 0x04AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_410)
{
    // 02C2 003F;	
    // (˂) MODIFIER LETTER LEFT ARROWHEAD	[04AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C2, 0x003F };
    uint32_t const ces[9] = { 0x04AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_411)
{
    // 02C2 0061;	
    // (˂) MODIFIER LETTER LEFT ARROWHEAD	[04AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C2, 0x0061 };
    uint32_t const ces[9] = { 0x04AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_412)
{
    // 02C2 0041;	
    // (˂) MODIFIER LETTER LEFT ARROWHEAD	[04AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02C2, 0x0041 };
    uint32_t const ces[9] = { 0x04AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_413)
{
    // 02C2 0062;	
    // (˂) MODIFIER LETTER LEFT ARROWHEAD	[04AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C2, 0x0062 };
    uint32_t const ces[9] = { 0x04AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_414)
{
    // 02C3 0021;	
    // (˃) MODIFIER LETTER RIGHT ARROWHEAD	[04AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C3, 0x0021 };
    uint32_t const ces[9] = { 0x04AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_415)
{
    // 02C3 003F;	
    // (˃) MODIFIER LETTER RIGHT ARROWHEAD	[04AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C3, 0x003F };
    uint32_t const ces[9] = { 0x04AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_416)
{
    // 02C3 0061;	
    // (˃) MODIFIER LETTER RIGHT ARROWHEAD	[04AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C3, 0x0061 };
    uint32_t const ces[9] = { 0x04AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_417)
{
    // 02C3 0041;	
    // (˃) MODIFIER LETTER RIGHT ARROWHEAD	[04AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02C3, 0x0041 };
    uint32_t const ces[9] = { 0x04AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_418)
{
    // 02C3 0062;	
    // (˃) MODIFIER LETTER RIGHT ARROWHEAD	[04AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C3, 0x0062 };
    uint32_t const ces[9] = { 0x04AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_419)
{
    // 02C4 0021;	
    // (˄) MODIFIER LETTER UP ARROWHEAD	[04AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C4, 0x0021 };
    uint32_t const ces[9] = { 0x04AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_420)
{
    // 02C4 003F;	
    // (˄) MODIFIER LETTER UP ARROWHEAD	[04AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C4, 0x003F };
    uint32_t const ces[9] = { 0x04AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_421)
{
    // 02C4 0061;	
    // (˄) MODIFIER LETTER UP ARROWHEAD	[04AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C4, 0x0061 };
    uint32_t const ces[9] = { 0x04AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_422)
{
    // 02C4 0041;	
    // (˄) MODIFIER LETTER UP ARROWHEAD	[04AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02C4, 0x0041 };
    uint32_t const ces[9] = { 0x04AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_423)
{
    // 02C4 0062;	
    // (˄) MODIFIER LETTER UP ARROWHEAD	[04AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C4, 0x0062 };
    uint32_t const ces[9] = { 0x04AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_424)
{
    // 02C5 0021;	
    // (˅) MODIFIER LETTER DOWN ARROWHEAD	[04AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C5, 0x0021 };
    uint32_t const ces[9] = { 0x04AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_425)
{
    // 02C5 003F;	
    // (˅) MODIFIER LETTER DOWN ARROWHEAD	[04AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C5, 0x003F };
    uint32_t const ces[9] = { 0x04AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_426)
{
    // 02C5 0061;	
    // (˅) MODIFIER LETTER DOWN ARROWHEAD	[04AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C5, 0x0061 };
    uint32_t const ces[9] = { 0x04AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_427)
{
    // 02C5 0041;	
    // (˅) MODIFIER LETTER DOWN ARROWHEAD	[04AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02C5, 0x0041 };
    uint32_t const ces[9] = { 0x04AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_428)
{
    // 02C5 0062;	
    // (˅) MODIFIER LETTER DOWN ARROWHEAD	[04AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C5, 0x0062 };
    uint32_t const ces[9] = { 0x04AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_429)
{
    // 02C6 0021;	
    // (ˆ) MODIFIER LETTER CIRCUMFLEX ACCENT	[04B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C6, 0x0021 };
    uint32_t const ces[9] = { 0x04B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_430)
{
    // 02C6 003F;	
    // (ˆ) MODIFIER LETTER CIRCUMFLEX ACCENT	[04B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C6, 0x003F };
    uint32_t const ces[9] = { 0x04B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_431)
{
    // 02C6 0061;	
    // (ˆ) MODIFIER LETTER CIRCUMFLEX ACCENT	[04B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C6, 0x0061 };
    uint32_t const ces[9] = { 0x04B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_432)
{
    // 02C6 0041;	
    // (ˆ) MODIFIER LETTER CIRCUMFLEX ACCENT	[04B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02C6, 0x0041 };
    uint32_t const ces[9] = { 0x04B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_433)
{
    // 02C6 0062;	
    // (ˆ) MODIFIER LETTER CIRCUMFLEX ACCENT	[04B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C6, 0x0062 };
    uint32_t const ces[9] = { 0x04B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_434)
{
    // 02C7 0021;	
    // (ˇ) CARON	[04B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C7, 0x0021 };
    uint32_t const ces[9] = { 0x04B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_435)
{
    // 02C7 003F;	
    // (ˇ) CARON	[04B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C7, 0x003F };
    uint32_t const ces[9] = { 0x04B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_436)
{
    // 02C7 0061;	
    // (ˇ) CARON	[04B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C7, 0x0061 };
    uint32_t const ces[9] = { 0x04B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_437)
{
    // 02C7 0041;	
    // (ˇ) CARON	[04B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02C7, 0x0041 };
    uint32_t const ces[9] = { 0x04B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_438)
{
    // 02C7 0062;	
    // (ˇ) CARON	[04B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C7, 0x0062 };
    uint32_t const ces[9] = { 0x04B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_439)
{
    // 02C8 0021;	
    // (ˈ) MODIFIER LETTER VERTICAL LINE	[04B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C8, 0x0021 };
    uint32_t const ces[9] = { 0x04B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_440)
{
    // 02C8 003F;	
    // (ˈ) MODIFIER LETTER VERTICAL LINE	[04B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C8, 0x003F };
    uint32_t const ces[9] = { 0x04B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_441)
{
    // 02C8 0061;	
    // (ˈ) MODIFIER LETTER VERTICAL LINE	[04B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C8, 0x0061 };
    uint32_t const ces[9] = { 0x04B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_442)
{
    // 02C8 0041;	
    // (ˈ) MODIFIER LETTER VERTICAL LINE	[04B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02C8, 0x0041 };
    uint32_t const ces[9] = { 0x04B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_443)
{
    // 02C8 0062;	
    // (ˈ) MODIFIER LETTER VERTICAL LINE	[04B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C8, 0x0062 };
    uint32_t const ces[9] = { 0x04B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_444)
{
    // 02C9 0021;	
    // (ˉ) MODIFIER LETTER MACRON	[04B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C9, 0x0021 };
    uint32_t const ces[9] = { 0x04B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_445)
{
    // 02C9 003F;	
    // (ˉ) MODIFIER LETTER MACRON	[04B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C9, 0x003F };
    uint32_t const ces[9] = { 0x04B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_446)
{
    // 02C9 0061;	
    // (ˉ) MODIFIER LETTER MACRON	[04B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C9, 0x0061 };
    uint32_t const ces[9] = { 0x04B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_447)
{
    // 02C9 0041;	
    // (ˉ) MODIFIER LETTER MACRON	[04B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02C9, 0x0041 };
    uint32_t const ces[9] = { 0x04B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_448)
{
    // 02C9 0062;	
    // (ˉ) MODIFIER LETTER MACRON	[04B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02C9, 0x0062 };
    uint32_t const ces[9] = { 0x04B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_449)
{
    // 02CA 0021;	
    // (ˊ) MODIFIER LETTER ACUTE ACCENT	[04B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CA, 0x0021 };
    uint32_t const ces[9] = { 0x04B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_450)
{
    // 02CA 003F;	
    // (ˊ) MODIFIER LETTER ACUTE ACCENT	[04B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CA, 0x003F };
    uint32_t const ces[9] = { 0x04B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_451)
{
    // 02CA 0061;	
    // (ˊ) MODIFIER LETTER ACUTE ACCENT	[04B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CA, 0x0061 };
    uint32_t const ces[9] = { 0x04B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_452)
{
    // 02CA 0041;	
    // (ˊ) MODIFIER LETTER ACUTE ACCENT	[04B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02CA, 0x0041 };
    uint32_t const ces[9] = { 0x04B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_453)
{
    // 02CA 0062;	
    // (ˊ) MODIFIER LETTER ACUTE ACCENT	[04B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CA, 0x0062 };
    uint32_t const ces[9] = { 0x04B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_454)
{
    // 02CB 0021;	
    // (ˋ) MODIFIER LETTER GRAVE ACCENT	[04B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CB, 0x0021 };
    uint32_t const ces[9] = { 0x04B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_455)
{
    // 02CB 003F;	
    // (ˋ) MODIFIER LETTER GRAVE ACCENT	[04B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CB, 0x003F };
    uint32_t const ces[9] = { 0x04B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_456)
{
    // 02CB 0061;	
    // (ˋ) MODIFIER LETTER GRAVE ACCENT	[04B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CB, 0x0061 };
    uint32_t const ces[9] = { 0x04B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_457)
{
    // 02CB 0041;	
    // (ˋ) MODIFIER LETTER GRAVE ACCENT	[04B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02CB, 0x0041 };
    uint32_t const ces[9] = { 0x04B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_458)
{
    // 02CB 0062;	
    // (ˋ) MODIFIER LETTER GRAVE ACCENT	[04B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CB, 0x0062 };
    uint32_t const ces[9] = { 0x04B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_459)
{
    // 02CC 0021;	
    // (ˌ) MODIFIER LETTER LOW VERTICAL LINE	[04B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CC, 0x0021 };
    uint32_t const ces[9] = { 0x04B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_460)
{
    // 02CC 003F;	
    // (ˌ) MODIFIER LETTER LOW VERTICAL LINE	[04B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CC, 0x003F };
    uint32_t const ces[9] = { 0x04B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_461)
{
    // 02CC 0061;	
    // (ˌ) MODIFIER LETTER LOW VERTICAL LINE	[04B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CC, 0x0061 };
    uint32_t const ces[9] = { 0x04B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_462)
{
    // 02CC 0041;	
    // (ˌ) MODIFIER LETTER LOW VERTICAL LINE	[04B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02CC, 0x0041 };
    uint32_t const ces[9] = { 0x04B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_463)
{
    // 02CC 0062;	
    // (ˌ) MODIFIER LETTER LOW VERTICAL LINE	[04B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CC, 0x0062 };
    uint32_t const ces[9] = { 0x04B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_464)
{
    // 02CD 0021;	
    // (ˍ) MODIFIER LETTER LOW MACRON	[04B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CD, 0x0021 };
    uint32_t const ces[9] = { 0x04B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_465)
{
    // 02CD 003F;	
    // (ˍ) MODIFIER LETTER LOW MACRON	[04B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CD, 0x003F };
    uint32_t const ces[9] = { 0x04B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_466)
{
    // 02CD 0061;	
    // (ˍ) MODIFIER LETTER LOW MACRON	[04B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CD, 0x0061 };
    uint32_t const ces[9] = { 0x04B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_467)
{
    // 02CD 0041;	
    // (ˍ) MODIFIER LETTER LOW MACRON	[04B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02CD, 0x0041 };
    uint32_t const ces[9] = { 0x04B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_468)
{
    // 02CD 0062;	
    // (ˍ) MODIFIER LETTER LOW MACRON	[04B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CD, 0x0062 };
    uint32_t const ces[9] = { 0x04B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_469)
{
    // 02CE 0021;	
    // (ˎ) MODIFIER LETTER LOW GRAVE ACCENT	[04B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CE, 0x0021 };
    uint32_t const ces[9] = { 0x04B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_470)
{
    // 02CE 003F;	
    // (ˎ) MODIFIER LETTER LOW GRAVE ACCENT	[04B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CE, 0x003F };
    uint32_t const ces[9] = { 0x04B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_471)
{
    // 02CE 0061;	
    // (ˎ) MODIFIER LETTER LOW GRAVE ACCENT	[04B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CE, 0x0061 };
    uint32_t const ces[9] = { 0x04B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_472)
{
    // 02CE 0041;	
    // (ˎ) MODIFIER LETTER LOW GRAVE ACCENT	[04B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02CE, 0x0041 };
    uint32_t const ces[9] = { 0x04B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_473)
{
    // 02CE 0062;	
    // (ˎ) MODIFIER LETTER LOW GRAVE ACCENT	[04B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CE, 0x0062 };
    uint32_t const ces[9] = { 0x04B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_474)
{
    // 02CF 0021;	
    // (ˏ) MODIFIER LETTER LOW ACUTE ACCENT	[04B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CF, 0x0021 };
    uint32_t const ces[9] = { 0x04B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_475)
{
    // 02CF 003F;	
    // (ˏ) MODIFIER LETTER LOW ACUTE ACCENT	[04B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CF, 0x003F };
    uint32_t const ces[9] = { 0x04B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_476)
{
    // 02CF 0061;	
    // (ˏ) MODIFIER LETTER LOW ACUTE ACCENT	[04B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CF, 0x0061 };
    uint32_t const ces[9] = { 0x04B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_477)
{
    // 02CF 0041;	
    // (ˏ) MODIFIER LETTER LOW ACUTE ACCENT	[04B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02CF, 0x0041 };
    uint32_t const ces[9] = { 0x04B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_478)
{
    // 02CF 0062;	
    // (ˏ) MODIFIER LETTER LOW ACUTE ACCENT	[04B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02CF, 0x0062 };
    uint32_t const ces[9] = { 0x04B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_479)
{
    // 02D2 0021;	
    // (˒) MODIFIER LETTER CENTRED RIGHT HALF RING	[04BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D2, 0x0021 };
    uint32_t const ces[9] = { 0x04BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_480)
{
    // 02D2 003F;	
    // (˒) MODIFIER LETTER CENTRED RIGHT HALF RING	[04BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D2, 0x003F };
    uint32_t const ces[9] = { 0x04BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_481)
{
    // 02D2 0061;	
    // (˒) MODIFIER LETTER CENTRED RIGHT HALF RING	[04BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D2, 0x0061 };
    uint32_t const ces[9] = { 0x04BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_482)
{
    // 02D2 0041;	
    // (˒) MODIFIER LETTER CENTRED RIGHT HALF RING	[04BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02D2, 0x0041 };
    uint32_t const ces[9] = { 0x04BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_483)
{
    // 02D2 0062;	
    // (˒) MODIFIER LETTER CENTRED RIGHT HALF RING	[04BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D2, 0x0062 };
    uint32_t const ces[9] = { 0x04BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_484)
{
    // 02D3 0021;	
    // (˓) MODIFIER LETTER CENTRED LEFT HALF RING	[04BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D3, 0x0021 };
    uint32_t const ces[9] = { 0x04BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_485)
{
    // 02D3 003F;	
    // (˓) MODIFIER LETTER CENTRED LEFT HALF RING	[04BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D3, 0x003F };
    uint32_t const ces[9] = { 0x04BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_486)
{
    // 02D3 0061;	
    // (˓) MODIFIER LETTER CENTRED LEFT HALF RING	[04BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D3, 0x0061 };
    uint32_t const ces[9] = { 0x04BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_487)
{
    // 02D3 0041;	
    // (˓) MODIFIER LETTER CENTRED LEFT HALF RING	[04BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02D3, 0x0041 };
    uint32_t const ces[9] = { 0x04BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_488)
{
    // 02D3 0062;	
    // (˓) MODIFIER LETTER CENTRED LEFT HALF RING	[04BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D3, 0x0062 };
    uint32_t const ces[9] = { 0x04BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_489)
{
    // 02D4 0021;	
    // (˔) MODIFIER LETTER UP TACK	[04BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D4, 0x0021 };
    uint32_t const ces[9] = { 0x04BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_490)
{
    // 02D4 003F;	
    // (˔) MODIFIER LETTER UP TACK	[04BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D4, 0x003F };
    uint32_t const ces[9] = { 0x04BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_491)
{
    // 02D4 0061;	
    // (˔) MODIFIER LETTER UP TACK	[04BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D4, 0x0061 };
    uint32_t const ces[9] = { 0x04BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_492)
{
    // 02D4 0041;	
    // (˔) MODIFIER LETTER UP TACK	[04BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02D4, 0x0041 };
    uint32_t const ces[9] = { 0x04BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_493)
{
    // 02D4 0062;	
    // (˔) MODIFIER LETTER UP TACK	[04BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D4, 0x0062 };
    uint32_t const ces[9] = { 0x04BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_494)
{
    // 02D5 0021;	
    // (˕) MODIFIER LETTER DOWN TACK	[04BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D5, 0x0021 };
    uint32_t const ces[9] = { 0x04BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_495)
{
    // 02D5 003F;	
    // (˕) MODIFIER LETTER DOWN TACK	[04BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D5, 0x003F };
    uint32_t const ces[9] = { 0x04BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_496)
{
    // 02D5 0061;	
    // (˕) MODIFIER LETTER DOWN TACK	[04BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D5, 0x0061 };
    uint32_t const ces[9] = { 0x04BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_497)
{
    // 02D5 0041;	
    // (˕) MODIFIER LETTER DOWN TACK	[04BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x02D5, 0x0041 };
    uint32_t const ces[9] = { 0x04BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_498)
{
    // 02D5 0062;	
    // (˕) MODIFIER LETTER DOWN TACK	[04BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D5, 0x0062 };
    uint32_t const ces[9] = { 0x04BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_017_499)
{
    // 02D6 0021;	
    // (˖) MODIFIER LETTER PLUS SIGN	[04BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x02D6, 0x0021 };
    uint32_t const ces[9] = { 0x04BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

