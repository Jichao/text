// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_180_000)
{
    // 11584 0041;	
    // (𑖄) SIDDHAM LETTER U	[2C38 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11584, 0x0041 };
    uint32_t const ces[9] = { 0x2C38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_001)
{
    // 115DB 0061;	
    // (𑗛) SIDDHAM LETTER ALTERNATE U	[2C38 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115DB, 0x0061 };
    uint32_t const ces[11] = { 0x2C38, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_002)
{
    // 115DB 0041;	
    // (𑗛) SIDDHAM LETTER ALTERNATE U	[2C38 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x115DB, 0x0041 };
    uint32_t const ces[11] = { 0x2C38, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_003)
{
    // 11584 0062;	
    // (𑖄) SIDDHAM LETTER U	[2C38 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11584, 0x0062 };
    uint32_t const ces[9] = { 0x2C38, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_004)
{
    // 115DB 0062;	
    // (𑗛) SIDDHAM LETTER ALTERNATE U	[2C38 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115DB, 0x0062 };
    uint32_t const ces[11] = { 0x2C38, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_005)
{
    // 11585 0021;	
    // (𑖅) SIDDHAM LETTER UU	[2C39 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11585, 0x0021 };
    uint32_t const ces[9] = { 0x2C39, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_006)
{
    // 11585 003F;	
    // (𑖅) SIDDHAM LETTER UU	[2C39 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11585, 0x003F };
    uint32_t const ces[9] = { 0x2C39, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_007)
{
    // 11585 0061;	
    // (𑖅) SIDDHAM LETTER UU	[2C39 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11585, 0x0061 };
    uint32_t const ces[9] = { 0x2C39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_008)
{
    // 11585 0041;	
    // (𑖅) SIDDHAM LETTER UU	[2C39 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11585, 0x0041 };
    uint32_t const ces[9] = { 0x2C39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_009)
{
    // 11585 0062;	
    // (𑖅) SIDDHAM LETTER UU	[2C39 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11585, 0x0062 };
    uint32_t const ces[9] = { 0x2C39, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_010)
{
    // 11586 0021;	
    // (𑖆) SIDDHAM LETTER VOCALIC R	[2C3A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11586, 0x0021 };
    uint32_t const ces[9] = { 0x2C3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_011)
{
    // 11586 003F;	
    // (𑖆) SIDDHAM LETTER VOCALIC R	[2C3A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11586, 0x003F };
    uint32_t const ces[9] = { 0x2C3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_012)
{
    // 11586 0061;	
    // (𑖆) SIDDHAM LETTER VOCALIC R	[2C3A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11586, 0x0061 };
    uint32_t const ces[9] = { 0x2C3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_013)
{
    // 11586 0041;	
    // (𑖆) SIDDHAM LETTER VOCALIC R	[2C3A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11586, 0x0041 };
    uint32_t const ces[9] = { 0x2C3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_014)
{
    // 11586 0062;	
    // (𑖆) SIDDHAM LETTER VOCALIC R	[2C3A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11586, 0x0062 };
    uint32_t const ces[9] = { 0x2C3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_015)
{
    // 11587 0021;	
    // (𑖇) SIDDHAM LETTER VOCALIC RR	[2C3B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11587, 0x0021 };
    uint32_t const ces[9] = { 0x2C3B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_016)
{
    // 11587 003F;	
    // (𑖇) SIDDHAM LETTER VOCALIC RR	[2C3B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11587, 0x003F };
    uint32_t const ces[9] = { 0x2C3B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_017)
{
    // 11587 0061;	
    // (𑖇) SIDDHAM LETTER VOCALIC RR	[2C3B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11587, 0x0061 };
    uint32_t const ces[9] = { 0x2C3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_018)
{
    // 11587 0041;	
    // (𑖇) SIDDHAM LETTER VOCALIC RR	[2C3B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11587, 0x0041 };
    uint32_t const ces[9] = { 0x2C3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_019)
{
    // 11587 0062;	
    // (𑖇) SIDDHAM LETTER VOCALIC RR	[2C3B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11587, 0x0062 };
    uint32_t const ces[9] = { 0x2C3B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_020)
{
    // 11588 0021;	
    // (𑖈) SIDDHAM LETTER VOCALIC L	[2C3C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11588, 0x0021 };
    uint32_t const ces[9] = { 0x2C3C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_021)
{
    // 11588 003F;	
    // (𑖈) SIDDHAM LETTER VOCALIC L	[2C3C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11588, 0x003F };
    uint32_t const ces[9] = { 0x2C3C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_022)
{
    // 11588 0061;	
    // (𑖈) SIDDHAM LETTER VOCALIC L	[2C3C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11588, 0x0061 };
    uint32_t const ces[9] = { 0x2C3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_023)
{
    // 11588 0041;	
    // (𑖈) SIDDHAM LETTER VOCALIC L	[2C3C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11588, 0x0041 };
    uint32_t const ces[9] = { 0x2C3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_024)
{
    // 11588 0062;	
    // (𑖈) SIDDHAM LETTER VOCALIC L	[2C3C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11588, 0x0062 };
    uint32_t const ces[9] = { 0x2C3C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_025)
{
    // 11589 0021;	
    // (𑖉) SIDDHAM LETTER VOCALIC LL	[2C3D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11589, 0x0021 };
    uint32_t const ces[9] = { 0x2C3D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_026)
{
    // 11589 003F;	
    // (𑖉) SIDDHAM LETTER VOCALIC LL	[2C3D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11589, 0x003F };
    uint32_t const ces[9] = { 0x2C3D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_027)
{
    // 11589 0061;	
    // (𑖉) SIDDHAM LETTER VOCALIC LL	[2C3D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11589, 0x0061 };
    uint32_t const ces[9] = { 0x2C3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_028)
{
    // 11589 0041;	
    // (𑖉) SIDDHAM LETTER VOCALIC LL	[2C3D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11589, 0x0041 };
    uint32_t const ces[9] = { 0x2C3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_029)
{
    // 11589 0062;	
    // (𑖉) SIDDHAM LETTER VOCALIC LL	[2C3D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11589, 0x0062 };
    uint32_t const ces[9] = { 0x2C3D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_030)
{
    // 1158A 0021;	
    // (𑖊) SIDDHAM LETTER E	[2C3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158A, 0x0021 };
    uint32_t const ces[9] = { 0x2C3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_031)
{
    // 1158A 003F;	
    // (𑖊) SIDDHAM LETTER E	[2C3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158A, 0x003F };
    uint32_t const ces[9] = { 0x2C3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_032)
{
    // 1158A 0061;	
    // (𑖊) SIDDHAM LETTER E	[2C3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158A, 0x0061 };
    uint32_t const ces[9] = { 0x2C3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_033)
{
    // 1158A 0041;	
    // (𑖊) SIDDHAM LETTER E	[2C3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1158A, 0x0041 };
    uint32_t const ces[9] = { 0x2C3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_034)
{
    // 1158A 0062;	
    // (𑖊) SIDDHAM LETTER E	[2C3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158A, 0x0062 };
    uint32_t const ces[9] = { 0x2C3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_035)
{
    // 1158B 0021;	
    // (𑖋) SIDDHAM LETTER AI	[2C3F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158B, 0x0021 };
    uint32_t const ces[9] = { 0x2C3F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_036)
{
    // 1158B 003F;	
    // (𑖋) SIDDHAM LETTER AI	[2C3F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158B, 0x003F };
    uint32_t const ces[9] = { 0x2C3F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_037)
{
    // 1158B 0061;	
    // (𑖋) SIDDHAM LETTER AI	[2C3F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158B, 0x0061 };
    uint32_t const ces[9] = { 0x2C3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_038)
{
    // 1158B 0041;	
    // (𑖋) SIDDHAM LETTER AI	[2C3F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1158B, 0x0041 };
    uint32_t const ces[9] = { 0x2C3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_039)
{
    // 1158B 0062;	
    // (𑖋) SIDDHAM LETTER AI	[2C3F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158B, 0x0062 };
    uint32_t const ces[9] = { 0x2C3F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_040)
{
    // 1158C 0021;	
    // (𑖌) SIDDHAM LETTER O	[2C40 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158C, 0x0021 };
    uint32_t const ces[9] = { 0x2C40, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_041)
{
    // 1158C 003F;	
    // (𑖌) SIDDHAM LETTER O	[2C40 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158C, 0x003F };
    uint32_t const ces[9] = { 0x2C40, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_042)
{
    // 1158C 0061;	
    // (𑖌) SIDDHAM LETTER O	[2C40 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158C, 0x0061 };
    uint32_t const ces[9] = { 0x2C40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_043)
{
    // 1158C 0041;	
    // (𑖌) SIDDHAM LETTER O	[2C40 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1158C, 0x0041 };
    uint32_t const ces[9] = { 0x2C40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_044)
{
    // 1158C 0062;	
    // (𑖌) SIDDHAM LETTER O	[2C40 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158C, 0x0062 };
    uint32_t const ces[9] = { 0x2C40, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_045)
{
    // 1158D 0021;	
    // (𑖍) SIDDHAM LETTER AU	[2C41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158D, 0x0021 };
    uint32_t const ces[9] = { 0x2C41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_046)
{
    // 1158D 003F;	
    // (𑖍) SIDDHAM LETTER AU	[2C41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158D, 0x003F };
    uint32_t const ces[9] = { 0x2C41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_047)
{
    // 1158D 0061;	
    // (𑖍) SIDDHAM LETTER AU	[2C41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158D, 0x0061 };
    uint32_t const ces[9] = { 0x2C41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_048)
{
    // 1158D 0041;	
    // (𑖍) SIDDHAM LETTER AU	[2C41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1158D, 0x0041 };
    uint32_t const ces[9] = { 0x2C41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_049)
{
    // 1158D 0062;	
    // (𑖍) SIDDHAM LETTER AU	[2C41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158D, 0x0062 };
    uint32_t const ces[9] = { 0x2C41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_050)
{
    // 1158E 0021;	
    // (𑖎) SIDDHAM LETTER KA	[2C42 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158E, 0x0021 };
    uint32_t const ces[9] = { 0x2C42, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_051)
{
    // 1158E 003F;	
    // (𑖎) SIDDHAM LETTER KA	[2C42 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158E, 0x003F };
    uint32_t const ces[9] = { 0x2C42, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_052)
{
    // 1158E 0061;	
    // (𑖎) SIDDHAM LETTER KA	[2C42 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158E, 0x0061 };
    uint32_t const ces[9] = { 0x2C42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_053)
{
    // 1158E 0041;	
    // (𑖎) SIDDHAM LETTER KA	[2C42 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1158E, 0x0041 };
    uint32_t const ces[9] = { 0x2C42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_054)
{
    // 1158E 0062;	
    // (𑖎) SIDDHAM LETTER KA	[2C42 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158E, 0x0062 };
    uint32_t const ces[9] = { 0x2C42, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_055)
{
    // 1158F 0021;	
    // (𑖏) SIDDHAM LETTER KHA	[2C43 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158F, 0x0021 };
    uint32_t const ces[9] = { 0x2C43, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_056)
{
    // 1158F 003F;	
    // (𑖏) SIDDHAM LETTER KHA	[2C43 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158F, 0x003F };
    uint32_t const ces[9] = { 0x2C43, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_057)
{
    // 1158F 0061;	
    // (𑖏) SIDDHAM LETTER KHA	[2C43 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158F, 0x0061 };
    uint32_t const ces[9] = { 0x2C43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_058)
{
    // 1158F 0041;	
    // (𑖏) SIDDHAM LETTER KHA	[2C43 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1158F, 0x0041 };
    uint32_t const ces[9] = { 0x2C43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_059)
{
    // 1158F 0062;	
    // (𑖏) SIDDHAM LETTER KHA	[2C43 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1158F, 0x0062 };
    uint32_t const ces[9] = { 0x2C43, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_060)
{
    // 11590 0021;	
    // (𑖐) SIDDHAM LETTER GA	[2C44 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11590, 0x0021 };
    uint32_t const ces[9] = { 0x2C44, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_061)
{
    // 11590 003F;	
    // (𑖐) SIDDHAM LETTER GA	[2C44 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11590, 0x003F };
    uint32_t const ces[9] = { 0x2C44, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_062)
{
    // 11590 0061;	
    // (𑖐) SIDDHAM LETTER GA	[2C44 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11590, 0x0061 };
    uint32_t const ces[9] = { 0x2C44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_063)
{
    // 11590 0041;	
    // (𑖐) SIDDHAM LETTER GA	[2C44 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11590, 0x0041 };
    uint32_t const ces[9] = { 0x2C44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_064)
{
    // 11590 0062;	
    // (𑖐) SIDDHAM LETTER GA	[2C44 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11590, 0x0062 };
    uint32_t const ces[9] = { 0x2C44, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_065)
{
    // 11591 0021;	
    // (𑖑) SIDDHAM LETTER GHA	[2C45 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11591, 0x0021 };
    uint32_t const ces[9] = { 0x2C45, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_066)
{
    // 11591 003F;	
    // (𑖑) SIDDHAM LETTER GHA	[2C45 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11591, 0x003F };
    uint32_t const ces[9] = { 0x2C45, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_067)
{
    // 11591 0061;	
    // (𑖑) SIDDHAM LETTER GHA	[2C45 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11591, 0x0061 };
    uint32_t const ces[9] = { 0x2C45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_068)
{
    // 11591 0041;	
    // (𑖑) SIDDHAM LETTER GHA	[2C45 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11591, 0x0041 };
    uint32_t const ces[9] = { 0x2C45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_069)
{
    // 11591 0062;	
    // (𑖑) SIDDHAM LETTER GHA	[2C45 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11591, 0x0062 };
    uint32_t const ces[9] = { 0x2C45, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_070)
{
    // 11592 0021;	
    // (𑖒) SIDDHAM LETTER NGA	[2C46 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11592, 0x0021 };
    uint32_t const ces[9] = { 0x2C46, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_071)
{
    // 11592 003F;	
    // (𑖒) SIDDHAM LETTER NGA	[2C46 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11592, 0x003F };
    uint32_t const ces[9] = { 0x2C46, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_072)
{
    // 11592 0061;	
    // (𑖒) SIDDHAM LETTER NGA	[2C46 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11592, 0x0061 };
    uint32_t const ces[9] = { 0x2C46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_073)
{
    // 11592 0041;	
    // (𑖒) SIDDHAM LETTER NGA	[2C46 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11592, 0x0041 };
    uint32_t const ces[9] = { 0x2C46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_074)
{
    // 11592 0062;	
    // (𑖒) SIDDHAM LETTER NGA	[2C46 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11592, 0x0062 };
    uint32_t const ces[9] = { 0x2C46, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_075)
{
    // 11593 0021;	
    // (𑖓) SIDDHAM LETTER CA	[2C47 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11593, 0x0021 };
    uint32_t const ces[9] = { 0x2C47, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_076)
{
    // 11593 003F;	
    // (𑖓) SIDDHAM LETTER CA	[2C47 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11593, 0x003F };
    uint32_t const ces[9] = { 0x2C47, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_077)
{
    // 11593 0061;	
    // (𑖓) SIDDHAM LETTER CA	[2C47 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11593, 0x0061 };
    uint32_t const ces[9] = { 0x2C47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_078)
{
    // 11593 0041;	
    // (𑖓) SIDDHAM LETTER CA	[2C47 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11593, 0x0041 };
    uint32_t const ces[9] = { 0x2C47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_079)
{
    // 11593 0062;	
    // (𑖓) SIDDHAM LETTER CA	[2C47 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11593, 0x0062 };
    uint32_t const ces[9] = { 0x2C47, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_080)
{
    // 11594 0021;	
    // (𑖔) SIDDHAM LETTER CHA	[2C48 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11594, 0x0021 };
    uint32_t const ces[9] = { 0x2C48, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_081)
{
    // 11594 003F;	
    // (𑖔) SIDDHAM LETTER CHA	[2C48 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11594, 0x003F };
    uint32_t const ces[9] = { 0x2C48, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_082)
{
    // 11594 0061;	
    // (𑖔) SIDDHAM LETTER CHA	[2C48 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11594, 0x0061 };
    uint32_t const ces[9] = { 0x2C48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_083)
{
    // 11594 0041;	
    // (𑖔) SIDDHAM LETTER CHA	[2C48 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11594, 0x0041 };
    uint32_t const ces[9] = { 0x2C48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_084)
{
    // 11594 0062;	
    // (𑖔) SIDDHAM LETTER CHA	[2C48 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11594, 0x0062 };
    uint32_t const ces[9] = { 0x2C48, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_085)
{
    // 11595 0021;	
    // (𑖕) SIDDHAM LETTER JA	[2C49 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11595, 0x0021 };
    uint32_t const ces[9] = { 0x2C49, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_086)
{
    // 11595 003F;	
    // (𑖕) SIDDHAM LETTER JA	[2C49 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11595, 0x003F };
    uint32_t const ces[9] = { 0x2C49, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_087)
{
    // 11595 0061;	
    // (𑖕) SIDDHAM LETTER JA	[2C49 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11595, 0x0061 };
    uint32_t const ces[9] = { 0x2C49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_088)
{
    // 11595 0041;	
    // (𑖕) SIDDHAM LETTER JA	[2C49 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11595, 0x0041 };
    uint32_t const ces[9] = { 0x2C49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_089)
{
    // 11595 0062;	
    // (𑖕) SIDDHAM LETTER JA	[2C49 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11595, 0x0062 };
    uint32_t const ces[9] = { 0x2C49, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_090)
{
    // 11596 0021;	
    // (𑖖) SIDDHAM LETTER JHA	[2C4A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11596, 0x0021 };
    uint32_t const ces[9] = { 0x2C4A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_091)
{
    // 11596 003F;	
    // (𑖖) SIDDHAM LETTER JHA	[2C4A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11596, 0x003F };
    uint32_t const ces[9] = { 0x2C4A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_092)
{
    // 11596 0061;	
    // (𑖖) SIDDHAM LETTER JHA	[2C4A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11596, 0x0061 };
    uint32_t const ces[9] = { 0x2C4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_093)
{
    // 11596 0041;	
    // (𑖖) SIDDHAM LETTER JHA	[2C4A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11596, 0x0041 };
    uint32_t const ces[9] = { 0x2C4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_094)
{
    // 11596 0062;	
    // (𑖖) SIDDHAM LETTER JHA	[2C4A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11596, 0x0062 };
    uint32_t const ces[9] = { 0x2C4A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_095)
{
    // 11597 0021;	
    // (𑖗) SIDDHAM LETTER NYA	[2C4B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11597, 0x0021 };
    uint32_t const ces[9] = { 0x2C4B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_096)
{
    // 11597 003F;	
    // (𑖗) SIDDHAM LETTER NYA	[2C4B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11597, 0x003F };
    uint32_t const ces[9] = { 0x2C4B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_097)
{
    // 11597 0061;	
    // (𑖗) SIDDHAM LETTER NYA	[2C4B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11597, 0x0061 };
    uint32_t const ces[9] = { 0x2C4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_098)
{
    // 11597 0041;	
    // (𑖗) SIDDHAM LETTER NYA	[2C4B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11597, 0x0041 };
    uint32_t const ces[9] = { 0x2C4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_099)
{
    // 11597 0062;	
    // (𑖗) SIDDHAM LETTER NYA	[2C4B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11597, 0x0062 };
    uint32_t const ces[9] = { 0x2C4B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_100)
{
    // 11598 0021;	
    // (𑖘) SIDDHAM LETTER TTA	[2C4C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11598, 0x0021 };
    uint32_t const ces[9] = { 0x2C4C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_101)
{
    // 11598 003F;	
    // (𑖘) SIDDHAM LETTER TTA	[2C4C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11598, 0x003F };
    uint32_t const ces[9] = { 0x2C4C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_102)
{
    // 11598 0061;	
    // (𑖘) SIDDHAM LETTER TTA	[2C4C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11598, 0x0061 };
    uint32_t const ces[9] = { 0x2C4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_103)
{
    // 11598 0041;	
    // (𑖘) SIDDHAM LETTER TTA	[2C4C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11598, 0x0041 };
    uint32_t const ces[9] = { 0x2C4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_104)
{
    // 11598 0062;	
    // (𑖘) SIDDHAM LETTER TTA	[2C4C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11598, 0x0062 };
    uint32_t const ces[9] = { 0x2C4C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_105)
{
    // 11599 0021;	
    // (𑖙) SIDDHAM LETTER TTHA	[2C4D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11599, 0x0021 };
    uint32_t const ces[9] = { 0x2C4D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_106)
{
    // 11599 003F;	
    // (𑖙) SIDDHAM LETTER TTHA	[2C4D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11599, 0x003F };
    uint32_t const ces[9] = { 0x2C4D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_107)
{
    // 11599 0061;	
    // (𑖙) SIDDHAM LETTER TTHA	[2C4D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11599, 0x0061 };
    uint32_t const ces[9] = { 0x2C4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_108)
{
    // 11599 0041;	
    // (𑖙) SIDDHAM LETTER TTHA	[2C4D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11599, 0x0041 };
    uint32_t const ces[9] = { 0x2C4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_109)
{
    // 11599 0062;	
    // (𑖙) SIDDHAM LETTER TTHA	[2C4D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11599, 0x0062 };
    uint32_t const ces[9] = { 0x2C4D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_110)
{
    // 1159A 0021;	
    // (𑖚) SIDDHAM LETTER DDA	[2C4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159A, 0x0021 };
    uint32_t const ces[9] = { 0x2C4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_111)
{
    // 1159A 003F;	
    // (𑖚) SIDDHAM LETTER DDA	[2C4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159A, 0x003F };
    uint32_t const ces[9] = { 0x2C4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_112)
{
    // 1159A 0061;	
    // (𑖚) SIDDHAM LETTER DDA	[2C4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159A, 0x0061 };
    uint32_t const ces[9] = { 0x2C4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_113)
{
    // 1159A 0041;	
    // (𑖚) SIDDHAM LETTER DDA	[2C4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1159A, 0x0041 };
    uint32_t const ces[9] = { 0x2C4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_114)
{
    // 1159A 0062;	
    // (𑖚) SIDDHAM LETTER DDA	[2C4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159A, 0x0062 };
    uint32_t const ces[9] = { 0x2C4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_115)
{
    // 1159B 0021;	
    // (𑖛) SIDDHAM LETTER DDHA	[2C4F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159B, 0x0021 };
    uint32_t const ces[9] = { 0x2C4F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_116)
{
    // 1159B 003F;	
    // (𑖛) SIDDHAM LETTER DDHA	[2C4F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159B, 0x003F };
    uint32_t const ces[9] = { 0x2C4F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_117)
{
    // 1159B 0061;	
    // (𑖛) SIDDHAM LETTER DDHA	[2C4F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159B, 0x0061 };
    uint32_t const ces[9] = { 0x2C4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_118)
{
    // 1159B 0041;	
    // (𑖛) SIDDHAM LETTER DDHA	[2C4F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1159B, 0x0041 };
    uint32_t const ces[9] = { 0x2C4F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_119)
{
    // 1159B 0062;	
    // (𑖛) SIDDHAM LETTER DDHA	[2C4F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159B, 0x0062 };
    uint32_t const ces[9] = { 0x2C4F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_120)
{
    // 1159C 0021;	
    // (𑖜) SIDDHAM LETTER NNA	[2C50 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159C, 0x0021 };
    uint32_t const ces[9] = { 0x2C50, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_121)
{
    // 1159C 003F;	
    // (𑖜) SIDDHAM LETTER NNA	[2C50 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159C, 0x003F };
    uint32_t const ces[9] = { 0x2C50, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_122)
{
    // 1159C 0061;	
    // (𑖜) SIDDHAM LETTER NNA	[2C50 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159C, 0x0061 };
    uint32_t const ces[9] = { 0x2C50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_123)
{
    // 1159C 0041;	
    // (𑖜) SIDDHAM LETTER NNA	[2C50 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1159C, 0x0041 };
    uint32_t const ces[9] = { 0x2C50, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_124)
{
    // 1159C 0062;	
    // (𑖜) SIDDHAM LETTER NNA	[2C50 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159C, 0x0062 };
    uint32_t const ces[9] = { 0x2C50, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_125)
{
    // 1159D 0021;	
    // (𑖝) SIDDHAM LETTER TA	[2C51 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159D, 0x0021 };
    uint32_t const ces[9] = { 0x2C51, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_126)
{
    // 1159D 003F;	
    // (𑖝) SIDDHAM LETTER TA	[2C51 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159D, 0x003F };
    uint32_t const ces[9] = { 0x2C51, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_127)
{
    // 1159D 0061;	
    // (𑖝) SIDDHAM LETTER TA	[2C51 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159D, 0x0061 };
    uint32_t const ces[9] = { 0x2C51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_128)
{
    // 1159D 0041;	
    // (𑖝) SIDDHAM LETTER TA	[2C51 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1159D, 0x0041 };
    uint32_t const ces[9] = { 0x2C51, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_129)
{
    // 1159D 0062;	
    // (𑖝) SIDDHAM LETTER TA	[2C51 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159D, 0x0062 };
    uint32_t const ces[9] = { 0x2C51, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_130)
{
    // 1159E 0021;	
    // (𑖞) SIDDHAM LETTER THA	[2C52 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159E, 0x0021 };
    uint32_t const ces[9] = { 0x2C52, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_131)
{
    // 1159E 003F;	
    // (𑖞) SIDDHAM LETTER THA	[2C52 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159E, 0x003F };
    uint32_t const ces[9] = { 0x2C52, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_132)
{
    // 1159E 0061;	
    // (𑖞) SIDDHAM LETTER THA	[2C52 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159E, 0x0061 };
    uint32_t const ces[9] = { 0x2C52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_133)
{
    // 1159E 0041;	
    // (𑖞) SIDDHAM LETTER THA	[2C52 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1159E, 0x0041 };
    uint32_t const ces[9] = { 0x2C52, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_134)
{
    // 1159E 0062;	
    // (𑖞) SIDDHAM LETTER THA	[2C52 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159E, 0x0062 };
    uint32_t const ces[9] = { 0x2C52, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_135)
{
    // 1159F 0021;	
    // (𑖟) SIDDHAM LETTER DA	[2C53 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159F, 0x0021 };
    uint32_t const ces[9] = { 0x2C53, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_136)
{
    // 1159F 003F;	
    // (𑖟) SIDDHAM LETTER DA	[2C53 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159F, 0x003F };
    uint32_t const ces[9] = { 0x2C53, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_137)
{
    // 1159F 0061;	
    // (𑖟) SIDDHAM LETTER DA	[2C53 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159F, 0x0061 };
    uint32_t const ces[9] = { 0x2C53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_138)
{
    // 1159F 0041;	
    // (𑖟) SIDDHAM LETTER DA	[2C53 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1159F, 0x0041 };
    uint32_t const ces[9] = { 0x2C53, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_139)
{
    // 1159F 0062;	
    // (𑖟) SIDDHAM LETTER DA	[2C53 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1159F, 0x0062 };
    uint32_t const ces[9] = { 0x2C53, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_140)
{
    // 115A0 0021;	
    // (𑖠) SIDDHAM LETTER DHA	[2C54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A0, 0x0021 };
    uint32_t const ces[9] = { 0x2C54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_141)
{
    // 115A0 003F;	
    // (𑖠) SIDDHAM LETTER DHA	[2C54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A0, 0x003F };
    uint32_t const ces[9] = { 0x2C54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_142)
{
    // 115A0 0061;	
    // (𑖠) SIDDHAM LETTER DHA	[2C54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A0, 0x0061 };
    uint32_t const ces[9] = { 0x2C54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_143)
{
    // 115A0 0041;	
    // (𑖠) SIDDHAM LETTER DHA	[2C54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115A0, 0x0041 };
    uint32_t const ces[9] = { 0x2C54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_144)
{
    // 115A0 0062;	
    // (𑖠) SIDDHAM LETTER DHA	[2C54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A0, 0x0062 };
    uint32_t const ces[9] = { 0x2C54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_145)
{
    // 115A1 0021;	
    // (𑖡) SIDDHAM LETTER NA	[2C55 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A1, 0x0021 };
    uint32_t const ces[9] = { 0x2C55, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_146)
{
    // 115A1 003F;	
    // (𑖡) SIDDHAM LETTER NA	[2C55 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A1, 0x003F };
    uint32_t const ces[9] = { 0x2C55, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_147)
{
    // 115A1 0061;	
    // (𑖡) SIDDHAM LETTER NA	[2C55 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A1, 0x0061 };
    uint32_t const ces[9] = { 0x2C55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_148)
{
    // 115A1 0041;	
    // (𑖡) SIDDHAM LETTER NA	[2C55 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115A1, 0x0041 };
    uint32_t const ces[9] = { 0x2C55, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_149)
{
    // 115A1 0062;	
    // (𑖡) SIDDHAM LETTER NA	[2C55 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A1, 0x0062 };
    uint32_t const ces[9] = { 0x2C55, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_150)
{
    // 115A2 0021;	
    // (𑖢) SIDDHAM LETTER PA	[2C56 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A2, 0x0021 };
    uint32_t const ces[9] = { 0x2C56, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_151)
{
    // 115A2 003F;	
    // (𑖢) SIDDHAM LETTER PA	[2C56 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A2, 0x003F };
    uint32_t const ces[9] = { 0x2C56, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_152)
{
    // 115A2 0061;	
    // (𑖢) SIDDHAM LETTER PA	[2C56 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A2, 0x0061 };
    uint32_t const ces[9] = { 0x2C56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_153)
{
    // 115A2 0041;	
    // (𑖢) SIDDHAM LETTER PA	[2C56 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115A2, 0x0041 };
    uint32_t const ces[9] = { 0x2C56, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_154)
{
    // 115A2 0062;	
    // (𑖢) SIDDHAM LETTER PA	[2C56 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A2, 0x0062 };
    uint32_t const ces[9] = { 0x2C56, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_155)
{
    // 115A3 0021;	
    // (𑖣) SIDDHAM LETTER PHA	[2C57 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A3, 0x0021 };
    uint32_t const ces[9] = { 0x2C57, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_156)
{
    // 115A3 003F;	
    // (𑖣) SIDDHAM LETTER PHA	[2C57 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A3, 0x003F };
    uint32_t const ces[9] = { 0x2C57, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_157)
{
    // 115A3 0061;	
    // (𑖣) SIDDHAM LETTER PHA	[2C57 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A3, 0x0061 };
    uint32_t const ces[9] = { 0x2C57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_158)
{
    // 115A3 0041;	
    // (𑖣) SIDDHAM LETTER PHA	[2C57 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115A3, 0x0041 };
    uint32_t const ces[9] = { 0x2C57, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_159)
{
    // 115A3 0062;	
    // (𑖣) SIDDHAM LETTER PHA	[2C57 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A3, 0x0062 };
    uint32_t const ces[9] = { 0x2C57, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_160)
{
    // 115A4 0021;	
    // (𑖤) SIDDHAM LETTER BA	[2C58 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A4, 0x0021 };
    uint32_t const ces[9] = { 0x2C58, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_161)
{
    // 115A4 003F;	
    // (𑖤) SIDDHAM LETTER BA	[2C58 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A4, 0x003F };
    uint32_t const ces[9] = { 0x2C58, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_162)
{
    // 115A4 0061;	
    // (𑖤) SIDDHAM LETTER BA	[2C58 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A4, 0x0061 };
    uint32_t const ces[9] = { 0x2C58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_163)
{
    // 115A4 0041;	
    // (𑖤) SIDDHAM LETTER BA	[2C58 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115A4, 0x0041 };
    uint32_t const ces[9] = { 0x2C58, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_164)
{
    // 115A4 0062;	
    // (𑖤) SIDDHAM LETTER BA	[2C58 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A4, 0x0062 };
    uint32_t const ces[9] = { 0x2C58, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_165)
{
    // 115A5 0021;	
    // (𑖥) SIDDHAM LETTER BHA	[2C59 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A5, 0x0021 };
    uint32_t const ces[9] = { 0x2C59, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_166)
{
    // 115A5 003F;	
    // (𑖥) SIDDHAM LETTER BHA	[2C59 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A5, 0x003F };
    uint32_t const ces[9] = { 0x2C59, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_167)
{
    // 115A5 0061;	
    // (𑖥) SIDDHAM LETTER BHA	[2C59 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A5, 0x0061 };
    uint32_t const ces[9] = { 0x2C59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_168)
{
    // 115A5 0041;	
    // (𑖥) SIDDHAM LETTER BHA	[2C59 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115A5, 0x0041 };
    uint32_t const ces[9] = { 0x2C59, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_169)
{
    // 115A5 0062;	
    // (𑖥) SIDDHAM LETTER BHA	[2C59 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A5, 0x0062 };
    uint32_t const ces[9] = { 0x2C59, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_170)
{
    // 115A6 0021;	
    // (𑖦) SIDDHAM LETTER MA	[2C5A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A6, 0x0021 };
    uint32_t const ces[9] = { 0x2C5A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_171)
{
    // 115A6 003F;	
    // (𑖦) SIDDHAM LETTER MA	[2C5A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A6, 0x003F };
    uint32_t const ces[9] = { 0x2C5A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_172)
{
    // 115A6 0061;	
    // (𑖦) SIDDHAM LETTER MA	[2C5A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A6, 0x0061 };
    uint32_t const ces[9] = { 0x2C5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_173)
{
    // 115A6 0041;	
    // (𑖦) SIDDHAM LETTER MA	[2C5A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115A6, 0x0041 };
    uint32_t const ces[9] = { 0x2C5A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_174)
{
    // 115A6 0062;	
    // (𑖦) SIDDHAM LETTER MA	[2C5A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A6, 0x0062 };
    uint32_t const ces[9] = { 0x2C5A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_175)
{
    // 115A7 0021;	
    // (𑖧) SIDDHAM LETTER YA	[2C5B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A7, 0x0021 };
    uint32_t const ces[9] = { 0x2C5B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_176)
{
    // 115A7 003F;	
    // (𑖧) SIDDHAM LETTER YA	[2C5B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A7, 0x003F };
    uint32_t const ces[9] = { 0x2C5B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_177)
{
    // 115A7 0061;	
    // (𑖧) SIDDHAM LETTER YA	[2C5B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A7, 0x0061 };
    uint32_t const ces[9] = { 0x2C5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_178)
{
    // 115A7 0041;	
    // (𑖧) SIDDHAM LETTER YA	[2C5B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115A7, 0x0041 };
    uint32_t const ces[9] = { 0x2C5B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_179)
{
    // 115A7 0062;	
    // (𑖧) SIDDHAM LETTER YA	[2C5B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A7, 0x0062 };
    uint32_t const ces[9] = { 0x2C5B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_180)
{
    // 115A8 0021;	
    // (𑖨) SIDDHAM LETTER RA	[2C5C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A8, 0x0021 };
    uint32_t const ces[9] = { 0x2C5C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_181)
{
    // 115A8 003F;	
    // (𑖨) SIDDHAM LETTER RA	[2C5C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A8, 0x003F };
    uint32_t const ces[9] = { 0x2C5C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_182)
{
    // 115A8 0061;	
    // (𑖨) SIDDHAM LETTER RA	[2C5C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A8, 0x0061 };
    uint32_t const ces[9] = { 0x2C5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_183)
{
    // 115A8 0041;	
    // (𑖨) SIDDHAM LETTER RA	[2C5C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115A8, 0x0041 };
    uint32_t const ces[9] = { 0x2C5C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_184)
{
    // 115A8 0062;	
    // (𑖨) SIDDHAM LETTER RA	[2C5C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A8, 0x0062 };
    uint32_t const ces[9] = { 0x2C5C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_185)
{
    // 115A9 0021;	
    // (𑖩) SIDDHAM LETTER LA	[2C5D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A9, 0x0021 };
    uint32_t const ces[9] = { 0x2C5D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_186)
{
    // 115A9 003F;	
    // (𑖩) SIDDHAM LETTER LA	[2C5D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A9, 0x003F };
    uint32_t const ces[9] = { 0x2C5D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_187)
{
    // 115A9 0061;	
    // (𑖩) SIDDHAM LETTER LA	[2C5D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A9, 0x0061 };
    uint32_t const ces[9] = { 0x2C5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_188)
{
    // 115A9 0041;	
    // (𑖩) SIDDHAM LETTER LA	[2C5D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115A9, 0x0041 };
    uint32_t const ces[9] = { 0x2C5D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_189)
{
    // 115A9 0062;	
    // (𑖩) SIDDHAM LETTER LA	[2C5D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115A9, 0x0062 };
    uint32_t const ces[9] = { 0x2C5D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_190)
{
    // 115AA 0021;	
    // (𑖪) SIDDHAM LETTER VA	[2C5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AA, 0x0021 };
    uint32_t const ces[9] = { 0x2C5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_191)
{
    // 115AA 003F;	
    // (𑖪) SIDDHAM LETTER VA	[2C5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AA, 0x003F };
    uint32_t const ces[9] = { 0x2C5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_192)
{
    // 115AA 0061;	
    // (𑖪) SIDDHAM LETTER VA	[2C5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AA, 0x0061 };
    uint32_t const ces[9] = { 0x2C5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_193)
{
    // 115AA 0041;	
    // (𑖪) SIDDHAM LETTER VA	[2C5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115AA, 0x0041 };
    uint32_t const ces[9] = { 0x2C5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_194)
{
    // 115AA 0062;	
    // (𑖪) SIDDHAM LETTER VA	[2C5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AA, 0x0062 };
    uint32_t const ces[9] = { 0x2C5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_195)
{
    // 115AB 0021;	
    // (𑖫) SIDDHAM LETTER SHA	[2C5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AB, 0x0021 };
    uint32_t const ces[9] = { 0x2C5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_196)
{
    // 115AB 003F;	
    // (𑖫) SIDDHAM LETTER SHA	[2C5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AB, 0x003F };
    uint32_t const ces[9] = { 0x2C5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_197)
{
    // 115AB 0061;	
    // (𑖫) SIDDHAM LETTER SHA	[2C5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AB, 0x0061 };
    uint32_t const ces[9] = { 0x2C5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_198)
{
    // 115AB 0041;	
    // (𑖫) SIDDHAM LETTER SHA	[2C5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115AB, 0x0041 };
    uint32_t const ces[9] = { 0x2C5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_199)
{
    // 115AB 0062;	
    // (𑖫) SIDDHAM LETTER SHA	[2C5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AB, 0x0062 };
    uint32_t const ces[9] = { 0x2C5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_200)
{
    // 115AC 0021;	
    // (𑖬) SIDDHAM LETTER SSA	[2C60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AC, 0x0021 };
    uint32_t const ces[9] = { 0x2C60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_201)
{
    // 115AC 003F;	
    // (𑖬) SIDDHAM LETTER SSA	[2C60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AC, 0x003F };
    uint32_t const ces[9] = { 0x2C60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_202)
{
    // 115AC 0061;	
    // (𑖬) SIDDHAM LETTER SSA	[2C60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AC, 0x0061 };
    uint32_t const ces[9] = { 0x2C60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_203)
{
    // 115AC 0041;	
    // (𑖬) SIDDHAM LETTER SSA	[2C60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115AC, 0x0041 };
    uint32_t const ces[9] = { 0x2C60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_204)
{
    // 115AC 0062;	
    // (𑖬) SIDDHAM LETTER SSA	[2C60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AC, 0x0062 };
    uint32_t const ces[9] = { 0x2C60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_205)
{
    // 115AD 0021;	
    // (𑖭) SIDDHAM LETTER SA	[2C61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AD, 0x0021 };
    uint32_t const ces[9] = { 0x2C61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_206)
{
    // 115AD 003F;	
    // (𑖭) SIDDHAM LETTER SA	[2C61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AD, 0x003F };
    uint32_t const ces[9] = { 0x2C61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_207)
{
    // 115AD 0061;	
    // (𑖭) SIDDHAM LETTER SA	[2C61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AD, 0x0061 };
    uint32_t const ces[9] = { 0x2C61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_208)
{
    // 115AD 0041;	
    // (𑖭) SIDDHAM LETTER SA	[2C61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115AD, 0x0041 };
    uint32_t const ces[9] = { 0x2C61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_209)
{
    // 115AD 0062;	
    // (𑖭) SIDDHAM LETTER SA	[2C61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AD, 0x0062 };
    uint32_t const ces[9] = { 0x2C61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_210)
{
    // 115AE 0021;	
    // (𑖮) SIDDHAM LETTER HA	[2C62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AE, 0x0021 };
    uint32_t const ces[9] = { 0x2C62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_211)
{
    // 115AE 003F;	
    // (𑖮) SIDDHAM LETTER HA	[2C62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AE, 0x003F };
    uint32_t const ces[9] = { 0x2C62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_212)
{
    // 115AE 0061;	
    // (𑖮) SIDDHAM LETTER HA	[2C62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AE, 0x0061 };
    uint32_t const ces[9] = { 0x2C62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_213)
{
    // 115AE 0041;	
    // (𑖮) SIDDHAM LETTER HA	[2C62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115AE, 0x0041 };
    uint32_t const ces[9] = { 0x2C62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_214)
{
    // 115AE 0062;	
    // (𑖮) SIDDHAM LETTER HA	[2C62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AE, 0x0062 };
    uint32_t const ces[9] = { 0x2C62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_215)
{
    // 115AF 0021;	
    // (𑖯) SIDDHAM VOWEL SIGN AA	[2C63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AF, 0x0021 };
    uint32_t const ces[9] = { 0x2C63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_216)
{
    // 115AF 003F;	
    // (𑖯) SIDDHAM VOWEL SIGN AA	[2C63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AF, 0x003F };
    uint32_t const ces[9] = { 0x2C63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_217)
{
    // 115AF 0061;	
    // (𑖯) SIDDHAM VOWEL SIGN AA	[2C63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AF, 0x0061 };
    uint32_t const ces[9] = { 0x2C63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_218)
{
    // 115AF 0041;	
    // (𑖯) SIDDHAM VOWEL SIGN AA	[2C63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115AF, 0x0041 };
    uint32_t const ces[9] = { 0x2C63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_219)
{
    // 115AF 0062;	
    // (𑖯) SIDDHAM VOWEL SIGN AA	[2C63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115AF, 0x0062 };
    uint32_t const ces[9] = { 0x2C63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_220)
{
    // 115B0 0021;	
    // (𑖰) SIDDHAM VOWEL SIGN I	[2C64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B0, 0x0021 };
    uint32_t const ces[9] = { 0x2C64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_221)
{
    // 115B0 003F;	
    // (𑖰) SIDDHAM VOWEL SIGN I	[2C64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B0, 0x003F };
    uint32_t const ces[9] = { 0x2C64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_222)
{
    // 115B0 0061;	
    // (𑖰) SIDDHAM VOWEL SIGN I	[2C64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B0, 0x0061 };
    uint32_t const ces[9] = { 0x2C64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_223)
{
    // 115B0 0041;	
    // (𑖰) SIDDHAM VOWEL SIGN I	[2C64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115B0, 0x0041 };
    uint32_t const ces[9] = { 0x2C64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_224)
{
    // 115B0 0062;	
    // (𑖰) SIDDHAM VOWEL SIGN I	[2C64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B0, 0x0062 };
    uint32_t const ces[9] = { 0x2C64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_225)
{
    // 115B1 0021;	
    // (𑖱) SIDDHAM VOWEL SIGN II	[2C65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B1, 0x0021 };
    uint32_t const ces[9] = { 0x2C65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_226)
{
    // 115B1 003F;	
    // (𑖱) SIDDHAM VOWEL SIGN II	[2C65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B1, 0x003F };
    uint32_t const ces[9] = { 0x2C65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_227)
{
    // 115B1 0061;	
    // (𑖱) SIDDHAM VOWEL SIGN II	[2C65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B1, 0x0061 };
    uint32_t const ces[9] = { 0x2C65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_228)
{
    // 115B1 0041;	
    // (𑖱) SIDDHAM VOWEL SIGN II	[2C65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115B1, 0x0041 };
    uint32_t const ces[9] = { 0x2C65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_229)
{
    // 115B1 0062;	
    // (𑖱) SIDDHAM VOWEL SIGN II	[2C65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B1, 0x0062 };
    uint32_t const ces[9] = { 0x2C65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_230)
{
    // 115B2 0021;	
    // (𑖲) SIDDHAM VOWEL SIGN U	[2C66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B2, 0x0021 };
    uint32_t const ces[9] = { 0x2C66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_231)
{
    // 115DC 0021;	
    // (𑗜) SIDDHAM VOWEL SIGN ALTERNATE U	[2C66 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115DC, 0x0021 };
    uint32_t const ces[11] = { 0x2C66, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_232)
{
    // 115B2 003F;	
    // (𑖲) SIDDHAM VOWEL SIGN U	[2C66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B2, 0x003F };
    uint32_t const ces[9] = { 0x2C66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_233)
{
    // 115DC 003F;	
    // (𑗜) SIDDHAM VOWEL SIGN ALTERNATE U	[2C66 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115DC, 0x003F };
    uint32_t const ces[11] = { 0x2C66, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_234)
{
    // 115B2 0061;	
    // (𑖲) SIDDHAM VOWEL SIGN U	[2C66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B2, 0x0061 };
    uint32_t const ces[9] = { 0x2C66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_235)
{
    // 115B2 0041;	
    // (𑖲) SIDDHAM VOWEL SIGN U	[2C66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115B2, 0x0041 };
    uint32_t const ces[9] = { 0x2C66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_236)
{
    // 115DC 0061;	
    // (𑗜) SIDDHAM VOWEL SIGN ALTERNATE U	[2C66 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115DC, 0x0061 };
    uint32_t const ces[11] = { 0x2C66, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_237)
{
    // 115DC 0041;	
    // (𑗜) SIDDHAM VOWEL SIGN ALTERNATE U	[2C66 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x115DC, 0x0041 };
    uint32_t const ces[11] = { 0x2C66, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_238)
{
    // 115B2 0062;	
    // (𑖲) SIDDHAM VOWEL SIGN U	[2C66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B2, 0x0062 };
    uint32_t const ces[9] = { 0x2C66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_239)
{
    // 115DC 0062;	
    // (𑗜) SIDDHAM VOWEL SIGN ALTERNATE U	[2C66 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115DC, 0x0062 };
    uint32_t const ces[11] = { 0x2C66, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_240)
{
    // 115B3 0021;	
    // (𑖳) SIDDHAM VOWEL SIGN UU	[2C67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B3, 0x0021 };
    uint32_t const ces[9] = { 0x2C67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_241)
{
    // 115DD 0021;	
    // (𑗝) SIDDHAM VOWEL SIGN ALTERNATE UU	[2C67 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115DD, 0x0021 };
    uint32_t const ces[11] = { 0x2C67, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_242)
{
    // 115B3 003F;	
    // (𑖳) SIDDHAM VOWEL SIGN UU	[2C67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B3, 0x003F };
    uint32_t const ces[9] = { 0x2C67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_243)
{
    // 115DD 003F;	
    // (𑗝) SIDDHAM VOWEL SIGN ALTERNATE UU	[2C67 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115DD, 0x003F };
    uint32_t const ces[11] = { 0x2C67, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_244)
{
    // 115B3 0061;	
    // (𑖳) SIDDHAM VOWEL SIGN UU	[2C67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B3, 0x0061 };
    uint32_t const ces[9] = { 0x2C67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_245)
{
    // 115B3 0041;	
    // (𑖳) SIDDHAM VOWEL SIGN UU	[2C67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115B3, 0x0041 };
    uint32_t const ces[9] = { 0x2C67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_246)
{
    // 115DD 0061;	
    // (𑗝) SIDDHAM VOWEL SIGN ALTERNATE UU	[2C67 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115DD, 0x0061 };
    uint32_t const ces[11] = { 0x2C67, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_247)
{
    // 115DD 0041;	
    // (𑗝) SIDDHAM VOWEL SIGN ALTERNATE UU	[2C67 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x115DD, 0x0041 };
    uint32_t const ces[11] = { 0x2C67, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_248)
{
    // 115B3 0062;	
    // (𑖳) SIDDHAM VOWEL SIGN UU	[2C67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B3, 0x0062 };
    uint32_t const ces[9] = { 0x2C67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_249)
{
    // 115DD 0062;	
    // (𑗝) SIDDHAM VOWEL SIGN ALTERNATE UU	[2C67 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x115DD, 0x0062 };
    uint32_t const ces[11] = { 0x2C67, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_250)
{
    // 115B4 0021;	
    // (𑖴) SIDDHAM VOWEL SIGN VOCALIC R	[2C68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B4, 0x0021 };
    uint32_t const ces[9] = { 0x2C68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_251)
{
    // 115B4 003F;	
    // (𑖴) SIDDHAM VOWEL SIGN VOCALIC R	[2C68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B4, 0x003F };
    uint32_t const ces[9] = { 0x2C68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_252)
{
    // 115B4 0061;	
    // (𑖴) SIDDHAM VOWEL SIGN VOCALIC R	[2C68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B4, 0x0061 };
    uint32_t const ces[9] = { 0x2C68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_253)
{
    // 115B4 0041;	
    // (𑖴) SIDDHAM VOWEL SIGN VOCALIC R	[2C68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115B4, 0x0041 };
    uint32_t const ces[9] = { 0x2C68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_254)
{
    // 115B4 0062;	
    // (𑖴) SIDDHAM VOWEL SIGN VOCALIC R	[2C68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B4, 0x0062 };
    uint32_t const ces[9] = { 0x2C68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_255)
{
    // 115B5 0021;	
    // (𑖵) SIDDHAM VOWEL SIGN VOCALIC RR	[2C69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B5, 0x0021 };
    uint32_t const ces[9] = { 0x2C69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_256)
{
    // 115B5 003F;	
    // (𑖵) SIDDHAM VOWEL SIGN VOCALIC RR	[2C69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B5, 0x003F };
    uint32_t const ces[9] = { 0x2C69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_257)
{
    // 115B5 0061;	
    // (𑖵) SIDDHAM VOWEL SIGN VOCALIC RR	[2C69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B5, 0x0061 };
    uint32_t const ces[9] = { 0x2C69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_258)
{
    // 115B5 0041;	
    // (𑖵) SIDDHAM VOWEL SIGN VOCALIC RR	[2C69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115B5, 0x0041 };
    uint32_t const ces[9] = { 0x2C69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_259)
{
    // 115B5 0062;	
    // (𑖵) SIDDHAM VOWEL SIGN VOCALIC RR	[2C69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B5, 0x0062 };
    uint32_t const ces[9] = { 0x2C69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_260)
{
    // 115B8 0021;	
    // (𑖸) SIDDHAM VOWEL SIGN E	[2C6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B8, 0x0021 };
    uint32_t const ces[9] = { 0x2C6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_261)
{
    // 115B8 003F;	
    // (𑖸) SIDDHAM VOWEL SIGN E	[2C6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B8, 0x003F };
    uint32_t const ces[9] = { 0x2C6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_262)
{
    // 115B8 0061;	
    // (𑖸) SIDDHAM VOWEL SIGN E	[2C6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B8, 0x0061 };
    uint32_t const ces[9] = { 0x2C6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_263)
{
    // 115B8 0041;	
    // (𑖸) SIDDHAM VOWEL SIGN E	[2C6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115B8, 0x0041 };
    uint32_t const ces[9] = { 0x2C6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_264)
{
    // 115B8 0062;	
    // (𑖸) SIDDHAM VOWEL SIGN E	[2C6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B8, 0x0062 };
    uint32_t const ces[9] = { 0x2C6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_265)
{
    // 115B8 0001 115AF 0061;	
    // (𑖸'\u0001'𑖯) SIDDHAM VOWEL SIGN E, <START OF HEADING>, SIDDHAM VOWEL SIGN AA	[2C6A 2C63 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x115B8, 0x0001, 0x115AF, 0x0061 };
    uint32_t const ces[12] = { 0x2C6A, 0x2C63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_266)
{
    // 115B8 0591 115AF 0061;	
    // (𑖸֑𑖯) SIDDHAM VOWEL SIGN E, HEBREW ACCENT ETNAHTA, SIDDHAM VOWEL SIGN AA	[2C6A 2C63 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x115B8, 0x0591, 0x115AF, 0x0061 };
    uint32_t const ces[12] = { 0x2C6A, 0x2C63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_267)
{
    // 115B8 1D165 115AF 0061;	
    // (𑖸𝅥𑖯) SIDDHAM VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, SIDDHAM VOWEL SIGN AA	[2C6A 2C63 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x115B8, 0x1D165, 0x115AF, 0x0061 };
    uint32_t const ces[12] = { 0x2C6A, 0x2C63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_268)
{
    // 115B9 0021;	
    // (𑖹) SIDDHAM VOWEL SIGN AI	[2C6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B9, 0x0021 };
    uint32_t const ces[9] = { 0x2C6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_269)
{
    // 115B9 003F;	
    // (𑖹) SIDDHAM VOWEL SIGN AI	[2C6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B9, 0x003F };
    uint32_t const ces[9] = { 0x2C6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_270)
{
    // 115B9 0061;	
    // (𑖹) SIDDHAM VOWEL SIGN AI	[2C6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B9, 0x0061 };
    uint32_t const ces[9] = { 0x2C6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_271)
{
    // 115B9 0041;	
    // (𑖹) SIDDHAM VOWEL SIGN AI	[2C6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115B9, 0x0041 };
    uint32_t const ces[9] = { 0x2C6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_272)
{
    // 115B9 0062;	
    // (𑖹) SIDDHAM VOWEL SIGN AI	[2C6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115B9, 0x0062 };
    uint32_t const ces[9] = { 0x2C6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_273)
{
    // 115B9 0001 115AF 0061;	
    // (𑖹'\u0001'𑖯) SIDDHAM VOWEL SIGN AI, <START OF HEADING>, SIDDHAM VOWEL SIGN AA	[2C6B 2C63 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x115B9, 0x0001, 0x115AF, 0x0061 };
    uint32_t const ces[12] = { 0x2C6B, 0x2C63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_274)
{
    // 115B9 0591 115AF 0061;	
    // (𑖹֑𑖯) SIDDHAM VOWEL SIGN AI, HEBREW ACCENT ETNAHTA, SIDDHAM VOWEL SIGN AA	[2C6B 2C63 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x115B9, 0x0591, 0x115AF, 0x0061 };
    uint32_t const ces[12] = { 0x2C6B, 0x2C63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_275)
{
    // 115B9 1D165 115AF 0061;	
    // (𑖹𝅥𑖯) SIDDHAM VOWEL SIGN AI, MUSICAL SYMBOL COMBINING STEM, SIDDHAM VOWEL SIGN AA	[2C6B 2C63 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x115B9, 0x1D165, 0x115AF, 0x0061 };
    uint32_t const ces[12] = { 0x2C6B, 0x2C63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_276)
{
    // 115B8 115AF 0021;	
    // (𑖺) SIDDHAM VOWEL SIGN E, SIDDHAM VOWEL SIGN AA	[2C6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x115B8, 0x115AF, 0x0021 };
    uint32_t const ces[9] = { 0x2C6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_277)
{
    // 115BA 0021;	
    // (𑖺) SIDDHAM VOWEL SIGN O	[2C6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115BA, 0x0021 };
    uint32_t const ces[9] = { 0x2C6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_278)
{
    // 115B8 115AF 003F;	
    // (𑖺) SIDDHAM VOWEL SIGN E, SIDDHAM VOWEL SIGN AA	[2C6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x115B8, 0x115AF, 0x003F };
    uint32_t const ces[9] = { 0x2C6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_279)
{
    // 115BA 003F;	
    // (𑖺) SIDDHAM VOWEL SIGN O	[2C6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115BA, 0x003F };
    uint32_t const ces[9] = { 0x2C6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_280)
{
    // 115B8 115AF 0061;	
    // (𑖺) SIDDHAM VOWEL SIGN E, SIDDHAM VOWEL SIGN AA	[2C6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x115B8, 0x115AF, 0x0061 };
    uint32_t const ces[9] = { 0x2C6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_281)
{
    // 115BA 0061;	
    // (𑖺) SIDDHAM VOWEL SIGN O	[2C6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115BA, 0x0061 };
    uint32_t const ces[9] = { 0x2C6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_282)
{
    // 115B8 115AF 0041;	
    // (𑖺) SIDDHAM VOWEL SIGN E, SIDDHAM VOWEL SIGN AA	[2C6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x115B8, 0x115AF, 0x0041 };
    uint32_t const ces[9] = { 0x2C6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_283)
{
    // 115BA 0041;	
    // (𑖺) SIDDHAM VOWEL SIGN O	[2C6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115BA, 0x0041 };
    uint32_t const ces[9] = { 0x2C6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_284)
{
    // 115B8 115AF 0062;	
    // (𑖺) SIDDHAM VOWEL SIGN E, SIDDHAM VOWEL SIGN AA	[2C6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x115B8, 0x115AF, 0x0062 };
    uint32_t const ces[9] = { 0x2C6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_285)
{
    // 115BA 0062;	
    // (𑖺) SIDDHAM VOWEL SIGN O	[2C6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115BA, 0x0062 };
    uint32_t const ces[9] = { 0x2C6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_286)
{
    // 115B9 115AF 0021;	
    // (𑖻) SIDDHAM VOWEL SIGN AI, SIDDHAM VOWEL SIGN AA	[2C6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x115B9, 0x115AF, 0x0021 };
    uint32_t const ces[9] = { 0x2C6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_287)
{
    // 115BB 0021;	
    // (𑖻) SIDDHAM VOWEL SIGN AU	[2C6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115BB, 0x0021 };
    uint32_t const ces[9] = { 0x2C6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_288)
{
    // 115B9 115AF 003F;	
    // (𑖻) SIDDHAM VOWEL SIGN AI, SIDDHAM VOWEL SIGN AA	[2C6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x115B9, 0x115AF, 0x003F };
    uint32_t const ces[9] = { 0x2C6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_289)
{
    // 115BB 003F;	
    // (𑖻) SIDDHAM VOWEL SIGN AU	[2C6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115BB, 0x003F };
    uint32_t const ces[9] = { 0x2C6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_290)
{
    // 115B9 115AF 0061;	
    // (𑖻) SIDDHAM VOWEL SIGN AI, SIDDHAM VOWEL SIGN AA	[2C6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x115B9, 0x115AF, 0x0061 };
    uint32_t const ces[9] = { 0x2C6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_291)
{
    // 115BB 0061;	
    // (𑖻) SIDDHAM VOWEL SIGN AU	[2C6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115BB, 0x0061 };
    uint32_t const ces[9] = { 0x2C6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_292)
{
    // 115B9 115AF 0041;	
    // (𑖻) SIDDHAM VOWEL SIGN AI, SIDDHAM VOWEL SIGN AA	[2C6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x115B9, 0x115AF, 0x0041 };
    uint32_t const ces[9] = { 0x2C6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_293)
{
    // 115BB 0041;	
    // (𑖻) SIDDHAM VOWEL SIGN AU	[2C6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115BB, 0x0041 };
    uint32_t const ces[9] = { 0x2C6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_294)
{
    // 115B9 115AF 0062;	
    // (𑖻) SIDDHAM VOWEL SIGN AI, SIDDHAM VOWEL SIGN AA	[2C6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x115B9, 0x115AF, 0x0062 };
    uint32_t const ces[9] = { 0x2C6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_295)
{
    // 115BB 0062;	
    // (𑖻) SIDDHAM VOWEL SIGN AU	[2C6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115BB, 0x0062 };
    uint32_t const ces[9] = { 0x2C6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_296)
{
    // 0334 115BF;	
    // (𑖿) SIDDHAM SIGN VIRAMA	[2C6E | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x115BF };
    uint32_t const ces[8] = { 0x2C6E, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_297)
{
    // 115BF 0334;	
    // (𑖿) SIDDHAM SIGN VIRAMA	[2C6E | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115BF, 0x0334 };
    uint32_t const ces[8] = { 0x2C6E, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_298)
{
    // 115BF 0021;	
    // (𑖿) SIDDHAM SIGN VIRAMA	[2C6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115BF, 0x0021 };
    uint32_t const ces[9] = { 0x2C6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_299)
{
    // 115BF 003F;	
    // (𑖿) SIDDHAM SIGN VIRAMA	[2C6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115BF, 0x003F };
    uint32_t const ces[9] = { 0x2C6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_300)
{
    // 115BF 0061;	
    // (𑖿) SIDDHAM SIGN VIRAMA	[2C6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115BF, 0x0061 };
    uint32_t const ces[9] = { 0x2C6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_301)
{
    // 115BF 0041;	
    // (𑖿) SIDDHAM SIGN VIRAMA	[2C6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x115BF, 0x0041 };
    uint32_t const ces[9] = { 0x2C6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_302)
{
    // 115BF 0062;	
    // (𑖿) SIDDHAM SIGN VIRAMA	[2C6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x115BF, 0x0062 };
    uint32_t const ces[9] = { 0x2C6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_303)
{
    // 11600 0021;	
    // (𑘀) MODI LETTER A	[2C6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11600, 0x0021 };
    uint32_t const ces[9] = { 0x2C6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_304)
{
    // 11600 003F;	
    // (𑘀) MODI LETTER A	[2C6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11600, 0x003F };
    uint32_t const ces[9] = { 0x2C6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_305)
{
    // 11600 0061;	
    // (𑘀) MODI LETTER A	[2C6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11600, 0x0061 };
    uint32_t const ces[9] = { 0x2C6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_306)
{
    // 11600 0041;	
    // (𑘀) MODI LETTER A	[2C6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11600, 0x0041 };
    uint32_t const ces[9] = { 0x2C6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_307)
{
    // 11600 0062;	
    // (𑘀) MODI LETTER A	[2C6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11600, 0x0062 };
    uint32_t const ces[9] = { 0x2C6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_308)
{
    // 11601 0021;	
    // (𑘁) MODI LETTER AA	[2C70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11601, 0x0021 };
    uint32_t const ces[9] = { 0x2C70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_309)
{
    // 11601 003F;	
    // (𑘁) MODI LETTER AA	[2C70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11601, 0x003F };
    uint32_t const ces[9] = { 0x2C70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_310)
{
    // 11601 0061;	
    // (𑘁) MODI LETTER AA	[2C70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11601, 0x0061 };
    uint32_t const ces[9] = { 0x2C70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_311)
{
    // 11601 0041;	
    // (𑘁) MODI LETTER AA	[2C70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11601, 0x0041 };
    uint32_t const ces[9] = { 0x2C70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_312)
{
    // 11601 0062;	
    // (𑘁) MODI LETTER AA	[2C70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11601, 0x0062 };
    uint32_t const ces[9] = { 0x2C70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_313)
{
    // 11602 0021;	
    // (𑘂) MODI LETTER I	[2C71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11602, 0x0021 };
    uint32_t const ces[9] = { 0x2C71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_314)
{
    // 11602 003F;	
    // (𑘂) MODI LETTER I	[2C71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11602, 0x003F };
    uint32_t const ces[9] = { 0x2C71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_315)
{
    // 11602 0061;	
    // (𑘂) MODI LETTER I	[2C71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11602, 0x0061 };
    uint32_t const ces[9] = { 0x2C71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_316)
{
    // 11602 0041;	
    // (𑘂) MODI LETTER I	[2C71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11602, 0x0041 };
    uint32_t const ces[9] = { 0x2C71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_317)
{
    // 11602 0062;	
    // (𑘂) MODI LETTER I	[2C71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11602, 0x0062 };
    uint32_t const ces[9] = { 0x2C71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_318)
{
    // 11603 0021;	
    // (𑘃) MODI LETTER II	[2C72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11603, 0x0021 };
    uint32_t const ces[9] = { 0x2C72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_319)
{
    // 11603 003F;	
    // (𑘃) MODI LETTER II	[2C72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11603, 0x003F };
    uint32_t const ces[9] = { 0x2C72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_320)
{
    // 11603 0061;	
    // (𑘃) MODI LETTER II	[2C72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11603, 0x0061 };
    uint32_t const ces[9] = { 0x2C72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_321)
{
    // 11603 0041;	
    // (𑘃) MODI LETTER II	[2C72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11603, 0x0041 };
    uint32_t const ces[9] = { 0x2C72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_322)
{
    // 11603 0062;	
    // (𑘃) MODI LETTER II	[2C72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11603, 0x0062 };
    uint32_t const ces[9] = { 0x2C72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_323)
{
    // 11604 0021;	
    // (𑘄) MODI LETTER U	[2C73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11604, 0x0021 };
    uint32_t const ces[9] = { 0x2C73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_324)
{
    // 11604 003F;	
    // (𑘄) MODI LETTER U	[2C73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11604, 0x003F };
    uint32_t const ces[9] = { 0x2C73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_325)
{
    // 11604 0061;	
    // (𑘄) MODI LETTER U	[2C73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11604, 0x0061 };
    uint32_t const ces[9] = { 0x2C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_326)
{
    // 11604 0041;	
    // (𑘄) MODI LETTER U	[2C73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11604, 0x0041 };
    uint32_t const ces[9] = { 0x2C73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_327)
{
    // 11604 0062;	
    // (𑘄) MODI LETTER U	[2C73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11604, 0x0062 };
    uint32_t const ces[9] = { 0x2C73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_328)
{
    // 11605 0021;	
    // (𑘅) MODI LETTER UU	[2C74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11605, 0x0021 };
    uint32_t const ces[9] = { 0x2C74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_329)
{
    // 11605 003F;	
    // (𑘅) MODI LETTER UU	[2C74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11605, 0x003F };
    uint32_t const ces[9] = { 0x2C74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_330)
{
    // 11605 0061;	
    // (𑘅) MODI LETTER UU	[2C74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11605, 0x0061 };
    uint32_t const ces[9] = { 0x2C74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_331)
{
    // 11605 0041;	
    // (𑘅) MODI LETTER UU	[2C74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11605, 0x0041 };
    uint32_t const ces[9] = { 0x2C74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_332)
{
    // 11605 0062;	
    // (𑘅) MODI LETTER UU	[2C74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11605, 0x0062 };
    uint32_t const ces[9] = { 0x2C74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_333)
{
    // 11606 0021;	
    // (𑘆) MODI LETTER VOCALIC R	[2C75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11606, 0x0021 };
    uint32_t const ces[9] = { 0x2C75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_334)
{
    // 11606 003F;	
    // (𑘆) MODI LETTER VOCALIC R	[2C75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11606, 0x003F };
    uint32_t const ces[9] = { 0x2C75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_335)
{
    // 11606 0061;	
    // (𑘆) MODI LETTER VOCALIC R	[2C75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11606, 0x0061 };
    uint32_t const ces[9] = { 0x2C75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_336)
{
    // 11606 0041;	
    // (𑘆) MODI LETTER VOCALIC R	[2C75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11606, 0x0041 };
    uint32_t const ces[9] = { 0x2C75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_337)
{
    // 11606 0062;	
    // (𑘆) MODI LETTER VOCALIC R	[2C75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11606, 0x0062 };
    uint32_t const ces[9] = { 0x2C75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_338)
{
    // 11607 0021;	
    // (𑘇) MODI LETTER VOCALIC RR	[2C76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11607, 0x0021 };
    uint32_t const ces[9] = { 0x2C76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_339)
{
    // 11607 003F;	
    // (𑘇) MODI LETTER VOCALIC RR	[2C76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11607, 0x003F };
    uint32_t const ces[9] = { 0x2C76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_340)
{
    // 11607 0061;	
    // (𑘇) MODI LETTER VOCALIC RR	[2C76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11607, 0x0061 };
    uint32_t const ces[9] = { 0x2C76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_341)
{
    // 11607 0041;	
    // (𑘇) MODI LETTER VOCALIC RR	[2C76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11607, 0x0041 };
    uint32_t const ces[9] = { 0x2C76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_342)
{
    // 11607 0062;	
    // (𑘇) MODI LETTER VOCALIC RR	[2C76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11607, 0x0062 };
    uint32_t const ces[9] = { 0x2C76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_343)
{
    // 11608 0021;	
    // (𑘈) MODI LETTER VOCALIC L	[2C77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11608, 0x0021 };
    uint32_t const ces[9] = { 0x2C77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_344)
{
    // 11608 003F;	
    // (𑘈) MODI LETTER VOCALIC L	[2C77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11608, 0x003F };
    uint32_t const ces[9] = { 0x2C77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_345)
{
    // 11608 0061;	
    // (𑘈) MODI LETTER VOCALIC L	[2C77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11608, 0x0061 };
    uint32_t const ces[9] = { 0x2C77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_346)
{
    // 11608 0041;	
    // (𑘈) MODI LETTER VOCALIC L	[2C77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11608, 0x0041 };
    uint32_t const ces[9] = { 0x2C77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_347)
{
    // 11608 0062;	
    // (𑘈) MODI LETTER VOCALIC L	[2C77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11608, 0x0062 };
    uint32_t const ces[9] = { 0x2C77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_348)
{
    // 11609 0021;	
    // (𑘉) MODI LETTER VOCALIC LL	[2C78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11609, 0x0021 };
    uint32_t const ces[9] = { 0x2C78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_349)
{
    // 11609 003F;	
    // (𑘉) MODI LETTER VOCALIC LL	[2C78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11609, 0x003F };
    uint32_t const ces[9] = { 0x2C78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_350)
{
    // 11609 0061;	
    // (𑘉) MODI LETTER VOCALIC LL	[2C78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11609, 0x0061 };
    uint32_t const ces[9] = { 0x2C78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_351)
{
    // 11609 0041;	
    // (𑘉) MODI LETTER VOCALIC LL	[2C78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11609, 0x0041 };
    uint32_t const ces[9] = { 0x2C78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_352)
{
    // 11609 0062;	
    // (𑘉) MODI LETTER VOCALIC LL	[2C78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11609, 0x0062 };
    uint32_t const ces[9] = { 0x2C78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_353)
{
    // 1160A 0021;	
    // (𑘊) MODI LETTER E	[2C79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160A, 0x0021 };
    uint32_t const ces[9] = { 0x2C79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_354)
{
    // 1160A 003F;	
    // (𑘊) MODI LETTER E	[2C79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160A, 0x003F };
    uint32_t const ces[9] = { 0x2C79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_355)
{
    // 1160A 0061;	
    // (𑘊) MODI LETTER E	[2C79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160A, 0x0061 };
    uint32_t const ces[9] = { 0x2C79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_356)
{
    // 1160A 0041;	
    // (𑘊) MODI LETTER E	[2C79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1160A, 0x0041 };
    uint32_t const ces[9] = { 0x2C79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_357)
{
    // 1160A 0062;	
    // (𑘊) MODI LETTER E	[2C79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160A, 0x0062 };
    uint32_t const ces[9] = { 0x2C79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_358)
{
    // 1160B 0021;	
    // (𑘋) MODI LETTER AI	[2C7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160B, 0x0021 };
    uint32_t const ces[9] = { 0x2C7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_359)
{
    // 1160B 003F;	
    // (𑘋) MODI LETTER AI	[2C7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160B, 0x003F };
    uint32_t const ces[9] = { 0x2C7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_360)
{
    // 1160B 0061;	
    // (𑘋) MODI LETTER AI	[2C7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160B, 0x0061 };
    uint32_t const ces[9] = { 0x2C7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_361)
{
    // 1160B 0041;	
    // (𑘋) MODI LETTER AI	[2C7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1160B, 0x0041 };
    uint32_t const ces[9] = { 0x2C7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_362)
{
    // 1160B 0062;	
    // (𑘋) MODI LETTER AI	[2C7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160B, 0x0062 };
    uint32_t const ces[9] = { 0x2C7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_363)
{
    // 1160C 0021;	
    // (𑘌) MODI LETTER O	[2C7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160C, 0x0021 };
    uint32_t const ces[9] = { 0x2C7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_364)
{
    // 1160C 003F;	
    // (𑘌) MODI LETTER O	[2C7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160C, 0x003F };
    uint32_t const ces[9] = { 0x2C7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_365)
{
    // 1160C 0061;	
    // (𑘌) MODI LETTER O	[2C7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160C, 0x0061 };
    uint32_t const ces[9] = { 0x2C7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_366)
{
    // 1160C 0041;	
    // (𑘌) MODI LETTER O	[2C7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1160C, 0x0041 };
    uint32_t const ces[9] = { 0x2C7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_367)
{
    // 1160C 0062;	
    // (𑘌) MODI LETTER O	[2C7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160C, 0x0062 };
    uint32_t const ces[9] = { 0x2C7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_368)
{
    // 1160D 0021;	
    // (𑘍) MODI LETTER AU	[2C7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160D, 0x0021 };
    uint32_t const ces[9] = { 0x2C7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_369)
{
    // 1160D 003F;	
    // (𑘍) MODI LETTER AU	[2C7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160D, 0x003F };
    uint32_t const ces[9] = { 0x2C7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_370)
{
    // 1160D 0061;	
    // (𑘍) MODI LETTER AU	[2C7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160D, 0x0061 };
    uint32_t const ces[9] = { 0x2C7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_371)
{
    // 1160D 0041;	
    // (𑘍) MODI LETTER AU	[2C7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1160D, 0x0041 };
    uint32_t const ces[9] = { 0x2C7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_372)
{
    // 1160D 0062;	
    // (𑘍) MODI LETTER AU	[2C7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160D, 0x0062 };
    uint32_t const ces[9] = { 0x2C7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_373)
{
    // 1160E 0021;	
    // (𑘎) MODI LETTER KA	[2C7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160E, 0x0021 };
    uint32_t const ces[9] = { 0x2C7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_374)
{
    // 1160E 003F;	
    // (𑘎) MODI LETTER KA	[2C7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160E, 0x003F };
    uint32_t const ces[9] = { 0x2C7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_375)
{
    // 1160E 0061;	
    // (𑘎) MODI LETTER KA	[2C7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160E, 0x0061 };
    uint32_t const ces[9] = { 0x2C7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_376)
{
    // 1160E 0041;	
    // (𑘎) MODI LETTER KA	[2C7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1160E, 0x0041 };
    uint32_t const ces[9] = { 0x2C7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_377)
{
    // 1160E 0062;	
    // (𑘎) MODI LETTER KA	[2C7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160E, 0x0062 };
    uint32_t const ces[9] = { 0x2C7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_378)
{
    // 1160F 0021;	
    // (𑘏) MODI LETTER KHA	[2C7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160F, 0x0021 };
    uint32_t const ces[9] = { 0x2C7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_379)
{
    // 1160F 003F;	
    // (𑘏) MODI LETTER KHA	[2C7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160F, 0x003F };
    uint32_t const ces[9] = { 0x2C7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_380)
{
    // 1160F 0061;	
    // (𑘏) MODI LETTER KHA	[2C7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160F, 0x0061 };
    uint32_t const ces[9] = { 0x2C7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_381)
{
    // 1160F 0041;	
    // (𑘏) MODI LETTER KHA	[2C7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1160F, 0x0041 };
    uint32_t const ces[9] = { 0x2C7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_382)
{
    // 1160F 0062;	
    // (𑘏) MODI LETTER KHA	[2C7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1160F, 0x0062 };
    uint32_t const ces[9] = { 0x2C7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_383)
{
    // 11610 0021;	
    // (𑘐) MODI LETTER GA	[2C7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11610, 0x0021 };
    uint32_t const ces[9] = { 0x2C7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_384)
{
    // 11610 003F;	
    // (𑘐) MODI LETTER GA	[2C7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11610, 0x003F };
    uint32_t const ces[9] = { 0x2C7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_385)
{
    // 11610 0061;	
    // (𑘐) MODI LETTER GA	[2C7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11610, 0x0061 };
    uint32_t const ces[9] = { 0x2C7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_386)
{
    // 11610 0041;	
    // (𑘐) MODI LETTER GA	[2C7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11610, 0x0041 };
    uint32_t const ces[9] = { 0x2C7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_387)
{
    // 11610 0062;	
    // (𑘐) MODI LETTER GA	[2C7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11610, 0x0062 };
    uint32_t const ces[9] = { 0x2C7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_388)
{
    // 11611 0021;	
    // (𑘑) MODI LETTER GHA	[2C80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11611, 0x0021 };
    uint32_t const ces[9] = { 0x2C80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_389)
{
    // 11611 003F;	
    // (𑘑) MODI LETTER GHA	[2C80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11611, 0x003F };
    uint32_t const ces[9] = { 0x2C80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_390)
{
    // 11611 0061;	
    // (𑘑) MODI LETTER GHA	[2C80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11611, 0x0061 };
    uint32_t const ces[9] = { 0x2C80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_391)
{
    // 11611 0041;	
    // (𑘑) MODI LETTER GHA	[2C80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11611, 0x0041 };
    uint32_t const ces[9] = { 0x2C80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_392)
{
    // 11611 0062;	
    // (𑘑) MODI LETTER GHA	[2C80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11611, 0x0062 };
    uint32_t const ces[9] = { 0x2C80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_393)
{
    // 11612 0021;	
    // (𑘒) MODI LETTER NGA	[2C81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11612, 0x0021 };
    uint32_t const ces[9] = { 0x2C81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_394)
{
    // 11612 003F;	
    // (𑘒) MODI LETTER NGA	[2C81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11612, 0x003F };
    uint32_t const ces[9] = { 0x2C81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_395)
{
    // 11612 0061;	
    // (𑘒) MODI LETTER NGA	[2C81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11612, 0x0061 };
    uint32_t const ces[9] = { 0x2C81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_396)
{
    // 11612 0041;	
    // (𑘒) MODI LETTER NGA	[2C81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11612, 0x0041 };
    uint32_t const ces[9] = { 0x2C81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_397)
{
    // 11612 0062;	
    // (𑘒) MODI LETTER NGA	[2C81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11612, 0x0062 };
    uint32_t const ces[9] = { 0x2C81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_398)
{
    // 11613 0021;	
    // (𑘓) MODI LETTER CA	[2C82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11613, 0x0021 };
    uint32_t const ces[9] = { 0x2C82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_399)
{
    // 11613 003F;	
    // (𑘓) MODI LETTER CA	[2C82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11613, 0x003F };
    uint32_t const ces[9] = { 0x2C82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_400)
{
    // 11613 0061;	
    // (𑘓) MODI LETTER CA	[2C82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11613, 0x0061 };
    uint32_t const ces[9] = { 0x2C82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_401)
{
    // 11613 0041;	
    // (𑘓) MODI LETTER CA	[2C82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11613, 0x0041 };
    uint32_t const ces[9] = { 0x2C82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_402)
{
    // 11613 0062;	
    // (𑘓) MODI LETTER CA	[2C82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11613, 0x0062 };
    uint32_t const ces[9] = { 0x2C82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_403)
{
    // 11614 0021;	
    // (𑘔) MODI LETTER CHA	[2C83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11614, 0x0021 };
    uint32_t const ces[9] = { 0x2C83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_404)
{
    // 11614 003F;	
    // (𑘔) MODI LETTER CHA	[2C83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11614, 0x003F };
    uint32_t const ces[9] = { 0x2C83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_405)
{
    // 11614 0061;	
    // (𑘔) MODI LETTER CHA	[2C83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11614, 0x0061 };
    uint32_t const ces[9] = { 0x2C83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_406)
{
    // 11614 0041;	
    // (𑘔) MODI LETTER CHA	[2C83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11614, 0x0041 };
    uint32_t const ces[9] = { 0x2C83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_407)
{
    // 11614 0062;	
    // (𑘔) MODI LETTER CHA	[2C83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11614, 0x0062 };
    uint32_t const ces[9] = { 0x2C83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_408)
{
    // 11615 0021;	
    // (𑘕) MODI LETTER JA	[2C84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11615, 0x0021 };
    uint32_t const ces[9] = { 0x2C84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_409)
{
    // 11615 003F;	
    // (𑘕) MODI LETTER JA	[2C84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11615, 0x003F };
    uint32_t const ces[9] = { 0x2C84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_410)
{
    // 11615 0061;	
    // (𑘕) MODI LETTER JA	[2C84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11615, 0x0061 };
    uint32_t const ces[9] = { 0x2C84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_411)
{
    // 11615 0041;	
    // (𑘕) MODI LETTER JA	[2C84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11615, 0x0041 };
    uint32_t const ces[9] = { 0x2C84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_412)
{
    // 11615 0062;	
    // (𑘕) MODI LETTER JA	[2C84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11615, 0x0062 };
    uint32_t const ces[9] = { 0x2C84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_413)
{
    // 11616 0021;	
    // (𑘖) MODI LETTER JHA	[2C85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11616, 0x0021 };
    uint32_t const ces[9] = { 0x2C85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_414)
{
    // 11616 003F;	
    // (𑘖) MODI LETTER JHA	[2C85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11616, 0x003F };
    uint32_t const ces[9] = { 0x2C85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_415)
{
    // 11616 0061;	
    // (𑘖) MODI LETTER JHA	[2C85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11616, 0x0061 };
    uint32_t const ces[9] = { 0x2C85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_416)
{
    // 11616 0041;	
    // (𑘖) MODI LETTER JHA	[2C85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11616, 0x0041 };
    uint32_t const ces[9] = { 0x2C85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_417)
{
    // 11616 0062;	
    // (𑘖) MODI LETTER JHA	[2C85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11616, 0x0062 };
    uint32_t const ces[9] = { 0x2C85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_418)
{
    // 11617 0021;	
    // (𑘗) MODI LETTER NYA	[2C86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11617, 0x0021 };
    uint32_t const ces[9] = { 0x2C86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_419)
{
    // 11617 003F;	
    // (𑘗) MODI LETTER NYA	[2C86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11617, 0x003F };
    uint32_t const ces[9] = { 0x2C86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_420)
{
    // 11617 0061;	
    // (𑘗) MODI LETTER NYA	[2C86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11617, 0x0061 };
    uint32_t const ces[9] = { 0x2C86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_421)
{
    // 11617 0041;	
    // (𑘗) MODI LETTER NYA	[2C86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11617, 0x0041 };
    uint32_t const ces[9] = { 0x2C86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_422)
{
    // 11617 0062;	
    // (𑘗) MODI LETTER NYA	[2C86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11617, 0x0062 };
    uint32_t const ces[9] = { 0x2C86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_423)
{
    // 11618 0021;	
    // (𑘘) MODI LETTER TTA	[2C87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11618, 0x0021 };
    uint32_t const ces[9] = { 0x2C87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_424)
{
    // 11618 003F;	
    // (𑘘) MODI LETTER TTA	[2C87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11618, 0x003F };
    uint32_t const ces[9] = { 0x2C87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_425)
{
    // 11618 0061;	
    // (𑘘) MODI LETTER TTA	[2C87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11618, 0x0061 };
    uint32_t const ces[9] = { 0x2C87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_426)
{
    // 11618 0041;	
    // (𑘘) MODI LETTER TTA	[2C87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11618, 0x0041 };
    uint32_t const ces[9] = { 0x2C87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_427)
{
    // 11618 0062;	
    // (𑘘) MODI LETTER TTA	[2C87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11618, 0x0062 };
    uint32_t const ces[9] = { 0x2C87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_428)
{
    // 11619 0021;	
    // (𑘙) MODI LETTER TTHA	[2C88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11619, 0x0021 };
    uint32_t const ces[9] = { 0x2C88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_429)
{
    // 11619 003F;	
    // (𑘙) MODI LETTER TTHA	[2C88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11619, 0x003F };
    uint32_t const ces[9] = { 0x2C88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_430)
{
    // 11619 0061;	
    // (𑘙) MODI LETTER TTHA	[2C88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11619, 0x0061 };
    uint32_t const ces[9] = { 0x2C88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_431)
{
    // 11619 0041;	
    // (𑘙) MODI LETTER TTHA	[2C88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11619, 0x0041 };
    uint32_t const ces[9] = { 0x2C88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_432)
{
    // 11619 0062;	
    // (𑘙) MODI LETTER TTHA	[2C88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11619, 0x0062 };
    uint32_t const ces[9] = { 0x2C88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_433)
{
    // 1161A 0021;	
    // (𑘚) MODI LETTER DDA	[2C89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161A, 0x0021 };
    uint32_t const ces[9] = { 0x2C89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_434)
{
    // 1161A 003F;	
    // (𑘚) MODI LETTER DDA	[2C89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161A, 0x003F };
    uint32_t const ces[9] = { 0x2C89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_435)
{
    // 1161A 0061;	
    // (𑘚) MODI LETTER DDA	[2C89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161A, 0x0061 };
    uint32_t const ces[9] = { 0x2C89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_436)
{
    // 1161A 0041;	
    // (𑘚) MODI LETTER DDA	[2C89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1161A, 0x0041 };
    uint32_t const ces[9] = { 0x2C89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_437)
{
    // 1161A 0062;	
    // (𑘚) MODI LETTER DDA	[2C89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161A, 0x0062 };
    uint32_t const ces[9] = { 0x2C89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_438)
{
    // 1161B 0021;	
    // (𑘛) MODI LETTER DDHA	[2C8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161B, 0x0021 };
    uint32_t const ces[9] = { 0x2C8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_439)
{
    // 1161B 003F;	
    // (𑘛) MODI LETTER DDHA	[2C8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161B, 0x003F };
    uint32_t const ces[9] = { 0x2C8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_440)
{
    // 1161B 0061;	
    // (𑘛) MODI LETTER DDHA	[2C8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161B, 0x0061 };
    uint32_t const ces[9] = { 0x2C8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_441)
{
    // 1161B 0041;	
    // (𑘛) MODI LETTER DDHA	[2C8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1161B, 0x0041 };
    uint32_t const ces[9] = { 0x2C8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_442)
{
    // 1161B 0062;	
    // (𑘛) MODI LETTER DDHA	[2C8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161B, 0x0062 };
    uint32_t const ces[9] = { 0x2C8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_443)
{
    // 1161C 0021;	
    // (𑘜) MODI LETTER NNA	[2C8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161C, 0x0021 };
    uint32_t const ces[9] = { 0x2C8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_444)
{
    // 1161C 003F;	
    // (𑘜) MODI LETTER NNA	[2C8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161C, 0x003F };
    uint32_t const ces[9] = { 0x2C8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_445)
{
    // 1161C 0061;	
    // (𑘜) MODI LETTER NNA	[2C8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161C, 0x0061 };
    uint32_t const ces[9] = { 0x2C8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_446)
{
    // 1161C 0041;	
    // (𑘜) MODI LETTER NNA	[2C8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1161C, 0x0041 };
    uint32_t const ces[9] = { 0x2C8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_447)
{
    // 1161C 0062;	
    // (𑘜) MODI LETTER NNA	[2C8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161C, 0x0062 };
    uint32_t const ces[9] = { 0x2C8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_448)
{
    // 1161D 0021;	
    // (𑘝) MODI LETTER TA	[2C8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161D, 0x0021 };
    uint32_t const ces[9] = { 0x2C8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_449)
{
    // 1161D 003F;	
    // (𑘝) MODI LETTER TA	[2C8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161D, 0x003F };
    uint32_t const ces[9] = { 0x2C8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_450)
{
    // 1161D 0061;	
    // (𑘝) MODI LETTER TA	[2C8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161D, 0x0061 };
    uint32_t const ces[9] = { 0x2C8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_451)
{
    // 1161D 0041;	
    // (𑘝) MODI LETTER TA	[2C8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1161D, 0x0041 };
    uint32_t const ces[9] = { 0x2C8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_452)
{
    // 1161D 0062;	
    // (𑘝) MODI LETTER TA	[2C8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161D, 0x0062 };
    uint32_t const ces[9] = { 0x2C8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_453)
{
    // 1161E 0021;	
    // (𑘞) MODI LETTER THA	[2C8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161E, 0x0021 };
    uint32_t const ces[9] = { 0x2C8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_454)
{
    // 1161E 003F;	
    // (𑘞) MODI LETTER THA	[2C8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161E, 0x003F };
    uint32_t const ces[9] = { 0x2C8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_455)
{
    // 1161E 0061;	
    // (𑘞) MODI LETTER THA	[2C8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161E, 0x0061 };
    uint32_t const ces[9] = { 0x2C8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_456)
{
    // 1161E 0041;	
    // (𑘞) MODI LETTER THA	[2C8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1161E, 0x0041 };
    uint32_t const ces[9] = { 0x2C8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_457)
{
    // 1161E 0062;	
    // (𑘞) MODI LETTER THA	[2C8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161E, 0x0062 };
    uint32_t const ces[9] = { 0x2C8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_458)
{
    // 1161F 0021;	
    // (𑘟) MODI LETTER DA	[2C8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161F, 0x0021 };
    uint32_t const ces[9] = { 0x2C8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_459)
{
    // 1161F 003F;	
    // (𑘟) MODI LETTER DA	[2C8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161F, 0x003F };
    uint32_t const ces[9] = { 0x2C8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_460)
{
    // 1161F 0061;	
    // (𑘟) MODI LETTER DA	[2C8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161F, 0x0061 };
    uint32_t const ces[9] = { 0x2C8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_461)
{
    // 1161F 0041;	
    // (𑘟) MODI LETTER DA	[2C8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1161F, 0x0041 };
    uint32_t const ces[9] = { 0x2C8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_462)
{
    // 1161F 0062;	
    // (𑘟) MODI LETTER DA	[2C8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1161F, 0x0062 };
    uint32_t const ces[9] = { 0x2C8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_463)
{
    // 11620 0021;	
    // (𑘠) MODI LETTER DHA	[2C8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11620, 0x0021 };
    uint32_t const ces[9] = { 0x2C8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_464)
{
    // 11620 003F;	
    // (𑘠) MODI LETTER DHA	[2C8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11620, 0x003F };
    uint32_t const ces[9] = { 0x2C8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_465)
{
    // 11620 0061;	
    // (𑘠) MODI LETTER DHA	[2C8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11620, 0x0061 };
    uint32_t const ces[9] = { 0x2C8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_466)
{
    // 11620 0041;	
    // (𑘠) MODI LETTER DHA	[2C8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11620, 0x0041 };
    uint32_t const ces[9] = { 0x2C8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_467)
{
    // 11620 0062;	
    // (𑘠) MODI LETTER DHA	[2C8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11620, 0x0062 };
    uint32_t const ces[9] = { 0x2C8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_468)
{
    // 11621 0021;	
    // (𑘡) MODI LETTER NA	[2C90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11621, 0x0021 };
    uint32_t const ces[9] = { 0x2C90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_469)
{
    // 11621 003F;	
    // (𑘡) MODI LETTER NA	[2C90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11621, 0x003F };
    uint32_t const ces[9] = { 0x2C90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_470)
{
    // 11621 0061;	
    // (𑘡) MODI LETTER NA	[2C90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11621, 0x0061 };
    uint32_t const ces[9] = { 0x2C90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_471)
{
    // 11621 0041;	
    // (𑘡) MODI LETTER NA	[2C90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11621, 0x0041 };
    uint32_t const ces[9] = { 0x2C90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_472)
{
    // 11621 0062;	
    // (𑘡) MODI LETTER NA	[2C90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11621, 0x0062 };
    uint32_t const ces[9] = { 0x2C90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_473)
{
    // 11622 0021;	
    // (𑘢) MODI LETTER PA	[2C91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11622, 0x0021 };
    uint32_t const ces[9] = { 0x2C91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_474)
{
    // 11622 003F;	
    // (𑘢) MODI LETTER PA	[2C91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11622, 0x003F };
    uint32_t const ces[9] = { 0x2C91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_475)
{
    // 11622 0061;	
    // (𑘢) MODI LETTER PA	[2C91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11622, 0x0061 };
    uint32_t const ces[9] = { 0x2C91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_476)
{
    // 11622 0041;	
    // (𑘢) MODI LETTER PA	[2C91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11622, 0x0041 };
    uint32_t const ces[9] = { 0x2C91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_477)
{
    // 11622 0062;	
    // (𑘢) MODI LETTER PA	[2C91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11622, 0x0062 };
    uint32_t const ces[9] = { 0x2C91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_478)
{
    // 11623 0021;	
    // (𑘣) MODI LETTER PHA	[2C92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11623, 0x0021 };
    uint32_t const ces[9] = { 0x2C92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_479)
{
    // 11623 003F;	
    // (𑘣) MODI LETTER PHA	[2C92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11623, 0x003F };
    uint32_t const ces[9] = { 0x2C92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_480)
{
    // 11623 0061;	
    // (𑘣) MODI LETTER PHA	[2C92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11623, 0x0061 };
    uint32_t const ces[9] = { 0x2C92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_481)
{
    // 11623 0041;	
    // (𑘣) MODI LETTER PHA	[2C92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11623, 0x0041 };
    uint32_t const ces[9] = { 0x2C92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_482)
{
    // 11623 0062;	
    // (𑘣) MODI LETTER PHA	[2C92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11623, 0x0062 };
    uint32_t const ces[9] = { 0x2C92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_483)
{
    // 11624 0021;	
    // (𑘤) MODI LETTER BA	[2C93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11624, 0x0021 };
    uint32_t const ces[9] = { 0x2C93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_484)
{
    // 11624 003F;	
    // (𑘤) MODI LETTER BA	[2C93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11624, 0x003F };
    uint32_t const ces[9] = { 0x2C93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_485)
{
    // 11624 0061;	
    // (𑘤) MODI LETTER BA	[2C93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11624, 0x0061 };
    uint32_t const ces[9] = { 0x2C93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_486)
{
    // 11624 0041;	
    // (𑘤) MODI LETTER BA	[2C93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11624, 0x0041 };
    uint32_t const ces[9] = { 0x2C93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_487)
{
    // 11624 0062;	
    // (𑘤) MODI LETTER BA	[2C93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11624, 0x0062 };
    uint32_t const ces[9] = { 0x2C93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_488)
{
    // 11625 0021;	
    // (𑘥) MODI LETTER BHA	[2C94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11625, 0x0021 };
    uint32_t const ces[9] = { 0x2C94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_489)
{
    // 11625 003F;	
    // (𑘥) MODI LETTER BHA	[2C94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11625, 0x003F };
    uint32_t const ces[9] = { 0x2C94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_490)
{
    // 11625 0061;	
    // (𑘥) MODI LETTER BHA	[2C94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11625, 0x0061 };
    uint32_t const ces[9] = { 0x2C94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_491)
{
    // 11625 0041;	
    // (𑘥) MODI LETTER BHA	[2C94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11625, 0x0041 };
    uint32_t const ces[9] = { 0x2C94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_492)
{
    // 11625 0062;	
    // (𑘥) MODI LETTER BHA	[2C94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11625, 0x0062 };
    uint32_t const ces[9] = { 0x2C94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_493)
{
    // 11626 0021;	
    // (𑘦) MODI LETTER MA	[2C95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11626, 0x0021 };
    uint32_t const ces[9] = { 0x2C95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_494)
{
    // 11626 003F;	
    // (𑘦) MODI LETTER MA	[2C95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11626, 0x003F };
    uint32_t const ces[9] = { 0x2C95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_495)
{
    // 11626 0061;	
    // (𑘦) MODI LETTER MA	[2C95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11626, 0x0061 };
    uint32_t const ces[9] = { 0x2C95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_496)
{
    // 11626 0041;	
    // (𑘦) MODI LETTER MA	[2C95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x11626, 0x0041 };
    uint32_t const ces[9] = { 0x2C95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_497)
{
    // 11626 0062;	
    // (𑘦) MODI LETTER MA	[2C95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11626, 0x0062 };
    uint32_t const ces[9] = { 0x2C95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_498)
{
    // 11627 0021;	
    // (𑘧) MODI LETTER YA	[2C96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11627, 0x0021 };
    uint32_t const ces[9] = { 0x2C96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_180_499)
{
    // 11627 003F;	
    // (𑘧) MODI LETTER YA	[2C96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x11627, 0x003F };
    uint32_t const ces[9] = { 0x2C96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

