// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_363_000)
{
    // 4202 0041;	
    // (䈂) CJK UNIFIED IDEOGRAPH-4202	[FB80 C202 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4202, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC202, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_001)
{
    // 2F960 0041;	
    // (䈂) CJK COMPATIBILITY IDEOGRAPH-2F960	[FB80 C202 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F960, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC202, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_002)
{
    // 4202 0062;	
    // (䈂) CJK UNIFIED IDEOGRAPH-4202	[FB80 C202 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4202, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC202, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_003)
{
    // 2F960 0062;	
    // (䈂) CJK COMPATIBILITY IDEOGRAPH-2F960	[FB80 C202 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F960, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC202, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_004)
{
    // 4203 0021;	
    // (䈃) CJK UNIFIED IDEOGRAPH-4203	[FB80 C203 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4203, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC203, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_005)
{
    // 4203 003F;	
    // (䈃) CJK UNIFIED IDEOGRAPH-4203	[FB80 C203 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4203, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC203, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_006)
{
    // 4203 0061;	
    // (䈃) CJK UNIFIED IDEOGRAPH-4203	[FB80 C203 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4203, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC203, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_007)
{
    // 4203 0041;	
    // (䈃) CJK UNIFIED IDEOGRAPH-4203	[FB80 C203 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4203, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC203, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_008)
{
    // 4203 0062;	
    // (䈃) CJK UNIFIED IDEOGRAPH-4203	[FB80 C203 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4203, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC203, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_009)
{
    // 4204 0021;	
    // (䈄) CJK UNIFIED IDEOGRAPH-4204	[FB80 C204 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4204, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC204, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_010)
{
    // 4204 003F;	
    // (䈄) CJK UNIFIED IDEOGRAPH-4204	[FB80 C204 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4204, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC204, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_011)
{
    // 4204 0061;	
    // (䈄) CJK UNIFIED IDEOGRAPH-4204	[FB80 C204 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4204, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC204, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_012)
{
    // 4204 0041;	
    // (䈄) CJK UNIFIED IDEOGRAPH-4204	[FB80 C204 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4204, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC204, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_013)
{
    // 4204 0062;	
    // (䈄) CJK UNIFIED IDEOGRAPH-4204	[FB80 C204 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4204, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC204, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_014)
{
    // 4205 0021;	
    // (䈅) CJK UNIFIED IDEOGRAPH-4205	[FB80 C205 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4205, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC205, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_015)
{
    // 4205 003F;	
    // (䈅) CJK UNIFIED IDEOGRAPH-4205	[FB80 C205 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4205, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC205, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_016)
{
    // 4205 0061;	
    // (䈅) CJK UNIFIED IDEOGRAPH-4205	[FB80 C205 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4205, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC205, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_017)
{
    // 4205 0041;	
    // (䈅) CJK UNIFIED IDEOGRAPH-4205	[FB80 C205 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4205, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC205, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_018)
{
    // 4205 0062;	
    // (䈅) CJK UNIFIED IDEOGRAPH-4205	[FB80 C205 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4205, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC205, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_019)
{
    // 4206 0021;	
    // (䈆) CJK UNIFIED IDEOGRAPH-4206	[FB80 C206 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4206, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC206, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_020)
{
    // 4206 003F;	
    // (䈆) CJK UNIFIED IDEOGRAPH-4206	[FB80 C206 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4206, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC206, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_021)
{
    // 4206 0061;	
    // (䈆) CJK UNIFIED IDEOGRAPH-4206	[FB80 C206 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4206, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC206, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_022)
{
    // 4206 0041;	
    // (䈆) CJK UNIFIED IDEOGRAPH-4206	[FB80 C206 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4206, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC206, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_023)
{
    // 4206 0062;	
    // (䈆) CJK UNIFIED IDEOGRAPH-4206	[FB80 C206 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4206, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC206, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_024)
{
    // 4207 0021;	
    // (䈇) CJK UNIFIED IDEOGRAPH-4207	[FB80 C207 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4207, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC207, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_025)
{
    // 4207 003F;	
    // (䈇) CJK UNIFIED IDEOGRAPH-4207	[FB80 C207 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4207, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC207, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_026)
{
    // 4207 0061;	
    // (䈇) CJK UNIFIED IDEOGRAPH-4207	[FB80 C207 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4207, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC207, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_027)
{
    // 4207 0041;	
    // (䈇) CJK UNIFIED IDEOGRAPH-4207	[FB80 C207 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4207, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC207, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_028)
{
    // 4207 0062;	
    // (䈇) CJK UNIFIED IDEOGRAPH-4207	[FB80 C207 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4207, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC207, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_029)
{
    // 4208 0021;	
    // (䈈) CJK UNIFIED IDEOGRAPH-4208	[FB80 C208 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4208, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC208, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_030)
{
    // 4208 003F;	
    // (䈈) CJK UNIFIED IDEOGRAPH-4208	[FB80 C208 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4208, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC208, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_031)
{
    // 4208 0061;	
    // (䈈) CJK UNIFIED IDEOGRAPH-4208	[FB80 C208 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4208, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC208, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_032)
{
    // 4208 0041;	
    // (䈈) CJK UNIFIED IDEOGRAPH-4208	[FB80 C208 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4208, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC208, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_033)
{
    // 4208 0062;	
    // (䈈) CJK UNIFIED IDEOGRAPH-4208	[FB80 C208 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4208, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC208, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_034)
{
    // 4209 0021;	
    // (䈉) CJK UNIFIED IDEOGRAPH-4209	[FB80 C209 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4209, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC209, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_035)
{
    // 4209 003F;	
    // (䈉) CJK UNIFIED IDEOGRAPH-4209	[FB80 C209 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4209, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC209, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_036)
{
    // 4209 0061;	
    // (䈉) CJK UNIFIED IDEOGRAPH-4209	[FB80 C209 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4209, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_037)
{
    // 4209 0041;	
    // (䈉) CJK UNIFIED IDEOGRAPH-4209	[FB80 C209 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4209, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_038)
{
    // 4209 0062;	
    // (䈉) CJK UNIFIED IDEOGRAPH-4209	[FB80 C209 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4209, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC209, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_039)
{
    // 420A 0021;	
    // (䈊) CJK UNIFIED IDEOGRAPH-420A	[FB80 C20A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC20A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_040)
{
    // 420A 003F;	
    // (䈊) CJK UNIFIED IDEOGRAPH-420A	[FB80 C20A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC20A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_041)
{
    // 420A 0061;	
    // (䈊) CJK UNIFIED IDEOGRAPH-420A	[FB80 C20A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC20A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_042)
{
    // 420A 0041;	
    // (䈊) CJK UNIFIED IDEOGRAPH-420A	[FB80 C20A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x420A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC20A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_043)
{
    // 420A 0062;	
    // (䈊) CJK UNIFIED IDEOGRAPH-420A	[FB80 C20A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC20A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_044)
{
    // 420B 0021;	
    // (䈋) CJK UNIFIED IDEOGRAPH-420B	[FB80 C20B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC20B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_045)
{
    // 420B 003F;	
    // (䈋) CJK UNIFIED IDEOGRAPH-420B	[FB80 C20B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC20B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_046)
{
    // 420B 0061;	
    // (䈋) CJK UNIFIED IDEOGRAPH-420B	[FB80 C20B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC20B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_047)
{
    // 420B 0041;	
    // (䈋) CJK UNIFIED IDEOGRAPH-420B	[FB80 C20B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x420B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC20B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_048)
{
    // 420B 0062;	
    // (䈋) CJK UNIFIED IDEOGRAPH-420B	[FB80 C20B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC20B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_049)
{
    // 420C 0021;	
    // (䈌) CJK UNIFIED IDEOGRAPH-420C	[FB80 C20C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC20C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_050)
{
    // 420C 003F;	
    // (䈌) CJK UNIFIED IDEOGRAPH-420C	[FB80 C20C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC20C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_051)
{
    // 420C 0061;	
    // (䈌) CJK UNIFIED IDEOGRAPH-420C	[FB80 C20C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC20C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_052)
{
    // 420C 0041;	
    // (䈌) CJK UNIFIED IDEOGRAPH-420C	[FB80 C20C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x420C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC20C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_053)
{
    // 420C 0062;	
    // (䈌) CJK UNIFIED IDEOGRAPH-420C	[FB80 C20C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC20C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_054)
{
    // 420D 0021;	
    // (䈍) CJK UNIFIED IDEOGRAPH-420D	[FB80 C20D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC20D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_055)
{
    // 420D 003F;	
    // (䈍) CJK UNIFIED IDEOGRAPH-420D	[FB80 C20D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC20D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_056)
{
    // 420D 0061;	
    // (䈍) CJK UNIFIED IDEOGRAPH-420D	[FB80 C20D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC20D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_057)
{
    // 420D 0041;	
    // (䈍) CJK UNIFIED IDEOGRAPH-420D	[FB80 C20D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x420D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC20D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_058)
{
    // 420D 0062;	
    // (䈍) CJK UNIFIED IDEOGRAPH-420D	[FB80 C20D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC20D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_059)
{
    // 420E 0021;	
    // (䈎) CJK UNIFIED IDEOGRAPH-420E	[FB80 C20E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC20E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_060)
{
    // 420E 003F;	
    // (䈎) CJK UNIFIED IDEOGRAPH-420E	[FB80 C20E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC20E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_061)
{
    // 420E 0061;	
    // (䈎) CJK UNIFIED IDEOGRAPH-420E	[FB80 C20E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC20E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_062)
{
    // 420E 0041;	
    // (䈎) CJK UNIFIED IDEOGRAPH-420E	[FB80 C20E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x420E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC20E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_063)
{
    // 420E 0062;	
    // (䈎) CJK UNIFIED IDEOGRAPH-420E	[FB80 C20E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC20E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_064)
{
    // 420F 0021;	
    // (䈏) CJK UNIFIED IDEOGRAPH-420F	[FB80 C20F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC20F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_065)
{
    // 420F 003F;	
    // (䈏) CJK UNIFIED IDEOGRAPH-420F	[FB80 C20F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC20F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_066)
{
    // 420F 0061;	
    // (䈏) CJK UNIFIED IDEOGRAPH-420F	[FB80 C20F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC20F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_067)
{
    // 420F 0041;	
    // (䈏) CJK UNIFIED IDEOGRAPH-420F	[FB80 C20F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x420F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC20F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_068)
{
    // 420F 0062;	
    // (䈏) CJK UNIFIED IDEOGRAPH-420F	[FB80 C20F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x420F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC20F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_069)
{
    // 4210 0021;	
    // (䈐) CJK UNIFIED IDEOGRAPH-4210	[FB80 C210 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4210, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC210, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_070)
{
    // 4210 003F;	
    // (䈐) CJK UNIFIED IDEOGRAPH-4210	[FB80 C210 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4210, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC210, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_071)
{
    // 4210 0061;	
    // (䈐) CJK UNIFIED IDEOGRAPH-4210	[FB80 C210 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4210, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC210, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_072)
{
    // 4210 0041;	
    // (䈐) CJK UNIFIED IDEOGRAPH-4210	[FB80 C210 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4210, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC210, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_073)
{
    // 4210 0062;	
    // (䈐) CJK UNIFIED IDEOGRAPH-4210	[FB80 C210 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4210, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC210, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_074)
{
    // 4211 0021;	
    // (䈑) CJK UNIFIED IDEOGRAPH-4211	[FB80 C211 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4211, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC211, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_075)
{
    // 4211 003F;	
    // (䈑) CJK UNIFIED IDEOGRAPH-4211	[FB80 C211 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4211, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC211, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_076)
{
    // 4211 0061;	
    // (䈑) CJK UNIFIED IDEOGRAPH-4211	[FB80 C211 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4211, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC211, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_077)
{
    // 4211 0041;	
    // (䈑) CJK UNIFIED IDEOGRAPH-4211	[FB80 C211 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4211, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC211, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_078)
{
    // 4211 0062;	
    // (䈑) CJK UNIFIED IDEOGRAPH-4211	[FB80 C211 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4211, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC211, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_079)
{
    // 4212 0021;	
    // (䈒) CJK UNIFIED IDEOGRAPH-4212	[FB80 C212 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4212, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC212, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_080)
{
    // 4212 003F;	
    // (䈒) CJK UNIFIED IDEOGRAPH-4212	[FB80 C212 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4212, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC212, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_081)
{
    // 4212 0061;	
    // (䈒) CJK UNIFIED IDEOGRAPH-4212	[FB80 C212 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4212, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC212, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_082)
{
    // 4212 0041;	
    // (䈒) CJK UNIFIED IDEOGRAPH-4212	[FB80 C212 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4212, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC212, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_083)
{
    // 4212 0062;	
    // (䈒) CJK UNIFIED IDEOGRAPH-4212	[FB80 C212 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4212, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC212, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_084)
{
    // 4213 0021;	
    // (䈓) CJK UNIFIED IDEOGRAPH-4213	[FB80 C213 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4213, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC213, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_085)
{
    // 4213 003F;	
    // (䈓) CJK UNIFIED IDEOGRAPH-4213	[FB80 C213 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4213, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC213, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_086)
{
    // 4213 0061;	
    // (䈓) CJK UNIFIED IDEOGRAPH-4213	[FB80 C213 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4213, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC213, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_087)
{
    // 4213 0041;	
    // (䈓) CJK UNIFIED IDEOGRAPH-4213	[FB80 C213 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4213, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC213, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_088)
{
    // 4213 0062;	
    // (䈓) CJK UNIFIED IDEOGRAPH-4213	[FB80 C213 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4213, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC213, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_089)
{
    // 4214 0021;	
    // (䈔) CJK UNIFIED IDEOGRAPH-4214	[FB80 C214 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4214, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC214, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_090)
{
    // 4214 003F;	
    // (䈔) CJK UNIFIED IDEOGRAPH-4214	[FB80 C214 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4214, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC214, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_091)
{
    // 4214 0061;	
    // (䈔) CJK UNIFIED IDEOGRAPH-4214	[FB80 C214 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4214, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC214, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_092)
{
    // 4214 0041;	
    // (䈔) CJK UNIFIED IDEOGRAPH-4214	[FB80 C214 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4214, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC214, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_093)
{
    // 4214 0062;	
    // (䈔) CJK UNIFIED IDEOGRAPH-4214	[FB80 C214 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4214, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC214, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_094)
{
    // 4215 0021;	
    // (䈕) CJK UNIFIED IDEOGRAPH-4215	[FB80 C215 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4215, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC215, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_095)
{
    // 4215 003F;	
    // (䈕) CJK UNIFIED IDEOGRAPH-4215	[FB80 C215 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4215, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC215, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_096)
{
    // 4215 0061;	
    // (䈕) CJK UNIFIED IDEOGRAPH-4215	[FB80 C215 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4215, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC215, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_097)
{
    // 4215 0041;	
    // (䈕) CJK UNIFIED IDEOGRAPH-4215	[FB80 C215 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4215, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC215, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_098)
{
    // 4215 0062;	
    // (䈕) CJK UNIFIED IDEOGRAPH-4215	[FB80 C215 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4215, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC215, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_099)
{
    // 4216 0021;	
    // (䈖) CJK UNIFIED IDEOGRAPH-4216	[FB80 C216 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4216, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC216, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_100)
{
    // 4216 003F;	
    // (䈖) CJK UNIFIED IDEOGRAPH-4216	[FB80 C216 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4216, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC216, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_101)
{
    // 4216 0061;	
    // (䈖) CJK UNIFIED IDEOGRAPH-4216	[FB80 C216 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4216, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC216, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_102)
{
    // 4216 0041;	
    // (䈖) CJK UNIFIED IDEOGRAPH-4216	[FB80 C216 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4216, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC216, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_103)
{
    // 4216 0062;	
    // (䈖) CJK UNIFIED IDEOGRAPH-4216	[FB80 C216 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4216, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC216, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_104)
{
    // 4217 0021;	
    // (䈗) CJK UNIFIED IDEOGRAPH-4217	[FB80 C217 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4217, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC217, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_105)
{
    // 4217 003F;	
    // (䈗) CJK UNIFIED IDEOGRAPH-4217	[FB80 C217 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4217, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC217, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_106)
{
    // 4217 0061;	
    // (䈗) CJK UNIFIED IDEOGRAPH-4217	[FB80 C217 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4217, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC217, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_107)
{
    // 4217 0041;	
    // (䈗) CJK UNIFIED IDEOGRAPH-4217	[FB80 C217 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4217, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC217, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_108)
{
    // 4217 0062;	
    // (䈗) CJK UNIFIED IDEOGRAPH-4217	[FB80 C217 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4217, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC217, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_109)
{
    // 4218 0021;	
    // (䈘) CJK UNIFIED IDEOGRAPH-4218	[FB80 C218 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4218, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC218, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_110)
{
    // 4218 003F;	
    // (䈘) CJK UNIFIED IDEOGRAPH-4218	[FB80 C218 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4218, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC218, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_111)
{
    // 4218 0061;	
    // (䈘) CJK UNIFIED IDEOGRAPH-4218	[FB80 C218 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4218, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC218, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_112)
{
    // 4218 0041;	
    // (䈘) CJK UNIFIED IDEOGRAPH-4218	[FB80 C218 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4218, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC218, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_113)
{
    // 4218 0062;	
    // (䈘) CJK UNIFIED IDEOGRAPH-4218	[FB80 C218 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4218, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC218, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_114)
{
    // 4219 0021;	
    // (䈙) CJK UNIFIED IDEOGRAPH-4219	[FB80 C219 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4219, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC219, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_115)
{
    // 4219 003F;	
    // (䈙) CJK UNIFIED IDEOGRAPH-4219	[FB80 C219 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4219, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC219, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_116)
{
    // 4219 0061;	
    // (䈙) CJK UNIFIED IDEOGRAPH-4219	[FB80 C219 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4219, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC219, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_117)
{
    // 4219 0041;	
    // (䈙) CJK UNIFIED IDEOGRAPH-4219	[FB80 C219 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4219, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC219, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_118)
{
    // 4219 0062;	
    // (䈙) CJK UNIFIED IDEOGRAPH-4219	[FB80 C219 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4219, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC219, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_119)
{
    // 421A 0021;	
    // (䈚) CJK UNIFIED IDEOGRAPH-421A	[FB80 C21A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC21A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_120)
{
    // 421A 003F;	
    // (䈚) CJK UNIFIED IDEOGRAPH-421A	[FB80 C21A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC21A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_121)
{
    // 421A 0061;	
    // (䈚) CJK UNIFIED IDEOGRAPH-421A	[FB80 C21A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC21A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_122)
{
    // 421A 0041;	
    // (䈚) CJK UNIFIED IDEOGRAPH-421A	[FB80 C21A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x421A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC21A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_123)
{
    // 421A 0062;	
    // (䈚) CJK UNIFIED IDEOGRAPH-421A	[FB80 C21A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC21A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_124)
{
    // 421B 0021;	
    // (䈛) CJK UNIFIED IDEOGRAPH-421B	[FB80 C21B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC21B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_125)
{
    // 421B 003F;	
    // (䈛) CJK UNIFIED IDEOGRAPH-421B	[FB80 C21B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC21B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_126)
{
    // 421B 0061;	
    // (䈛) CJK UNIFIED IDEOGRAPH-421B	[FB80 C21B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC21B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_127)
{
    // 421B 0041;	
    // (䈛) CJK UNIFIED IDEOGRAPH-421B	[FB80 C21B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x421B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC21B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_128)
{
    // 421B 0062;	
    // (䈛) CJK UNIFIED IDEOGRAPH-421B	[FB80 C21B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC21B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_129)
{
    // 421C 0021;	
    // (䈜) CJK UNIFIED IDEOGRAPH-421C	[FB80 C21C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC21C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_130)
{
    // 421C 003F;	
    // (䈜) CJK UNIFIED IDEOGRAPH-421C	[FB80 C21C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC21C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_131)
{
    // 421C 0061;	
    // (䈜) CJK UNIFIED IDEOGRAPH-421C	[FB80 C21C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC21C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_132)
{
    // 421C 0041;	
    // (䈜) CJK UNIFIED IDEOGRAPH-421C	[FB80 C21C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x421C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC21C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_133)
{
    // 421C 0062;	
    // (䈜) CJK UNIFIED IDEOGRAPH-421C	[FB80 C21C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC21C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_134)
{
    // 421D 0021;	
    // (䈝) CJK UNIFIED IDEOGRAPH-421D	[FB80 C21D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC21D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_135)
{
    // 421D 003F;	
    // (䈝) CJK UNIFIED IDEOGRAPH-421D	[FB80 C21D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC21D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_136)
{
    // 421D 0061;	
    // (䈝) CJK UNIFIED IDEOGRAPH-421D	[FB80 C21D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC21D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_137)
{
    // 421D 0041;	
    // (䈝) CJK UNIFIED IDEOGRAPH-421D	[FB80 C21D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x421D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC21D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_138)
{
    // 421D 0062;	
    // (䈝) CJK UNIFIED IDEOGRAPH-421D	[FB80 C21D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC21D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_139)
{
    // 421E 0021;	
    // (䈞) CJK UNIFIED IDEOGRAPH-421E	[FB80 C21E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC21E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_140)
{
    // 421E 003F;	
    // (䈞) CJK UNIFIED IDEOGRAPH-421E	[FB80 C21E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC21E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_141)
{
    // 421E 0061;	
    // (䈞) CJK UNIFIED IDEOGRAPH-421E	[FB80 C21E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC21E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_142)
{
    // 421E 0041;	
    // (䈞) CJK UNIFIED IDEOGRAPH-421E	[FB80 C21E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x421E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC21E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_143)
{
    // 421E 0062;	
    // (䈞) CJK UNIFIED IDEOGRAPH-421E	[FB80 C21E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC21E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_144)
{
    // 421F 0021;	
    // (䈟) CJK UNIFIED IDEOGRAPH-421F	[FB80 C21F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC21F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_145)
{
    // 421F 003F;	
    // (䈟) CJK UNIFIED IDEOGRAPH-421F	[FB80 C21F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC21F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_146)
{
    // 421F 0061;	
    // (䈟) CJK UNIFIED IDEOGRAPH-421F	[FB80 C21F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC21F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_147)
{
    // 421F 0041;	
    // (䈟) CJK UNIFIED IDEOGRAPH-421F	[FB80 C21F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x421F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC21F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_148)
{
    // 421F 0062;	
    // (䈟) CJK UNIFIED IDEOGRAPH-421F	[FB80 C21F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x421F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC21F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_149)
{
    // 4220 0021;	
    // (䈠) CJK UNIFIED IDEOGRAPH-4220	[FB80 C220 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4220, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC220, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_150)
{
    // 4220 003F;	
    // (䈠) CJK UNIFIED IDEOGRAPH-4220	[FB80 C220 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4220, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC220, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_151)
{
    // 4220 0061;	
    // (䈠) CJK UNIFIED IDEOGRAPH-4220	[FB80 C220 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4220, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC220, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_152)
{
    // 4220 0041;	
    // (䈠) CJK UNIFIED IDEOGRAPH-4220	[FB80 C220 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4220, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC220, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_153)
{
    // 4220 0062;	
    // (䈠) CJK UNIFIED IDEOGRAPH-4220	[FB80 C220 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4220, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC220, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_154)
{
    // 4221 0021;	
    // (䈡) CJK UNIFIED IDEOGRAPH-4221	[FB80 C221 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4221, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC221, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_155)
{
    // 4221 003F;	
    // (䈡) CJK UNIFIED IDEOGRAPH-4221	[FB80 C221 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4221, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC221, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_156)
{
    // 4221 0061;	
    // (䈡) CJK UNIFIED IDEOGRAPH-4221	[FB80 C221 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4221, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC221, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_157)
{
    // 4221 0041;	
    // (䈡) CJK UNIFIED IDEOGRAPH-4221	[FB80 C221 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4221, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC221, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_158)
{
    // 4221 0062;	
    // (䈡) CJK UNIFIED IDEOGRAPH-4221	[FB80 C221 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4221, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC221, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_159)
{
    // 4222 0021;	
    // (䈢) CJK UNIFIED IDEOGRAPH-4222	[FB80 C222 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4222, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC222, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_160)
{
    // 4222 003F;	
    // (䈢) CJK UNIFIED IDEOGRAPH-4222	[FB80 C222 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4222, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC222, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_161)
{
    // 4222 0061;	
    // (䈢) CJK UNIFIED IDEOGRAPH-4222	[FB80 C222 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4222, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_162)
{
    // 4222 0041;	
    // (䈢) CJK UNIFIED IDEOGRAPH-4222	[FB80 C222 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4222, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_163)
{
    // 4222 0062;	
    // (䈢) CJK UNIFIED IDEOGRAPH-4222	[FB80 C222 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4222, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC222, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_164)
{
    // 4223 0021;	
    // (䈣) CJK UNIFIED IDEOGRAPH-4223	[FB80 C223 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4223, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC223, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_165)
{
    // 4223 003F;	
    // (䈣) CJK UNIFIED IDEOGRAPH-4223	[FB80 C223 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4223, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC223, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_166)
{
    // 4223 0061;	
    // (䈣) CJK UNIFIED IDEOGRAPH-4223	[FB80 C223 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4223, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC223, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_167)
{
    // 4223 0041;	
    // (䈣) CJK UNIFIED IDEOGRAPH-4223	[FB80 C223 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4223, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC223, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_168)
{
    // 4223 0062;	
    // (䈣) CJK UNIFIED IDEOGRAPH-4223	[FB80 C223 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4223, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC223, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_169)
{
    // 4224 0021;	
    // (䈤) CJK UNIFIED IDEOGRAPH-4224	[FB80 C224 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4224, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC224, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_170)
{
    // 4224 003F;	
    // (䈤) CJK UNIFIED IDEOGRAPH-4224	[FB80 C224 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4224, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC224, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_171)
{
    // 4224 0061;	
    // (䈤) CJK UNIFIED IDEOGRAPH-4224	[FB80 C224 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4224, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC224, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_172)
{
    // 4224 0041;	
    // (䈤) CJK UNIFIED IDEOGRAPH-4224	[FB80 C224 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4224, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC224, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_173)
{
    // 4224 0062;	
    // (䈤) CJK UNIFIED IDEOGRAPH-4224	[FB80 C224 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4224, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC224, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_174)
{
    // 4225 0021;	
    // (䈥) CJK UNIFIED IDEOGRAPH-4225	[FB80 C225 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4225, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC225, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_175)
{
    // 4225 003F;	
    // (䈥) CJK UNIFIED IDEOGRAPH-4225	[FB80 C225 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4225, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC225, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_176)
{
    // 4225 0061;	
    // (䈥) CJK UNIFIED IDEOGRAPH-4225	[FB80 C225 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4225, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC225, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_177)
{
    // 4225 0041;	
    // (䈥) CJK UNIFIED IDEOGRAPH-4225	[FB80 C225 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4225, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC225, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_178)
{
    // 4225 0062;	
    // (䈥) CJK UNIFIED IDEOGRAPH-4225	[FB80 C225 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4225, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC225, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_179)
{
    // 4226 0021;	
    // (䈦) CJK UNIFIED IDEOGRAPH-4226	[FB80 C226 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4226, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC226, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_180)
{
    // 4226 003F;	
    // (䈦) CJK UNIFIED IDEOGRAPH-4226	[FB80 C226 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4226, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC226, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_181)
{
    // 4226 0061;	
    // (䈦) CJK UNIFIED IDEOGRAPH-4226	[FB80 C226 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4226, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC226, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_182)
{
    // 4226 0041;	
    // (䈦) CJK UNIFIED IDEOGRAPH-4226	[FB80 C226 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4226, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC226, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_183)
{
    // 4226 0062;	
    // (䈦) CJK UNIFIED IDEOGRAPH-4226	[FB80 C226 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4226, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC226, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_184)
{
    // 4227 0021;	
    // (䈧) CJK UNIFIED IDEOGRAPH-4227	[FB80 C227 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4227, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC227, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_185)
{
    // 2F964 0021;	
    // (䈧) CJK COMPATIBILITY IDEOGRAPH-2F964	[FB80 C227 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F964, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC227, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_186)
{
    // 4227 003F;	
    // (䈧) CJK UNIFIED IDEOGRAPH-4227	[FB80 C227 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4227, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC227, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_187)
{
    // 2F964 003F;	
    // (䈧) CJK COMPATIBILITY IDEOGRAPH-2F964	[FB80 C227 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F964, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC227, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_188)
{
    // 4227 0061;	
    // (䈧) CJK UNIFIED IDEOGRAPH-4227	[FB80 C227 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4227, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC227, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_189)
{
    // 2F964 0061;	
    // (䈧) CJK COMPATIBILITY IDEOGRAPH-2F964	[FB80 C227 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F964, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC227, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_190)
{
    // 4227 0041;	
    // (䈧) CJK UNIFIED IDEOGRAPH-4227	[FB80 C227 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4227, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC227, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_191)
{
    // 2F964 0041;	
    // (䈧) CJK COMPATIBILITY IDEOGRAPH-2F964	[FB80 C227 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F964, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC227, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_192)
{
    // 4227 0062;	
    // (䈧) CJK UNIFIED IDEOGRAPH-4227	[FB80 C227 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4227, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC227, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_193)
{
    // 2F964 0062;	
    // (䈧) CJK COMPATIBILITY IDEOGRAPH-2F964	[FB80 C227 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F964, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC227, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_194)
{
    // 4228 0021;	
    // (䈨) CJK UNIFIED IDEOGRAPH-4228	[FB80 C228 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4228, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC228, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_195)
{
    // 4228 003F;	
    // (䈨) CJK UNIFIED IDEOGRAPH-4228	[FB80 C228 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4228, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC228, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_196)
{
    // 4228 0061;	
    // (䈨) CJK UNIFIED IDEOGRAPH-4228	[FB80 C228 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4228, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC228, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_197)
{
    // 4228 0041;	
    // (䈨) CJK UNIFIED IDEOGRAPH-4228	[FB80 C228 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4228, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC228, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_198)
{
    // 4228 0062;	
    // (䈨) CJK UNIFIED IDEOGRAPH-4228	[FB80 C228 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4228, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC228, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_199)
{
    // 4229 0021;	
    // (䈩) CJK UNIFIED IDEOGRAPH-4229	[FB80 C229 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4229, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC229, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_200)
{
    // 4229 003F;	
    // (䈩) CJK UNIFIED IDEOGRAPH-4229	[FB80 C229 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4229, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC229, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_201)
{
    // 4229 0061;	
    // (䈩) CJK UNIFIED IDEOGRAPH-4229	[FB80 C229 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4229, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC229, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_202)
{
    // 4229 0041;	
    // (䈩) CJK UNIFIED IDEOGRAPH-4229	[FB80 C229 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4229, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC229, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_203)
{
    // 4229 0062;	
    // (䈩) CJK UNIFIED IDEOGRAPH-4229	[FB80 C229 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4229, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC229, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_204)
{
    // 422A 0021;	
    // (䈪) CJK UNIFIED IDEOGRAPH-422A	[FB80 C22A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC22A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_205)
{
    // 422A 003F;	
    // (䈪) CJK UNIFIED IDEOGRAPH-422A	[FB80 C22A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC22A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_206)
{
    // 422A 0061;	
    // (䈪) CJK UNIFIED IDEOGRAPH-422A	[FB80 C22A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC22A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_207)
{
    // 422A 0041;	
    // (䈪) CJK UNIFIED IDEOGRAPH-422A	[FB80 C22A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x422A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC22A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_208)
{
    // 422A 0062;	
    // (䈪) CJK UNIFIED IDEOGRAPH-422A	[FB80 C22A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC22A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_209)
{
    // 422B 0021;	
    // (䈫) CJK UNIFIED IDEOGRAPH-422B	[FB80 C22B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC22B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_210)
{
    // 422B 003F;	
    // (䈫) CJK UNIFIED IDEOGRAPH-422B	[FB80 C22B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC22B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_211)
{
    // 422B 0061;	
    // (䈫) CJK UNIFIED IDEOGRAPH-422B	[FB80 C22B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC22B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_212)
{
    // 422B 0041;	
    // (䈫) CJK UNIFIED IDEOGRAPH-422B	[FB80 C22B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x422B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC22B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_213)
{
    // 422B 0062;	
    // (䈫) CJK UNIFIED IDEOGRAPH-422B	[FB80 C22B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC22B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_214)
{
    // 422C 0021;	
    // (䈬) CJK UNIFIED IDEOGRAPH-422C	[FB80 C22C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC22C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_215)
{
    // 422C 003F;	
    // (䈬) CJK UNIFIED IDEOGRAPH-422C	[FB80 C22C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC22C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_216)
{
    // 422C 0061;	
    // (䈬) CJK UNIFIED IDEOGRAPH-422C	[FB80 C22C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC22C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_217)
{
    // 422C 0041;	
    // (䈬) CJK UNIFIED IDEOGRAPH-422C	[FB80 C22C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x422C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC22C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_218)
{
    // 422C 0062;	
    // (䈬) CJK UNIFIED IDEOGRAPH-422C	[FB80 C22C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC22C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_219)
{
    // 422D 0021;	
    // (䈭) CJK UNIFIED IDEOGRAPH-422D	[FB80 C22D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC22D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_220)
{
    // 422D 003F;	
    // (䈭) CJK UNIFIED IDEOGRAPH-422D	[FB80 C22D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC22D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_221)
{
    // 422D 0061;	
    // (䈭) CJK UNIFIED IDEOGRAPH-422D	[FB80 C22D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC22D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_222)
{
    // 422D 0041;	
    // (䈭) CJK UNIFIED IDEOGRAPH-422D	[FB80 C22D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x422D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC22D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_223)
{
    // 422D 0062;	
    // (䈭) CJK UNIFIED IDEOGRAPH-422D	[FB80 C22D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC22D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_224)
{
    // 422E 0021;	
    // (䈮) CJK UNIFIED IDEOGRAPH-422E	[FB80 C22E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC22E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_225)
{
    // 422E 003F;	
    // (䈮) CJK UNIFIED IDEOGRAPH-422E	[FB80 C22E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC22E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_226)
{
    // 422E 0061;	
    // (䈮) CJK UNIFIED IDEOGRAPH-422E	[FB80 C22E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC22E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_227)
{
    // 422E 0041;	
    // (䈮) CJK UNIFIED IDEOGRAPH-422E	[FB80 C22E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x422E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC22E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_228)
{
    // 422E 0062;	
    // (䈮) CJK UNIFIED IDEOGRAPH-422E	[FB80 C22E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC22E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_229)
{
    // 422F 0021;	
    // (䈯) CJK UNIFIED IDEOGRAPH-422F	[FB80 C22F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC22F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_230)
{
    // 422F 003F;	
    // (䈯) CJK UNIFIED IDEOGRAPH-422F	[FB80 C22F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC22F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_231)
{
    // 422F 0061;	
    // (䈯) CJK UNIFIED IDEOGRAPH-422F	[FB80 C22F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC22F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_232)
{
    // 422F 0041;	
    // (䈯) CJK UNIFIED IDEOGRAPH-422F	[FB80 C22F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x422F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC22F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_233)
{
    // 422F 0062;	
    // (䈯) CJK UNIFIED IDEOGRAPH-422F	[FB80 C22F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x422F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC22F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_234)
{
    // 4230 0021;	
    // (䈰) CJK UNIFIED IDEOGRAPH-4230	[FB80 C230 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4230, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC230, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_235)
{
    // 4230 003F;	
    // (䈰) CJK UNIFIED IDEOGRAPH-4230	[FB80 C230 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4230, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC230, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_236)
{
    // 4230 0061;	
    // (䈰) CJK UNIFIED IDEOGRAPH-4230	[FB80 C230 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4230, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC230, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_237)
{
    // 4230 0041;	
    // (䈰) CJK UNIFIED IDEOGRAPH-4230	[FB80 C230 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4230, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC230, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_238)
{
    // 4230 0062;	
    // (䈰) CJK UNIFIED IDEOGRAPH-4230	[FB80 C230 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4230, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC230, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_239)
{
    // 4231 0021;	
    // (䈱) CJK UNIFIED IDEOGRAPH-4231	[FB80 C231 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4231, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC231, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_240)
{
    // 4231 003F;	
    // (䈱) CJK UNIFIED IDEOGRAPH-4231	[FB80 C231 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4231, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC231, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_241)
{
    // 4231 0061;	
    // (䈱) CJK UNIFIED IDEOGRAPH-4231	[FB80 C231 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4231, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC231, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_242)
{
    // 4231 0041;	
    // (䈱) CJK UNIFIED IDEOGRAPH-4231	[FB80 C231 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4231, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC231, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_243)
{
    // 4231 0062;	
    // (䈱) CJK UNIFIED IDEOGRAPH-4231	[FB80 C231 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4231, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC231, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_244)
{
    // 4232 0021;	
    // (䈲) CJK UNIFIED IDEOGRAPH-4232	[FB80 C232 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4232, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC232, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_245)
{
    // 4232 003F;	
    // (䈲) CJK UNIFIED IDEOGRAPH-4232	[FB80 C232 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4232, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC232, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_246)
{
    // 4232 0061;	
    // (䈲) CJK UNIFIED IDEOGRAPH-4232	[FB80 C232 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4232, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC232, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_247)
{
    // 4232 0041;	
    // (䈲) CJK UNIFIED IDEOGRAPH-4232	[FB80 C232 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4232, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC232, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_248)
{
    // 4232 0062;	
    // (䈲) CJK UNIFIED IDEOGRAPH-4232	[FB80 C232 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4232, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC232, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_249)
{
    // 4233 0021;	
    // (䈳) CJK UNIFIED IDEOGRAPH-4233	[FB80 C233 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4233, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC233, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_250)
{
    // 4233 003F;	
    // (䈳) CJK UNIFIED IDEOGRAPH-4233	[FB80 C233 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4233, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC233, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_251)
{
    // 4233 0061;	
    // (䈳) CJK UNIFIED IDEOGRAPH-4233	[FB80 C233 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4233, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC233, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_252)
{
    // 4233 0041;	
    // (䈳) CJK UNIFIED IDEOGRAPH-4233	[FB80 C233 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4233, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC233, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_253)
{
    // 4233 0062;	
    // (䈳) CJK UNIFIED IDEOGRAPH-4233	[FB80 C233 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4233, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC233, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_254)
{
    // 4234 0021;	
    // (䈴) CJK UNIFIED IDEOGRAPH-4234	[FB80 C234 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4234, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC234, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_255)
{
    // 4234 003F;	
    // (䈴) CJK UNIFIED IDEOGRAPH-4234	[FB80 C234 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4234, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC234, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_256)
{
    // 4234 0061;	
    // (䈴) CJK UNIFIED IDEOGRAPH-4234	[FB80 C234 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4234, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC234, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_257)
{
    // 4234 0041;	
    // (䈴) CJK UNIFIED IDEOGRAPH-4234	[FB80 C234 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4234, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC234, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_258)
{
    // 4234 0062;	
    // (䈴) CJK UNIFIED IDEOGRAPH-4234	[FB80 C234 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4234, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC234, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_259)
{
    // 4235 0021;	
    // (䈵) CJK UNIFIED IDEOGRAPH-4235	[FB80 C235 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4235, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC235, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_260)
{
    // 4235 003F;	
    // (䈵) CJK UNIFIED IDEOGRAPH-4235	[FB80 C235 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4235, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC235, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_261)
{
    // 4235 0061;	
    // (䈵) CJK UNIFIED IDEOGRAPH-4235	[FB80 C235 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4235, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC235, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_262)
{
    // 4235 0041;	
    // (䈵) CJK UNIFIED IDEOGRAPH-4235	[FB80 C235 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4235, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC235, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_263)
{
    // 4235 0062;	
    // (䈵) CJK UNIFIED IDEOGRAPH-4235	[FB80 C235 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4235, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC235, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_264)
{
    // 4236 0021;	
    // (䈶) CJK UNIFIED IDEOGRAPH-4236	[FB80 C236 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4236, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC236, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_265)
{
    // 4236 003F;	
    // (䈶) CJK UNIFIED IDEOGRAPH-4236	[FB80 C236 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4236, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC236, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_266)
{
    // 4236 0061;	
    // (䈶) CJK UNIFIED IDEOGRAPH-4236	[FB80 C236 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4236, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC236, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_267)
{
    // 4236 0041;	
    // (䈶) CJK UNIFIED IDEOGRAPH-4236	[FB80 C236 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4236, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC236, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_268)
{
    // 4236 0062;	
    // (䈶) CJK UNIFIED IDEOGRAPH-4236	[FB80 C236 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4236, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC236, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_269)
{
    // 4237 0021;	
    // (䈷) CJK UNIFIED IDEOGRAPH-4237	[FB80 C237 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4237, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC237, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_270)
{
    // 4237 003F;	
    // (䈷) CJK UNIFIED IDEOGRAPH-4237	[FB80 C237 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4237, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC237, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_271)
{
    // 4237 0061;	
    // (䈷) CJK UNIFIED IDEOGRAPH-4237	[FB80 C237 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4237, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC237, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_272)
{
    // 4237 0041;	
    // (䈷) CJK UNIFIED IDEOGRAPH-4237	[FB80 C237 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4237, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC237, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_273)
{
    // 4237 0062;	
    // (䈷) CJK UNIFIED IDEOGRAPH-4237	[FB80 C237 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4237, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC237, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_274)
{
    // 4238 0021;	
    // (䈸) CJK UNIFIED IDEOGRAPH-4238	[FB80 C238 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4238, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC238, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_275)
{
    // 4238 003F;	
    // (䈸) CJK UNIFIED IDEOGRAPH-4238	[FB80 C238 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4238, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC238, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_276)
{
    // 4238 0061;	
    // (䈸) CJK UNIFIED IDEOGRAPH-4238	[FB80 C238 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4238, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC238, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_277)
{
    // 4238 0041;	
    // (䈸) CJK UNIFIED IDEOGRAPH-4238	[FB80 C238 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4238, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC238, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_278)
{
    // 4238 0062;	
    // (䈸) CJK UNIFIED IDEOGRAPH-4238	[FB80 C238 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4238, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC238, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_279)
{
    // 4239 0021;	
    // (䈹) CJK UNIFIED IDEOGRAPH-4239	[FB80 C239 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4239, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC239, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_280)
{
    // 4239 003F;	
    // (䈹) CJK UNIFIED IDEOGRAPH-4239	[FB80 C239 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4239, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC239, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_281)
{
    // 4239 0061;	
    // (䈹) CJK UNIFIED IDEOGRAPH-4239	[FB80 C239 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4239, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC239, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_282)
{
    // 4239 0041;	
    // (䈹) CJK UNIFIED IDEOGRAPH-4239	[FB80 C239 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4239, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC239, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_283)
{
    // 4239 0062;	
    // (䈹) CJK UNIFIED IDEOGRAPH-4239	[FB80 C239 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4239, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC239, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_284)
{
    // 423A 0021;	
    // (䈺) CJK UNIFIED IDEOGRAPH-423A	[FB80 C23A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC23A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_285)
{
    // 423A 003F;	
    // (䈺) CJK UNIFIED IDEOGRAPH-423A	[FB80 C23A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC23A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_286)
{
    // 423A 0061;	
    // (䈺) CJK UNIFIED IDEOGRAPH-423A	[FB80 C23A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC23A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_287)
{
    // 423A 0041;	
    // (䈺) CJK UNIFIED IDEOGRAPH-423A	[FB80 C23A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x423A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC23A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_288)
{
    // 423A 0062;	
    // (䈺) CJK UNIFIED IDEOGRAPH-423A	[FB80 C23A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC23A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_289)
{
    // 423B 0021;	
    // (䈻) CJK UNIFIED IDEOGRAPH-423B	[FB80 C23B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC23B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_290)
{
    // 423B 003F;	
    // (䈻) CJK UNIFIED IDEOGRAPH-423B	[FB80 C23B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC23B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_291)
{
    // 423B 0061;	
    // (䈻) CJK UNIFIED IDEOGRAPH-423B	[FB80 C23B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC23B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_292)
{
    // 423B 0041;	
    // (䈻) CJK UNIFIED IDEOGRAPH-423B	[FB80 C23B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x423B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC23B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_293)
{
    // 423B 0062;	
    // (䈻) CJK UNIFIED IDEOGRAPH-423B	[FB80 C23B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC23B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_294)
{
    // 423C 0021;	
    // (䈼) CJK UNIFIED IDEOGRAPH-423C	[FB80 C23C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC23C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_295)
{
    // 423C 003F;	
    // (䈼) CJK UNIFIED IDEOGRAPH-423C	[FB80 C23C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC23C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_296)
{
    // 423C 0061;	
    // (䈼) CJK UNIFIED IDEOGRAPH-423C	[FB80 C23C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC23C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_297)
{
    // 423C 0041;	
    // (䈼) CJK UNIFIED IDEOGRAPH-423C	[FB80 C23C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x423C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC23C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_298)
{
    // 423C 0062;	
    // (䈼) CJK UNIFIED IDEOGRAPH-423C	[FB80 C23C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC23C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_299)
{
    // 423D 0021;	
    // (䈽) CJK UNIFIED IDEOGRAPH-423D	[FB80 C23D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC23D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_300)
{
    // 423D 003F;	
    // (䈽) CJK UNIFIED IDEOGRAPH-423D	[FB80 C23D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC23D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_301)
{
    // 423D 0061;	
    // (䈽) CJK UNIFIED IDEOGRAPH-423D	[FB80 C23D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC23D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_302)
{
    // 423D 0041;	
    // (䈽) CJK UNIFIED IDEOGRAPH-423D	[FB80 C23D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x423D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC23D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_303)
{
    // 423D 0062;	
    // (䈽) CJK UNIFIED IDEOGRAPH-423D	[FB80 C23D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC23D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_304)
{
    // 423E 0021;	
    // (䈾) CJK UNIFIED IDEOGRAPH-423E	[FB80 C23E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC23E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_305)
{
    // 423E 003F;	
    // (䈾) CJK UNIFIED IDEOGRAPH-423E	[FB80 C23E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC23E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_306)
{
    // 423E 0061;	
    // (䈾) CJK UNIFIED IDEOGRAPH-423E	[FB80 C23E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC23E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_307)
{
    // 423E 0041;	
    // (䈾) CJK UNIFIED IDEOGRAPH-423E	[FB80 C23E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x423E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC23E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_308)
{
    // 423E 0062;	
    // (䈾) CJK UNIFIED IDEOGRAPH-423E	[FB80 C23E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC23E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_309)
{
    // 423F 0021;	
    // (䈿) CJK UNIFIED IDEOGRAPH-423F	[FB80 C23F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC23F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_310)
{
    // 423F 003F;	
    // (䈿) CJK UNIFIED IDEOGRAPH-423F	[FB80 C23F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC23F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_311)
{
    // 423F 0061;	
    // (䈿) CJK UNIFIED IDEOGRAPH-423F	[FB80 C23F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC23F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_312)
{
    // 423F 0041;	
    // (䈿) CJK UNIFIED IDEOGRAPH-423F	[FB80 C23F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x423F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC23F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_313)
{
    // 423F 0062;	
    // (䈿) CJK UNIFIED IDEOGRAPH-423F	[FB80 C23F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x423F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC23F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_314)
{
    // 4240 0021;	
    // (䉀) CJK UNIFIED IDEOGRAPH-4240	[FB80 C240 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4240, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC240, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_315)
{
    // 4240 003F;	
    // (䉀) CJK UNIFIED IDEOGRAPH-4240	[FB80 C240 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4240, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC240, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_316)
{
    // 4240 0061;	
    // (䉀) CJK UNIFIED IDEOGRAPH-4240	[FB80 C240 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4240, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC240, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_317)
{
    // 4240 0041;	
    // (䉀) CJK UNIFIED IDEOGRAPH-4240	[FB80 C240 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4240, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC240, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_318)
{
    // 4240 0062;	
    // (䉀) CJK UNIFIED IDEOGRAPH-4240	[FB80 C240 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4240, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC240, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_319)
{
    // 4241 0021;	
    // (䉁) CJK UNIFIED IDEOGRAPH-4241	[FB80 C241 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4241, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC241, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_320)
{
    // 4241 003F;	
    // (䉁) CJK UNIFIED IDEOGRAPH-4241	[FB80 C241 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4241, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC241, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_321)
{
    // 4241 0061;	
    // (䉁) CJK UNIFIED IDEOGRAPH-4241	[FB80 C241 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4241, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC241, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_322)
{
    // 4241 0041;	
    // (䉁) CJK UNIFIED IDEOGRAPH-4241	[FB80 C241 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4241, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC241, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_323)
{
    // 4241 0062;	
    // (䉁) CJK UNIFIED IDEOGRAPH-4241	[FB80 C241 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4241, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC241, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_324)
{
    // 4242 0021;	
    // (䉂) CJK UNIFIED IDEOGRAPH-4242	[FB80 C242 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4242, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC242, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_325)
{
    // 4242 003F;	
    // (䉂) CJK UNIFIED IDEOGRAPH-4242	[FB80 C242 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4242, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC242, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_326)
{
    // 4242 0061;	
    // (䉂) CJK UNIFIED IDEOGRAPH-4242	[FB80 C242 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4242, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC242, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_327)
{
    // 4242 0041;	
    // (䉂) CJK UNIFIED IDEOGRAPH-4242	[FB80 C242 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4242, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC242, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_328)
{
    // 4242 0062;	
    // (䉂) CJK UNIFIED IDEOGRAPH-4242	[FB80 C242 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4242, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC242, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_329)
{
    // 4243 0021;	
    // (䉃) CJK UNIFIED IDEOGRAPH-4243	[FB80 C243 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4243, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC243, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_330)
{
    // 4243 003F;	
    // (䉃) CJK UNIFIED IDEOGRAPH-4243	[FB80 C243 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4243, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC243, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_331)
{
    // 4243 0061;	
    // (䉃) CJK UNIFIED IDEOGRAPH-4243	[FB80 C243 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4243, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC243, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_332)
{
    // 4243 0041;	
    // (䉃) CJK UNIFIED IDEOGRAPH-4243	[FB80 C243 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4243, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC243, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_333)
{
    // 4243 0062;	
    // (䉃) CJK UNIFIED IDEOGRAPH-4243	[FB80 C243 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4243, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC243, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_334)
{
    // 4244 0021;	
    // (䉄) CJK UNIFIED IDEOGRAPH-4244	[FB80 C244 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4244, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC244, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_335)
{
    // 4244 003F;	
    // (䉄) CJK UNIFIED IDEOGRAPH-4244	[FB80 C244 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4244, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC244, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_336)
{
    // 4244 0061;	
    // (䉄) CJK UNIFIED IDEOGRAPH-4244	[FB80 C244 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4244, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC244, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_337)
{
    // 4244 0041;	
    // (䉄) CJK UNIFIED IDEOGRAPH-4244	[FB80 C244 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4244, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC244, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_338)
{
    // 4244 0062;	
    // (䉄) CJK UNIFIED IDEOGRAPH-4244	[FB80 C244 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4244, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC244, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_339)
{
    // 4245 0021;	
    // (䉅) CJK UNIFIED IDEOGRAPH-4245	[FB80 C245 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4245, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC245, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_340)
{
    // 4245 003F;	
    // (䉅) CJK UNIFIED IDEOGRAPH-4245	[FB80 C245 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4245, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC245, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_341)
{
    // 4245 0061;	
    // (䉅) CJK UNIFIED IDEOGRAPH-4245	[FB80 C245 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4245, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC245, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_342)
{
    // 4245 0041;	
    // (䉅) CJK UNIFIED IDEOGRAPH-4245	[FB80 C245 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4245, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC245, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_343)
{
    // 4245 0062;	
    // (䉅) CJK UNIFIED IDEOGRAPH-4245	[FB80 C245 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4245, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC245, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_344)
{
    // 4246 0021;	
    // (䉆) CJK UNIFIED IDEOGRAPH-4246	[FB80 C246 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4246, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC246, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_345)
{
    // 4246 003F;	
    // (䉆) CJK UNIFIED IDEOGRAPH-4246	[FB80 C246 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4246, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC246, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_346)
{
    // 4246 0061;	
    // (䉆) CJK UNIFIED IDEOGRAPH-4246	[FB80 C246 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4246, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC246, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_347)
{
    // 4246 0041;	
    // (䉆) CJK UNIFIED IDEOGRAPH-4246	[FB80 C246 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4246, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC246, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_348)
{
    // 4246 0062;	
    // (䉆) CJK UNIFIED IDEOGRAPH-4246	[FB80 C246 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4246, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC246, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_349)
{
    // 4247 0021;	
    // (䉇) CJK UNIFIED IDEOGRAPH-4247	[FB80 C247 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4247, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC247, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_350)
{
    // 4247 003F;	
    // (䉇) CJK UNIFIED IDEOGRAPH-4247	[FB80 C247 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4247, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC247, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_351)
{
    // 4247 0061;	
    // (䉇) CJK UNIFIED IDEOGRAPH-4247	[FB80 C247 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4247, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC247, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_352)
{
    // 4247 0041;	
    // (䉇) CJK UNIFIED IDEOGRAPH-4247	[FB80 C247 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4247, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC247, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_353)
{
    // 4247 0062;	
    // (䉇) CJK UNIFIED IDEOGRAPH-4247	[FB80 C247 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4247, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC247, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_354)
{
    // 4248 0021;	
    // (䉈) CJK UNIFIED IDEOGRAPH-4248	[FB80 C248 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4248, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC248, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_355)
{
    // 4248 003F;	
    // (䉈) CJK UNIFIED IDEOGRAPH-4248	[FB80 C248 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4248, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC248, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_356)
{
    // 4248 0061;	
    // (䉈) CJK UNIFIED IDEOGRAPH-4248	[FB80 C248 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4248, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC248, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_357)
{
    // 4248 0041;	
    // (䉈) CJK UNIFIED IDEOGRAPH-4248	[FB80 C248 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4248, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC248, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_358)
{
    // 4248 0062;	
    // (䉈) CJK UNIFIED IDEOGRAPH-4248	[FB80 C248 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4248, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC248, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_359)
{
    // 4249 0021;	
    // (䉉) CJK UNIFIED IDEOGRAPH-4249	[FB80 C249 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4249, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC249, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_360)
{
    // 4249 003F;	
    // (䉉) CJK UNIFIED IDEOGRAPH-4249	[FB80 C249 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4249, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC249, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_361)
{
    // 4249 0061;	
    // (䉉) CJK UNIFIED IDEOGRAPH-4249	[FB80 C249 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4249, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC249, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_362)
{
    // 4249 0041;	
    // (䉉) CJK UNIFIED IDEOGRAPH-4249	[FB80 C249 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4249, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC249, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_363)
{
    // 4249 0062;	
    // (䉉) CJK UNIFIED IDEOGRAPH-4249	[FB80 C249 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4249, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC249, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_364)
{
    // 424A 0021;	
    // (䉊) CJK UNIFIED IDEOGRAPH-424A	[FB80 C24A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC24A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_365)
{
    // 424A 003F;	
    // (䉊) CJK UNIFIED IDEOGRAPH-424A	[FB80 C24A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC24A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_366)
{
    // 424A 0061;	
    // (䉊) CJK UNIFIED IDEOGRAPH-424A	[FB80 C24A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC24A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_367)
{
    // 424A 0041;	
    // (䉊) CJK UNIFIED IDEOGRAPH-424A	[FB80 C24A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x424A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC24A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_368)
{
    // 424A 0062;	
    // (䉊) CJK UNIFIED IDEOGRAPH-424A	[FB80 C24A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC24A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_369)
{
    // 424B 0021;	
    // (䉋) CJK UNIFIED IDEOGRAPH-424B	[FB80 C24B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC24B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_370)
{
    // 424B 003F;	
    // (䉋) CJK UNIFIED IDEOGRAPH-424B	[FB80 C24B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC24B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_371)
{
    // 424B 0061;	
    // (䉋) CJK UNIFIED IDEOGRAPH-424B	[FB80 C24B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC24B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_372)
{
    // 424B 0041;	
    // (䉋) CJK UNIFIED IDEOGRAPH-424B	[FB80 C24B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x424B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC24B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_373)
{
    // 424B 0062;	
    // (䉋) CJK UNIFIED IDEOGRAPH-424B	[FB80 C24B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC24B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_374)
{
    // 424C 0021;	
    // (䉌) CJK UNIFIED IDEOGRAPH-424C	[FB80 C24C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC24C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_375)
{
    // 424C 003F;	
    // (䉌) CJK UNIFIED IDEOGRAPH-424C	[FB80 C24C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC24C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_376)
{
    // 424C 0061;	
    // (䉌) CJK UNIFIED IDEOGRAPH-424C	[FB80 C24C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC24C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_377)
{
    // 424C 0041;	
    // (䉌) CJK UNIFIED IDEOGRAPH-424C	[FB80 C24C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x424C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC24C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_378)
{
    // 424C 0062;	
    // (䉌) CJK UNIFIED IDEOGRAPH-424C	[FB80 C24C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC24C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_379)
{
    // 424D 0021;	
    // (䉍) CJK UNIFIED IDEOGRAPH-424D	[FB80 C24D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC24D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_380)
{
    // 424D 003F;	
    // (䉍) CJK UNIFIED IDEOGRAPH-424D	[FB80 C24D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC24D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_381)
{
    // 424D 0061;	
    // (䉍) CJK UNIFIED IDEOGRAPH-424D	[FB80 C24D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC24D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_382)
{
    // 424D 0041;	
    // (䉍) CJK UNIFIED IDEOGRAPH-424D	[FB80 C24D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x424D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC24D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_383)
{
    // 424D 0062;	
    // (䉍) CJK UNIFIED IDEOGRAPH-424D	[FB80 C24D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC24D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_384)
{
    // 424E 0021;	
    // (䉎) CJK UNIFIED IDEOGRAPH-424E	[FB80 C24E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC24E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_385)
{
    // 424E 003F;	
    // (䉎) CJK UNIFIED IDEOGRAPH-424E	[FB80 C24E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC24E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_386)
{
    // 424E 0061;	
    // (䉎) CJK UNIFIED IDEOGRAPH-424E	[FB80 C24E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC24E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_387)
{
    // 424E 0041;	
    // (䉎) CJK UNIFIED IDEOGRAPH-424E	[FB80 C24E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x424E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC24E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_388)
{
    // 424E 0062;	
    // (䉎) CJK UNIFIED IDEOGRAPH-424E	[FB80 C24E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC24E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_389)
{
    // 424F 0021;	
    // (䉏) CJK UNIFIED IDEOGRAPH-424F	[FB80 C24F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC24F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_390)
{
    // 424F 003F;	
    // (䉏) CJK UNIFIED IDEOGRAPH-424F	[FB80 C24F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC24F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_391)
{
    // 424F 0061;	
    // (䉏) CJK UNIFIED IDEOGRAPH-424F	[FB80 C24F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC24F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_392)
{
    // 424F 0041;	
    // (䉏) CJK UNIFIED IDEOGRAPH-424F	[FB80 C24F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x424F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC24F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_393)
{
    // 424F 0062;	
    // (䉏) CJK UNIFIED IDEOGRAPH-424F	[FB80 C24F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x424F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC24F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_394)
{
    // 4250 0021;	
    // (䉐) CJK UNIFIED IDEOGRAPH-4250	[FB80 C250 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4250, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC250, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_395)
{
    // 4250 003F;	
    // (䉐) CJK UNIFIED IDEOGRAPH-4250	[FB80 C250 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4250, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC250, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_396)
{
    // 4250 0061;	
    // (䉐) CJK UNIFIED IDEOGRAPH-4250	[FB80 C250 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4250, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC250, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_397)
{
    // 4250 0041;	
    // (䉐) CJK UNIFIED IDEOGRAPH-4250	[FB80 C250 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4250, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC250, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_398)
{
    // 4250 0062;	
    // (䉐) CJK UNIFIED IDEOGRAPH-4250	[FB80 C250 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4250, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC250, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_399)
{
    // 4251 0021;	
    // (䉑) CJK UNIFIED IDEOGRAPH-4251	[FB80 C251 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4251, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC251, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_400)
{
    // 4251 003F;	
    // (䉑) CJK UNIFIED IDEOGRAPH-4251	[FB80 C251 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4251, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC251, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_401)
{
    // 4251 0061;	
    // (䉑) CJK UNIFIED IDEOGRAPH-4251	[FB80 C251 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4251, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC251, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_402)
{
    // 4251 0041;	
    // (䉑) CJK UNIFIED IDEOGRAPH-4251	[FB80 C251 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4251, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC251, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_403)
{
    // 4251 0062;	
    // (䉑) CJK UNIFIED IDEOGRAPH-4251	[FB80 C251 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4251, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC251, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_404)
{
    // 4252 0021;	
    // (䉒) CJK UNIFIED IDEOGRAPH-4252	[FB80 C252 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4252, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC252, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_405)
{
    // 4252 003F;	
    // (䉒) CJK UNIFIED IDEOGRAPH-4252	[FB80 C252 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4252, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC252, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_406)
{
    // 4252 0061;	
    // (䉒) CJK UNIFIED IDEOGRAPH-4252	[FB80 C252 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4252, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC252, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_407)
{
    // 4252 0041;	
    // (䉒) CJK UNIFIED IDEOGRAPH-4252	[FB80 C252 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4252, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC252, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_408)
{
    // 4252 0062;	
    // (䉒) CJK UNIFIED IDEOGRAPH-4252	[FB80 C252 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4252, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC252, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_409)
{
    // 4253 0021;	
    // (䉓) CJK UNIFIED IDEOGRAPH-4253	[FB80 C253 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4253, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC253, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_410)
{
    // 4253 003F;	
    // (䉓) CJK UNIFIED IDEOGRAPH-4253	[FB80 C253 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4253, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC253, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_411)
{
    // 4253 0061;	
    // (䉓) CJK UNIFIED IDEOGRAPH-4253	[FB80 C253 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4253, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC253, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_412)
{
    // 4253 0041;	
    // (䉓) CJK UNIFIED IDEOGRAPH-4253	[FB80 C253 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4253, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC253, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_413)
{
    // 4253 0062;	
    // (䉓) CJK UNIFIED IDEOGRAPH-4253	[FB80 C253 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4253, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC253, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_414)
{
    // 4254 0021;	
    // (䉔) CJK UNIFIED IDEOGRAPH-4254	[FB80 C254 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4254, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC254, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_415)
{
    // 4254 003F;	
    // (䉔) CJK UNIFIED IDEOGRAPH-4254	[FB80 C254 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4254, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC254, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_416)
{
    // 4254 0061;	
    // (䉔) CJK UNIFIED IDEOGRAPH-4254	[FB80 C254 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4254, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC254, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_417)
{
    // 4254 0041;	
    // (䉔) CJK UNIFIED IDEOGRAPH-4254	[FB80 C254 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4254, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC254, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_418)
{
    // 4254 0062;	
    // (䉔) CJK UNIFIED IDEOGRAPH-4254	[FB80 C254 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4254, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC254, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_419)
{
    // 4255 0021;	
    // (䉕) CJK UNIFIED IDEOGRAPH-4255	[FB80 C255 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4255, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC255, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_420)
{
    // 4255 003F;	
    // (䉕) CJK UNIFIED IDEOGRAPH-4255	[FB80 C255 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4255, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC255, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_421)
{
    // 4255 0061;	
    // (䉕) CJK UNIFIED IDEOGRAPH-4255	[FB80 C255 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4255, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC255, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_422)
{
    // 4255 0041;	
    // (䉕) CJK UNIFIED IDEOGRAPH-4255	[FB80 C255 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4255, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC255, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_423)
{
    // 4255 0062;	
    // (䉕) CJK UNIFIED IDEOGRAPH-4255	[FB80 C255 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4255, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC255, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_424)
{
    // 4256 0021;	
    // (䉖) CJK UNIFIED IDEOGRAPH-4256	[FB80 C256 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4256, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC256, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_425)
{
    // 4256 003F;	
    // (䉖) CJK UNIFIED IDEOGRAPH-4256	[FB80 C256 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4256, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC256, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_426)
{
    // 4256 0061;	
    // (䉖) CJK UNIFIED IDEOGRAPH-4256	[FB80 C256 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4256, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC256, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_427)
{
    // 4256 0041;	
    // (䉖) CJK UNIFIED IDEOGRAPH-4256	[FB80 C256 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4256, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC256, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_428)
{
    // 4256 0062;	
    // (䉖) CJK UNIFIED IDEOGRAPH-4256	[FB80 C256 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4256, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC256, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_429)
{
    // 4257 0021;	
    // (䉗) CJK UNIFIED IDEOGRAPH-4257	[FB80 C257 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4257, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC257, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_430)
{
    // 4257 003F;	
    // (䉗) CJK UNIFIED IDEOGRAPH-4257	[FB80 C257 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4257, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC257, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_431)
{
    // 4257 0061;	
    // (䉗) CJK UNIFIED IDEOGRAPH-4257	[FB80 C257 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4257, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC257, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_432)
{
    // 4257 0041;	
    // (䉗) CJK UNIFIED IDEOGRAPH-4257	[FB80 C257 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4257, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC257, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_433)
{
    // 4257 0062;	
    // (䉗) CJK UNIFIED IDEOGRAPH-4257	[FB80 C257 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4257, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC257, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_434)
{
    // 4258 0021;	
    // (䉘) CJK UNIFIED IDEOGRAPH-4258	[FB80 C258 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4258, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC258, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_435)
{
    // 4258 003F;	
    // (䉘) CJK UNIFIED IDEOGRAPH-4258	[FB80 C258 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4258, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC258, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_436)
{
    // 4258 0061;	
    // (䉘) CJK UNIFIED IDEOGRAPH-4258	[FB80 C258 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4258, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC258, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_437)
{
    // 4258 0041;	
    // (䉘) CJK UNIFIED IDEOGRAPH-4258	[FB80 C258 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4258, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC258, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_438)
{
    // 4258 0062;	
    // (䉘) CJK UNIFIED IDEOGRAPH-4258	[FB80 C258 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4258, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC258, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_439)
{
    // 4259 0021;	
    // (䉙) CJK UNIFIED IDEOGRAPH-4259	[FB80 C259 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4259, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC259, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_440)
{
    // 4259 003F;	
    // (䉙) CJK UNIFIED IDEOGRAPH-4259	[FB80 C259 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4259, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC259, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_441)
{
    // 4259 0061;	
    // (䉙) CJK UNIFIED IDEOGRAPH-4259	[FB80 C259 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4259, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC259, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_442)
{
    // 4259 0041;	
    // (䉙) CJK UNIFIED IDEOGRAPH-4259	[FB80 C259 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4259, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC259, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_443)
{
    // 4259 0062;	
    // (䉙) CJK UNIFIED IDEOGRAPH-4259	[FB80 C259 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4259, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC259, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_444)
{
    // 425A 0021;	
    // (䉚) CJK UNIFIED IDEOGRAPH-425A	[FB80 C25A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC25A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_445)
{
    // 425A 003F;	
    // (䉚) CJK UNIFIED IDEOGRAPH-425A	[FB80 C25A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC25A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_446)
{
    // 425A 0061;	
    // (䉚) CJK UNIFIED IDEOGRAPH-425A	[FB80 C25A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC25A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_447)
{
    // 425A 0041;	
    // (䉚) CJK UNIFIED IDEOGRAPH-425A	[FB80 C25A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x425A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC25A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_448)
{
    // 425A 0062;	
    // (䉚) CJK UNIFIED IDEOGRAPH-425A	[FB80 C25A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC25A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_449)
{
    // 425B 0021;	
    // (䉛) CJK UNIFIED IDEOGRAPH-425B	[FB80 C25B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC25B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_450)
{
    // 425B 003F;	
    // (䉛) CJK UNIFIED IDEOGRAPH-425B	[FB80 C25B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC25B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_451)
{
    // 425B 0061;	
    // (䉛) CJK UNIFIED IDEOGRAPH-425B	[FB80 C25B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC25B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_452)
{
    // 425B 0041;	
    // (䉛) CJK UNIFIED IDEOGRAPH-425B	[FB80 C25B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x425B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC25B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_453)
{
    // 425B 0062;	
    // (䉛) CJK UNIFIED IDEOGRAPH-425B	[FB80 C25B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC25B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_454)
{
    // 425C 0021;	
    // (䉜) CJK UNIFIED IDEOGRAPH-425C	[FB80 C25C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC25C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_455)
{
    // 425C 003F;	
    // (䉜) CJK UNIFIED IDEOGRAPH-425C	[FB80 C25C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC25C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_456)
{
    // 425C 0061;	
    // (䉜) CJK UNIFIED IDEOGRAPH-425C	[FB80 C25C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC25C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_457)
{
    // 425C 0041;	
    // (䉜) CJK UNIFIED IDEOGRAPH-425C	[FB80 C25C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x425C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC25C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_458)
{
    // 425C 0062;	
    // (䉜) CJK UNIFIED IDEOGRAPH-425C	[FB80 C25C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC25C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_459)
{
    // 425D 0021;	
    // (䉝) CJK UNIFIED IDEOGRAPH-425D	[FB80 C25D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC25D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_460)
{
    // 425D 003F;	
    // (䉝) CJK UNIFIED IDEOGRAPH-425D	[FB80 C25D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC25D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_461)
{
    // 425D 0061;	
    // (䉝) CJK UNIFIED IDEOGRAPH-425D	[FB80 C25D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC25D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_462)
{
    // 425D 0041;	
    // (䉝) CJK UNIFIED IDEOGRAPH-425D	[FB80 C25D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x425D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC25D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_463)
{
    // 425D 0062;	
    // (䉝) CJK UNIFIED IDEOGRAPH-425D	[FB80 C25D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC25D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_464)
{
    // 425E 0021;	
    // (䉞) CJK UNIFIED IDEOGRAPH-425E	[FB80 C25E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC25E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_465)
{
    // 425E 003F;	
    // (䉞) CJK UNIFIED IDEOGRAPH-425E	[FB80 C25E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC25E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_466)
{
    // 425E 0061;	
    // (䉞) CJK UNIFIED IDEOGRAPH-425E	[FB80 C25E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC25E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_467)
{
    // 425E 0041;	
    // (䉞) CJK UNIFIED IDEOGRAPH-425E	[FB80 C25E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x425E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC25E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_468)
{
    // 425E 0062;	
    // (䉞) CJK UNIFIED IDEOGRAPH-425E	[FB80 C25E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC25E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_469)
{
    // 425F 0021;	
    // (䉟) CJK UNIFIED IDEOGRAPH-425F	[FB80 C25F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC25F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_470)
{
    // 425F 003F;	
    // (䉟) CJK UNIFIED IDEOGRAPH-425F	[FB80 C25F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC25F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_471)
{
    // 425F 0061;	
    // (䉟) CJK UNIFIED IDEOGRAPH-425F	[FB80 C25F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC25F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_472)
{
    // 425F 0041;	
    // (䉟) CJK UNIFIED IDEOGRAPH-425F	[FB80 C25F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x425F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC25F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_473)
{
    // 425F 0062;	
    // (䉟) CJK UNIFIED IDEOGRAPH-425F	[FB80 C25F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x425F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC25F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_474)
{
    // 4260 0021;	
    // (䉠) CJK UNIFIED IDEOGRAPH-4260	[FB80 C260 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4260, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC260, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_475)
{
    // 4260 003F;	
    // (䉠) CJK UNIFIED IDEOGRAPH-4260	[FB80 C260 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4260, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC260, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_476)
{
    // 4260 0061;	
    // (䉠) CJK UNIFIED IDEOGRAPH-4260	[FB80 C260 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4260, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC260, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_477)
{
    // 4260 0041;	
    // (䉠) CJK UNIFIED IDEOGRAPH-4260	[FB80 C260 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4260, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC260, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_478)
{
    // 4260 0062;	
    // (䉠) CJK UNIFIED IDEOGRAPH-4260	[FB80 C260 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4260, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC260, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_479)
{
    // 4261 0021;	
    // (䉡) CJK UNIFIED IDEOGRAPH-4261	[FB80 C261 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4261, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC261, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_480)
{
    // 4261 003F;	
    // (䉡) CJK UNIFIED IDEOGRAPH-4261	[FB80 C261 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4261, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC261, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_481)
{
    // 4261 0061;	
    // (䉡) CJK UNIFIED IDEOGRAPH-4261	[FB80 C261 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4261, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC261, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_482)
{
    // 4261 0041;	
    // (䉡) CJK UNIFIED IDEOGRAPH-4261	[FB80 C261 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4261, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC261, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_483)
{
    // 4261 0062;	
    // (䉡) CJK UNIFIED IDEOGRAPH-4261	[FB80 C261 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4261, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC261, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_484)
{
    // 4262 0021;	
    // (䉢) CJK UNIFIED IDEOGRAPH-4262	[FB80 C262 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4262, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC262, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_485)
{
    // 4262 003F;	
    // (䉢) CJK UNIFIED IDEOGRAPH-4262	[FB80 C262 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4262, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC262, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_486)
{
    // 4262 0061;	
    // (䉢) CJK UNIFIED IDEOGRAPH-4262	[FB80 C262 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4262, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC262, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_487)
{
    // 4262 0041;	
    // (䉢) CJK UNIFIED IDEOGRAPH-4262	[FB80 C262 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4262, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC262, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_488)
{
    // 4262 0062;	
    // (䉢) CJK UNIFIED IDEOGRAPH-4262	[FB80 C262 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4262, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC262, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_489)
{
    // 4263 0021;	
    // (䉣) CJK UNIFIED IDEOGRAPH-4263	[FB80 C263 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4263, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC263, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_490)
{
    // 4263 003F;	
    // (䉣) CJK UNIFIED IDEOGRAPH-4263	[FB80 C263 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4263, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC263, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_491)
{
    // 4263 0061;	
    // (䉣) CJK UNIFIED IDEOGRAPH-4263	[FB80 C263 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4263, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC263, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_492)
{
    // 4263 0041;	
    // (䉣) CJK UNIFIED IDEOGRAPH-4263	[FB80 C263 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4263, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC263, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_493)
{
    // 4263 0062;	
    // (䉣) CJK UNIFIED IDEOGRAPH-4263	[FB80 C263 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4263, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC263, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_494)
{
    // 4264 0021;	
    // (䉤) CJK UNIFIED IDEOGRAPH-4264	[FB80 C264 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4264, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC264, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_495)
{
    // 4264 003F;	
    // (䉤) CJK UNIFIED IDEOGRAPH-4264	[FB80 C264 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4264, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC264, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_496)
{
    // 4264 0061;	
    // (䉤) CJK UNIFIED IDEOGRAPH-4264	[FB80 C264 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4264, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC264, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_497)
{
    // 4264 0041;	
    // (䉤) CJK UNIFIED IDEOGRAPH-4264	[FB80 C264 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4264, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC264, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_498)
{
    // 4264 0062;	
    // (䉤) CJK UNIFIED IDEOGRAPH-4264	[FB80 C264 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4264, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC264, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_363_499)
{
    // 4265 0021;	
    // (䉥) CJK UNIFIED IDEOGRAPH-4265	[FB80 C265 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4265, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC265, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

