// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_319_000)
{
    // FA92 0021;	
    // (朗) CJK COMPATIBILITY IDEOGRAPH-FA92	[FB40 E717 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA92, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE717, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_001)
{
    // 2F8D8 0021;	
    // (朗) CJK COMPATIBILITY IDEOGRAPH-2F8D8	[FB40 E717 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D8, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE717, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_002)
{
    // F929 003F;	
    // (朗) CJK COMPATIBILITY IDEOGRAPH-F929	[FB40 E717 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF929, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE717, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_003)
{
    // FA92 003F;	
    // (朗) CJK COMPATIBILITY IDEOGRAPH-FA92	[FB40 E717 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA92, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE717, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_004)
{
    // 2F8D8 003F;	
    // (朗) CJK COMPATIBILITY IDEOGRAPH-2F8D8	[FB40 E717 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D8, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE717, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_005)
{
    // F929 0061;	
    // (朗) CJK COMPATIBILITY IDEOGRAPH-F929	[FB40 E717 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF929, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE717, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_006)
{
    // FA92 0061;	
    // (朗) CJK COMPATIBILITY IDEOGRAPH-FA92	[FB40 E717 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA92, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE717, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_007)
{
    // 2F8D8 0061;	
    // (朗) CJK COMPATIBILITY IDEOGRAPH-2F8D8	[FB40 E717 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D8, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE717, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_008)
{
    // F929 0041;	
    // (朗) CJK COMPATIBILITY IDEOGRAPH-F929	[FB40 E717 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF929, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE717, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_009)
{
    // FA92 0041;	
    // (朗) CJK COMPATIBILITY IDEOGRAPH-FA92	[FB40 E717 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA92, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE717, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_010)
{
    // 2F8D8 0041;	
    // (朗) CJK COMPATIBILITY IDEOGRAPH-2F8D8	[FB40 E717 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8D8, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE717, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_011)
{
    // F929 0062;	
    // (朗) CJK COMPATIBILITY IDEOGRAPH-F929	[FB40 E717 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF929, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE717, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_012)
{
    // FA92 0062;	
    // (朗) CJK COMPATIBILITY IDEOGRAPH-FA92	[FB40 E717 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA92, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE717, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_013)
{
    // 2F8D8 0062;	
    // (朗) CJK COMPATIBILITY IDEOGRAPH-2F8D8	[FB40 E717 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D8, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE717, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_014)
{
    // FA93 0021;	
    // (望) CJK COMPATIBILITY IDEOGRAPH-FA93	[FB40 E71B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA93, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE71B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_015)
{
    // 2F8D9 0021;	
    // (望) CJK COMPATIBILITY IDEOGRAPH-2F8D9	[FB40 E71B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D9, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE71B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_016)
{
    // FA93 003F;	
    // (望) CJK COMPATIBILITY IDEOGRAPH-FA93	[FB40 E71B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA93, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE71B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_017)
{
    // 2F8D9 003F;	
    // (望) CJK COMPATIBILITY IDEOGRAPH-2F8D9	[FB40 E71B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D9, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE71B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_018)
{
    // FA93 0061;	
    // (望) CJK COMPATIBILITY IDEOGRAPH-FA93	[FB40 E71B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA93, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE71B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_019)
{
    // 2F8D9 0061;	
    // (望) CJK COMPATIBILITY IDEOGRAPH-2F8D9	[FB40 E71B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D9, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE71B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_020)
{
    // FA93 0041;	
    // (望) CJK COMPATIBILITY IDEOGRAPH-FA93	[FB40 E71B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA93, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE71B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_021)
{
    // 2F8D9 0041;	
    // (望) CJK COMPATIBILITY IDEOGRAPH-2F8D9	[FB40 E71B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8D9, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE71B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_022)
{
    // FA93 0062;	
    // (望) CJK COMPATIBILITY IDEOGRAPH-FA93	[FB40 E71B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA93, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE71B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_023)
{
    // 2F8D9 0062;	
    // (望) CJK COMPATIBILITY IDEOGRAPH-2F8D9	[FB40 E71B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8D9, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE71B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_024)
{
    // 2F8DA 0021;	
    // (朡) CJK COMPATIBILITY IDEOGRAPH-2F8DA	[FB40 E721 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DA, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE721, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_025)
{
    // 2F8DA 003F;	
    // (朡) CJK COMPATIBILITY IDEOGRAPH-2F8DA	[FB40 E721 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DA, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE721, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_026)
{
    // 2F8DA 0061;	
    // (朡) CJK COMPATIBILITY IDEOGRAPH-2F8DA	[FB40 E721 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DA, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE721, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_027)
{
    // 2F8DA 0041;	
    // (朡) CJK COMPATIBILITY IDEOGRAPH-2F8DA	[FB40 E721 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8DA, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE721, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_028)
{
    // 2F8DA 0062;	
    // (朡) CJK COMPATIBILITY IDEOGRAPH-2F8DA	[FB40 E721 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DA, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE721, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_029)
{
    // 2F4A 0021;	
    // (⽊) KANGXI RADICAL TREE	[FB40 E728 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE728, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_030)
{
    // 328D 0021;	
    // (㊍) CIRCLED IDEOGRAPH WOOD	[FB40 E728 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x328D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE728, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_031)
{
    // 2F4A 003F;	
    // (⽊) KANGXI RADICAL TREE	[FB40 E728 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE728, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_032)
{
    // 328D 003F;	
    // (㊍) CIRCLED IDEOGRAPH WOOD	[FB40 E728 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x328D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE728, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_033)
{
    // 2F4A 0061;	
    // (⽊) KANGXI RADICAL TREE	[FB40 E728 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE728, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_034)
{
    // 2F4A 0041;	
    // (⽊) KANGXI RADICAL TREE	[FB40 E728 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F4A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE728, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_035)
{
    // 328D 0061;	
    // (㊍) CIRCLED IDEOGRAPH WOOD	[FB40 E728 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x328D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE728, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_036)
{
    // 328D 0041;	
    // (㊍) CIRCLED IDEOGRAPH WOOD	[FB40 E728 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x328D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE728, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_037)
{
    // 2F4A 0062;	
    // (⽊) KANGXI RADICAL TREE	[FB40 E728 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE728, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_038)
{
    // 328D 0062;	
    // (㊍) CIRCLED IDEOGRAPH WOOD	[FB40 E728 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x328D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE728, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_039)
{
    // F9E1 0021;	
    // (李) CJK COMPATIBILITY IDEOGRAPH-F9E1	[FB40 E74E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E1, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE74E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_040)
{
    // F9E1 003F;	
    // (李) CJK COMPATIBILITY IDEOGRAPH-F9E1	[FB40 E74E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E1, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE74E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_041)
{
    // F9E1 0061;	
    // (李) CJK COMPATIBILITY IDEOGRAPH-F9E1	[FB40 E74E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E1, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE74E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_042)
{
    // F9E1 0041;	
    // (李) CJK COMPATIBILITY IDEOGRAPH-F9E1	[FB40 E74E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9E1, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE74E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_043)
{
    // F9E1 0062;	
    // (李) CJK COMPATIBILITY IDEOGRAPH-F9E1	[FB40 E74E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E1, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE74E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_044)
{
    // 2F8DC 0021;	
    // (杓) CJK COMPATIBILITY IDEOGRAPH-2F8DC	[FB40 E753 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DC, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE753, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_045)
{
    // 2F8DC 003F;	
    // (杓) CJK COMPATIBILITY IDEOGRAPH-2F8DC	[FB40 E753 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DC, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE753, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_046)
{
    // 2F8DC 0061;	
    // (杓) CJK COMPATIBILITY IDEOGRAPH-2F8DC	[FB40 E753 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DC, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE753, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_047)
{
    // 2F8DC 0041;	
    // (杓) CJK COMPATIBILITY IDEOGRAPH-2F8DC	[FB40 E753 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8DC, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE753, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_048)
{
    // 2F8DC 0062;	
    // (杓) CJK COMPATIBILITY IDEOGRAPH-2F8DC	[FB40 E753 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DC, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE753, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_049)
{
    // FA94 0021;	
    // (杖) CJK COMPATIBILITY IDEOGRAPH-FA94	[FB40 E756 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA94, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE756, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_050)
{
    // FA94 003F;	
    // (杖) CJK COMPATIBILITY IDEOGRAPH-FA94	[FB40 E756 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA94, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE756, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_051)
{
    // FA94 0061;	
    // (杖) CJK COMPATIBILITY IDEOGRAPH-FA94	[FB40 E756 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA94, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE756, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_052)
{
    // FA94 0041;	
    // (杖) CJK COMPATIBILITY IDEOGRAPH-FA94	[FB40 E756 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA94, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE756, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_053)
{
    // FA94 0062;	
    // (杖) CJK COMPATIBILITY IDEOGRAPH-FA94	[FB40 E756 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA94, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE756, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_054)
{
    // 2F8DB 0021;	
    // (杞) CJK COMPATIBILITY IDEOGRAPH-2F8DB	[FB40 E75E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DB, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE75E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_055)
{
    // 2F8DB 003F;	
    // (杞) CJK COMPATIBILITY IDEOGRAPH-2F8DB	[FB40 E75E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DB, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE75E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_056)
{
    // 2F8DB 0061;	
    // (杞) CJK COMPATIBILITY IDEOGRAPH-2F8DB	[FB40 E75E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DB, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE75E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_057)
{
    // 2F8DB 0041;	
    // (杞) CJK COMPATIBILITY IDEOGRAPH-2F8DB	[FB40 E75E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8DB, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE75E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_058)
{
    // 2F8DB 0062;	
    // (杞) CJK COMPATIBILITY IDEOGRAPH-2F8DB	[FB40 E75E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DB, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE75E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_059)
{
    // F9C8 0021;	
    // (杻) CJK COMPATIBILITY IDEOGRAPH-F9C8	[FB40 E77B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C8, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE77B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_060)
{
    // F9C8 003F;	
    // (杻) CJK COMPATIBILITY IDEOGRAPH-F9C8	[FB40 E77B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C8, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE77B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_061)
{
    // F9C8 0061;	
    // (杻) CJK COMPATIBILITY IDEOGRAPH-F9C8	[FB40 E77B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C8, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE77B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_062)
{
    // F9C8 0041;	
    // (杻) CJK COMPATIBILITY IDEOGRAPH-F9C8	[FB40 E77B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9C8, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE77B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_063)
{
    // F9C8 0062;	
    // (杻) CJK COMPATIBILITY IDEOGRAPH-F9C8	[FB40 E77B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C8, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE77B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_064)
{
    // 2F8E0 0021;	
    // (枅) CJK COMPATIBILITY IDEOGRAPH-2F8E0	[FB40 E785 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E0, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE785, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_065)
{
    // 2F8E0 003F;	
    // (枅) CJK COMPATIBILITY IDEOGRAPH-2F8E0	[FB40 E785 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E0, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE785, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_066)
{
    // 2F8E0 0061;	
    // (枅) CJK COMPATIBILITY IDEOGRAPH-2F8E0	[FB40 E785 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E0, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE785, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_067)
{
    // 2F8E0 0041;	
    // (枅) CJK COMPATIBILITY IDEOGRAPH-2F8E0	[FB40 E785 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8E0, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE785, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_068)
{
    // 2F8E0 0062;	
    // (枅) CJK COMPATIBILITY IDEOGRAPH-2F8E0	[FB40 E785 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E0, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE785, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_069)
{
    // F9F4 0021;	
    // (林) CJK COMPATIBILITY IDEOGRAPH-F9F4	[FB40 E797 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F4, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE797, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_070)
{
    // F9F4 003F;	
    // (林) CJK COMPATIBILITY IDEOGRAPH-F9F4	[FB40 E797 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F4, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE797, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_071)
{
    // F9F4 0061;	
    // (林) CJK COMPATIBILITY IDEOGRAPH-F9F4	[FB40 E797 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F4, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE797, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_072)
{
    // F9F4 0041;	
    // (林) CJK COMPATIBILITY IDEOGRAPH-F9F4	[FB40 E797 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9F4, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE797, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_073)
{
    // F9F4 0062;	
    // (林) CJK COMPATIBILITY IDEOGRAPH-F9F4	[FB40 E797 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F4, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE797, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_074)
{
    // F9C9 0021;	
    // (柳) CJK COMPATIBILITY IDEOGRAPH-F9C9	[FB40 E7F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C9, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE7F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_075)
{
    // F9C9 003F;	
    // (柳) CJK COMPATIBILITY IDEOGRAPH-F9C9	[FB40 E7F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C9, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE7F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_076)
{
    // F9C9 0061;	
    // (柳) CJK COMPATIBILITY IDEOGRAPH-F9C9	[FB40 E7F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C9, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE7F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_077)
{
    // F9C9 0041;	
    // (柳) CJK COMPATIBILITY IDEOGRAPH-F9C9	[FB40 E7F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9C9, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE7F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_078)
{
    // F9C9 0062;	
    // (柳) CJK COMPATIBILITY IDEOGRAPH-F9C9	[FB40 E7F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C9, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE7F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_079)
{
    // 2F8DF 0021;	
    // (柺) CJK COMPATIBILITY IDEOGRAPH-2F8DF	[FB40 E7FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DF, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE7FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_080)
{
    // 2F8DF 003F;	
    // (柺) CJK COMPATIBILITY IDEOGRAPH-2F8DF	[FB40 E7FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DF, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE7FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_081)
{
    // 2F8DF 0061;	
    // (柺) CJK COMPATIBILITY IDEOGRAPH-2F8DF	[FB40 E7FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DF, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE7FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_082)
{
    // 2F8DF 0041;	
    // (柺) CJK COMPATIBILITY IDEOGRAPH-2F8DF	[FB40 E7FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8DF, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE7FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_083)
{
    // 2F8DF 0062;	
    // (柺) CJK COMPATIBILITY IDEOGRAPH-2F8DF	[FB40 E7FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8DF, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE7FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_084)
{
    // F9DA 0021;	
    // (栗) CJK COMPATIBILITY IDEOGRAPH-F9DA	[FB40 E817 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9DA, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE817, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_085)
{
    // F9DA 003F;	
    // (栗) CJK COMPATIBILITY IDEOGRAPH-F9DA	[FB40 E817 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9DA, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE817, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_086)
{
    // F9DA 0061;	
    // (栗) CJK COMPATIBILITY IDEOGRAPH-F9DA	[FB40 E817 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9DA, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE817, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_087)
{
    // F9DA 0041;	
    // (栗) CJK COMPATIBILITY IDEOGRAPH-F9DA	[FB40 E817 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9DA, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE817, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_088)
{
    // F9DA 0062;	
    // (栗) CJK COMPATIBILITY IDEOGRAPH-F9DA	[FB40 E817 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9DA, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE817, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_089)
{
    // 2F8E5 0021;	
    // (栟) CJK COMPATIBILITY IDEOGRAPH-2F8E5	[FB40 E81F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E5, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE81F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_090)
{
    // 2F8E5 003F;	
    // (栟) CJK COMPATIBILITY IDEOGRAPH-2F8E5	[FB40 E81F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E5, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE81F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_091)
{
    // 2F8E5 0061;	
    // (栟) CJK COMPATIBILITY IDEOGRAPH-2F8E5	[FB40 E81F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E5, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE81F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_092)
{
    // 2F8E5 0041;	
    // (栟) CJK COMPATIBILITY IDEOGRAPH-2F8E5	[FB40 E81F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8E5, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE81F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_093)
{
    // 2F8E5 0062;	
    // (栟) CJK COMPATIBILITY IDEOGRAPH-2F8E5	[FB40 E81F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E5, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE81F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_094)
{
    // 3291 0021;	
    // (㊑) CIRCLED IDEOGRAPH STOCK	[FB40 E82A 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3291, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE82A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_095)
{
    // 3291 003F;	
    // (㊑) CIRCLED IDEOGRAPH STOCK	[FB40 E82A 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3291, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE82A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_096)
{
    // 3291 0061;	
    // (㊑) CIRCLED IDEOGRAPH STOCK	[FB40 E82A 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3291, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE82A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_097)
{
    // 3291 0041;	
    // (㊑) CIRCLED IDEOGRAPH STOCK	[FB40 E82A 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x3291, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE82A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_098)
{
    // 3291 0062;	
    // (㊑) CIRCLED IDEOGRAPH STOCK	[FB40 E82A 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x3291, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE82A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_099)
{
    // 337F 0021;	
    // (㍿) SQUARE CORPORATION	[FB40 E82A FB40 DF0F FB40 CF1A FB40 F93E 0261 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x337F, 0x0021 };
    uint32_t const ces[22] = { 0xFB40, 0xE82A, 0xFB40, 0xDF0F, 0xFB40, 0xCF1A, 0xFB40, 0xF93E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_100)
{
    // 337F 003F;	
    // (㍿) SQUARE CORPORATION	[FB40 E82A FB40 DF0F FB40 CF1A FB40 F93E 0267 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x337F, 0x003F };
    uint32_t const ces[22] = { 0xFB40, 0xE82A, 0xFB40, 0xDF0F, 0xFB40, 0xCF1A, 0xFB40, 0xF93E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_101)
{
    // 337F 0061;	
    // (㍿) SQUARE CORPORATION	[FB40 E82A FB40 DF0F FB40 CF1A FB40 F93E 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x337F, 0x0061 };
    uint32_t const ces[22] = { 0xFB40, 0xE82A, 0xFB40, 0xDF0F, 0xFB40, 0xCF1A, 0xFB40, 0xF93E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_102)
{
    // 337F 0041;	
    // (㍿) SQUARE CORPORATION	[FB40 E82A FB40 DF0F FB40 CF1A FB40 F93E 1CAD | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0008 |]

    uint32_t cps[2] = { 0x337F, 0x0041 };
    uint32_t const ces[22] = { 0xFB40, 0xE82A, 0xFB40, 0xDF0F, 0xFB40, 0xCF1A, 0xFB40, 0xF93E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_103)
{
    // 337F 0062;	
    // (㍿) SQUARE CORPORATION	[FB40 E82A FB40 DF0F FB40 CF1A FB40 F93E 1CC6 | 0020 0020 0020 0020 0020 | 001C 001C 001C 001C 0002 |]

    uint32_t cps[2] = { 0x337F, 0x0062 };
    uint32_t const ces[22] = { 0xFB40, 0xE82A, 0xFB40, 0xDF0F, 0xFB40, 0xCF1A, 0xFB40, 0xF93E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x001C, 0x001C, 0x001C, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 22);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 22))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_104)
{
    // 2F8E1 0021;	
    // (桒) CJK COMPATIBILITY IDEOGRAPH-2F8E1	[FB40 E852 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E1, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE852, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_105)
{
    // 2F8E1 003F;	
    // (桒) CJK COMPATIBILITY IDEOGRAPH-2F8E1	[FB40 E852 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E1, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE852, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_106)
{
    // 2F8E1 0061;	
    // (桒) CJK COMPATIBILITY IDEOGRAPH-2F8E1	[FB40 E852 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E1, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE852, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_107)
{
    // 2F8E1 0041;	
    // (桒) CJK COMPATIBILITY IDEOGRAPH-2F8E1	[FB40 E852 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8E1, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE852, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_108)
{
    // 2F8E1 0062;	
    // (桒) CJK COMPATIBILITY IDEOGRAPH-2F8E1	[FB40 E852 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E1, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE852, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_109)
{
    // F97A 0021;	
    // (梁) CJK COMPATIBILITY IDEOGRAPH-F97A	[FB40 E881 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF97A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE881, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_110)
{
    // F97A 003F;	
    // (梁) CJK COMPATIBILITY IDEOGRAPH-F97A	[FB40 E881 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF97A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE881, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_111)
{
    // F97A 0061;	
    // (梁) CJK COMPATIBILITY IDEOGRAPH-F97A	[FB40 E881 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF97A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE881, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_112)
{
    // F97A 0041;	
    // (梁) CJK COMPATIBILITY IDEOGRAPH-F97A	[FB40 E881 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF97A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE881, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_113)
{
    // F97A 0062;	
    // (梁) CJK COMPATIBILITY IDEOGRAPH-F97A	[FB40 E881 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF97A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE881, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_114)
{
    // FA44 0021;	
    // (梅) CJK COMPATIBILITY IDEOGRAPH-FA44	[FB40 E885 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA44, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE885, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_115)
{
    // 2F8E2 0021;	
    // (梅) CJK COMPATIBILITY IDEOGRAPH-2F8E2	[FB40 E885 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E2, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE885, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_116)
{
    // FA44 003F;	
    // (梅) CJK COMPATIBILITY IDEOGRAPH-FA44	[FB40 E885 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA44, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE885, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_117)
{
    // 2F8E2 003F;	
    // (梅) CJK COMPATIBILITY IDEOGRAPH-2F8E2	[FB40 E885 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E2, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE885, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_118)
{
    // FA44 0061;	
    // (梅) CJK COMPATIBILITY IDEOGRAPH-FA44	[FB40 E885 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA44, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE885, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_119)
{
    // 2F8E2 0061;	
    // (梅) CJK COMPATIBILITY IDEOGRAPH-2F8E2	[FB40 E885 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E2, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE885, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_120)
{
    // FA44 0041;	
    // (梅) CJK COMPATIBILITY IDEOGRAPH-FA44	[FB40 E885 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA44, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE885, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_121)
{
    // 2F8E2 0041;	
    // (梅) CJK COMPATIBILITY IDEOGRAPH-2F8E2	[FB40 E885 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8E2, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE885, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_122)
{
    // FA44 0062;	
    // (梅) CJK COMPATIBILITY IDEOGRAPH-FA44	[FB40 E885 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA44, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE885, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_123)
{
    // 2F8E2 0062;	
    // (梅) CJK COMPATIBILITY IDEOGRAPH-2F8E2	[FB40 E885 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E2, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE885, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_124)
{
    // 2F8E4 0021;	
    // (梎) CJK COMPATIBILITY IDEOGRAPH-2F8E4	[FB40 E88E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E4, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE88E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_125)
{
    // 2F8E4 003F;	
    // (梎) CJK COMPATIBILITY IDEOGRAPH-2F8E4	[FB40 E88E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E4, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE88E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_126)
{
    // 2F8E4 0061;	
    // (梎) CJK COMPATIBILITY IDEOGRAPH-2F8E4	[FB40 E88E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E4, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE88E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_127)
{
    // 2F8E4 0041;	
    // (梎) CJK COMPATIBILITY IDEOGRAPH-2F8E4	[FB40 E88E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8E4, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE88E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_128)
{
    // 2F8E4 0062;	
    // (梎) CJK COMPATIBILITY IDEOGRAPH-2F8E4	[FB40 E88E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E4, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE88E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_129)
{
    // F9E2 0021;	
    // (梨) CJK COMPATIBILITY IDEOGRAPH-F9E2	[FB40 E8A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E2, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE8A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_130)
{
    // F9E2 003F;	
    // (梨) CJK COMPATIBILITY IDEOGRAPH-F9E2	[FB40 E8A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E2, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE8A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_131)
{
    // F9E2 0061;	
    // (梨) CJK COMPATIBILITY IDEOGRAPH-F9E2	[FB40 E8A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E2, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE8A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_132)
{
    // F9E2 0041;	
    // (梨) CJK COMPATIBILITY IDEOGRAPH-F9E2	[FB40 E8A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9E2, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE8A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_133)
{
    // F9E2 0062;	
    // (梨) CJK COMPATIBILITY IDEOGRAPH-F9E2	[FB40 E8A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E2, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE8A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_134)
{
    // 2F8E6 0021;	
    // (椔) CJK COMPATIBILITY IDEOGRAPH-2F8E6	[FB40 E914 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E6, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE914, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_135)
{
    // 2F8E6 003F;	
    // (椔) CJK COMPATIBILITY IDEOGRAPH-2F8E6	[FB40 E914 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E6, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE914, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_136)
{
    // 2F8E6 0061;	
    // (椔) CJK COMPATIBILITY IDEOGRAPH-2F8E6	[FB40 E914 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E6, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE914, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_137)
{
    // 2F8E6 0041;	
    // (椔) CJK COMPATIBILITY IDEOGRAPH-2F8E6	[FB40 E914 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8E6, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE914, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_138)
{
    // 2F8E6 0062;	
    // (椔) CJK COMPATIBILITY IDEOGRAPH-2F8E6	[FB40 E914 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E6, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE914, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_139)
{
    // 2F8E8 0021;	
    // (楂) CJK COMPATIBILITY IDEOGRAPH-2F8E8	[FB40 E942 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E8, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE942, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_140)
{
    // 2F8E8 003F;	
    // (楂) CJK COMPATIBILITY IDEOGRAPH-2F8E8	[FB40 E942 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E8, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE942, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_141)
{
    // 2F8E8 0061;	
    // (楂) CJK COMPATIBILITY IDEOGRAPH-2F8E8	[FB40 E942 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E8, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE942, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_142)
{
    // 2F8E8 0041;	
    // (楂) CJK COMPATIBILITY IDEOGRAPH-2F8E8	[FB40 E942 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8E8, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE942, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_143)
{
    // 2F8E8 0062;	
    // (楂) CJK COMPATIBILITY IDEOGRAPH-2F8E8	[FB40 E942 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E8, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE942, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_144)
{
    // 2F8E9 0021;	
    // (榣) CJK COMPATIBILITY IDEOGRAPH-2F8E9	[FB40 E9A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E9, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE9A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_145)
{
    // 2F8E9 003F;	
    // (榣) CJK COMPATIBILITY IDEOGRAPH-2F8E9	[FB40 E9A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E9, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE9A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_146)
{
    // 2F8E9 0061;	
    // (榣) CJK COMPATIBILITY IDEOGRAPH-2F8E9	[FB40 E9A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E9, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE9A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_147)
{
    // 2F8E9 0041;	
    // (榣) CJK COMPATIBILITY IDEOGRAPH-2F8E9	[FB40 E9A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8E9, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE9A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_148)
{
    // 2F8E9 0062;	
    // (榣) CJK COMPATIBILITY IDEOGRAPH-2F8E9	[FB40 E9A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8E9, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE9A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_149)
{
    // 2F8EA 0021;	
    // (槪) CJK COMPATIBILITY IDEOGRAPH-2F8EA	[FB40 E9EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8EA, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xE9EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_150)
{
    // 2F8EA 003F;	
    // (槪) CJK COMPATIBILITY IDEOGRAPH-2F8EA	[FB40 E9EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8EA, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xE9EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_151)
{
    // 2F8EA 0061;	
    // (槪) CJK COMPATIBILITY IDEOGRAPH-2F8EA	[FB40 E9EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8EA, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xE9EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_152)
{
    // 2F8EA 0041;	
    // (槪) CJK COMPATIBILITY IDEOGRAPH-2F8EA	[FB40 E9EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8EA, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xE9EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_153)
{
    // 2F8EA 0062;	
    // (槪) CJK COMPATIBILITY IDEOGRAPH-2F8EA	[FB40 E9EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8EA, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xE9EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_154)
{
    // F914 0021;	
    // (樂) CJK COMPATIBILITY IDEOGRAPH-F914	[FB40 EA02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF914, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEA02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_155)
{
    // F95C 0021;	
    // (樂) CJK COMPATIBILITY IDEOGRAPH-F95C	[FB40 EA02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF95C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEA02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_156)
{
    // F9BF 0021;	
    // (樂) CJK COMPATIBILITY IDEOGRAPH-F9BF	[FB40 EA02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BF, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEA02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_157)
{
    // F914 003F;	
    // (樂) CJK COMPATIBILITY IDEOGRAPH-F914	[FB40 EA02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF914, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEA02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_158)
{
    // F95C 003F;	
    // (樂) CJK COMPATIBILITY IDEOGRAPH-F95C	[FB40 EA02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF95C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEA02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_159)
{
    // F9BF 003F;	
    // (樂) CJK COMPATIBILITY IDEOGRAPH-F9BF	[FB40 EA02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BF, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEA02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_160)
{
    // F914 0061;	
    // (樂) CJK COMPATIBILITY IDEOGRAPH-F914	[FB40 EA02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF914, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEA02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_161)
{
    // F95C 0061;	
    // (樂) CJK COMPATIBILITY IDEOGRAPH-F95C	[FB40 EA02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF95C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEA02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_162)
{
    // F9BF 0061;	
    // (樂) CJK COMPATIBILITY IDEOGRAPH-F9BF	[FB40 EA02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BF, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEA02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_163)
{
    // F914 0041;	
    // (樂) CJK COMPATIBILITY IDEOGRAPH-F914	[FB40 EA02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF914, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEA02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_164)
{
    // F95C 0041;	
    // (樂) CJK COMPATIBILITY IDEOGRAPH-F95C	[FB40 EA02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF95C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEA02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_165)
{
    // F9BF 0041;	
    // (樂) CJK COMPATIBILITY IDEOGRAPH-F9BF	[FB40 EA02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9BF, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEA02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_166)
{
    // F914 0062;	
    // (樂) CJK COMPATIBILITY IDEOGRAPH-F914	[FB40 EA02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF914, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEA02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_167)
{
    // F95C 0062;	
    // (樂) CJK COMPATIBILITY IDEOGRAPH-F95C	[FB40 EA02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF95C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEA02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_168)
{
    // F9BF 0062;	
    // (樂) CJK COMPATIBILITY IDEOGRAPH-F9BF	[FB40 EA02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9BF, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEA02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_169)
{
    // F94C 0021;	
    // (樓) CJK COMPATIBILITY IDEOGRAPH-F94C	[FB40 EA13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEA13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_170)
{
    // F94C 003F;	
    // (樓) CJK COMPATIBILITY IDEOGRAPH-F94C	[FB40 EA13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEA13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_171)
{
    // F94C 0061;	
    // (樓) CJK COMPATIBILITY IDEOGRAPH-F94C	[FB40 EA13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEA13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_172)
{
    // F94C 0041;	
    // (樓) CJK COMPATIBILITY IDEOGRAPH-F94C	[FB40 EA13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF94C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEA13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_173)
{
    // F94C 0062;	
    // (樓) CJK COMPATIBILITY IDEOGRAPH-F94C	[FB40 EA13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEA13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_174)
{
    // 2F8EB 0021;	
    // (檨) CJK COMPATIBILITY IDEOGRAPH-2F8EB	[FB40 EAA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8EB, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEAA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_175)
{
    // 2F8EB 003F;	
    // (檨) CJK COMPATIBILITY IDEOGRAPH-2F8EB	[FB40 EAA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8EB, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEAA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_176)
{
    // 2F8EB 0061;	
    // (檨) CJK COMPATIBILITY IDEOGRAPH-2F8EB	[FB40 EAA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8EB, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEAA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_177)
{
    // 2F8EB 0041;	
    // (檨) CJK COMPATIBILITY IDEOGRAPH-2F8EB	[FB40 EAA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8EB, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEAA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_178)
{
    // 2F8EB 0062;	
    // (檨) CJK COMPATIBILITY IDEOGRAPH-2F8EB	[FB40 EAA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8EB, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEAA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_179)
{
    // F931 0021;	
    // (櫓) CJK COMPATIBILITY IDEOGRAPH-F931	[FB40 EAD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF931, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEAD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_180)
{
    // F931 003F;	
    // (櫓) CJK COMPATIBILITY IDEOGRAPH-F931	[FB40 EAD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF931, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEAD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_181)
{
    // F931 0061;	
    // (櫓) CJK COMPATIBILITY IDEOGRAPH-F931	[FB40 EAD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF931, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEAD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_182)
{
    // F931 0041;	
    // (櫓) CJK COMPATIBILITY IDEOGRAPH-F931	[FB40 EAD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF931, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEAD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_183)
{
    // F931 0062;	
    // (櫓) CJK COMPATIBILITY IDEOGRAPH-F931	[FB40 EAD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF931, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEAD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_184)
{
    // 2F8ED 0021;	
    // (櫛) CJK COMPATIBILITY IDEOGRAPH-2F8ED	[FB40 EADB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8ED, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEADB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_185)
{
    // 2F8ED 003F;	
    // (櫛) CJK COMPATIBILITY IDEOGRAPH-2F8ED	[FB40 EADB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8ED, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEADB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_186)
{
    // 2F8ED 0061;	
    // (櫛) CJK COMPATIBILITY IDEOGRAPH-2F8ED	[FB40 EADB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8ED, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEADB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_187)
{
    // 2F8ED 0041;	
    // (櫛) CJK COMPATIBILITY IDEOGRAPH-2F8ED	[FB40 EADB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8ED, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEADB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_188)
{
    // 2F8ED 0062;	
    // (櫛) CJK COMPATIBILITY IDEOGRAPH-2F8ED	[FB40 EADB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8ED, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEADB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_189)
{
    // F91D 0021;	
    // (欄) CJK COMPATIBILITY IDEOGRAPH-F91D	[FB40 EB04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF91D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEB04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_190)
{
    // F91D 003F;	
    // (欄) CJK COMPATIBILITY IDEOGRAPH-F91D	[FB40 EB04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF91D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEB04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_191)
{
    // F91D 0061;	
    // (欄) CJK COMPATIBILITY IDEOGRAPH-F91D	[FB40 EB04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF91D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEB04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_192)
{
    // F91D 0041;	
    // (欄) CJK COMPATIBILITY IDEOGRAPH-F91D	[FB40 EB04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF91D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEB04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_193)
{
    // F91D 0062;	
    // (欄) CJK COMPATIBILITY IDEOGRAPH-F91D	[FB40 EB04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF91D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEB04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_194)
{
    // 2F4B 0021;	
    // (⽋) KANGXI RADICAL LACK	[FB40 EB20 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4B, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEB20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_195)
{
    // 2F4B 003F;	
    // (⽋) KANGXI RADICAL LACK	[FB40 EB20 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4B, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEB20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_196)
{
    // 2F4B 0061;	
    // (⽋) KANGXI RADICAL LACK	[FB40 EB20 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4B, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEB20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_197)
{
    // 2F4B 0041;	
    // (⽋) KANGXI RADICAL LACK	[FB40 EB20 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F4B, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEB20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_198)
{
    // 2F4B 0062;	
    // (⽋) KANGXI RADICAL LACK	[FB40 EB20 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4B, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEB20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_199)
{
    // 2F8EF 0021;	
    // (次) CJK COMPATIBILITY IDEOGRAPH-2F8EF	[FB40 EB21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8EF, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEB21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_200)
{
    // 2F8EF 003F;	
    // (次) CJK COMPATIBILITY IDEOGRAPH-2F8EF	[FB40 EB21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8EF, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEB21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_201)
{
    // 2F8EF 0061;	
    // (次) CJK COMPATIBILITY IDEOGRAPH-2F8EF	[FB40 EB21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8EF, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEB21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_202)
{
    // 2F8EF 0041;	
    // (次) CJK COMPATIBILITY IDEOGRAPH-2F8EF	[FB40 EB21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8EF, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEB21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_203)
{
    // 2F8EF 0062;	
    // (次) CJK COMPATIBILITY IDEOGRAPH-2F8EF	[FB40 EB21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8EF, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEB21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_204)
{
    // 2F8F1 0021;	
    // (歔) CJK COMPATIBILITY IDEOGRAPH-2F8F1	[FB40 EB54 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F1, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEB54, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_205)
{
    // 2F8F1 003F;	
    // (歔) CJK COMPATIBILITY IDEOGRAPH-2F8F1	[FB40 EB54 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F1, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEB54, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_206)
{
    // 2F8F1 0061;	
    // (歔) CJK COMPATIBILITY IDEOGRAPH-2F8F1	[FB40 EB54 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F1, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEB54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_207)
{
    // 2F8F1 0041;	
    // (歔) CJK COMPATIBILITY IDEOGRAPH-2F8F1	[FB40 EB54 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8F1, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEB54, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_208)
{
    // 2F8F1 0062;	
    // (歔) CJK COMPATIBILITY IDEOGRAPH-2F8F1	[FB40 EB54 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F1, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEB54, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_209)
{
    // 2F4C 0021;	
    // (⽌) KANGXI RADICAL STOP	[FB40 EB62 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEB62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_210)
{
    // 2F4C 003F;	
    // (⽌) KANGXI RADICAL STOP	[FB40 EB62 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEB62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_211)
{
    // 2F4C 0061;	
    // (⽌) KANGXI RADICAL STOP	[FB40 EB62 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEB62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_212)
{
    // 2F4C 0041;	
    // (⽌) KANGXI RADICAL STOP	[FB40 EB62 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F4C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEB62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_213)
{
    // 2F4C 0062;	
    // (⽌) KANGXI RADICAL STOP	[FB40 EB62 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEB62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_214)
{
    // 32A3 0021;	
    // (㊣) CIRCLED IDEOGRAPH CORRECT	[FB40 EB63 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A3, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEB63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_215)
{
    // 32A3 003F;	
    // (㊣) CIRCLED IDEOGRAPH CORRECT	[FB40 EB63 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A3, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEB63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_216)
{
    // 32A3 0061;	
    // (㊣) CIRCLED IDEOGRAPH CORRECT	[FB40 EB63 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A3, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEB63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_217)
{
    // 32A3 0041;	
    // (㊣) CIRCLED IDEOGRAPH CORRECT	[FB40 EB63 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x32A3, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEB63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_218)
{
    // 32A3 0062;	
    // (㊣) CIRCLED IDEOGRAPH CORRECT	[FB40 EB63 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x32A3, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEB63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_219)
{
    // 2F8F3 0021;	
    // (歲) CJK COMPATIBILITY IDEOGRAPH-2F8F3	[FB40 EB72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F3, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEB72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_220)
{
    // 2F8F3 003F;	
    // (歲) CJK COMPATIBILITY IDEOGRAPH-2F8F3	[FB40 EB72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F3, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEB72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_221)
{
    // 2F8F3 0061;	
    // (歲) CJK COMPATIBILITY IDEOGRAPH-2F8F3	[FB40 EB72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F3, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEB72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_222)
{
    // 2F8F3 0041;	
    // (歲) CJK COMPATIBILITY IDEOGRAPH-2F8F3	[FB40 EB72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8F3, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEB72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_223)
{
    // 2F8F3 0062;	
    // (歲) CJK COMPATIBILITY IDEOGRAPH-2F8F3	[FB40 EB72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F3, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEB72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_224)
{
    // F98C 0021;	
    // (歷) CJK COMPATIBILITY IDEOGRAPH-F98C	[FB40 EB77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF98C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEB77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_225)
{
    // F98C 003F;	
    // (歷) CJK COMPATIBILITY IDEOGRAPH-F98C	[FB40 EB77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF98C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEB77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_226)
{
    // F98C 0061;	
    // (歷) CJK COMPATIBILITY IDEOGRAPH-F98C	[FB40 EB77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF98C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEB77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_227)
{
    // F98C 0041;	
    // (歷) CJK COMPATIBILITY IDEOGRAPH-F98C	[FB40 EB77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF98C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEB77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_228)
{
    // F98C 0062;	
    // (歷) CJK COMPATIBILITY IDEOGRAPH-F98C	[FB40 EB77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF98C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEB77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_229)
{
    // FA95 0021;	
    // (歹) CJK COMPATIBILITY IDEOGRAPH-FA95	[FB40 EB79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA95, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEB79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_230)
{
    // 2F4D 0021;	
    // (⽍) KANGXI RADICAL DEATH	[FB40 EB79 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEB79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_231)
{
    // FA95 003F;	
    // (歹) CJK COMPATIBILITY IDEOGRAPH-FA95	[FB40 EB79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA95, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEB79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_232)
{
    // 2F4D 003F;	
    // (⽍) KANGXI RADICAL DEATH	[FB40 EB79 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEB79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_233)
{
    // FA95 0061;	
    // (歹) CJK COMPATIBILITY IDEOGRAPH-FA95	[FB40 EB79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA95, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEB79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_234)
{
    // FA95 0041;	
    // (歹) CJK COMPATIBILITY IDEOGRAPH-FA95	[FB40 EB79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA95, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEB79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_235)
{
    // 2F4D 0061;	
    // (⽍) KANGXI RADICAL DEATH	[FB40 EB79 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEB79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_236)
{
    // 2F4D 0041;	
    // (⽍) KANGXI RADICAL DEATH	[FB40 EB79 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F4D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEB79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_237)
{
    // FA95 0062;	
    // (歹) CJK COMPATIBILITY IDEOGRAPH-FA95	[FB40 EB79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA95, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEB79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_238)
{
    // 2F4D 0062;	
    // (⽍) KANGXI RADICAL DEATH	[FB40 EB79 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEB79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_239)
{
    // 2E9E 0021;	
    // (⺞) CJK RADICAL DEATH	[FB40 EB7A 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E9E, 0x0021 };
    uint32_t const ces[12] = { 0xFB40, 0xEB7A, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_240)
{
    // 2E9E 003F;	
    // (⺞) CJK RADICAL DEATH	[FB40 EB7A 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E9E, 0x003F };
    uint32_t const ces[12] = { 0xFB40, 0xEB7A, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_241)
{
    // 2E9E 0061;	
    // (⺞) CJK RADICAL DEATH	[FB40 EB7A 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E9E, 0x0061 };
    uint32_t const ces[12] = { 0xFB40, 0xEB7A, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_242)
{
    // 2E9E 0041;	
    // (⺞) CJK RADICAL DEATH	[FB40 EB7A 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2E9E, 0x0041 };
    uint32_t const ces[12] = { 0xFB40, 0xEB7A, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_243)
{
    // 2E9E 0062;	
    // (⺞) CJK RADICAL DEATH	[FB40 EB7A 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2E9E, 0x0062 };
    uint32_t const ces[12] = { 0xFB40, 0xEB7A, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_244)
{
    // 2F8F4 0021;	
    // (殟) CJK COMPATIBILITY IDEOGRAPH-2F8F4	[FB40 EB9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F4, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEB9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_245)
{
    // 2F8F4 003F;	
    // (殟) CJK COMPATIBILITY IDEOGRAPH-2F8F4	[FB40 EB9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F4, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEB9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_246)
{
    // 2F8F4 0061;	
    // (殟) CJK COMPATIBILITY IDEOGRAPH-2F8F4	[FB40 EB9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F4, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEB9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_247)
{
    // 2F8F4 0041;	
    // (殟) CJK COMPATIBILITY IDEOGRAPH-2F8F4	[FB40 EB9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8F4, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEB9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_248)
{
    // 2F8F4 0062;	
    // (殟) CJK COMPATIBILITY IDEOGRAPH-2F8F4	[FB40 EB9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F4, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEB9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_249)
{
    // F9A5 0021;	
    // (殮) CJK COMPATIBILITY IDEOGRAPH-F9A5	[FB40 EBAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A5, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEBAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_250)
{
    // F9A5 003F;	
    // (殮) CJK COMPATIBILITY IDEOGRAPH-F9A5	[FB40 EBAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A5, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEBAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_251)
{
    // F9A5 0061;	
    // (殮) CJK COMPATIBILITY IDEOGRAPH-F9A5	[FB40 EBAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A5, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEBAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_252)
{
    // F9A5 0041;	
    // (殮) CJK COMPATIBILITY IDEOGRAPH-F9A5	[FB40 EBAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9A5, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEBAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_253)
{
    // F9A5 0062;	
    // (殮) CJK COMPATIBILITY IDEOGRAPH-F9A5	[FB40 EBAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A5, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEBAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_254)
{
    // 2F4E 0021;	
    // (⽎) KANGXI RADICAL WEAPON	[FB40 EBB3 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEBB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_255)
{
    // 2F4E 003F;	
    // (⽎) KANGXI RADICAL WEAPON	[FB40 EBB3 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEBB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_256)
{
    // 2F4E 0061;	
    // (⽎) KANGXI RADICAL WEAPON	[FB40 EBB3 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEBB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_257)
{
    // 2F4E 0041;	
    // (⽎) KANGXI RADICAL WEAPON	[FB40 EBB3 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F4E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEBB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_258)
{
    // 2F4E 0062;	
    // (⽎) KANGXI RADICAL WEAPON	[FB40 EBB3 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEBB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_259)
{
    // F970 0021;	
    // (殺) CJK COMPATIBILITY IDEOGRAPH-F970	[FB40 EBBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF970, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEBBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_260)
{
    // FA96 0021;	
    // (殺) CJK COMPATIBILITY IDEOGRAPH-FA96	[FB40 EBBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA96, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEBBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_261)
{
    // 2F8F5 0021;	
    // (殺) CJK COMPATIBILITY IDEOGRAPH-2F8F5	[FB40 EBBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F5, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEBBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_262)
{
    // F970 003F;	
    // (殺) CJK COMPATIBILITY IDEOGRAPH-F970	[FB40 EBBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF970, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEBBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_263)
{
    // FA96 003F;	
    // (殺) CJK COMPATIBILITY IDEOGRAPH-FA96	[FB40 EBBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA96, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEBBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_264)
{
    // 2F8F5 003F;	
    // (殺) CJK COMPATIBILITY IDEOGRAPH-2F8F5	[FB40 EBBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F5, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEBBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_265)
{
    // F970 0061;	
    // (殺) CJK COMPATIBILITY IDEOGRAPH-F970	[FB40 EBBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF970, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEBBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_266)
{
    // FA96 0061;	
    // (殺) CJK COMPATIBILITY IDEOGRAPH-FA96	[FB40 EBBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA96, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEBBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_267)
{
    // 2F8F5 0061;	
    // (殺) CJK COMPATIBILITY IDEOGRAPH-2F8F5	[FB40 EBBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F5, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEBBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_268)
{
    // F970 0041;	
    // (殺) CJK COMPATIBILITY IDEOGRAPH-F970	[FB40 EBBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF970, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEBBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_269)
{
    // FA96 0041;	
    // (殺) CJK COMPATIBILITY IDEOGRAPH-FA96	[FB40 EBBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA96, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEBBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_270)
{
    // 2F8F5 0041;	
    // (殺) CJK COMPATIBILITY IDEOGRAPH-2F8F5	[FB40 EBBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8F5, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEBBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_271)
{
    // F970 0062;	
    // (殺) CJK COMPATIBILITY IDEOGRAPH-F970	[FB40 EBBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF970, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEBBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_272)
{
    // FA96 0062;	
    // (殺) CJK COMPATIBILITY IDEOGRAPH-FA96	[FB40 EBBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA96, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEBBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_273)
{
    // 2F8F5 0062;	
    // (殺) CJK COMPATIBILITY IDEOGRAPH-2F8F5	[FB40 EBBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F5, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEBBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_274)
{
    // 2F8F6 0021;	
    // (殻) CJK COMPATIBILITY IDEOGRAPH-2F8F6	[FB40 EBBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F6, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEBBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_275)
{
    // 2F8F6 003F;	
    // (殻) CJK COMPATIBILITY IDEOGRAPH-2F8F6	[FB40 EBBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F6, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEBBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_276)
{
    // 2F8F6 0061;	
    // (殻) CJK COMPATIBILITY IDEOGRAPH-2F8F6	[FB40 EBBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F6, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEBBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_277)
{
    // 2F8F6 0041;	
    // (殻) CJK COMPATIBILITY IDEOGRAPH-2F8F6	[FB40 EBBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8F6, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEBBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_278)
{
    // 2F8F6 0062;	
    // (殻) CJK COMPATIBILITY IDEOGRAPH-2F8F6	[FB40 EBBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8F6, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEBBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_279)
{
    // 2F4F 0021;	
    // (⽏) KANGXI RADICAL DO NOT	[FB40 EBCB 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEBCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_280)
{
    // 2F4F 003F;	
    // (⽏) KANGXI RADICAL DO NOT	[FB40 EBCB 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEBCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_281)
{
    // 2F4F 0061;	
    // (⽏) KANGXI RADICAL DO NOT	[FB40 EBCB 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEBCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_282)
{
    // 2F4F 0041;	
    // (⽏) KANGXI RADICAL DO NOT	[FB40 EBCB 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F4F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEBCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_283)
{
    // 2F4F 0062;	
    // (⽏) KANGXI RADICAL DO NOT	[FB40 EBCB 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F4F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEBCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_284)
{
    // 2E9F 0021;	
    // (⺟) CJK RADICAL MOTHER	[FB40 EBCD 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E9F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEBCD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_285)
{
    // 2E9F 003F;	
    // (⺟) CJK RADICAL MOTHER	[FB40 EBCD 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E9F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEBCD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_286)
{
    // 2E9F 0061;	
    // (⺟) CJK RADICAL MOTHER	[FB40 EBCD 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E9F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEBCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_287)
{
    // 2E9F 0041;	
    // (⺟) CJK RADICAL MOTHER	[FB40 EBCD 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2E9F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEBCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_288)
{
    // 2E9F 0062;	
    // (⺟) CJK RADICAL MOTHER	[FB40 EBCD 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2E9F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEBCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_289)
{
    // 2F50 0021;	
    // (⽐) KANGXI RADICAL COMPARE	[FB40 EBD4 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F50, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEBD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_290)
{
    // 2F50 003F;	
    // (⽐) KANGXI RADICAL COMPARE	[FB40 EBD4 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F50, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEBD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_291)
{
    // 2F50 0061;	
    // (⽐) KANGXI RADICAL COMPARE	[FB40 EBD4 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F50, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEBD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_292)
{
    // 2F50 0041;	
    // (⽐) KANGXI RADICAL COMPARE	[FB40 EBD4 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F50, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEBD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_293)
{
    // 2F50 0062;	
    // (⽐) KANGXI RADICAL COMPARE	[FB40 EBD4 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F50, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEBD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_294)
{
    // 2F51 0021;	
    // (⽑) KANGXI RADICAL FUR	[FB40 EBDB 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F51, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEBDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_295)
{
    // 2F51 003F;	
    // (⽑) KANGXI RADICAL FUR	[FB40 EBDB 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F51, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEBDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_296)
{
    // 2F51 0061;	
    // (⽑) KANGXI RADICAL FUR	[FB40 EBDB 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F51, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEBDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_297)
{
    // 2F51 0041;	
    // (⽑) KANGXI RADICAL FUR	[FB40 EBDB 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F51, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEBDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_298)
{
    // 2F51 0062;	
    // (⽑) KANGXI RADICAL FUR	[FB40 EBDB 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F51, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEBDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_299)
{
    // 2F52 0021;	
    // (⽒) KANGXI RADICAL CLAN	[FB40 EC0F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F52, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEC0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_300)
{
    // 2F52 003F;	
    // (⽒) KANGXI RADICAL CLAN	[FB40 EC0F 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F52, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEC0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_301)
{
    // 2F52 0061;	
    // (⽒) KANGXI RADICAL CLAN	[FB40 EC0F 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F52, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEC0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_302)
{
    // 2F52 0041;	
    // (⽒) KANGXI RADICAL CLAN	[FB40 EC0F 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F52, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEC0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_303)
{
    // 2F52 0062;	
    // (⽒) KANGXI RADICAL CLAN	[FB40 EC0F 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F52, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEC0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_304)
{
    // 2EA0 0021;	
    // (⺠) CJK RADICAL CIVILIAN	[FB40 EC11 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA0, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEC11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_305)
{
    // 2EA0 003F;	
    // (⺠) CJK RADICAL CIVILIAN	[FB40 EC11 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA0, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEC11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_306)
{
    // 2EA0 0061;	
    // (⺠) CJK RADICAL CIVILIAN	[FB40 EC11 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA0, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEC11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_307)
{
    // 2EA0 0041;	
    // (⺠) CJK RADICAL CIVILIAN	[FB40 EC11 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EA0, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEC11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_308)
{
    // 2EA0 0062;	
    // (⺠) CJK RADICAL CIVILIAN	[FB40 EC11 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA0, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEC11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_309)
{
    // 2F53 0021;	
    // (⽓) KANGXI RADICAL STEAM	[FB40 EC14 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F53, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEC14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_310)
{
    // 2F53 003F;	
    // (⽓) KANGXI RADICAL STEAM	[FB40 EC14 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F53, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEC14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_311)
{
    // 2F53 0061;	
    // (⽓) KANGXI RADICAL STEAM	[FB40 EC14 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F53, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEC14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_312)
{
    // 2F53 0041;	
    // (⽓) KANGXI RADICAL STEAM	[FB40 EC14 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F53, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEC14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_313)
{
    // 2F53 0062;	
    // (⽓) KANGXI RADICAL STEAM	[FB40 EC14 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F53, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEC14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_314)
{
    // 2F54 0021;	
    // (⽔) KANGXI RADICAL WATER	[FB40 EC34 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F54, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEC34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_315)
{
    // 328C 0021;	
    // (㊌) CIRCLED IDEOGRAPH WATER	[FB40 EC34 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x328C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEC34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_316)
{
    // 2F54 003F;	
    // (⽔) KANGXI RADICAL WATER	[FB40 EC34 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F54, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEC34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_317)
{
    // 328C 003F;	
    // (㊌) CIRCLED IDEOGRAPH WATER	[FB40 EC34 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x328C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEC34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_318)
{
    // 2F54 0061;	
    // (⽔) KANGXI RADICAL WATER	[FB40 EC34 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F54, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEC34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_319)
{
    // 2F54 0041;	
    // (⽔) KANGXI RADICAL WATER	[FB40 EC34 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F54, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEC34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_320)
{
    // 328C 0061;	
    // (㊌) CIRCLED IDEOGRAPH WATER	[FB40 EC34 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x328C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEC34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_321)
{
    // 328C 0041;	
    // (㊌) CIRCLED IDEOGRAPH WATER	[FB40 EC34 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x328C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEC34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_322)
{
    // 2F54 0062;	
    // (⽔) KANGXI RADICAL WATER	[FB40 EC34 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F54, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEC34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_323)
{
    // 328C 0062;	
    // (㊌) CIRCLED IDEOGRAPH WATER	[FB40 EC34 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x328C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEC34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_324)
{
    // 2EA1 0021;	
    // (⺡) CJK RADICAL WATER ONE	[FB40 EC35 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA1, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEC35, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_325)
{
    // 2EA1 003F;	
    // (⺡) CJK RADICAL WATER ONE	[FB40 EC35 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA1, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEC35, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_326)
{
    // 2EA1 0061;	
    // (⺡) CJK RADICAL WATER ONE	[FB40 EC35 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA1, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEC35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_327)
{
    // 2EA1 0041;	
    // (⺡) CJK RADICAL WATER ONE	[FB40 EC35 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EA1, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEC35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_328)
{
    // 2EA1 0062;	
    // (⺡) CJK RADICAL WATER ONE	[FB40 EC35 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA1, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEC35, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_329)
{
    // 2EA2 0021;	
    // (⺢) CJK RADICAL WATER TWO	[FB40 EC3A 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA2, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEC3A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_330)
{
    // 2EA2 003F;	
    // (⺢) CJK RADICAL WATER TWO	[FB40 EC3A 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA2, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEC3A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_331)
{
    // 2EA2 0061;	
    // (⺢) CJK RADICAL WATER TWO	[FB40 EC3A 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA2, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEC3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_332)
{
    // 2EA2 0041;	
    // (⺢) CJK RADICAL WATER TWO	[FB40 EC3A 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EA2, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEC3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_333)
{
    // 2EA2 0062;	
    // (⺢) CJK RADICAL WATER TWO	[FB40 EC3A 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EA2, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEC3A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_334)
{
    // 2F8FA 0021;	
    // (汎) CJK COMPATIBILITY IDEOGRAPH-2F8FA	[FB40 EC4E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FA, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEC4E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_335)
{
    // 2F8FA 003F;	
    // (汎) CJK COMPATIBILITY IDEOGRAPH-2F8FA	[FB40 EC4E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FA, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEC4E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_336)
{
    // 2F8FA 0061;	
    // (汎) CJK COMPATIBILITY IDEOGRAPH-2F8FA	[FB40 EC4E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FA, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEC4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_337)
{
    // 2F8FA 0041;	
    // (汎) CJK COMPATIBILITY IDEOGRAPH-2F8FA	[FB40 EC4E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8FA, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEC4E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_338)
{
    // 2F8FA 0062;	
    // (汎) CJK COMPATIBILITY IDEOGRAPH-2F8FA	[FB40 EC4E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FA, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEC4E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_339)
{
    // 2F8FE 0021;	
    // (汧) CJK COMPATIBILITY IDEOGRAPH-2F8FE	[FB40 EC67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FE, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEC67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_340)
{
    // 2F8FE 003F;	
    // (汧) CJK COMPATIBILITY IDEOGRAPH-2F8FE	[FB40 EC67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FE, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEC67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_341)
{
    // 2F8FE 0061;	
    // (汧) CJK COMPATIBILITY IDEOGRAPH-2F8FE	[FB40 EC67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FE, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEC67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_342)
{
    // 2F8FE 0041;	
    // (汧) CJK COMPATIBILITY IDEOGRAPH-2F8FE	[FB40 EC67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8FE, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEC67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_343)
{
    // 2F8FE 0062;	
    // (汧) CJK COMPATIBILITY IDEOGRAPH-2F8FE	[FB40 EC67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FE, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEC67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_344)
{
    // F972 0021;	
    // (沈) CJK COMPATIBILITY IDEOGRAPH-F972	[FB40 EC88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF972, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEC88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_345)
{
    // F972 003F;	
    // (沈) CJK COMPATIBILITY IDEOGRAPH-F972	[FB40 EC88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF972, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEC88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_346)
{
    // F972 0061;	
    // (沈) CJK COMPATIBILITY IDEOGRAPH-F972	[FB40 EC88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF972, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEC88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_347)
{
    // F972 0041;	
    // (沈) CJK COMPATIBILITY IDEOGRAPH-F972	[FB40 EC88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF972, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEC88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_348)
{
    // F972 0062;	
    // (沈) CJK COMPATIBILITY IDEOGRAPH-F972	[FB40 EC88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF972, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEC88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_349)
{
    // 2F8FC 0021;	
    // (沿) CJK COMPATIBILITY IDEOGRAPH-2F8FC	[FB40 ECBF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FC, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xECBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_350)
{
    // 2F8FC 003F;	
    // (沿) CJK COMPATIBILITY IDEOGRAPH-2F8FC	[FB40 ECBF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FC, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xECBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_351)
{
    // 2F8FC 0061;	
    // (沿) CJK COMPATIBILITY IDEOGRAPH-2F8FC	[FB40 ECBF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FC, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xECBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_352)
{
    // 2F8FC 0041;	
    // (沿) CJK COMPATIBILITY IDEOGRAPH-2F8FC	[FB40 ECBF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8FC, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xECBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_353)
{
    // 2F8FC 0062;	
    // (沿) CJK COMPATIBILITY IDEOGRAPH-2F8FC	[FB40 ECBF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FC, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xECBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_354)
{
    // F968 0021;	
    // (泌) CJK COMPATIBILITY IDEOGRAPH-F968	[FB40 ECCC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF968, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xECCC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_355)
{
    // F968 003F;	
    // (泌) CJK COMPATIBILITY IDEOGRAPH-F968	[FB40 ECCC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF968, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xECCC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_356)
{
    // F968 0061;	
    // (泌) CJK COMPATIBILITY IDEOGRAPH-F968	[FB40 ECCC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF968, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xECCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_357)
{
    // F968 0041;	
    // (泌) CJK COMPATIBILITY IDEOGRAPH-F968	[FB40 ECCC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF968, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xECCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_358)
{
    // F968 0062;	
    // (泌) CJK COMPATIBILITY IDEOGRAPH-F968	[FB40 ECCC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF968, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xECCC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_359)
{
    // 2F8FD 0021;	
    // (泍) CJK COMPATIBILITY IDEOGRAPH-2F8FD	[FB40 ECCD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FD, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xECCD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_360)
{
    // 2F8FD 003F;	
    // (泍) CJK COMPATIBILITY IDEOGRAPH-2F8FD	[FB40 ECCD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FD, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xECCD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_361)
{
    // 2F8FD 0061;	
    // (泍) CJK COMPATIBILITY IDEOGRAPH-2F8FD	[FB40 ECCD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FD, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xECCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_362)
{
    // 2F8FD 0041;	
    // (泍) CJK COMPATIBILITY IDEOGRAPH-2F8FD	[FB40 ECCD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8FD, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xECCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_363)
{
    // 2F8FD 0062;	
    // (泍) CJK COMPATIBILITY IDEOGRAPH-2F8FD	[FB40 ECCD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FD, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xECCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_364)
{
    // F9E3 0021;	
    // (泥) CJK COMPATIBILITY IDEOGRAPH-F9E3	[FB40 ECE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E3, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xECE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_365)
{
    // F9E3 003F;	
    // (泥) CJK COMPATIBILITY IDEOGRAPH-F9E3	[FB40 ECE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E3, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xECE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_366)
{
    // F9E3 0061;	
    // (泥) CJK COMPATIBILITY IDEOGRAPH-F9E3	[FB40 ECE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E3, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xECE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_367)
{
    // F9E3 0041;	
    // (泥) CJK COMPATIBILITY IDEOGRAPH-F9E3	[FB40 ECE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9E3, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xECE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_368)
{
    // F9E3 0062;	
    // (泥) CJK COMPATIBILITY IDEOGRAPH-F9E3	[FB40 ECE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E3, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xECE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_369)
{
    // 329F 0021;	
    // (㊟) CIRCLED IDEOGRAPH ATTENTION	[FB40 ECE8 0261 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x329F, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xECE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_370)
{
    // 329F 003F;	
    // (㊟) CIRCLED IDEOGRAPH ATTENTION	[FB40 ECE8 0267 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x329F, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xECE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_371)
{
    // 329F 0061;	
    // (㊟) CIRCLED IDEOGRAPH ATTENTION	[FB40 ECE8 1CAD | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x329F, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xECE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_372)
{
    // 329F 0041;	
    // (㊟) CIRCLED IDEOGRAPH ATTENTION	[FB40 ECE8 1CAD | 0020 0020 | 0006 0008 |]

    uint32_t cps[2] = { 0x329F, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xECE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_373)
{
    // 329F 0062;	
    // (㊟) CIRCLED IDEOGRAPH ATTENTION	[FB40 ECE8 1CC6 | 0020 0020 | 0006 0002 |]

    uint32_t cps[2] = { 0x329F, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xECE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0006, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_374)
{
    // 2F8FF 0021;	
    // (洖) CJK COMPATIBILITY IDEOGRAPH-2F8FF	[FB40 ED16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FF, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xED16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_375)
{
    // 2F8FF 003F;	
    // (洖) CJK COMPATIBILITY IDEOGRAPH-2F8FF	[FB40 ED16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FF, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xED16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_376)
{
    // 2F8FF 0061;	
    // (洖) CJK COMPATIBILITY IDEOGRAPH-2F8FF	[FB40 ED16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FF, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xED16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_377)
{
    // 2F8FF 0041;	
    // (洖) CJK COMPATIBILITY IDEOGRAPH-2F8FF	[FB40 ED16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F8FF, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xED16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_378)
{
    // 2F8FF 0062;	
    // (洖) CJK COMPATIBILITY IDEOGRAPH-2F8FF	[FB40 ED16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F8FF, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xED16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_379)
{
    // F915 0021;	
    // (洛) CJK COMPATIBILITY IDEOGRAPH-F915	[FB40 ED1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF915, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xED1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_380)
{
    // F915 003F;	
    // (洛) CJK COMPATIBILITY IDEOGRAPH-F915	[FB40 ED1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF915, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xED1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_381)
{
    // F915 0061;	
    // (洛) CJK COMPATIBILITY IDEOGRAPH-F915	[FB40 ED1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF915, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xED1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_382)
{
    // F915 0041;	
    // (洛) CJK COMPATIBILITY IDEOGRAPH-F915	[FB40 ED1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF915, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xED1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_383)
{
    // F915 0062;	
    // (洛) CJK COMPATIBILITY IDEOGRAPH-F915	[FB40 ED1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF915, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xED1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_384)
{
    // FA05 0021;	
    // (洞) CJK COMPATIBILITY IDEOGRAPH-FA05	[FB40 ED1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA05, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xED1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_385)
{
    // FA05 003F;	
    // (洞) CJK COMPATIBILITY IDEOGRAPH-FA05	[FB40 ED1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA05, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xED1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_386)
{
    // FA05 0061;	
    // (洞) CJK COMPATIBILITY IDEOGRAPH-FA05	[FB40 ED1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA05, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xED1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_387)
{
    // FA05 0041;	
    // (洞) CJK COMPATIBILITY IDEOGRAPH-FA05	[FB40 ED1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA05, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xED1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_388)
{
    // FA05 0062;	
    // (洞) CJK COMPATIBILITY IDEOGRAPH-FA05	[FB40 ED1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA05, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xED1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_389)
{
    // 2F907 0021;	
    // (洴) CJK COMPATIBILITY IDEOGRAPH-2F907	[FB40 ED34 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F907, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xED34, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_390)
{
    // 2F907 003F;	
    // (洴) CJK COMPATIBILITY IDEOGRAPH-2F907	[FB40 ED34 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F907, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xED34, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_391)
{
    // 2F907 0061;	
    // (洴) CJK COMPATIBILITY IDEOGRAPH-2F907	[FB40 ED34 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F907, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xED34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_392)
{
    // 2F907 0041;	
    // (洴) CJK COMPATIBILITY IDEOGRAPH-2F907	[FB40 ED34 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F907, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xED34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_393)
{
    // 2F907 0062;	
    // (洴) CJK COMPATIBILITY IDEOGRAPH-2F907	[FB40 ED34 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F907, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xED34, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_394)
{
    // 2F900 0021;	
    // (派) CJK COMPATIBILITY IDEOGRAPH-2F900	[FB40 ED3E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F900, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xED3E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_395)
{
    // 2F900 003F;	
    // (派) CJK COMPATIBILITY IDEOGRAPH-2F900	[FB40 ED3E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F900, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xED3E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_396)
{
    // 2F900 0061;	
    // (派) CJK COMPATIBILITY IDEOGRAPH-2F900	[FB40 ED3E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F900, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xED3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_397)
{
    // 2F900 0041;	
    // (派) CJK COMPATIBILITY IDEOGRAPH-2F900	[FB40 ED3E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F900, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xED3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_398)
{
    // 2F900 0062;	
    // (派) CJK COMPATIBILITY IDEOGRAPH-2F900	[FB40 ED3E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F900, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xED3E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_399)
{
    // F9CA 0021;	
    // (流) CJK COMPATIBILITY IDEOGRAPH-F9CA	[FB40 ED41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9CA, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xED41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_400)
{
    // FA97 0021;	
    // (流) CJK COMPATIBILITY IDEOGRAPH-FA97	[FB40 ED41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA97, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xED41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_401)
{
    // 2F902 0021;	
    // (流) CJK COMPATIBILITY IDEOGRAPH-2F902	[FB40 ED41 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F902, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xED41, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_402)
{
    // F9CA 003F;	
    // (流) CJK COMPATIBILITY IDEOGRAPH-F9CA	[FB40 ED41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9CA, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xED41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_403)
{
    // FA97 003F;	
    // (流) CJK COMPATIBILITY IDEOGRAPH-FA97	[FB40 ED41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA97, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xED41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_404)
{
    // 2F902 003F;	
    // (流) CJK COMPATIBILITY IDEOGRAPH-2F902	[FB40 ED41 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F902, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xED41, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_405)
{
    // F9CA 0061;	
    // (流) CJK COMPATIBILITY IDEOGRAPH-F9CA	[FB40 ED41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9CA, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xED41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_406)
{
    // FA97 0061;	
    // (流) CJK COMPATIBILITY IDEOGRAPH-FA97	[FB40 ED41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA97, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xED41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_407)
{
    // 2F902 0061;	
    // (流) CJK COMPATIBILITY IDEOGRAPH-2F902	[FB40 ED41 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F902, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xED41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_408)
{
    // F9CA 0041;	
    // (流) CJK COMPATIBILITY IDEOGRAPH-F9CA	[FB40 ED41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9CA, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xED41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_409)
{
    // FA97 0041;	
    // (流) CJK COMPATIBILITY IDEOGRAPH-FA97	[FB40 ED41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA97, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xED41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_410)
{
    // 2F902 0041;	
    // (流) CJK COMPATIBILITY IDEOGRAPH-2F902	[FB40 ED41 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F902, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xED41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_411)
{
    // F9CA 0062;	
    // (流) CJK COMPATIBILITY IDEOGRAPH-F9CA	[FB40 ED41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9CA, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xED41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_412)
{
    // FA97 0062;	
    // (流) CJK COMPATIBILITY IDEOGRAPH-FA97	[FB40 ED41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA97, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xED41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_413)
{
    // 2F902 0062;	
    // (流) CJK COMPATIBILITY IDEOGRAPH-2F902	[FB40 ED41 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F902, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xED41, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_414)
{
    // 2F903 0021;	
    // (浩) CJK COMPATIBILITY IDEOGRAPH-2F903	[FB40 ED69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F903, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xED69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_415)
{
    // 2F903 003F;	
    // (浩) CJK COMPATIBILITY IDEOGRAPH-2F903	[FB40 ED69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F903, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xED69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_416)
{
    // 2F903 0061;	
    // (浩) CJK COMPATIBILITY IDEOGRAPH-2F903	[FB40 ED69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F903, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xED69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_417)
{
    // 2F903 0041;	
    // (浩) CJK COMPATIBILITY IDEOGRAPH-2F903	[FB40 ED69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F903, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xED69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_418)
{
    // 2F903 0062;	
    // (浩) CJK COMPATIBILITY IDEOGRAPH-2F903	[FB40 ED69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F903, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xED69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_419)
{
    // F92A 0021;	
    // (浪) CJK COMPATIBILITY IDEOGRAPH-F92A	[FB40 ED6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF92A, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xED6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_420)
{
    // F92A 003F;	
    // (浪) CJK COMPATIBILITY IDEOGRAPH-F92A	[FB40 ED6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF92A, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xED6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_421)
{
    // F92A 0061;	
    // (浪) CJK COMPATIBILITY IDEOGRAPH-F92A	[FB40 ED6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF92A, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xED6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_422)
{
    // F92A 0041;	
    // (浪) CJK COMPATIBILITY IDEOGRAPH-F92A	[FB40 ED6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF92A, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xED6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_423)
{
    // F92A 0062;	
    // (浪) CJK COMPATIBILITY IDEOGRAPH-F92A	[FB40 ED6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF92A, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xED6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_424)
{
    // FA45 0021;	
    // (海) CJK COMPATIBILITY IDEOGRAPH-FA45	[FB40 ED77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA45, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xED77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_425)
{
    // 2F901 0021;	
    // (海) CJK COMPATIBILITY IDEOGRAPH-2F901	[FB40 ED77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F901, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xED77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_426)
{
    // FA45 003F;	
    // (海) CJK COMPATIBILITY IDEOGRAPH-FA45	[FB40 ED77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA45, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xED77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_427)
{
    // 2F901 003F;	
    // (海) CJK COMPATIBILITY IDEOGRAPH-2F901	[FB40 ED77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F901, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xED77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_428)
{
    // FA45 0061;	
    // (海) CJK COMPATIBILITY IDEOGRAPH-FA45	[FB40 ED77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA45, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xED77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_429)
{
    // 2F901 0061;	
    // (海) CJK COMPATIBILITY IDEOGRAPH-2F901	[FB40 ED77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F901, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xED77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_430)
{
    // FA45 0041;	
    // (海) CJK COMPATIBILITY IDEOGRAPH-FA45	[FB40 ED77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA45, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xED77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_431)
{
    // 2F901 0041;	
    // (海) CJK COMPATIBILITY IDEOGRAPH-2F901	[FB40 ED77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F901, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xED77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_432)
{
    // FA45 0062;	
    // (海) CJK COMPATIBILITY IDEOGRAPH-FA45	[FB40 ED77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA45, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xED77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_433)
{
    // 2F901 0062;	
    // (海) CJK COMPATIBILITY IDEOGRAPH-2F901	[FB40 ED77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F901, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xED77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_434)
{
    // 2F904 0021;	
    // (浸) CJK COMPATIBILITY IDEOGRAPH-2F904	[FB40 ED78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F904, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xED78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_435)
{
    // 2F904 003F;	
    // (浸) CJK COMPATIBILITY IDEOGRAPH-2F904	[FB40 ED78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F904, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xED78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_436)
{
    // 2F904 0061;	
    // (浸) CJK COMPATIBILITY IDEOGRAPH-2F904	[FB40 ED78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F904, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xED78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_437)
{
    // 2F904 0041;	
    // (浸) CJK COMPATIBILITY IDEOGRAPH-2F904	[FB40 ED78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F904, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xED78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_438)
{
    // 2F904 0062;	
    // (浸) CJK COMPATIBILITY IDEOGRAPH-2F904	[FB40 ED78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F904, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xED78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_439)
{
    // 2F905 0021;	
    // (涅) CJK COMPATIBILITY IDEOGRAPH-2F905	[FB40 ED85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F905, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xED85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_440)
{
    // 2F905 003F;	
    // (涅) CJK COMPATIBILITY IDEOGRAPH-2F905	[FB40 ED85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F905, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xED85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_441)
{
    // 2F905 0061;	
    // (涅) CJK COMPATIBILITY IDEOGRAPH-2F905	[FB40 ED85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F905, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xED85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_442)
{
    // 2F905 0041;	
    // (涅) CJK COMPATIBILITY IDEOGRAPH-2F905	[FB40 ED85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F905, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xED85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_443)
{
    // 2F905 0062;	
    // (涅) CJK COMPATIBILITY IDEOGRAPH-2F905	[FB40 ED85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F905, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xED85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_444)
{
    // F9F5 0021;	
    // (淋) CJK COMPATIBILITY IDEOGRAPH-F9F5	[FB40 EDCB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F5, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEDCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_445)
{
    // F9F5 003F;	
    // (淋) CJK COMPATIBILITY IDEOGRAPH-F9F5	[FB40 EDCB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F5, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEDCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_446)
{
    // F9F5 0061;	
    // (淋) CJK COMPATIBILITY IDEOGRAPH-F9F5	[FB40 EDCB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F5, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEDCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_447)
{
    // F9F5 0041;	
    // (淋) CJK COMPATIBILITY IDEOGRAPH-F9F5	[FB40 EDCB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9F5, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEDCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_448)
{
    // F9F5 0062;	
    // (淋) CJK COMPATIBILITY IDEOGRAPH-F9F5	[FB40 EDCB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F5, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEDCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_449)
{
    // F94D 0021;	
    // (淚) CJK COMPATIBILITY IDEOGRAPH-F94D	[FB40 EDDA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94D, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEDDA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_450)
{
    // F94D 003F;	
    // (淚) CJK COMPATIBILITY IDEOGRAPH-F94D	[FB40 EDDA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94D, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEDDA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_451)
{
    // F94D 0061;	
    // (淚) CJK COMPATIBILITY IDEOGRAPH-F94D	[FB40 EDDA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94D, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEDDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_452)
{
    // F94D 0041;	
    // (淚) CJK COMPATIBILITY IDEOGRAPH-F94D	[FB40 EDDA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF94D, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEDDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_453)
{
    // F94D 0062;	
    // (淚) CJK COMPATIBILITY IDEOGRAPH-F94D	[FB40 EDDA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF94D, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEDDA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_454)
{
    // F9D6 0021;	
    // (淪) CJK COMPATIBILITY IDEOGRAPH-F9D6	[FB40 EDEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D6, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEDEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_455)
{
    // F9D6 003F;	
    // (淪) CJK COMPATIBILITY IDEOGRAPH-F9D6	[FB40 EDEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D6, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEDEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_456)
{
    // F9D6 0061;	
    // (淪) CJK COMPATIBILITY IDEOGRAPH-F9D6	[FB40 EDEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D6, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEDEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_457)
{
    // F9D6 0041;	
    // (淪) CJK COMPATIBILITY IDEOGRAPH-F9D6	[FB40 EDEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9D6, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEDEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_458)
{
    // F9D6 0062;	
    // (淪) CJK COMPATIBILITY IDEOGRAPH-F9D6	[FB40 EDEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9D6, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEDEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_459)
{
    // 2F90E 0021;	
    // (淹) CJK COMPATIBILITY IDEOGRAPH-2F90E	[FB40 EDF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90E, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEDF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_460)
{
    // 2F90E 003F;	
    // (淹) CJK COMPATIBILITY IDEOGRAPH-2F90E	[FB40 EDF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90E, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEDF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_461)
{
    // 2F90E 0061;	
    // (淹) CJK COMPATIBILITY IDEOGRAPH-2F90E	[FB40 EDF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90E, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEDF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_462)
{
    // 2F90E 0041;	
    // (淹) CJK COMPATIBILITY IDEOGRAPH-2F90E	[FB40 EDF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F90E, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEDF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_463)
{
    // 2F90E 0062;	
    // (淹) CJK COMPATIBILITY IDEOGRAPH-2F90E	[FB40 EDF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90E, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEDF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_464)
{
    // FA46 0021;	
    // (渚) CJK COMPATIBILITY IDEOGRAPH-FA46	[FB40 EE1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA46, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEE1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_465)
{
    // FA46 003F;	
    // (渚) CJK COMPATIBILITY IDEOGRAPH-FA46	[FB40 EE1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA46, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEE1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_466)
{
    // FA46 0061;	
    // (渚) CJK COMPATIBILITY IDEOGRAPH-FA46	[FB40 EE1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA46, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEE1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_467)
{
    // FA46 0041;	
    // (渚) CJK COMPATIBILITY IDEOGRAPH-FA46	[FB40 EE1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA46, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEE1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_468)
{
    // FA46 0062;	
    // (渚) CJK COMPATIBILITY IDEOGRAPH-FA46	[FB40 EE1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA46, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEE1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_469)
{
    // 2F908 0021;	
    // (港) CJK COMPATIBILITY IDEOGRAPH-2F908	[FB40 EE2F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F908, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEE2F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_470)
{
    // 2F908 003F;	
    // (港) CJK COMPATIBILITY IDEOGRAPH-2F908	[FB40 EE2F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F908, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEE2F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_471)
{
    // 2F908 0061;	
    // (港) CJK COMPATIBILITY IDEOGRAPH-2F908	[FB40 EE2F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F908, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEE2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_472)
{
    // 2F908 0041;	
    // (港) CJK COMPATIBILITY IDEOGRAPH-2F908	[FB40 EE2F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F908, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEE2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_473)
{
    // 2F908 0062;	
    // (港) CJK COMPATIBILITY IDEOGRAPH-2F908	[FB40 EE2F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F908, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEE2F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_474)
{
    // 2F909 0021;	
    // (湮) CJK COMPATIBILITY IDEOGRAPH-2F909	[FB40 EE6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F909, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEE6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_475)
{
    // 2F909 003F;	
    // (湮) CJK COMPATIBILITY IDEOGRAPH-2F909	[FB40 EE6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F909, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEE6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_476)
{
    // 2F909 0061;	
    // (湮) CJK COMPATIBILITY IDEOGRAPH-2F909	[FB40 EE6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F909, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEE6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_477)
{
    // 2F909 0041;	
    // (湮) CJK COMPATIBILITY IDEOGRAPH-2F909	[FB40 EE6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F909, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEE6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_478)
{
    // 2F909 0062;	
    // (湮) CJK COMPATIBILITY IDEOGRAPH-2F909	[FB40 EE6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F909, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEE6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_479)
{
    // 1F235 0021;	
    // (🈵) SQUARED CJK UNIFIED IDEOGRAPH-6E80	[FB40 EE80 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F235, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEE80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_480)
{
    // 1F235 003F;	
    // (🈵) SQUARED CJK UNIFIED IDEOGRAPH-6E80	[FB40 EE80 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F235, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEE80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_481)
{
    // 1F235 0061;	
    // (🈵) SQUARED CJK UNIFIED IDEOGRAPH-6E80	[FB40 EE80 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F235, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEE80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_482)
{
    // 1F235 0041;	
    // (🈵) SQUARED CJK UNIFIED IDEOGRAPH-6E80	[FB40 EE80 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F235, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEE80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_483)
{
    // 1F235 0062;	
    // (🈵) SQUARED CJK UNIFIED IDEOGRAPH-6E80	[FB40 EE80 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F235, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEE80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_484)
{
    // F9CB 0021;	
    // (溜) CJK COMPATIBILITY IDEOGRAPH-F9CB	[FB40 EE9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9CB, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEE9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_485)
{
    // F9CB 003F;	
    // (溜) CJK COMPATIBILITY IDEOGRAPH-F9CB	[FB40 EE9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9CB, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEE9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_486)
{
    // F9CB 0061;	
    // (溜) CJK COMPATIBILITY IDEOGRAPH-F9CB	[FB40 EE9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9CB, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEE9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_487)
{
    // F9CB 0041;	
    // (溜) CJK COMPATIBILITY IDEOGRAPH-F9CB	[FB40 EE9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9CB, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEE9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_488)
{
    // F9CB 0062;	
    // (溜) CJK COMPATIBILITY IDEOGRAPH-F9CB	[FB40 EE9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9CB, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEE9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_489)
{
    // F9EC 0021;	
    // (溺) CJK COMPATIBILITY IDEOGRAPH-F9EC	[FB40 EEBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9EC, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEEBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_490)
{
    // F9EC 003F;	
    // (溺) CJK COMPATIBILITY IDEOGRAPH-F9EC	[FB40 EEBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9EC, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEEBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_491)
{
    // F9EC 0061;	
    // (溺) CJK COMPATIBILITY IDEOGRAPH-F9EC	[FB40 EEBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9EC, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEEBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_492)
{
    // F9EC 0041;	
    // (溺) CJK COMPATIBILITY IDEOGRAPH-F9EC	[FB40 EEBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9EC, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEEBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_493)
{
    // F9EC 0062;	
    // (溺) CJK COMPATIBILITY IDEOGRAPH-F9EC	[FB40 EEBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9EC, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEEBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_494)
{
    // 2F90C 0021;	
    // (滇) CJK COMPATIBILITY IDEOGRAPH-2F90C	[FB40 EEC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90C, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEEC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_495)
{
    // 2F90C 003F;	
    // (滇) CJK COMPATIBILITY IDEOGRAPH-2F90C	[FB40 EEC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90C, 0x003F };
    uint32_t const ces[10] = { 0xFB40, 0xEEC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_496)
{
    // 2F90C 0061;	
    // (滇) CJK COMPATIBILITY IDEOGRAPH-2F90C	[FB40 EEC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90C, 0x0061 };
    uint32_t const ces[10] = { 0xFB40, 0xEEC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_497)
{
    // 2F90C 0041;	
    // (滇) CJK COMPATIBILITY IDEOGRAPH-2F90C	[FB40 EEC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F90C, 0x0041 };
    uint32_t const ces[10] = { 0xFB40, 0xEEC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_498)
{
    // 2F90C 0062;	
    // (滇) CJK COMPATIBILITY IDEOGRAPH-2F90C	[FB40 EEC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F90C, 0x0062 };
    uint32_t const ces[10] = { 0xFB40, 0xEEC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_319_499)
{
    // FA99 0021;	
    // (滋) CJK COMPATIBILITY IDEOGRAPH-FA99	[FB40 EECB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA99, 0x0021 };
    uint32_t const ces[10] = { 0xFB40, 0xEECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

