// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_097_000)
{
    // A780  ; [.1E07.0020.0008] 
    // LATIN CAPITAL LETTER TURNED L

    uint32_t const cps[1] = { 0xa780 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e07), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_001)
{
    // A781  ; [.1E07.0020.0002] 
    // LATIN SMALL LETTER TURNED L

    uint32_t const cps[1] = { 0xa781 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e07), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_002)
{
    // A782  ; [.1E99.0020.000A][.0000.0112.0004] 
    // LATIN CAPITAL LETTER INSULAR R

    uint32_t const cps[1] = { 0xa782 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_003)
{
    // A783  ; [.1E99.0020.0004][.0000.0112.0004] 
    // LATIN SMALL LETTER INSULAR R

    uint32_t const cps[1] = { 0xa783 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_004)
{
    // A784  ; [.1ED7.0020.000A][.0000.0112.0004] 
    // LATIN CAPITAL LETTER INSULAR S

    uint32_t const cps[1] = { 0xa784 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_005)
{
    // A785  ; [.1ED7.0020.0004][.0000.0112.0004] 
    // LATIN SMALL LETTER INSULAR S

    uint32_t const cps[1] = { 0xa785 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_006)
{
    // A786  ; [.1EFB.0020.000A][.0000.0112.0004] 
    // LATIN CAPITAL LETTER INSULAR T

    uint32_t const cps[1] = { 0xa786 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_007)
{
    // A787  ; [.1EFB.0020.0004][.0000.0112.0004] 
    // LATIN SMALL LETTER INSULAR T

    uint32_t const cps[1] = { 0xa787 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1efb), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_008)
{
    // A788  ; [*0508.0020.0002] 
    // MODIFIER LETTER LOW CIRCUMFLEX ACCENT

    uint32_t const cps[1] = { 0xa788 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x508), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_009)
{
    // A789  ; [*0509.0020.0002] 
    // MODIFIER LETTER COLON

    uint32_t const cps[1] = { 0xa789 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x509), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_010)
{
    // A78A  ; [*050A.0020.0002] 
    // MODIFIER LETTER SHORT EQUALS SIGN

    uint32_t const cps[1] = { 0xa78a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x50a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_011)
{
    // A78B  ; [.1FE8.0020.0008] 
    // LATIN CAPITAL LETTER SALTILLO

    uint32_t const cps[1] = { 0xa78b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fe8), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_012)
{
    // A78C  ; [.1FE8.0020.0002] 
    // LATIN SMALL LETTER SALTILLO

    uint32_t const cps[1] = { 0xa78c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fe8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_013)
{
    // A78D  ; [.1F2E.0020.0008] 
    // LATIN CAPITAL LETTER TURNED H

    uint32_t const cps[1] = { 0xa78d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f2e), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_014)
{
    // A78E  ; [.1DFD.0020.0002] 
    // LATIN SMALL LETTER L WITH RETROFLEX HOOK AND BELT

    uint32_t const cps[1] = { 0xa78e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dfd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_015)
{
    // A78F  ; [.1FE9.0020.0002] 
    // LATIN LETTER SINOLOGICAL DOT

    uint32_t const cps[1] = { 0xa78f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1fe9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_016)
{
    // A790  ; [.1E32.0020.0008] 
    // LATIN CAPITAL LETTER N WITH DESCENDER

    uint32_t const cps[1] = { 0xa790 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e32), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_017)
{
    // A791  ; [.1E32.0020.0002] 
    // LATIN SMALL LETTER N WITH DESCENDER

    uint32_t const cps[1] = { 0xa791 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e32), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_018)
{
    // A792  ; [.1CE9.0020.0008] 
    // LATIN CAPITAL LETTER C WITH BAR

    uint32_t const cps[1] = { 0xa792 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ce9), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_019)
{
    // A793  ; [.1CE9.0020.0002] 
    // LATIN SMALL LETTER C WITH BAR

    uint32_t const cps[1] = { 0xa793 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1ce9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_020)
{
    // A794  ; [.1CEA.0020.0002] 
    // LATIN SMALL LETTER C WITH PALATAL HOOK

    uint32_t const cps[1] = { 0xa794 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_021)
{
    // A795  ; [.1D8A.0020.0002] 
    // LATIN SMALL LETTER H WITH PALATAL HOOK

    uint32_t const cps[1] = { 0xa795 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d8a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_022)
{
    // A796  ; [.1CD5.0020.0008] 
    // LATIN CAPITAL LETTER B WITH FLOURISH

    uint32_t const cps[1] = { 0xa796 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cd5), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_023)
{
    // A797  ; [.1CD5.0020.0002] 
    // LATIN SMALL LETTER B WITH FLOURISH

    uint32_t const cps[1] = { 0xa797 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cd5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_024)
{
    // A798  ; [.1D51.0020.0008] 
    // LATIN CAPITAL LETTER F WITH STROKE

    uint32_t const cps[1] = { 0xa798 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d51), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_025)
{
    // A799  ; [.1D51.0020.0002] 
    // LATIN SMALL LETTER F WITH STROKE

    uint32_t const cps[1] = { 0xa799 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d51), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_026)
{
    // A79A  ; [.1CAD.0020.000A][.0000.002B.0004] 
    // LATIN CAPITAL LETTER VOLAPUK AE

    uint32_t const cps[1] = { 0xa79a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_027)
{
    // A79B  ; [.1CAD.0020.0004][.0000.002B.0004] 
    // LATIN SMALL LETTER VOLAPUK AE

    uint32_t const cps[1] = { 0xa79b };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1cad), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_028)
{
    // A79C  ; [.1E43.0020.000A][.0000.002B.0004] 
    // LATIN CAPITAL LETTER VOLAPUK OE

    uint32_t const cps[1] = { 0xa79c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_029)
{
    // A79D  ; [.1E43.0020.0004][.0000.002B.0004] 
    // LATIN SMALL LETTER VOLAPUK OE

    uint32_t const cps[1] = { 0xa79d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_030)
{
    // A79E  ; [.1F1B.0020.000A][.0000.002B.0004] 
    // LATIN CAPITAL LETTER VOLAPUK UE

    uint32_t const cps[1] = { 0xa79e };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_031)
{
    // A79F  ; [.1F1B.0020.0004][.0000.002B.0004] 
    // LATIN SMALL LETTER VOLAPUK UE

    uint32_t const cps[1] = { 0xa79f };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1f1b), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xb), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_032)
{
    // A7A0  ; [.1D5A.0020.000A][.0000.0035.0004] 
    // LATIN CAPITAL LETTER G WITH OBLIQUE STROKE

    uint32_t const cps[1] = { 0xa7a0 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0x15), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_033)
{
    // A7A1  ; [.1D5A.0020.0004][.0000.0035.0004] 
    // LATIN SMALL LETTER G WITH OBLIQUE STROKE

    uint32_t const cps[1] = { 0xa7a1 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d5a), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0x15), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_034)
{
    // A7A2  ; [.1DCB.0020.000A][.0000.0035.0004] 
    // LATIN CAPITAL LETTER K WITH OBLIQUE STROKE

    uint32_t const cps[1] = { 0xa7a2 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0x15), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_035)
{
    // A7A3  ; [.1DCB.0020.0004][.0000.0035.0004] 
    // LATIN SMALL LETTER K WITH OBLIQUE STROKE

    uint32_t const cps[1] = { 0xa7a3 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1dcb), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0x15), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_036)
{
    // A7A4  ; [.1E1F.0020.000A][.0000.0035.0004] 
    // LATIN CAPITAL LETTER N WITH OBLIQUE STROKE

    uint32_t const cps[1] = { 0xa7a4 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0x15), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_037)
{
    // A7A5  ; [.1E1F.0020.0004][.0000.0035.0004] 
    // LATIN SMALL LETTER N WITH OBLIQUE STROKE

    uint32_t const cps[1] = { 0xa7a5 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e1f), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0x15), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_038)
{
    // A7A6  ; [.1E99.0020.000A][.0000.0035.0004] 
    // LATIN CAPITAL LETTER R WITH OBLIQUE STROKE

    uint32_t const cps[1] = { 0xa7a6 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0x15), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_039)
{
    // A7A7  ; [.1E99.0020.0004][.0000.0035.0004] 
    // LATIN SMALL LETTER R WITH OBLIQUE STROKE

    uint32_t const cps[1] = { 0xa7a7 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1e99), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0x15), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_040)
{
    // A7A8  ; [.1ED7.0020.000A][.0000.0035.0004] 
    // LATIN CAPITAL LETTER S WITH OBLIQUE STROKE

    uint32_t const cps[1] = { 0xa7a8 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0xa)}, {uint16_t(0x0), uint8_t(0x15), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_041)
{
    // A7A9  ; [.1ED7.0020.0004][.0000.0035.0004] 
    // LATIN SMALL LETTER S WITH OBLIQUE STROKE

    uint32_t const cps[1] = { 0xa7a9 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1ed7), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0x15), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_042)
{
    // A7AA  ; [.1D8B.0020.0008] 
    // LATIN CAPITAL LETTER H WITH HOOK

    uint32_t const cps[1] = { 0xa7aa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d8b), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_043)
{
    // A7AB  ; [.1D35.0020.0008] 
    // LATIN CAPITAL LETTER REVERSED OPEN E

    uint32_t const cps[1] = { 0xa7ab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d35), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_044)
{
    // A7AC  ; [.1D5E.0020.0008] 
    // LATIN CAPITAL LETTER SCRIPT G

    uint32_t const cps[1] = { 0xa7ac };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d5e), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_045)
{
    // A7AD  ; [.1DF3.0020.0008] 
    // LATIN CAPITAL LETTER L WITH BELT

    uint32_t const cps[1] = { 0xa7ad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1df3), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_046)
{
    // A7AE  ; [.1DA0.0020.0008] 
    // LATIN CAPITAL LETTER SMALL CAPITAL I

    uint32_t const cps[1] = { 0xa7ae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1da0), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_047)
{
    // A7B0  ; [.1DD9.0020.0008] 
    // LATIN CAPITAL LETTER TURNED K

    uint32_t const cps[1] = { 0xa7b0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dd9), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_048)
{
    // A7B1  ; [.1F17.0020.0008] 
    // LATIN CAPITAL LETTER TURNED T

    uint32_t const cps[1] = { 0xa7b1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f17), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_049)
{
    // A7B2  ; [.1DBF.0020.0008] 
    // LATIN CAPITAL LETTER J WITH CROSSED-TAIL

    uint32_t const cps[1] = { 0xa7b2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1dbf), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_050)
{
    // A7B3  ; [.1F6E.0020.0008] 
    // LATIN CAPITAL LETTER CHI

    uint32_t const cps[1] = { 0xa7b3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f6e), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_051)
{
    // A7B4  ; [.1CDF.0020.0008] 
    // LATIN CAPITAL LETTER BETA

    uint32_t const cps[1] = { 0xa7b4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cdf), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_052)
{
    // A7B5  ; [.1CDF.0020.0002] 
    // LATIN SMALL LETTER BETA

    uint32_t const cps[1] = { 0xa7b5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1cdf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_053)
{
    // A7B6  ; [.1E6C.0020.0008] 
    // LATIN CAPITAL LETTER OMEGA

    uint32_t const cps[1] = { 0xa7b6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e6c), uint8_t(0x0), uint8_t(0x8)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_054)
{
    // A7B7  ; [.1E6C.0020.0002] 
    // LATIN SMALL LETTER OMEGA

    uint32_t const cps[1] = { 0xa7b7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e6c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_055)
{
    // A7F7  ; [.1DA5.0020.0002] 
    // LATIN EPIGRAPHIC LETTER SIDEWAYS I

    uint32_t const cps[1] = { 0xa7f7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1da5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_056)
{
    // A7F8  ; [.1D7E.0020.0014][.0000.0039.0014] 
    // MODIFIER LETTER CAPITAL H WITH STROKE

    uint32_t const cps[1] = { 0xa7f8 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x1d7e), uint8_t(0x0), uint8_t(0x14)}, {uint16_t(0x0), uint8_t(0x19), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_097_057)
{
    // A7F9  ; [.1E43.0020.0014][.0000.0111.0014][.1D10.0020.0014] 
    // MODIFIER LETTER SMALL LIGATURE OE

    uint32_t const cps[1] = { 0xa7f9 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x1e43), uint8_t(0x0), uint8_t(0x14)}, {uint16_t(0x0), uint8_t(0xf1), uint8_t(0x14)}, {uint16_t(0x1d10), uint8_t(0x0), uint8_t(0x14)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_097_058)
{
    // A7FA  ; [.1F3E.0020.0002] 
    // LATIN LETTER SMALL CAPITAL TURNED M

    uint32_t const cps[1] = { 0xa7fa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1f3e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_059)
{
    // A7FB  ; [.1D59.0020.0002] 
    // LATIN EPIGRAPHIC LETTER REVERSED F

    uint32_t const cps[1] = { 0xa7fb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1d59), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_060)
{
    // A7FC  ; [.1E81.0020.0002] 
    // LATIN EPIGRAPHIC LETTER REVERSED P

    uint32_t const cps[1] = { 0xa7fc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e81), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_061)
{
    // A7FD  ; [.1E1C.0020.0002] 
    // LATIN EPIGRAPHIC LETTER INVERTED M

    uint32_t const cps[1] = { 0xa7fd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e1c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_062)
{
    // A7FE  ; [.1DA4.0020.0002] 
    // LATIN EPIGRAPHIC LETTER I LONGA

    uint32_t const cps[1] = { 0xa7fe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1da4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_063)
{
    // A7FF  ; [.1E1D.0020.0002] 
    // LATIN EPIGRAPHIC LETTER ARCHAIC M

    uint32_t const cps[1] = { 0xa7ff };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1e1d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_064)
{
    // A800  ; [.29CE.0020.0002] 
    // SYLOTI NAGRI LETTER A

    uint32_t const cps[1] = { 0xa800 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_065)
{
    // A801  ; [.29CF.0020.0002] 
    // SYLOTI NAGRI LETTER I

    uint32_t const cps[1] = { 0xa801 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29cf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_066)
{
    // A802  ; [.29D0.0020.0002] 
    // SYLOTI NAGRI SIGN DVISVARA

    uint32_t const cps[1] = { 0xa802 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29d0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_067)
{
    // A803  ; [.29D1.0020.0002] 
    // SYLOTI NAGRI LETTER U

    uint32_t const cps[1] = { 0xa803 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29d1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_068)
{
    // A804  ; [.29D2.0020.0002] 
    // SYLOTI NAGRI LETTER E

    uint32_t const cps[1] = { 0xa804 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_069)
{
    // A805  ; [.29D3.0020.0002] 
    // SYLOTI NAGRI LETTER O

    uint32_t const cps[1] = { 0xa805 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_070)
{
    // A806  ; [.29D4.0020.0002] 
    // SYLOTI NAGRI SIGN HASANTA

    uint32_t const cps[1] = { 0xa806 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_071)
{
    // A807  ; [.29D5.0020.0002] 
    // SYLOTI NAGRI LETTER KO

    uint32_t const cps[1] = { 0xa807 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_072)
{
    // A808  ; [.29D6.0020.0002] 
    // SYLOTI NAGRI LETTER KHO

    uint32_t const cps[1] = { 0xa808 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_073)
{
    // A809  ; [.29D7.0020.0002] 
    // SYLOTI NAGRI LETTER GO

    uint32_t const cps[1] = { 0xa809 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_074)
{
    // A80A  ; [.29D8.0020.0002] 
    // SYLOTI NAGRI LETTER GHO

    uint32_t const cps[1] = { 0xa80a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_075)
{
    // A80B  ; [.0000.00C4.0002] 
    // SYLOTI NAGRI SIGN ANUSVARA

    uint32_t const cps[1] = { 0xa80b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_076)
{
    // A80C  ; [.29D9.0020.0002] 
    // SYLOTI NAGRI LETTER CO

    uint32_t const cps[1] = { 0xa80c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_077)
{
    // A80D  ; [.29DA.0020.0002] 
    // SYLOTI NAGRI LETTER CHO

    uint32_t const cps[1] = { 0xa80d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29da), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_078)
{
    // A80E  ; [.29DB.0020.0002] 
    // SYLOTI NAGRI LETTER JO

    uint32_t const cps[1] = { 0xa80e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29db), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_079)
{
    // A80F  ; [.29DC.0020.0002] 
    // SYLOTI NAGRI LETTER JHO

    uint32_t const cps[1] = { 0xa80f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_080)
{
    // A810  ; [.29DD.0020.0002] 
    // SYLOTI NAGRI LETTER TTO

    uint32_t const cps[1] = { 0xa810 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_081)
{
    // A811  ; [.29DE.0020.0002] 
    // SYLOTI NAGRI LETTER TTHO

    uint32_t const cps[1] = { 0xa811 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29de), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_082)
{
    // A812  ; [.29DF.0020.0002] 
    // SYLOTI NAGRI LETTER DDO

    uint32_t const cps[1] = { 0xa812 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29df), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_083)
{
    // A813  ; [.29E0.0020.0002] 
    // SYLOTI NAGRI LETTER DDHO

    uint32_t const cps[1] = { 0xa813 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29e0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_084)
{
    // A814  ; [.29E1.0020.0002] 
    // SYLOTI NAGRI LETTER TO

    uint32_t const cps[1] = { 0xa814 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29e1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_085)
{
    // A815  ; [.29E2.0020.0002] 
    // SYLOTI NAGRI LETTER THO

    uint32_t const cps[1] = { 0xa815 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29e2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_086)
{
    // A816  ; [.29E3.0020.0002] 
    // SYLOTI NAGRI LETTER DO

    uint32_t const cps[1] = { 0xa816 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29e3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_087)
{
    // A817  ; [.29E4.0020.0002] 
    // SYLOTI NAGRI LETTER DHO

    uint32_t const cps[1] = { 0xa817 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29e4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_088)
{
    // A818  ; [.29E5.0020.0002] 
    // SYLOTI NAGRI LETTER NO

    uint32_t const cps[1] = { 0xa818 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_089)
{
    // A819  ; [.29E6.0020.0002] 
    // SYLOTI NAGRI LETTER PO

    uint32_t const cps[1] = { 0xa819 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29e6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_090)
{
    // A81A  ; [.29E7.0020.0002] 
    // SYLOTI NAGRI LETTER PHO

    uint32_t const cps[1] = { 0xa81a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29e7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_091)
{
    // A81B  ; [.29E8.0020.0002] 
    // SYLOTI NAGRI LETTER BO

    uint32_t const cps[1] = { 0xa81b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29e8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_092)
{
    // A81C  ; [.29E9.0020.0002] 
    // SYLOTI NAGRI LETTER BHO

    uint32_t const cps[1] = { 0xa81c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_093)
{
    // A81D  ; [.29EA.0020.0002] 
    // SYLOTI NAGRI LETTER MO

    uint32_t const cps[1] = { 0xa81d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_094)
{
    // A81E  ; [.29EB.0020.0002] 
    // SYLOTI NAGRI LETTER RO

    uint32_t const cps[1] = { 0xa81e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_095)
{
    // A81F  ; [.29EC.0020.0002] 
    // SYLOTI NAGRI LETTER LO

    uint32_t const cps[1] = { 0xa81f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29ec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_096)
{
    // A820  ; [.29ED.0020.0002] 
    // SYLOTI NAGRI LETTER RRO

    uint32_t const cps[1] = { 0xa820 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29ed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_097)
{
    // A821  ; [.29EE.0020.0002] 
    // SYLOTI NAGRI LETTER SO

    uint32_t const cps[1] = { 0xa821 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_098)
{
    // A822  ; [.29EF.0020.0002] 
    // SYLOTI NAGRI LETTER HO

    uint32_t const cps[1] = { 0xa822 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29ef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_099)
{
    // A823  ; [.29F0.0020.0002] 
    // SYLOTI NAGRI VOWEL SIGN A

    uint32_t const cps[1] = { 0xa823 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29f0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_100)
{
    // A824  ; [.29F1.0020.0002] 
    // SYLOTI NAGRI VOWEL SIGN I

    uint32_t const cps[1] = { 0xa824 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29f1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_101)
{
    // A825  ; [.29F2.0020.0002] 
    // SYLOTI NAGRI VOWEL SIGN U

    uint32_t const cps[1] = { 0xa825 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29f2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_102)
{
    // A826  ; [.29F3.0020.0002] 
    // SYLOTI NAGRI VOWEL SIGN E

    uint32_t const cps[1] = { 0xa826 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29f3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_103)
{
    // A827  ; [.29F4.0020.0002] 
    // SYLOTI NAGRI VOWEL SIGN OO

    uint32_t const cps[1] = { 0xa827 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x29f4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_104)
{
    // A828  ; [*0535.0020.0002] 
    // SYLOTI NAGRI POETRY MARK-1

    uint32_t const cps[1] = { 0xa828 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x535), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_105)
{
    // A829  ; [*0536.0020.0002] 
    // SYLOTI NAGRI POETRY MARK-2

    uint32_t const cps[1] = { 0xa829 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x536), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_106)
{
    // A82A  ; [*0537.0020.0002] 
    // SYLOTI NAGRI POETRY MARK-3

    uint32_t const cps[1] = { 0xa82a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x537), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_107)
{
    // A82B  ; [*0538.0020.0002] 
    // SYLOTI NAGRI POETRY MARK-4

    uint32_t const cps[1] = { 0xa82b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x538), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_108)
{
    // A830  ; [*1B06.0020.0002] 
    // NORTH INDIC FRACTION ONE QUARTER

    uint32_t const cps[1] = { 0xa830 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b06), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_109)
{
    // A831  ; [*1B07.0020.0002] 
    // NORTH INDIC FRACTION ONE HALF

    uint32_t const cps[1] = { 0xa831 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b07), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_110)
{
    // A832  ; [*1B08.0020.0002] 
    // NORTH INDIC FRACTION THREE QUARTERS

    uint32_t const cps[1] = { 0xa832 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b08), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_111)
{
    // A833  ; [*1B09.0020.0002] 
    // NORTH INDIC FRACTION ONE SIXTEENTH

    uint32_t const cps[1] = { 0xa833 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b09), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_112)
{
    // A834  ; [*1B0A.0020.0002] 
    // NORTH INDIC FRACTION ONE EIGHTH

    uint32_t const cps[1] = { 0xa834 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b0a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_113)
{
    // A835  ; [*1B0B.0020.0002] 
    // NORTH INDIC FRACTION THREE SIXTEENTHS

    uint32_t const cps[1] = { 0xa835 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1b0b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_114)
{
    // A836  ; [*0539.0020.0002] 
    // NORTH INDIC QUARTER MARK

    uint32_t const cps[1] = { 0xa836 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x539), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_115)
{
    // A837  ; [*053A.0020.0002] 
    // NORTH INDIC PLACEHOLDER MARK

    uint32_t const cps[1] = { 0xa837 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x53a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_116)
{
    // A838  ; [.1C80.0020.0002] 
    // NORTH INDIC RUPEE MARK

    uint32_t const cps[1] = { 0xa838 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1c80), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_117)
{
    // A839  ; [*053B.0020.0002] 
    // NORTH INDIC QUANTITY MARK

    uint32_t const cps[1] = { 0xa839 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x53b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_118)
{
    // A840  ; [.3017.0020.0002] 
    // PHAGS-PA LETTER KA

    uint32_t const cps[1] = { 0xa840 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3017), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_119)
{
    // A841  ; [.3018.0020.0002] 
    // PHAGS-PA LETTER KHA

    uint32_t const cps[1] = { 0xa841 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3018), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_120)
{
    // A842  ; [.3019.0020.0002] 
    // PHAGS-PA LETTER GA

    uint32_t const cps[1] = { 0xa842 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3019), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_121)
{
    // A843  ; [.301A.0020.0002] 
    // PHAGS-PA LETTER NGA

    uint32_t const cps[1] = { 0xa843 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x301a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_122)
{
    // A844  ; [.301B.0020.0002] 
    // PHAGS-PA LETTER CA

    uint32_t const cps[1] = { 0xa844 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x301b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_123)
{
    // A845  ; [.301C.0020.0002] 
    // PHAGS-PA LETTER CHA

    uint32_t const cps[1] = { 0xa845 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x301c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_124)
{
    // A846  ; [.301D.0020.0002] 
    // PHAGS-PA LETTER JA

    uint32_t const cps[1] = { 0xa846 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x301d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_125)
{
    // A847  ; [.301E.0020.0002] 
    // PHAGS-PA LETTER NYA

    uint32_t const cps[1] = { 0xa847 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x301e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_126)
{
    // A848  ; [.3023.0020.0002] 
    // PHAGS-PA LETTER TA

    uint32_t const cps[1] = { 0xa848 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3023), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_127)
{
    // A849  ; [.3024.0020.0002] 
    // PHAGS-PA LETTER THA

    uint32_t const cps[1] = { 0xa849 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3024), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_128)
{
    // A84A  ; [.3025.0020.0002] 
    // PHAGS-PA LETTER DA

    uint32_t const cps[1] = { 0xa84a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3025), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_129)
{
    // A84B  ; [.3026.0020.0002] 
    // PHAGS-PA LETTER NA

    uint32_t const cps[1] = { 0xa84b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3026), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_130)
{
    // A84C  ; [.3027.0020.0002] 
    // PHAGS-PA LETTER PA

    uint32_t const cps[1] = { 0xa84c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3027), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_131)
{
    // A84D  ; [.3028.0020.0002] 
    // PHAGS-PA LETTER PHA

    uint32_t const cps[1] = { 0xa84d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3028), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_132)
{
    // A84E  ; [.3029.0020.0002] 
    // PHAGS-PA LETTER BA

    uint32_t const cps[1] = { 0xa84e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3029), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_133)
{
    // A84F  ; [.302A.0020.0002] 
    // PHAGS-PA LETTER MA

    uint32_t const cps[1] = { 0xa84f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x302a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_134)
{
    // A850  ; [.302B.0020.0002] 
    // PHAGS-PA LETTER TSA

    uint32_t const cps[1] = { 0xa850 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x302b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_135)
{
    // A851  ; [.302C.0020.0002] 
    // PHAGS-PA LETTER TSHA

    uint32_t const cps[1] = { 0xa851 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x302c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_136)
{
    // A852  ; [.302D.0020.0002] 
    // PHAGS-PA LETTER DZA

    uint32_t const cps[1] = { 0xa852 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x302d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_137)
{
    // A853  ; [.302E.0020.0002] 
    // PHAGS-PA LETTER WA

    uint32_t const cps[1] = { 0xa853 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x302e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_138)
{
    // A854  ; [.3030.0020.0002] 
    // PHAGS-PA LETTER ZHA

    uint32_t const cps[1] = { 0xa854 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3030), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_139)
{
    // A855  ; [.3031.0020.0002] 
    // PHAGS-PA LETTER ZA

    uint32_t const cps[1] = { 0xa855 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3031), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_140)
{
    // A856  ; [.3032.0020.0002] 
    // PHAGS-PA LETTER SMALL A

    uint32_t const cps[1] = { 0xa856 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3032), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_141)
{
    // A857  ; [.3033.0020.0002] 
    // PHAGS-PA LETTER YA

    uint32_t const cps[1] = { 0xa857 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3033), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_142)
{
    // A858  ; [.3036.0020.0002] 
    // PHAGS-PA LETTER RA

    uint32_t const cps[1] = { 0xa858 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3036), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_143)
{
    // A859  ; [.3039.0020.0002] 
    // PHAGS-PA LETTER LA

    uint32_t const cps[1] = { 0xa859 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3039), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_144)
{
    // A85A  ; [.303A.0020.0002] 
    // PHAGS-PA LETTER SHA

    uint32_t const cps[1] = { 0xa85a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x303a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_145)
{
    // A85B  ; [.303C.0020.0002] 
    // PHAGS-PA LETTER SA

    uint32_t const cps[1] = { 0xa85b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x303c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_146)
{
    // A85C  ; [.303D.0020.0002] 
    // PHAGS-PA LETTER HA

    uint32_t const cps[1] = { 0xa85c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x303d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_147)
{
    // A85D  ; [.3040.0020.0002] 
    // PHAGS-PA LETTER A

    uint32_t const cps[1] = { 0xa85d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3040), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_148)
{
    // A85E  ; [.3045.0020.0002] 
    // PHAGS-PA LETTER I

    uint32_t const cps[1] = { 0xa85e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3045), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_097_149)
{
    // A85F  ; [.3046.0020.0002] 
    // PHAGS-PA LETTER U

    uint32_t const cps[1] = { 0xa85f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x3046), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

