
// Warning! This file is autogenerated.
#include <boost/text/collation_table.hpp>
#include <boost/text/collate.hpp>
#include <boost/text/save_load_table.hpp>
#include <boost/text/data/all.hpp>

#include <boost/filesystem.hpp>

#include <gtest/gtest.h>

using namespace boost::text;

auto const error = [](string const & s) { std::cout << s; };
auto const warning = [](string const & s) {};

collation_table make_save_load_table()
{
    if (!exists(boost::filesystem::path("bn_standard.table"))) {
        string const table_str(data::bn::standard_collation_tailoring());
        collation_table table = tailored_collation_table(
            table_str,
            "bn::standard_collation_tailoring()", error, warning);
        save_table(table, "bn_standard.table.0");
        boost::filesystem::rename("bn_standard.table.0", "bn_standard.table");
    }
    return load_table("bn_standard.table");
}
collation_table const & table()
{
    static collation_table retval = make_save_load_table();
    return retval;
}
TEST(tailoring, bn_standard_000_001)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0994),
        std::vector<uint32_t>(1, 0x0982),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0982),
        std::vector<uint32_t>(1, 0x0983),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x0983),
        std::vector<uint32_t>(1, 0x0981),
        table(), collation_strength::primary),
        -1);
}
