
// Warning! This file is autogenerated.
#include <boost/text/collation_table.hpp>
#include <boost/text/collate.hpp>
#include <boost/text/save_load_table.hpp>
#include <boost/text/data/all.hpp>

#include <boost/filesystem.hpp>

#include <gtest/gtest.h>

using namespace boost::text;

auto const error = [](string const & s) { std::cout << s; };
auto const warning = [](string const & s) {};

collation_table make_save_load_table()
{
    if (!exists(boost::filesystem::path("km_standard.table"))) {
        collation_table table = tailored_collation_table(
            data::km::standard_collation_tailoring(),
            "km::standard_collation_tailoring()", error, warning);
        save_table(table, "km_standard.table.0");
        boost::filesystem::rename("km_standard.table.0", "km_standard.table");
    }
    return load_table("km_standard.table");
}
collation_table const & table()
{
    static collation_table retval = make_save_load_table();
    return retval;
}
TEST(tailoring, km_standard_000_001)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0xfffb),
        std::vector<uint32_t>(1, 0x17b4),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17b4),
        std::vector<uint32_t>(1, 0x17b5),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17d4, 0x179b, 0x17d4},
        std::vector<uint32_t>(1, 0x17d8),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17d4, 0x179b, 0x17d4},
        std::vector<uint32_t>(1, 0x17d8),
        table(), collation_strength::secondary),
        0);
#if 0 // 0x17c8 reordered by a later rule.
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17c8),
        std::vector<uint32_t>(1, 0x17ce),
        table(), collation_strength::secondary),
        -1);
#endif
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17c8),
        std::vector<uint32_t>(1, 0x17ce),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17ce),
        std::vector<uint32_t>(1, 0x17cf),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17ce),
        std::vector<uint32_t>(1, 0x17cf),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17cf),
        std::vector<uint32_t>(1, 0x17d1),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17cf),
        std::vector<uint32_t>(1, 0x17d1),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17d1),
        std::vector<uint32_t>(1, 0x17d0),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17d1),
        std::vector<uint32_t>(1, 0x17d0),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17d0),
        std::vector<uint32_t>(1, 0x17c8),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17d0),
        std::vector<uint32_t>(1, 0x17c8),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17c8),
        std::vector<uint32_t>(1, 0x17dd),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17c8),
        std::vector<uint32_t>(1, 0x17dd),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17dd),
        std::vector<uint32_t>(1, 0x17cb),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17dd),
        std::vector<uint32_t>(1, 0x17cb),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17cb),
        std::vector<uint32_t>(1, 0x17c9),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17cb),
        std::vector<uint32_t>(1, 0x17c9),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17c9),
        std::vector<uint32_t>(1, 0x17ca),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17c9),
        std::vector<uint32_t>(1, 0x17ca),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17ca),
        std::vector<uint32_t>(1, 0x17cd),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17ca),
        std::vector<uint32_t>(1, 0x17cd),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x179a),
        std::vector<uint32_t>(1, 0x17ab),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17ab),
        std::vector<uint32_t>(1, 0x17ac),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x179b),
        std::vector<uint32_t>(1, 0x17ad),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17ad),
        std::vector<uint32_t>(1, 0x17ae),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1780},
        std::vector<uint32_t>{0x1780, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1780},
        std::vector<uint32_t>{0x1780, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1781},
        std::vector<uint32_t>{0x1781, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1781},
        std::vector<uint32_t>{0x1781, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1782},
        std::vector<uint32_t>{0x1782, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1782},
        std::vector<uint32_t>{0x1782, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1783},
        std::vector<uint32_t>{0x1783, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1783},
        std::vector<uint32_t>{0x1783, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1784},
        std::vector<uint32_t>{0x1784, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1784},
        std::vector<uint32_t>{0x1784, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1785},
        std::vector<uint32_t>{0x1785, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1785},
        std::vector<uint32_t>{0x1785, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1786},
        std::vector<uint32_t>{0x1786, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1786},
        std::vector<uint32_t>{0x1786, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1787},
        std::vector<uint32_t>{0x1787, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1787},
        std::vector<uint32_t>{0x1787, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1788},
        std::vector<uint32_t>{0x1788, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1788},
        std::vector<uint32_t>{0x1788, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1789},
        std::vector<uint32_t>{0x1789, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1789},
        std::vector<uint32_t>{0x1789, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x178a},
        std::vector<uint32_t>{0x178a, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x178a},
        std::vector<uint32_t>{0x178a, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x178b},
        std::vector<uint32_t>{0x178b, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x178b},
        std::vector<uint32_t>{0x178b, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x178c},
        std::vector<uint32_t>{0x178c, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x178c},
        std::vector<uint32_t>{0x178c, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x178d},
        std::vector<uint32_t>{0x178d, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x178d},
        std::vector<uint32_t>{0x178d, 0x17cc},
        table(), collation_strength::primary),
        0);
}

TEST(tailoring, km_standard_000_002)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x178e},
        std::vector<uint32_t>{0x178e, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x178e},
        std::vector<uint32_t>{0x178e, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x178f},
        std::vector<uint32_t>{0x178f, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x178f},
        std::vector<uint32_t>{0x178f, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1790},
        std::vector<uint32_t>{0x1790, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1790},
        std::vector<uint32_t>{0x1790, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1791},
        std::vector<uint32_t>{0x1791, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1791},
        std::vector<uint32_t>{0x1791, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1792},
        std::vector<uint32_t>{0x1792, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1792},
        std::vector<uint32_t>{0x1792, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1793},
        std::vector<uint32_t>{0x1793, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1793},
        std::vector<uint32_t>{0x1793, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1794},
        std::vector<uint32_t>{0x1794, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1794},
        std::vector<uint32_t>{0x1794, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1795},
        std::vector<uint32_t>{0x1795, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1795},
        std::vector<uint32_t>{0x1795, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1796},
        std::vector<uint32_t>{0x1796, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1796},
        std::vector<uint32_t>{0x1796, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1797},
        std::vector<uint32_t>{0x1797, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1797},
        std::vector<uint32_t>{0x1797, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1798},
        std::vector<uint32_t>{0x1798, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1798},
        std::vector<uint32_t>{0x1798, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1799},
        std::vector<uint32_t>{0x1799, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x1799},
        std::vector<uint32_t>{0x1799, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x179a},
        std::vector<uint32_t>{0x179a, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x179a},
        std::vector<uint32_t>{0x179a, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x17ab},
        std::vector<uint32_t>{0x17ab, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x17ab},
        std::vector<uint32_t>{0x17ab, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x17ac},
        std::vector<uint32_t>{0x17ac, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x17ac},
        std::vector<uint32_t>{0x17ac, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x179b},
        std::vector<uint32_t>{0x179b, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x179b},
        std::vector<uint32_t>{0x179b, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x17ad},
        std::vector<uint32_t>{0x17ad, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x17ad},
        std::vector<uint32_t>{0x17ad, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x17ae},
        std::vector<uint32_t>{0x17ae, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x17ae},
        std::vector<uint32_t>{0x17ae, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x179c},
        std::vector<uint32_t>{0x179c, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x179c},
        std::vector<uint32_t>{0x179c, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x179d},
        std::vector<uint32_t>{0x179d, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x179d},
        std::vector<uint32_t>{0x179d, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x179e},
        std::vector<uint32_t>{0x179e, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x179e},
        std::vector<uint32_t>{0x179e, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x179f},
        std::vector<uint32_t>{0x179f, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x179f},
        std::vector<uint32_t>{0x179f, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x17a0},
        std::vector<uint32_t>{0x17a0, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x17a0},
        std::vector<uint32_t>{0x17a0, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x17a1},
        std::vector<uint32_t>{0x17a1, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x17a1},
        std::vector<uint32_t>{0x17a1, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x17a2},
        std::vector<uint32_t>{0x17a2, 0x17cc},
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x179a, 0x17d2, 0x17a2},
        std::vector<uint32_t>{0x17a2, 0x17cc},
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17a2, 0x17cc},
        std::vector<uint32_t>{0x17a3, 0x17cc},
        table(), collation_strength::quaternary),
        0);
}

TEST(tailoring, km_standard_000_003)
{
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17a2),
        std::vector<uint32_t>(1, 0x17a3),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17a2, 0x17b6},
        std::vector<uint32_t>(1, 0x17a4),
        table(), collation_strength::quaternary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17a2, 0x17b7},
        std::vector<uint32_t>(1, 0x17a5),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17a2, 0x17b7},
        std::vector<uint32_t>(1, 0x17a5),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17a2, 0x17b8},
        std::vector<uint32_t>(1, 0x17a6),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17a2, 0x17b8},
        std::vector<uint32_t>(1, 0x17a6),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17a2, 0x17bb},
        std::vector<uint32_t>(1, 0x17a7),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17a2, 0x17bb},
        std::vector<uint32_t>(1, 0x17a7),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17a2, 0x17bc},
        std::vector<uint32_t>(1, 0x17a9),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17a2, 0x17bc},
        std::vector<uint32_t>(1, 0x17a9),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17a2, 0x17c2},
        std::vector<uint32_t>(1, 0x17af),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17a2, 0x17c2},
        std::vector<uint32_t>(1, 0x17af),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17a2, 0x17c3},
        std::vector<uint32_t>(1, 0x17b0),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17a2, 0x17c3},
        std::vector<uint32_t>(1, 0x17b0),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17a2, 0x17c4},
        std::vector<uint32_t>(1, 0x17b1),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17a2, 0x17c4},
        std::vector<uint32_t>(1, 0x17b1),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17a2, 0x17c5},
        std::vector<uint32_t>(1, 0x17b3),
        table(), collation_strength::secondary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17a2, 0x17c5},
        std::vector<uint32_t>(1, 0x17b3),
        table(), collation_strength::primary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17a7, 0x1780},
        std::vector<uint32_t>(1, 0x17a8),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17a7, 0x1780},
        std::vector<uint32_t>(1, 0x17a8),
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17a9, 0x179c},
        std::vector<uint32_t>(1, 0x17aa),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17a9, 0x179c},
        std::vector<uint32_t>(1, 0x17aa),
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17b1),
        std::vector<uint32_t>(1, 0x17b2),
        table(), collation_strength::tertiary),
        -1);
    // equal to preceeding cps at next-lower strength
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17b1),
        std::vector<uint32_t>(1, 0x17b2),
        table(), collation_strength::secondary),
        0);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17c5),
        std::vector<uint32_t>{0x17bb, 0x17c6},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17bb, 0x17c6},
        std::vector<uint32_t>(1, 0x17c6),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17c6),
        std::vector<uint32_t>{0x17b6, 0x17c6},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17b6, 0x17c6},
        std::vector<uint32_t>(1, 0x17c7),
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>(1, 0x17c7),
        std::vector<uint32_t>{0x17b7, 0x17c7},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17b7, 0x17c7},
        std::vector<uint32_t>{0x17bb, 0x17c7},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17bb, 0x17c7},
        std::vector<uint32_t>{0x17c1, 0x17c7},
        table(), collation_strength::primary),
        -1);
    // greater than (or equal to, for =) preceeding cps
    EXPECT_EQ(collate(
        std::vector<uint32_t>{0x17c1, 0x17c7},
        std::vector<uint32_t>{0x17c4, 0x17c7},
        table(), collation_strength::primary),
        -1);
}
