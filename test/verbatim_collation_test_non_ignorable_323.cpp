// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_323_000)
{
    // 2F993 003F;	
    // (花) CJK COMPATIBILITY IDEOGRAPH-2F993	[FB41 82B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F993, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x82B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_001)
{
    // 2F993 0061;	
    // (花) CJK COMPATIBILITY IDEOGRAPH-2F993	[FB41 82B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F993, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x82B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_002)
{
    // 2F993 0041;	
    // (花) CJK COMPATIBILITY IDEOGRAPH-2F993	[FB41 82B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F993, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x82B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_003)
{
    // 2F993 0062;	
    // (花) CJK COMPATIBILITY IDEOGRAPH-2F993	[FB41 82B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F993, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x82B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_004)
{
    // 2F994 0021;	
    // (芳) CJK COMPATIBILITY IDEOGRAPH-2F994	[FB41 82B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F994, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x82B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_005)
{
    // 2F994 003F;	
    // (芳) CJK COMPATIBILITY IDEOGRAPH-2F994	[FB41 82B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F994, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x82B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_006)
{
    // 2F994 0061;	
    // (芳) CJK COMPATIBILITY IDEOGRAPH-2F994	[FB41 82B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F994, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x82B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_007)
{
    // 2F994 0041;	
    // (芳) CJK COMPATIBILITY IDEOGRAPH-2F994	[FB41 82B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F994, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x82B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_008)
{
    // 2F994 0062;	
    // (芳) CJK COMPATIBILITY IDEOGRAPH-2F994	[FB41 82B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F994, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x82B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_009)
{
    // 2F995 0021;	
    // (芽) CJK COMPATIBILITY IDEOGRAPH-2F995	[FB41 82BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F995, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x82BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_010)
{
    // 2F995 003F;	
    // (芽) CJK COMPATIBILITY IDEOGRAPH-2F995	[FB41 82BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F995, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x82BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_011)
{
    // 2F995 0061;	
    // (芽) CJK COMPATIBILITY IDEOGRAPH-2F995	[FB41 82BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F995, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x82BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_012)
{
    // 2F995 0041;	
    // (芽) CJK COMPATIBILITY IDEOGRAPH-2F995	[FB41 82BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F995, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x82BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_013)
{
    // 2F995 0062;	
    // (芽) CJK COMPATIBILITY IDEOGRAPH-2F995	[FB41 82BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F995, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x82BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_014)
{
    // F974 0021;	
    // (若) CJK COMPATIBILITY IDEOGRAPH-F974	[FB41 82E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF974, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x82E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_015)
{
    // 2F998 0021;	
    // (若) CJK COMPATIBILITY IDEOGRAPH-2F998	[FB41 82E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F998, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x82E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_016)
{
    // F974 003F;	
    // (若) CJK COMPATIBILITY IDEOGRAPH-F974	[FB41 82E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF974, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x82E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_017)
{
    // 2F998 003F;	
    // (若) CJK COMPATIBILITY IDEOGRAPH-2F998	[FB41 82E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F998, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x82E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_018)
{
    // F974 0061;	
    // (若) CJK COMPATIBILITY IDEOGRAPH-F974	[FB41 82E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF974, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x82E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_019)
{
    // 2F998 0061;	
    // (若) CJK COMPATIBILITY IDEOGRAPH-2F998	[FB41 82E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F998, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x82E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_020)
{
    // F974 0041;	
    // (若) CJK COMPATIBILITY IDEOGRAPH-F974	[FB41 82E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF974, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x82E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_021)
{
    // 2F998 0041;	
    // (若) CJK COMPATIBILITY IDEOGRAPH-2F998	[FB41 82E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F998, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x82E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_022)
{
    // F974 0062;	
    // (若) CJK COMPATIBILITY IDEOGRAPH-F974	[FB41 82E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF974, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x82E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_023)
{
    // 2F998 0062;	
    // (若) CJK COMPATIBILITY IDEOGRAPH-2F998	[FB41 82E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F998, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x82E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_024)
{
    // 2F996 0021;	
    // (苦) CJK COMPATIBILITY IDEOGRAPH-2F996	[FB41 82E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F996, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x82E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_025)
{
    // 2F996 003F;	
    // (苦) CJK COMPATIBILITY IDEOGRAPH-2F996	[FB41 82E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F996, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x82E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_026)
{
    // 2F996 0061;	
    // (苦) CJK COMPATIBILITY IDEOGRAPH-2F996	[FB41 82E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F996, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x82E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_027)
{
    // 2F996 0041;	
    // (苦) CJK COMPATIBILITY IDEOGRAPH-2F996	[FB41 82E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F996, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x82E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_028)
{
    // 2F996 0062;	
    // (苦) CJK COMPATIBILITY IDEOGRAPH-2F996	[FB41 82E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F996, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x82E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_029)
{
    // 2F999 0021;	
    // (茝) CJK COMPATIBILITY IDEOGRAPH-2F999	[FB41 831D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F999, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x831D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_030)
{
    // 2F999 003F;	
    // (茝) CJK COMPATIBILITY IDEOGRAPH-2F999	[FB41 831D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F999, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x831D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_031)
{
    // 2F999 0061;	
    // (茝) CJK COMPATIBILITY IDEOGRAPH-2F999	[FB41 831D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F999, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x831D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_032)
{
    // 2F999 0041;	
    // (茝) CJK COMPATIBILITY IDEOGRAPH-2F999	[FB41 831D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F999, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x831D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_033)
{
    // 2F999 0062;	
    // (茝) CJK COMPATIBILITY IDEOGRAPH-2F999	[FB41 831D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F999, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x831D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_034)
{
    // 2F99C 0021;	
    // (茣) CJK COMPATIBILITY IDEOGRAPH-2F99C	[FB41 8323 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99C, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8323, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_035)
{
    // 2F99C 003F;	
    // (茣) CJK COMPATIBILITY IDEOGRAPH-2F99C	[FB41 8323 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99C, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8323, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_036)
{
    // 2F99C 0061;	
    // (茣) CJK COMPATIBILITY IDEOGRAPH-2F99C	[FB41 8323 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99C, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8323, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_037)
{
    // 2F99C 0041;	
    // (茣) CJK COMPATIBILITY IDEOGRAPH-2F99C	[FB41 8323 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F99C, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8323, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_038)
{
    // 2F99C 0062;	
    // (茣) CJK COMPATIBILITY IDEOGRAPH-2F99C	[FB41 8323 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99C, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8323, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_039)
{
    // F9FE 0021;	
    // (茶) CJK COMPATIBILITY IDEOGRAPH-F9FE	[FB41 8336 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9FE, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8336, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_040)
{
    // F9FE 003F;	
    // (茶) CJK COMPATIBILITY IDEOGRAPH-F9FE	[FB41 8336 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9FE, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8336, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_041)
{
    // F9FE 0061;	
    // (茶) CJK COMPATIBILITY IDEOGRAPH-F9FE	[FB41 8336 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9FE, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8336, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_042)
{
    // F9FE 0041;	
    // (茶) CJK COMPATIBILITY IDEOGRAPH-F9FE	[FB41 8336 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9FE, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8336, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_043)
{
    // F9FE 0062;	
    // (茶) CJK COMPATIBILITY IDEOGRAPH-F9FE	[FB41 8336 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9FE, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8336, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_044)
{
    // FAB3 0021;	
    // (荒) CJK COMPATIBILITY IDEOGRAPH-FAB3	[FB41 8352 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB3, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8352, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_045)
{
    // FAB3 003F;	
    // (荒) CJK COMPATIBILITY IDEOGRAPH-FAB3	[FB41 8352 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB3, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8352, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_046)
{
    // FAB3 0061;	
    // (荒) CJK COMPATIBILITY IDEOGRAPH-FAB3	[FB41 8352 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB3, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8352, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_047)
{
    // FAB3 0041;	
    // (荒) CJK COMPATIBILITY IDEOGRAPH-FAB3	[FB41 8352 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAB3, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8352, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_048)
{
    // FAB3 0062;	
    // (荒) CJK COMPATIBILITY IDEOGRAPH-FAB3	[FB41 8352 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB3, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8352, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_049)
{
    // 2F9A0 0021;	
    // (荓) CJK COMPATIBILITY IDEOGRAPH-2F9A0	[FB41 8353 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A0, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8353, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_050)
{
    // 2F9A0 003F;	
    // (荓) CJK COMPATIBILITY IDEOGRAPH-2F9A0	[FB41 8353 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A0, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8353, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_051)
{
    // 2F9A0 0061;	
    // (荓) CJK COMPATIBILITY IDEOGRAPH-2F9A0	[FB41 8353 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A0, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8353, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_052)
{
    // 2F9A0 0041;	
    // (荓) CJK COMPATIBILITY IDEOGRAPH-2F9A0	[FB41 8353 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9A0, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8353, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_053)
{
    // 2F9A0 0062;	
    // (荓) CJK COMPATIBILITY IDEOGRAPH-2F9A0	[FB41 8353 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A0, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8353, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_054)
{
    // 2F99A 0021;	
    // (荣) CJK COMPATIBILITY IDEOGRAPH-2F99A	[FB41 8363 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99A, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8363, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_055)
{
    // 2F99A 003F;	
    // (荣) CJK COMPATIBILITY IDEOGRAPH-2F99A	[FB41 8363 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99A, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8363, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_056)
{
    // 2F99A 0061;	
    // (荣) CJK COMPATIBILITY IDEOGRAPH-2F99A	[FB41 8363 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99A, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8363, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_057)
{
    // 2F99A 0041;	
    // (荣) CJK COMPATIBILITY IDEOGRAPH-2F99A	[FB41 8363 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F99A, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8363, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_058)
{
    // 2F99A 0062;	
    // (荣) CJK COMPATIBILITY IDEOGRAPH-2F99A	[FB41 8363 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99A, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8363, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_059)
{
    // 2F99B 0021;	
    // (莭) CJK COMPATIBILITY IDEOGRAPH-2F99B	[FB41 83AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99B, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x83AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_060)
{
    // 2F99B 003F;	
    // (莭) CJK COMPATIBILITY IDEOGRAPH-2F99B	[FB41 83AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99B, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x83AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_061)
{
    // 2F99B 0061;	
    // (莭) CJK COMPATIBILITY IDEOGRAPH-2F99B	[FB41 83AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99B, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x83AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_062)
{
    // 2F99B 0041;	
    // (莭) CJK COMPATIBILITY IDEOGRAPH-2F99B	[FB41 83AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F99B, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x83AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_063)
{
    // 2F99B 0062;	
    // (莭) CJK COMPATIBILITY IDEOGRAPH-2F99B	[FB41 83AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99B, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x83AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_064)
{
    // 2F99D 0021;	
    // (莽) CJK COMPATIBILITY IDEOGRAPH-2F99D	[FB41 83BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99D, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x83BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_065)
{
    // 2F99D 003F;	
    // (莽) CJK COMPATIBILITY IDEOGRAPH-2F99D	[FB41 83BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99D, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x83BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_066)
{
    // 2F99D 0061;	
    // (莽) CJK COMPATIBILITY IDEOGRAPH-2F99D	[FB41 83BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99D, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x83BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_067)
{
    // 2F99D 0041;	
    // (莽) CJK COMPATIBILITY IDEOGRAPH-2F99D	[FB41 83BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F99D, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x83BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_068)
{
    // 2F99D 0062;	
    // (莽) CJK COMPATIBILITY IDEOGRAPH-2F99D	[FB41 83BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99D, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x83BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_069)
{
    // F93E 0021;	
    // (菉) CJK COMPATIBILITY IDEOGRAPH-F93E	[FB41 83C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF93E, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x83C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_070)
{
    // F93E 003F;	
    // (菉) CJK COMPATIBILITY IDEOGRAPH-F93E	[FB41 83C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF93E, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x83C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_071)
{
    // F93E 0061;	
    // (菉) CJK COMPATIBILITY IDEOGRAPH-F93E	[FB41 83C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF93E, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x83C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_072)
{
    // F93E 0041;	
    // (菉) CJK COMPATIBILITY IDEOGRAPH-F93E	[FB41 83C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF93E, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x83C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_073)
{
    // F93E 0062;	
    // (菉) CJK COMPATIBILITY IDEOGRAPH-F93E	[FB41 83C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF93E, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x83C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_074)
{
    // 2F9A1 0021;	
    // (菊) CJK COMPATIBILITY IDEOGRAPH-2F9A1	[FB41 83CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A1, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x83CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_075)
{
    // 2F9A1 003F;	
    // (菊) CJK COMPATIBILITY IDEOGRAPH-2F9A1	[FB41 83CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A1, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x83CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_076)
{
    // 2F9A1 0061;	
    // (菊) CJK COMPATIBILITY IDEOGRAPH-2F9A1	[FB41 83CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A1, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x83CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_077)
{
    // 2F9A1 0041;	
    // (菊) CJK COMPATIBILITY IDEOGRAPH-2F9A1	[FB41 83CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9A1, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x83CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_078)
{
    // 2F9A1 0062;	
    // (菊) CJK COMPATIBILITY IDEOGRAPH-2F9A1	[FB41 83CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A1, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x83CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_079)
{
    // 2F9A2 0021;	
    // (菌) CJK COMPATIBILITY IDEOGRAPH-2F9A2	[FB41 83CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A2, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x83CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_080)
{
    // 2F9A2 003F;	
    // (菌) CJK COMPATIBILITY IDEOGRAPH-2F9A2	[FB41 83CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A2, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x83CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_081)
{
    // 2F9A2 0061;	
    // (菌) CJK COMPATIBILITY IDEOGRAPH-2F9A2	[FB41 83CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A2, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x83CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_082)
{
    // 2F9A2 0041;	
    // (菌) CJK COMPATIBILITY IDEOGRAPH-2F9A2	[FB41 83CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9A2, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x83CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_083)
{
    // 2F9A2 0062;	
    // (菌) CJK COMPATIBILITY IDEOGRAPH-2F9A2	[FB41 83CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A2, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x83CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_084)
{
    // 2F9A3 0021;	
    // (菜) CJK COMPATIBILITY IDEOGRAPH-2F9A3	[FB41 83DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A3, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x83DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_085)
{
    // 2F9A3 003F;	
    // (菜) CJK COMPATIBILITY IDEOGRAPH-2F9A3	[FB41 83DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A3, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x83DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_086)
{
    // 2F9A3 0061;	
    // (菜) CJK COMPATIBILITY IDEOGRAPH-2F9A3	[FB41 83DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A3, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x83DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_087)
{
    // 2F9A3 0041;	
    // (菜) CJK COMPATIBILITY IDEOGRAPH-2F9A3	[FB41 83DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9A3, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x83DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_088)
{
    // 2F9A3 0062;	
    // (菜) CJK COMPATIBILITY IDEOGRAPH-2F9A3	[FB41 83DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A3, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x83DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_089)
{
    // 2F99E 0021;	
    // (菧) CJK COMPATIBILITY IDEOGRAPH-2F99E	[FB41 83E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99E, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x83E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_090)
{
    // 2F99E 003F;	
    // (菧) CJK COMPATIBILITY IDEOGRAPH-2F99E	[FB41 83E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99E, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x83E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_091)
{
    // 2F99E 0061;	
    // (菧) CJK COMPATIBILITY IDEOGRAPH-2F99E	[FB41 83E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99E, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x83E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_092)
{
    // 2F99E 0041;	
    // (菧) CJK COMPATIBILITY IDEOGRAPH-2F99E	[FB41 83E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F99E, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x83E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_093)
{
    // 2F99E 0062;	
    // (菧) CJK COMPATIBILITY IDEOGRAPH-2F99E	[FB41 83E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99E, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x83E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_094)
{
    // FAB4 0021;	
    // (華) CJK COMPATIBILITY IDEOGRAPH-FAB4	[FB41 83EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB4, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x83EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_095)
{
    // FAB4 003F;	
    // (華) CJK COMPATIBILITY IDEOGRAPH-FAB4	[FB41 83EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB4, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x83EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_096)
{
    // FAB4 0061;	
    // (華) CJK COMPATIBILITY IDEOGRAPH-FAB4	[FB41 83EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB4, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x83EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_097)
{
    // FAB4 0041;	
    // (華) CJK COMPATIBILITY IDEOGRAPH-FAB4	[FB41 83EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAB4, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x83EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_098)
{
    // FAB4 0062;	
    // (華) CJK COMPATIBILITY IDEOGRAPH-FAB4	[FB41 83EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB4, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x83EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_099)
{
    // F958 0021;	
    // (菱) CJK COMPATIBILITY IDEOGRAPH-F958	[FB41 83F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF958, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x83F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_100)
{
    // F958 003F;	
    // (菱) CJK COMPATIBILITY IDEOGRAPH-F958	[FB41 83F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF958, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x83F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_101)
{
    // F958 0061;	
    // (菱) CJK COMPATIBILITY IDEOGRAPH-F958	[FB41 83F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF958, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x83F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_102)
{
    // F958 0041;	
    // (菱) CJK COMPATIBILITY IDEOGRAPH-F958	[FB41 83F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF958, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x83F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_103)
{
    // F958 0062;	
    // (菱) CJK COMPATIBILITY IDEOGRAPH-F958	[FB41 83F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF958, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x83F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_104)
{
    // F918 0021;	
    // (落) CJK COMPATIBILITY IDEOGRAPH-F918	[FB41 843D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF918, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x843D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_105)
{
    // F918 003F;	
    // (落) CJK COMPATIBILITY IDEOGRAPH-F918	[FB41 843D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF918, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x843D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_106)
{
    // F918 0061;	
    // (落) CJK COMPATIBILITY IDEOGRAPH-F918	[FB41 843D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF918, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x843D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_107)
{
    // F918 0041;	
    // (落) CJK COMPATIBILITY IDEOGRAPH-F918	[FB41 843D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF918, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x843D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_108)
{
    // F918 0062;	
    // (落) CJK COMPATIBILITY IDEOGRAPH-F918	[FB41 843D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF918, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x843D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_109)
{
    // F96E 0021;	
    // (葉) CJK COMPATIBILITY IDEOGRAPH-F96E	[FB41 8449 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF96E, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8449, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_110)
{
    // F96E 003F;	
    // (葉) CJK COMPATIBILITY IDEOGRAPH-F96E	[FB41 8449 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF96E, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8449, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_111)
{
    // F96E 0061;	
    // (葉) CJK COMPATIBILITY IDEOGRAPH-F96E	[FB41 8449 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF96E, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8449, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_112)
{
    // F96E 0041;	
    // (葉) CJK COMPATIBILITY IDEOGRAPH-F96E	[FB41 8449 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF96E, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8449, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_113)
{
    // F96E 0062;	
    // (葉) CJK COMPATIBILITY IDEOGRAPH-F96E	[FB41 8449 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF96E, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8449, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_114)
{
    // FA5F 0021;	
    // (著) CJK COMPATIBILITY IDEOGRAPH-FA5F	[FB41 8457 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5F, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8457, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_115)
{
    // 2F99F 0021;	
    // (著) CJK COMPATIBILITY IDEOGRAPH-2F99F	[FB41 8457 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99F, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8457, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_116)
{
    // FA5F 003F;	
    // (著) CJK COMPATIBILITY IDEOGRAPH-FA5F	[FB41 8457 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5F, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8457, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_117)
{
    // 2F99F 003F;	
    // (著) CJK COMPATIBILITY IDEOGRAPH-2F99F	[FB41 8457 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99F, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8457, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_118)
{
    // FA5F 0061;	
    // (著) CJK COMPATIBILITY IDEOGRAPH-FA5F	[FB41 8457 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5F, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8457, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_119)
{
    // 2F99F 0061;	
    // (著) CJK COMPATIBILITY IDEOGRAPH-2F99F	[FB41 8457 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99F, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8457, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_120)
{
    // FA5F 0041;	
    // (著) CJK COMPATIBILITY IDEOGRAPH-FA5F	[FB41 8457 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA5F, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8457, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_121)
{
    // 2F99F 0041;	
    // (著) CJK COMPATIBILITY IDEOGRAPH-2F99F	[FB41 8457 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F99F, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8457, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_122)
{
    // FA5F 0062;	
    // (著) CJK COMPATIBILITY IDEOGRAPH-FA5F	[FB41 8457 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA5F, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8457, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_123)
{
    // 2F99F 0062;	
    // (著) CJK COMPATIBILITY IDEOGRAPH-2F99F	[FB41 8457 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F99F, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8457, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_124)
{
    // F999 0021;	
    // (蓮) CJK COMPATIBILITY IDEOGRAPH-F999	[FB41 84EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF999, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x84EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_125)
{
    // F999 003F;	
    // (蓮) CJK COMPATIBILITY IDEOGRAPH-F999	[FB41 84EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF999, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x84EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_126)
{
    // F999 0061;	
    // (蓮) CJK COMPATIBILITY IDEOGRAPH-F999	[FB41 84EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF999, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x84EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_127)
{
    // F999 0041;	
    // (蓮) CJK COMPATIBILITY IDEOGRAPH-F999	[FB41 84EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF999, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x84EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_128)
{
    // F999 0062;	
    // (蓮) CJK COMPATIBILITY IDEOGRAPH-F999	[FB41 84EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF999, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x84EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_129)
{
    // 2F9A8 0021;	
    // (蓱) CJK COMPATIBILITY IDEOGRAPH-2F9A8	[FB41 84F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A8, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x84F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_130)
{
    // 2F9A8 003F;	
    // (蓱) CJK COMPATIBILITY IDEOGRAPH-2F9A8	[FB41 84F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A8, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x84F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_131)
{
    // 2F9A8 0061;	
    // (蓱) CJK COMPATIBILITY IDEOGRAPH-2F9A8	[FB41 84F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A8, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x84F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_132)
{
    // 2F9A8 0041;	
    // (蓱) CJK COMPATIBILITY IDEOGRAPH-2F9A8	[FB41 84F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9A8, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x84F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_133)
{
    // 2F9A8 0062;	
    // (蓱) CJK COMPATIBILITY IDEOGRAPH-2F9A8	[FB41 84F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A8, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x84F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_134)
{
    // 2F9A9 0021;	
    // (蓳) CJK COMPATIBILITY IDEOGRAPH-2F9A9	[FB41 84F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A9, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x84F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_135)
{
    // 2F9A9 003F;	
    // (蓳) CJK COMPATIBILITY IDEOGRAPH-2F9A9	[FB41 84F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A9, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x84F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_136)
{
    // 2F9A9 0061;	
    // (蓳) CJK COMPATIBILITY IDEOGRAPH-2F9A9	[FB41 84F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A9, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x84F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_137)
{
    // 2F9A9 0041;	
    // (蓳) CJK COMPATIBILITY IDEOGRAPH-2F9A9	[FB41 84F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9A9, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x84F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_138)
{
    // 2F9A9 0062;	
    // (蓳) CJK COMPATIBILITY IDEOGRAPH-2F9A9	[FB41 84F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9A9, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x84F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_139)
{
    // F9C2 0021;	
    // (蓼) CJK COMPATIBILITY IDEOGRAPH-F9C2	[FB41 84FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C2, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x84FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_140)
{
    // F9C2 003F;	
    // (蓼) CJK COMPATIBILITY IDEOGRAPH-F9C2	[FB41 84FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C2, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x84FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_141)
{
    // F9C2 0061;	
    // (蓼) CJK COMPATIBILITY IDEOGRAPH-F9C2	[FB41 84FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C2, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x84FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_142)
{
    // F9C2 0041;	
    // (蓼) CJK COMPATIBILITY IDEOGRAPH-F9C2	[FB41 84FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9C2, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x84FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_143)
{
    // F9C2 0062;	
    // (蓼) CJK COMPATIBILITY IDEOGRAPH-F9C2	[FB41 84FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9C2, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x84FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_144)
{
    // 2F9AA 0021;	
    // (蔖) CJK COMPATIBILITY IDEOGRAPH-2F9AA	[FB41 8516 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9AA, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8516, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_145)
{
    // 2F9AA 003F;	
    // (蔖) CJK COMPATIBILITY IDEOGRAPH-2F9AA	[FB41 8516 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9AA, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8516, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_146)
{
    // 2F9AA 0061;	
    // (蔖) CJK COMPATIBILITY IDEOGRAPH-2F9AA	[FB41 8516 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9AA, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8516, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_147)
{
    // 2F9AA 0041;	
    // (蔖) CJK COMPATIBILITY IDEOGRAPH-2F9AA	[FB41 8516 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9AA, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8516, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_148)
{
    // 2F9AA 0062;	
    // (蔖) CJK COMPATIBILITY IDEOGRAPH-2F9AA	[FB41 8516 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9AA, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8516, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_149)
{
    // 2F9AC 0021;	
    // (蕤) CJK COMPATIBILITY IDEOGRAPH-2F9AC	[FB41 8564 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9AC, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8564, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_150)
{
    // 2F9AC 003F;	
    // (蕤) CJK COMPATIBILITY IDEOGRAPH-2F9AC	[FB41 8564 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9AC, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8564, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_151)
{
    // 2F9AC 0061;	
    // (蕤) CJK COMPATIBILITY IDEOGRAPH-2F9AC	[FB41 8564 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9AC, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8564, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_152)
{
    // 2F9AC 0041;	
    // (蕤) CJK COMPATIBILITY IDEOGRAPH-2F9AC	[FB41 8564 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9AC, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8564, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_153)
{
    // 2F9AC 0062;	
    // (蕤) CJK COMPATIBILITY IDEOGRAPH-2F9AC	[FB41 8564 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9AC, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8564, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_154)
{
    // F923 0021;	
    // (藍) CJK COMPATIBILITY IDEOGRAPH-F923	[FB41 85CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF923, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x85CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_155)
{
    // F923 003F;	
    // (藍) CJK COMPATIBILITY IDEOGRAPH-F923	[FB41 85CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF923, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x85CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_156)
{
    // F923 0061;	
    // (藍) CJK COMPATIBILITY IDEOGRAPH-F923	[FB41 85CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF923, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x85CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_157)
{
    // F923 0041;	
    // (藍) CJK COMPATIBILITY IDEOGRAPH-F923	[FB41 85CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF923, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x85CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_158)
{
    // F923 0062;	
    // (藍) CJK COMPATIBILITY IDEOGRAPH-F923	[FB41 85CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF923, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x85CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_159)
{
    // F9F0 0021;	
    // (藺) CJK COMPATIBILITY IDEOGRAPH-F9F0	[FB41 85FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F0, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x85FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_160)
{
    // F9F0 003F;	
    // (藺) CJK COMPATIBILITY IDEOGRAPH-F9F0	[FB41 85FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F0, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x85FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_161)
{
    // F9F0 0061;	
    // (藺) CJK COMPATIBILITY IDEOGRAPH-F9F0	[FB41 85FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F0, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x85FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_162)
{
    // F9F0 0041;	
    // (藺) CJK COMPATIBILITY IDEOGRAPH-F9F0	[FB41 85FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9F0, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x85FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_163)
{
    // F9F0 0062;	
    // (藺) CJK COMPATIBILITY IDEOGRAPH-F9F0	[FB41 85FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9F0, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x85FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_164)
{
    // F935 0021;	
    // (蘆) CJK COMPATIBILITY IDEOGRAPH-F935	[FB41 8606 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF935, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8606, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_165)
{
    // F935 003F;	
    // (蘆) CJK COMPATIBILITY IDEOGRAPH-F935	[FB41 8606 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF935, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8606, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_166)
{
    // F935 0061;	
    // (蘆) CJK COMPATIBILITY IDEOGRAPH-F935	[FB41 8606 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF935, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8606, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_167)
{
    // F935 0041;	
    // (蘆) CJK COMPATIBILITY IDEOGRAPH-F935	[FB41 8606 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF935, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8606, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_168)
{
    // F935 0062;	
    // (蘆) CJK COMPATIBILITY IDEOGRAPH-F935	[FB41 8606 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF935, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8606, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_169)
{
    // FA20 0021;	
    // (蘒) CJK COMPATIBILITY IDEOGRAPH-FA20	[FB41 8612 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA20, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8612, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_170)
{
    // FA20 003F;	
    // (蘒) CJK COMPATIBILITY IDEOGRAPH-FA20	[FB41 8612 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA20, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8612, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_171)
{
    // FA20 0061;	
    // (蘒) CJK COMPATIBILITY IDEOGRAPH-FA20	[FB41 8612 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA20, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8612, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_172)
{
    // FA20 0041;	
    // (蘒) CJK COMPATIBILITY IDEOGRAPH-FA20	[FB41 8612 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA20, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8612, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_173)
{
    // FA20 0062;	
    // (蘒) CJK COMPATIBILITY IDEOGRAPH-FA20	[FB41 8612 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA20, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8612, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_174)
{
    // F91F 0021;	
    // (蘭) CJK COMPATIBILITY IDEOGRAPH-F91F	[FB41 862D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF91F, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x862D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_175)
{
    // F91F 003F;	
    // (蘭) CJK COMPATIBILITY IDEOGRAPH-F91F	[FB41 862D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF91F, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x862D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_176)
{
    // F91F 0061;	
    // (蘭) CJK COMPATIBILITY IDEOGRAPH-F91F	[FB41 862D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF91F, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x862D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_177)
{
    // F91F 0041;	
    // (蘭) CJK COMPATIBILITY IDEOGRAPH-F91F	[FB41 862D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF91F, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x862D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_178)
{
    // F91F 0062;	
    // (蘭) CJK COMPATIBILITY IDEOGRAPH-F91F	[FB41 862D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF91F, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x862D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_179)
{
    // F910 0021;	
    // (蘿) CJK COMPATIBILITY IDEOGRAPH-F910	[FB41 863F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF910, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x863F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_180)
{
    // F910 003F;	
    // (蘿) CJK COMPATIBILITY IDEOGRAPH-F910	[FB41 863F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF910, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x863F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_181)
{
    // F910 0061;	
    // (蘿) CJK COMPATIBILITY IDEOGRAPH-F910	[FB41 863F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF910, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x863F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_182)
{
    // F910 0041;	
    // (蘿) CJK COMPATIBILITY IDEOGRAPH-F910	[FB41 863F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF910, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x863F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_183)
{
    // F910 0062;	
    // (蘿) CJK COMPATIBILITY IDEOGRAPH-F910	[FB41 863F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF910, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x863F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_184)
{
    // 2F8C 0021;	
    // (⾌) KANGXI RADICAL TIGER	[FB41 864D 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8C, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x864D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_185)
{
    // 2F8C 003F;	
    // (⾌) KANGXI RADICAL TIGER	[FB41 864D 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8C, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x864D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_186)
{
    // 2F8C 0061;	
    // (⾌) KANGXI RADICAL TIGER	[FB41 864D 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8C, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x864D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_187)
{
    // 2F8C 0041;	
    // (⾌) KANGXI RADICAL TIGER	[FB41 864D 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F8C, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x864D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_188)
{
    // 2F8C 0062;	
    // (⾌) KANGXI RADICAL TIGER	[FB41 864D 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8C, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x864D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_189)
{
    // 2EC1 0021;	
    // (⻁) CJK RADICAL TIGER	[FB41 864E 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC1, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x864E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_190)
{
    // 2EC1 003F;	
    // (⻁) CJK RADICAL TIGER	[FB41 864E 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC1, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x864E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_191)
{
    // 2EC1 0061;	
    // (⻁) CJK RADICAL TIGER	[FB41 864E 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC1, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x864E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_192)
{
    // 2EC1 0041;	
    // (⻁) CJK RADICAL TIGER	[FB41 864E 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EC1, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x864E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_193)
{
    // 2EC1 0062;	
    // (⻁) CJK RADICAL TIGER	[FB41 864E 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC1, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x864E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_194)
{
    // 2F9B3 0021;	
    // (虐) CJK COMPATIBILITY IDEOGRAPH-2F9B3	[FB41 8650 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B3, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8650, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_195)
{
    // 2F9B3 003F;	
    // (虐) CJK COMPATIBILITY IDEOGRAPH-2F9B3	[FB41 8650 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B3, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8650, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_196)
{
    // 2F9B3 0061;	
    // (虐) CJK COMPATIBILITY IDEOGRAPH-2F9B3	[FB41 8650 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B3, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8650, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_197)
{
    // 2F9B3 0041;	
    // (虐) CJK COMPATIBILITY IDEOGRAPH-2F9B3	[FB41 8650 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9B3, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8650, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_198)
{
    // 2F9B3 0062;	
    // (虐) CJK COMPATIBILITY IDEOGRAPH-2F9B3	[FB41 8650 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B3, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8650, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_199)
{
    // F936 0021;	
    // (虜) CJK COMPATIBILITY IDEOGRAPH-F936	[FB41 865C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF936, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x865C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_200)
{
    // 2F9B4 0021;	
    // (虜) CJK COMPATIBILITY IDEOGRAPH-2F9B4	[FB41 865C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B4, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x865C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_201)
{
    // F936 003F;	
    // (虜) CJK COMPATIBILITY IDEOGRAPH-F936	[FB41 865C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF936, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x865C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_202)
{
    // 2F9B4 003F;	
    // (虜) CJK COMPATIBILITY IDEOGRAPH-2F9B4	[FB41 865C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B4, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x865C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_203)
{
    // F936 0061;	
    // (虜) CJK COMPATIBILITY IDEOGRAPH-F936	[FB41 865C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF936, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x865C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_204)
{
    // 2F9B4 0061;	
    // (虜) CJK COMPATIBILITY IDEOGRAPH-2F9B4	[FB41 865C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B4, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x865C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_205)
{
    // F936 0041;	
    // (虜) CJK COMPATIBILITY IDEOGRAPH-F936	[FB41 865C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF936, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x865C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_206)
{
    // 2F9B4 0041;	
    // (虜) CJK COMPATIBILITY IDEOGRAPH-2F9B4	[FB41 865C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9B4, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x865C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_207)
{
    // F936 0062;	
    // (虜) CJK COMPATIBILITY IDEOGRAPH-F936	[FB41 865C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF936, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x865C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_208)
{
    // 2F9B4 0062;	
    // (虜) CJK COMPATIBILITY IDEOGRAPH-2F9B4	[FB41 865C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B4, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x865C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_209)
{
    // 2F9B5 0021;	
    // (虧) CJK COMPATIBILITY IDEOGRAPH-2F9B5	[FB41 8667 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B5, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8667, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_210)
{
    // 2F9B5 003F;	
    // (虧) CJK COMPATIBILITY IDEOGRAPH-2F9B5	[FB41 8667 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B5, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8667, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_211)
{
    // 2F9B5 0061;	
    // (虧) CJK COMPATIBILITY IDEOGRAPH-2F9B5	[FB41 8667 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B5, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8667, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_212)
{
    // 2F9B5 0041;	
    // (虧) CJK COMPATIBILITY IDEOGRAPH-2F9B5	[FB41 8667 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9B5, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8667, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_213)
{
    // 2F9B5 0062;	
    // (虧) CJK COMPATIBILITY IDEOGRAPH-2F9B5	[FB41 8667 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B5, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8667, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_214)
{
    // 2F9B6 0021;	
    // (虩) CJK COMPATIBILITY IDEOGRAPH-2F9B6	[FB41 8669 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B6, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8669, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_215)
{
    // 2F9B6 003F;	
    // (虩) CJK COMPATIBILITY IDEOGRAPH-2F9B6	[FB41 8669 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B6, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8669, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_216)
{
    // 2F9B6 0061;	
    // (虩) CJK COMPATIBILITY IDEOGRAPH-2F9B6	[FB41 8669 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B6, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8669, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_217)
{
    // 2F9B6 0041;	
    // (虩) CJK COMPATIBILITY IDEOGRAPH-2F9B6	[FB41 8669 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9B6, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8669, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_218)
{
    // 2F9B6 0062;	
    // (虩) CJK COMPATIBILITY IDEOGRAPH-2F9B6	[FB41 8669 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B6, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8669, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_219)
{
    // 2F8D 0021;	
    // (⾍) KANGXI RADICAL INSECT	[FB41 866B 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8D, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x866B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_220)
{
    // 2F8D 003F;	
    // (⾍) KANGXI RADICAL INSECT	[FB41 866B 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8D, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x866B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_221)
{
    // 2F8D 0061;	
    // (⾍) KANGXI RADICAL INSECT	[FB41 866B 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8D, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x866B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_222)
{
    // 2F8D 0041;	
    // (⾍) KANGXI RADICAL INSECT	[FB41 866B 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F8D, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x866B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_223)
{
    // 2F8D 0062;	
    // (⾍) KANGXI RADICAL INSECT	[FB41 866B 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8D, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x866B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_224)
{
    // 2F9B8 0021;	
    // (蚈) CJK COMPATIBILITY IDEOGRAPH-2F9B8	[FB41 8688 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B8, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8688, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_225)
{
    // 2F9B8 003F;	
    // (蚈) CJK COMPATIBILITY IDEOGRAPH-2F9B8	[FB41 8688 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B8, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8688, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_226)
{
    // 2F9B8 0061;	
    // (蚈) CJK COMPATIBILITY IDEOGRAPH-2F9B8	[FB41 8688 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B8, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8688, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_227)
{
    // 2F9B8 0041;	
    // (蚈) CJK COMPATIBILITY IDEOGRAPH-2F9B8	[FB41 8688 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9B8, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8688, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_228)
{
    // 2F9B8 0062;	
    // (蚈) CJK COMPATIBILITY IDEOGRAPH-2F9B8	[FB41 8688 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B8, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8688, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_229)
{
    // 2F9B7 0021;	
    // (蚩) CJK COMPATIBILITY IDEOGRAPH-2F9B7	[FB41 86A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B7, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x86A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_230)
{
    // 2F9B7 003F;	
    // (蚩) CJK COMPATIBILITY IDEOGRAPH-2F9B7	[FB41 86A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B7, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x86A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_231)
{
    // 2F9B7 0061;	
    // (蚩) CJK COMPATIBILITY IDEOGRAPH-2F9B7	[FB41 86A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B7, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x86A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_232)
{
    // 2F9B7 0041;	
    // (蚩) CJK COMPATIBILITY IDEOGRAPH-2F9B7	[FB41 86A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9B7, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x86A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_233)
{
    // 2F9B7 0062;	
    // (蚩) CJK COMPATIBILITY IDEOGRAPH-2F9B7	[FB41 86A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B7, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x86A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_234)
{
    // 2F9BA 0021;	
    // (蛢) CJK COMPATIBILITY IDEOGRAPH-2F9BA	[FB41 86E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BA, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x86E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_235)
{
    // 2F9BA 003F;	
    // (蛢) CJK COMPATIBILITY IDEOGRAPH-2F9BA	[FB41 86E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BA, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x86E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_236)
{
    // 2F9BA 0061;	
    // (蛢) CJK COMPATIBILITY IDEOGRAPH-2F9BA	[FB41 86E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BA, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x86E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_237)
{
    // 2F9BA 0041;	
    // (蛢) CJK COMPATIBILITY IDEOGRAPH-2F9BA	[FB41 86E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9BA, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x86E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_238)
{
    // 2F9BA 0062;	
    // (蛢) CJK COMPATIBILITY IDEOGRAPH-2F9BA	[FB41 86E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BA, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x86E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_239)
{
    // 2F9B9 0021;	
    // (蜎) CJK COMPATIBILITY IDEOGRAPH-2F9B9	[FB41 870E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B9, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x870E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_240)
{
    // 2F9B9 003F;	
    // (蜎) CJK COMPATIBILITY IDEOGRAPH-2F9B9	[FB41 870E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B9, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x870E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_241)
{
    // 2F9B9 0061;	
    // (蜎) CJK COMPATIBILITY IDEOGRAPH-2F9B9	[FB41 870E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B9, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x870E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_242)
{
    // 2F9B9 0041;	
    // (蜎) CJK COMPATIBILITY IDEOGRAPH-2F9B9	[FB41 870E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9B9, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x870E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_243)
{
    // 2F9B9 0062;	
    // (蜎) CJK COMPATIBILITY IDEOGRAPH-2F9B9	[FB41 870E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9B9, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x870E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_244)
{
    // 2F9BC 0021;	
    // (蜨) CJK COMPATIBILITY IDEOGRAPH-2F9BC	[FB41 8728 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BC, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8728, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_245)
{
    // 2F9BC 003F;	
    // (蜨) CJK COMPATIBILITY IDEOGRAPH-2F9BC	[FB41 8728 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BC, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8728, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_246)
{
    // 2F9BC 0061;	
    // (蜨) CJK COMPATIBILITY IDEOGRAPH-2F9BC	[FB41 8728 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BC, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8728, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_247)
{
    // 2F9BC 0041;	
    // (蜨) CJK COMPATIBILITY IDEOGRAPH-2F9BC	[FB41 8728 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9BC, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8728, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_248)
{
    // 2F9BC 0062;	
    // (蜨) CJK COMPATIBILITY IDEOGRAPH-2F9BC	[FB41 8728 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BC, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8728, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_249)
{
    // 2F9BD 0021;	
    // (蝫) CJK COMPATIBILITY IDEOGRAPH-2F9BD	[FB41 876B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BD, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x876B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_250)
{
    // 2F9BD 003F;	
    // (蝫) CJK COMPATIBILITY IDEOGRAPH-2F9BD	[FB41 876B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BD, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x876B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_251)
{
    // 2F9BD 0061;	
    // (蝫) CJK COMPATIBILITY IDEOGRAPH-2F9BD	[FB41 876B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BD, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x876B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_252)
{
    // 2F9BD 0041;	
    // (蝫) CJK COMPATIBILITY IDEOGRAPH-2F9BD	[FB41 876B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9BD, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x876B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_253)
{
    // 2F9BD 0062;	
    // (蝫) CJK COMPATIBILITY IDEOGRAPH-2F9BD	[FB41 876B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BD, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x876B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_254)
{
    // FAB5 0021;	
    // (蝹) CJK COMPATIBILITY IDEOGRAPH-FAB5	[FB41 8779 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB5, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8779, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_255)
{
    // 2F9BB 0021;	
    // (蝹) CJK COMPATIBILITY IDEOGRAPH-2F9BB	[FB41 8779 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BB, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8779, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_256)
{
    // FAB5 003F;	
    // (蝹) CJK COMPATIBILITY IDEOGRAPH-FAB5	[FB41 8779 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB5, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8779, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_257)
{
    // 2F9BB 003F;	
    // (蝹) CJK COMPATIBILITY IDEOGRAPH-2F9BB	[FB41 8779 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BB, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8779, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_258)
{
    // FAB5 0061;	
    // (蝹) CJK COMPATIBILITY IDEOGRAPH-FAB5	[FB41 8779 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB5, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8779, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_259)
{
    // 2F9BB 0061;	
    // (蝹) CJK COMPATIBILITY IDEOGRAPH-2F9BB	[FB41 8779 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BB, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8779, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_260)
{
    // FAB5 0041;	
    // (蝹) CJK COMPATIBILITY IDEOGRAPH-FAB5	[FB41 8779 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAB5, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8779, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_261)
{
    // 2F9BB 0041;	
    // (蝹) CJK COMPATIBILITY IDEOGRAPH-2F9BB	[FB41 8779 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9BB, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8779, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_262)
{
    // FAB5 0062;	
    // (蝹) CJK COMPATIBILITY IDEOGRAPH-FAB5	[FB41 8779 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB5, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8779, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_263)
{
    // 2F9BB 0062;	
    // (蝹) CJK COMPATIBILITY IDEOGRAPH-2F9BB	[FB41 8779 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BB, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8779, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_264)
{
    // 2F9BE 0021;	
    // (螆) CJK COMPATIBILITY IDEOGRAPH-2F9BE	[FB41 8786 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BE, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8786, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_265)
{
    // 2F9BE 003F;	
    // (螆) CJK COMPATIBILITY IDEOGRAPH-2F9BE	[FB41 8786 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BE, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8786, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_266)
{
    // 2F9BE 0061;	
    // (螆) CJK COMPATIBILITY IDEOGRAPH-2F9BE	[FB41 8786 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BE, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8786, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_267)
{
    // 2F9BE 0041;	
    // (螆) CJK COMPATIBILITY IDEOGRAPH-2F9BE	[FB41 8786 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9BE, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8786, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_268)
{
    // 2F9BE 0062;	
    // (螆) CJK COMPATIBILITY IDEOGRAPH-2F9BE	[FB41 8786 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9BE, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8786, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_269)
{
    // F911 0021;	
    // (螺) CJK COMPATIBILITY IDEOGRAPH-F911	[FB41 87BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF911, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x87BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_270)
{
    // F911 003F;	
    // (螺) CJK COMPATIBILITY IDEOGRAPH-F911	[FB41 87BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF911, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x87BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_271)
{
    // F911 0061;	
    // (螺) CJK COMPATIBILITY IDEOGRAPH-F911	[FB41 87BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF911, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x87BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_272)
{
    // F911 0041;	
    // (螺) CJK COMPATIBILITY IDEOGRAPH-F911	[FB41 87BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF911, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x87BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_273)
{
    // F911 0062;	
    // (螺) CJK COMPATIBILITY IDEOGRAPH-F911	[FB41 87BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF911, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x87BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_274)
{
    // 2F9C0 0021;	
    // (蟡) CJK COMPATIBILITY IDEOGRAPH-2F9C0	[FB41 87E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C0, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x87E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_275)
{
    // 2F9C0 003F;	
    // (蟡) CJK COMPATIBILITY IDEOGRAPH-2F9C0	[FB41 87E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C0, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x87E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_276)
{
    // 2F9C0 0061;	
    // (蟡) CJK COMPATIBILITY IDEOGRAPH-2F9C0	[FB41 87E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C0, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x87E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_277)
{
    // 2F9C0 0041;	
    // (蟡) CJK COMPATIBILITY IDEOGRAPH-2F9C0	[FB41 87E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9C0, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x87E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_278)
{
    // 2F9C0 0062;	
    // (蟡) CJK COMPATIBILITY IDEOGRAPH-2F9C0	[FB41 87E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C0, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x87E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_279)
{
    // 2F9C1 0021;	
    // (蠁) CJK COMPATIBILITY IDEOGRAPH-2F9C1	[FB41 8801 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C1, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8801, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_280)
{
    // 2F9C1 003F;	
    // (蠁) CJK COMPATIBILITY IDEOGRAPH-2F9C1	[FB41 8801 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C1, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8801, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_281)
{
    // 2F9C1 0061;	
    // (蠁) CJK COMPATIBILITY IDEOGRAPH-2F9C1	[FB41 8801 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C1, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8801, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_282)
{
    // 2F9C1 0041;	
    // (蠁) CJK COMPATIBILITY IDEOGRAPH-2F9C1	[FB41 8801 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9C1, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8801, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_283)
{
    // 2F9C1 0062;	
    // (蠁) CJK COMPATIBILITY IDEOGRAPH-2F9C1	[FB41 8801 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C1, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8801, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_284)
{
    // F927 0021;	
    // (蠟) CJK COMPATIBILITY IDEOGRAPH-F927	[FB41 881F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF927, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x881F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_285)
{
    // F927 003F;	
    // (蠟) CJK COMPATIBILITY IDEOGRAPH-F927	[FB41 881F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF927, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x881F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_286)
{
    // F927 0061;	
    // (蠟) CJK COMPATIBILITY IDEOGRAPH-F927	[FB41 881F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF927, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x881F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_287)
{
    // F927 0041;	
    // (蠟) CJK COMPATIBILITY IDEOGRAPH-F927	[FB41 881F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF927, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x881F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_288)
{
    // F927 0062;	
    // (蠟) CJK COMPATIBILITY IDEOGRAPH-F927	[FB41 881F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF927, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x881F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_289)
{
    // 2F8E 0021;	
    // (⾎) KANGXI RADICAL BLOOD	[FB41 8840 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8E, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8840, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_290)
{
    // 2F8E 003F;	
    // (⾎) KANGXI RADICAL BLOOD	[FB41 8840 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8E, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8840, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_291)
{
    // 2F8E 0061;	
    // (⾎) KANGXI RADICAL BLOOD	[FB41 8840 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8E, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8840, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_292)
{
    // 2F8E 0041;	
    // (⾎) KANGXI RADICAL BLOOD	[FB41 8840 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F8E, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8840, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_293)
{
    // 2F8E 0062;	
    // (⾎) KANGXI RADICAL BLOOD	[FB41 8840 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8E, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8840, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_294)
{
    // FA08 0021;	
    // (行) CJK COMPATIBILITY IDEOGRAPH-FA08	[FB41 884C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA08, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x884C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_295)
{
    // 2F8F 0021;	
    // (⾏) KANGXI RADICAL WALK ENCLOSURE	[FB41 884C 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8F, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x884C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_296)
{
    // FA08 003F;	
    // (行) CJK COMPATIBILITY IDEOGRAPH-FA08	[FB41 884C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA08, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x884C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_297)
{
    // 2F8F 003F;	
    // (⾏) KANGXI RADICAL WALK ENCLOSURE	[FB41 884C 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8F, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x884C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_298)
{
    // FA08 0061;	
    // (行) CJK COMPATIBILITY IDEOGRAPH-FA08	[FB41 884C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA08, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x884C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_299)
{
    // FA08 0041;	
    // (行) CJK COMPATIBILITY IDEOGRAPH-FA08	[FB41 884C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA08, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x884C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_300)
{
    // 2F8F 0061;	
    // (⾏) KANGXI RADICAL WALK ENCLOSURE	[FB41 884C 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8F, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x884C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_301)
{
    // 2F8F 0041;	
    // (⾏) KANGXI RADICAL WALK ENCLOSURE	[FB41 884C 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F8F, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x884C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_302)
{
    // FA08 0062;	
    // (行) CJK COMPATIBILITY IDEOGRAPH-FA08	[FB41 884C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA08, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x884C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_303)
{
    // 2F8F 0062;	
    // (⾏) KANGXI RADICAL WALK ENCLOSURE	[FB41 884C 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F8F, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x884C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_304)
{
    // 2F9C3 0021;	
    // (衠) CJK COMPATIBILITY IDEOGRAPH-2F9C3	[FB41 8860 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C3, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8860, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_305)
{
    // 2F9C3 003F;	
    // (衠) CJK COMPATIBILITY IDEOGRAPH-2F9C3	[FB41 8860 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C3, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8860, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_306)
{
    // 2F9C3 0061;	
    // (衠) CJK COMPATIBILITY IDEOGRAPH-2F9C3	[FB41 8860 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C3, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8860, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_307)
{
    // 2F9C3 0041;	
    // (衠) CJK COMPATIBILITY IDEOGRAPH-2F9C3	[FB41 8860 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9C3, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8860, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_308)
{
    // 2F9C3 0062;	
    // (衠) CJK COMPATIBILITY IDEOGRAPH-2F9C3	[FB41 8860 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C3, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8860, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_309)
{
    // 2F9C4 0021;	
    // (衣) CJK COMPATIBILITY IDEOGRAPH-2F9C4	[FB41 8863 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C4, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8863, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_310)
{
    // 2F90 0021;	
    // (⾐) KANGXI RADICAL CLOTHES	[FB41 8863 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F90, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8863, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_311)
{
    // 2F9C4 003F;	
    // (衣) CJK COMPATIBILITY IDEOGRAPH-2F9C4	[FB41 8863 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C4, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8863, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_312)
{
    // 2F90 003F;	
    // (⾐) KANGXI RADICAL CLOTHES	[FB41 8863 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F90, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8863, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_313)
{
    // 2F9C4 0061;	
    // (衣) CJK COMPATIBILITY IDEOGRAPH-2F9C4	[FB41 8863 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C4, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8863, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_314)
{
    // 2F9C4 0041;	
    // (衣) CJK COMPATIBILITY IDEOGRAPH-2F9C4	[FB41 8863 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9C4, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8863, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_315)
{
    // 2F90 0061;	
    // (⾐) KANGXI RADICAL CLOTHES	[FB41 8863 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F90, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8863, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_316)
{
    // 2F90 0041;	
    // (⾐) KANGXI RADICAL CLOTHES	[FB41 8863 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F90, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8863, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_317)
{
    // 2F9C4 0062;	
    // (衣) CJK COMPATIBILITY IDEOGRAPH-2F9C4	[FB41 8863 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C4, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8863, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_318)
{
    // 2F90 0062;	
    // (⾐) KANGXI RADICAL CLOTHES	[FB41 8863 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F90, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8863, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_319)
{
    // 2EC2 0021;	
    // (⻂) CJK RADICAL CLOTHES	[FB41 8864 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC2, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8864, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_320)
{
    // 2EC2 003F;	
    // (⻂) CJK RADICAL CLOTHES	[FB41 8864 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC2, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8864, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_321)
{
    // 2EC2 0061;	
    // (⻂) CJK RADICAL CLOTHES	[FB41 8864 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC2, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8864, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_322)
{
    // 2EC2 0041;	
    // (⻂) CJK RADICAL CLOTHES	[FB41 8864 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EC2, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8864, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_323)
{
    // 2EC2 0062;	
    // (⻂) CJK RADICAL CLOTHES	[FB41 8864 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC2, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8864, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_324)
{
    // F9A0 0021;	
    // (裂) CJK COMPATIBILITY IDEOGRAPH-F9A0	[FB41 88C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A0, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x88C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_325)
{
    // F9A0 003F;	
    // (裂) CJK COMPATIBILITY IDEOGRAPH-F9A0	[FB41 88C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A0, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x88C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_326)
{
    // F9A0 0061;	
    // (裂) CJK COMPATIBILITY IDEOGRAPH-F9A0	[FB41 88C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A0, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x88C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_327)
{
    // F9A0 0041;	
    // (裂) CJK COMPATIBILITY IDEOGRAPH-F9A0	[FB41 88C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9A0, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x88C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_328)
{
    // F9A0 0062;	
    // (裂) CJK COMPATIBILITY IDEOGRAPH-F9A0	[FB41 88C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A0, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x88C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_329)
{
    // F9E7 0021;	
    // (裏) CJK COMPATIBILITY IDEOGRAPH-F9E7	[FB41 88CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E7, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x88CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_330)
{
    // F9E7 003F;	
    // (裏) CJK COMPATIBILITY IDEOGRAPH-F9E7	[FB41 88CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E7, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x88CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_331)
{
    // F9E7 0061;	
    // (裏) CJK COMPATIBILITY IDEOGRAPH-F9E7	[FB41 88CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E7, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x88CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_332)
{
    // F9E7 0041;	
    // (裏) CJK COMPATIBILITY IDEOGRAPH-F9E7	[FB41 88CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9E7, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x88CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_333)
{
    // F9E7 0062;	
    // (裏) CJK COMPATIBILITY IDEOGRAPH-F9E7	[FB41 88CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E7, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x88CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_334)
{
    // 2F9C6 0021;	
    // (裗) CJK COMPATIBILITY IDEOGRAPH-2F9C6	[FB41 88D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C6, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x88D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_335)
{
    // 2F9C6 003F;	
    // (裗) CJK COMPATIBILITY IDEOGRAPH-2F9C6	[FB41 88D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C6, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x88D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_336)
{
    // 2F9C6 0061;	
    // (裗) CJK COMPATIBILITY IDEOGRAPH-2F9C6	[FB41 88D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C6, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x88D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_337)
{
    // 2F9C6 0041;	
    // (裗) CJK COMPATIBILITY IDEOGRAPH-2F9C6	[FB41 88D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9C6, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x88D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_338)
{
    // 2F9C6 0062;	
    // (裗) CJK COMPATIBILITY IDEOGRAPH-2F9C6	[FB41 88D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C6, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x88D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_339)
{
    // 2F9C7 0021;	
    // (裞) CJK COMPATIBILITY IDEOGRAPH-2F9C7	[FB41 88DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C7, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x88DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_340)
{
    // 2F9C7 003F;	
    // (裞) CJK COMPATIBILITY IDEOGRAPH-2F9C7	[FB41 88DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C7, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x88DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_341)
{
    // 2F9C7 0061;	
    // (裞) CJK COMPATIBILITY IDEOGRAPH-2F9C7	[FB41 88DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C7, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x88DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_342)
{
    // 2F9C7 0041;	
    // (裞) CJK COMPATIBILITY IDEOGRAPH-2F9C7	[FB41 88DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9C7, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x88DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_343)
{
    // 2F9C7 0062;	
    // (裞) CJK COMPATIBILITY IDEOGRAPH-2F9C7	[FB41 88DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C7, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x88DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_344)
{
    // F9E8 0021;	
    // (裡) CJK COMPATIBILITY IDEOGRAPH-F9E8	[FB41 88E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E8, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x88E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_345)
{
    // F9E8 003F;	
    // (裡) CJK COMPATIBILITY IDEOGRAPH-F9E8	[FB41 88E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E8, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x88E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_346)
{
    // F9E8 0061;	
    // (裡) CJK COMPATIBILITY IDEOGRAPH-F9E8	[FB41 88E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E8, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x88E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_347)
{
    // F9E8 0041;	
    // (裡) CJK COMPATIBILITY IDEOGRAPH-F9E8	[FB41 88E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9E8, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x88E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_348)
{
    // F9E8 0062;	
    // (裡) CJK COMPATIBILITY IDEOGRAPH-F9E8	[FB41 88E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9E8, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x88E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_349)
{
    // F912 0021;	
    // (裸) CJK COMPATIBILITY IDEOGRAPH-F912	[FB41 88F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF912, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x88F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_350)
{
    // F912 003F;	
    // (裸) CJK COMPATIBILITY IDEOGRAPH-F912	[FB41 88F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF912, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x88F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_351)
{
    // F912 0061;	
    // (裸) CJK COMPATIBILITY IDEOGRAPH-F912	[FB41 88F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF912, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x88F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_352)
{
    // F912 0041;	
    // (裸) CJK COMPATIBILITY IDEOGRAPH-F912	[FB41 88F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF912, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x88F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_353)
{
    // F912 0062;	
    // (裸) CJK COMPATIBILITY IDEOGRAPH-F912	[FB41 88F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF912, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x88F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_354)
{
    // 2F9C9 0021;	
    // (裺) CJK COMPATIBILITY IDEOGRAPH-2F9C9	[FB41 88FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C9, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x88FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_355)
{
    // 2F9C9 003F;	
    // (裺) CJK COMPATIBILITY IDEOGRAPH-2F9C9	[FB41 88FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C9, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x88FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_356)
{
    // 2F9C9 0061;	
    // (裺) CJK COMPATIBILITY IDEOGRAPH-2F9C9	[FB41 88FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C9, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x88FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_357)
{
    // 2F9C9 0041;	
    // (裺) CJK COMPATIBILITY IDEOGRAPH-2F9C9	[FB41 88FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9C9, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x88FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_358)
{
    // 2F9C9 0062;	
    // (裺) CJK COMPATIBILITY IDEOGRAPH-2F9C9	[FB41 88FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9C9, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x88FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_359)
{
    // FA60 0021;	
    // (褐) CJK COMPATIBILITY IDEOGRAPH-FA60	[FB41 8910 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA60, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8910, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_360)
{
    // FA60 003F;	
    // (褐) CJK COMPATIBILITY IDEOGRAPH-FA60	[FB41 8910 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA60, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8910, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_361)
{
    // FA60 0061;	
    // (褐) CJK COMPATIBILITY IDEOGRAPH-FA60	[FB41 8910 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA60, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8910, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_362)
{
    // FA60 0041;	
    // (褐) CJK COMPATIBILITY IDEOGRAPH-FA60	[FB41 8910 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA60, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8910, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_363)
{
    // FA60 0062;	
    // (褐) CJK COMPATIBILITY IDEOGRAPH-FA60	[FB41 8910 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA60, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8910, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_364)
{
    // FAB6 0021;	
    // (襁) CJK COMPATIBILITY IDEOGRAPH-FAB6	[FB41 8941 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB6, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8941, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_365)
{
    // FAB6 003F;	
    // (襁) CJK COMPATIBILITY IDEOGRAPH-FAB6	[FB41 8941 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB6, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8941, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_366)
{
    // FAB6 0061;	
    // (襁) CJK COMPATIBILITY IDEOGRAPH-FAB6	[FB41 8941 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB6, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8941, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_367)
{
    // FAB6 0041;	
    // (襁) CJK COMPATIBILITY IDEOGRAPH-FAB6	[FB41 8941 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAB6, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8941, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_368)
{
    // FAB6 0062;	
    // (襁) CJK COMPATIBILITY IDEOGRAPH-FAB6	[FB41 8941 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB6, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8941, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_369)
{
    // F924 0021;	
    // (襤) CJK COMPATIBILITY IDEOGRAPH-F924	[FB41 8964 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF924, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8964, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_370)
{
    // F924 003F;	
    // (襤) CJK COMPATIBILITY IDEOGRAPH-F924	[FB41 8964 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF924, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8964, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_371)
{
    // F924 0061;	
    // (襤) CJK COMPATIBILITY IDEOGRAPH-F924	[FB41 8964 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF924, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8964, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_372)
{
    // F924 0041;	
    // (襤) CJK COMPATIBILITY IDEOGRAPH-F924	[FB41 8964 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF924, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8964, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_373)
{
    // F924 0062;	
    // (襤) CJK COMPATIBILITY IDEOGRAPH-F924	[FB41 8964 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF924, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8964, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_374)
{
    // 2F91 0021;	
    // (⾑) KANGXI RADICAL WEST	[FB41 897E 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F91, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x897E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_375)
{
    // 2F91 003F;	
    // (⾑) KANGXI RADICAL WEST	[FB41 897E 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F91, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x897E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_376)
{
    // 2F91 0061;	
    // (⾑) KANGXI RADICAL WEST	[FB41 897E 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F91, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x897E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_377)
{
    // 2F91 0041;	
    // (⾑) KANGXI RADICAL WEST	[FB41 897E 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F91, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x897E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_378)
{
    // 2F91 0062;	
    // (⾑) KANGXI RADICAL WEST	[FB41 897E 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F91, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x897E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_379)
{
    // 2EC4 0021;	
    // (⻄) CJK RADICAL WEST TWO	[FB41 897F 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC4, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x897F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_380)
{
    // 2EC4 003F;	
    // (⻄) CJK RADICAL WEST TWO	[FB41 897F 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC4, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x897F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_381)
{
    // 2EC4 0061;	
    // (⻄) CJK RADICAL WEST TWO	[FB41 897F 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC4, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x897F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_382)
{
    // 2EC4 0041;	
    // (⻄) CJK RADICAL WEST TWO	[FB41 897F 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EC4, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x897F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_383)
{
    // 2EC4 0062;	
    // (⻄) CJK RADICAL WEST TWO	[FB41 897F 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC4, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x897F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_384)
{
    // 2EC3 0021;	
    // (⻃) CJK RADICAL WEST ONE	[FB41 8980 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC3, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8980, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_385)
{
    // 2EC3 003F;	
    // (⻃) CJK RADICAL WEST ONE	[FB41 8980 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC3, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8980, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_386)
{
    // 2EC3 0061;	
    // (⻃) CJK RADICAL WEST ONE	[FB41 8980 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC3, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8980, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_387)
{
    // 2EC3 0041;	
    // (⻃) CJK RADICAL WEST ONE	[FB41 8980 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EC3, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8980, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_388)
{
    // 2EC3 0062;	
    // (⻃) CJK RADICAL WEST ONE	[FB41 8980 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC3, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8980, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_389)
{
    // FAB7 0021;	
    // (覆) CJK COMPATIBILITY IDEOGRAPH-FAB7	[FB41 8986 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB7, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8986, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_390)
{
    // FAB7 003F;	
    // (覆) CJK COMPATIBILITY IDEOGRAPH-FAB7	[FB41 8986 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB7, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8986, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_391)
{
    // FAB7 0061;	
    // (覆) CJK COMPATIBILITY IDEOGRAPH-FAB7	[FB41 8986 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB7, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8986, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_392)
{
    // FAB7 0041;	
    // (覆) CJK COMPATIBILITY IDEOGRAPH-FAB7	[FB41 8986 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAB7, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8986, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_393)
{
    // FAB7 0062;	
    // (覆) CJK COMPATIBILITY IDEOGRAPH-FAB7	[FB41 8986 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB7, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8986, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_394)
{
    // FA0A 0021;	
    // (見) CJK COMPATIBILITY IDEOGRAPH-FA0A	[FB41 898B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0A, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x898B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_395)
{
    // 2F92 0021;	
    // (⾒) KANGXI RADICAL SEE	[FB41 898B 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F92, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x898B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_396)
{
    // FA0A 003F;	
    // (見) CJK COMPATIBILITY IDEOGRAPH-FA0A	[FB41 898B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0A, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x898B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_397)
{
    // 2F92 003F;	
    // (⾒) KANGXI RADICAL SEE	[FB41 898B 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F92, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x898B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_398)
{
    // FA0A 0061;	
    // (見) CJK COMPATIBILITY IDEOGRAPH-FA0A	[FB41 898B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0A, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x898B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_399)
{
    // FA0A 0041;	
    // (見) CJK COMPATIBILITY IDEOGRAPH-FA0A	[FB41 898B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA0A, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x898B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_400)
{
    // 2F92 0061;	
    // (⾒) KANGXI RADICAL SEE	[FB41 898B 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F92, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x898B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_401)
{
    // 2F92 0041;	
    // (⾒) KANGXI RADICAL SEE	[FB41 898B 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F92, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x898B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_402)
{
    // FA0A 0062;	
    // (見) CJK COMPATIBILITY IDEOGRAPH-FA0A	[FB41 898B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA0A, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x898B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_403)
{
    // 2F92 0062;	
    // (⾒) KANGXI RADICAL SEE	[FB41 898B 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F92, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x898B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_404)
{
    // FA61 0021;	
    // (視) CJK COMPATIBILITY IDEOGRAPH-FA61	[FB41 8996 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA61, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8996, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_405)
{
    // FAB8 0021;	
    // (視) CJK COMPATIBILITY IDEOGRAPH-FAB8	[FB41 8996 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB8, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8996, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_406)
{
    // FA61 003F;	
    // (視) CJK COMPATIBILITY IDEOGRAPH-FA61	[FB41 8996 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA61, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8996, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_407)
{
    // FAB8 003F;	
    // (視) CJK COMPATIBILITY IDEOGRAPH-FAB8	[FB41 8996 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB8, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8996, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_408)
{
    // FA61 0061;	
    // (視) CJK COMPATIBILITY IDEOGRAPH-FA61	[FB41 8996 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA61, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8996, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_409)
{
    // FAB8 0061;	
    // (視) CJK COMPATIBILITY IDEOGRAPH-FAB8	[FB41 8996 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB8, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8996, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_410)
{
    // FA61 0041;	
    // (視) CJK COMPATIBILITY IDEOGRAPH-FA61	[FB41 8996 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA61, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8996, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_411)
{
    // FAB8 0041;	
    // (視) CJK COMPATIBILITY IDEOGRAPH-FAB8	[FB41 8996 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAB8, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8996, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_412)
{
    // FA61 0062;	
    // (視) CJK COMPATIBILITY IDEOGRAPH-FA61	[FB41 8996 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA61, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8996, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_413)
{
    // FAB8 0062;	
    // (視) CJK COMPATIBILITY IDEOGRAPH-FAB8	[FB41 8996 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB8, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8996, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_414)
{
    // 2EC5 0021;	
    // (⻅) CJK RADICAL C-SIMPLIFIED SEE	[FB41 89C1 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC5, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x89C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_415)
{
    // 2EC5 003F;	
    // (⻅) CJK RADICAL C-SIMPLIFIED SEE	[FB41 89C1 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC5, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x89C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_416)
{
    // 2EC5 0061;	
    // (⻅) CJK RADICAL C-SIMPLIFIED SEE	[FB41 89C1 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC5, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x89C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_417)
{
    // 2EC5 0041;	
    // (⻅) CJK RADICAL C-SIMPLIFIED SEE	[FB41 89C1 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EC5, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x89C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_418)
{
    // 2EC5 0062;	
    // (⻅) CJK RADICAL C-SIMPLIFIED SEE	[FB41 89C1 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC5, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x89C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_419)
{
    // 2EC6 0021;	
    // (⻆) CJK RADICAL SIMPLIFIED HORN	[FB41 89D2 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC6, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x89D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_420)
{
    // 2F93 0021;	
    // (⾓) KANGXI RADICAL HORN	[FB41 89D2 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F93, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x89D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_421)
{
    // 2EC7 0021;	
    // (⻇) CJK RADICAL HORN	[FB41 89D2 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EC7, 0x0021 };
    uint32_t const ces[12] = { 0xFB41, 0x89D2, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_422)
{
    // 2EC6 003F;	
    // (⻆) CJK RADICAL SIMPLIFIED HORN	[FB41 89D2 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC6, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x89D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_423)
{
    // 2F93 003F;	
    // (⾓) KANGXI RADICAL HORN	[FB41 89D2 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F93, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x89D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_424)
{
    // 2EC7 003F;	
    // (⻇) CJK RADICAL HORN	[FB41 89D2 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EC7, 0x003F };
    uint32_t const ces[12] = { 0xFB41, 0x89D2, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_425)
{
    // 2EC6 0061;	
    // (⻆) CJK RADICAL SIMPLIFIED HORN	[FB41 89D2 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC6, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x89D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_426)
{
    // 2F93 0061;	
    // (⾓) KANGXI RADICAL HORN	[FB41 89D2 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F93, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x89D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_427)
{
    // 2EC6 0041;	
    // (⻆) CJK RADICAL SIMPLIFIED HORN	[FB41 89D2 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2EC6, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x89D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_428)
{
    // 2F93 0041;	
    // (⾓) KANGXI RADICAL HORN	[FB41 89D2 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F93, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x89D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_429)
{
    // 2EC7 0061;	
    // (⻇) CJK RADICAL HORN	[FB41 89D2 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EC7, 0x0061 };
    uint32_t const ces[12] = { 0xFB41, 0x89D2, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_430)
{
    // 2EC7 0041;	
    // (⻇) CJK RADICAL HORN	[FB41 89D2 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2EC7, 0x0041 };
    uint32_t const ces[12] = { 0xFB41, 0x89D2, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_431)
{
    // 2EC6 0062;	
    // (⻆) CJK RADICAL SIMPLIFIED HORN	[FB41 89D2 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2EC6, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x89D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_432)
{
    // 2F93 0062;	
    // (⾓) KANGXI RADICAL HORN	[FB41 89D2 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F93, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x89D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_433)
{
    // 2EC7 0062;	
    // (⻇) CJK RADICAL HORN	[FB41 89D2 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2EC7, 0x0062 };
    uint32_t const ces[12] = { 0xFB41, 0x89D2, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_434)
{
    // 1F216 0021;	
    // (🈖) SQUARED CJK UNIFIED IDEOGRAPH-89E3	[FB41 89E3 0261 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F216, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x89E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_435)
{
    // 1F216 003F;	
    // (🈖) SQUARED CJK UNIFIED IDEOGRAPH-89E3	[FB41 89E3 0267 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F216, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x89E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_436)
{
    // 1F216 0061;	
    // (🈖) SQUARED CJK UNIFIED IDEOGRAPH-89E3	[FB41 89E3 1CAD | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F216, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x89E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_437)
{
    // 1F216 0041;	
    // (🈖) SQUARED CJK UNIFIED IDEOGRAPH-89E3	[FB41 89E3 1CAD | 0020 0020 | 001C 0008 |]

    uint32_t cps[2] = { 0x1F216, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x89E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_438)
{
    // 1F216 0062;	
    // (🈖) SQUARED CJK UNIFIED IDEOGRAPH-89E3	[FB41 89E3 1CC6 | 0020 0020 | 001C 0002 |]

    uint32_t cps[2] = { 0x1F216, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x89E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x001C, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_439)
{
    // 2F94 0021;	
    // (⾔) KANGXI RADICAL SPEECH	[FB41 8A00 0261 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F94, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8A00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_440)
{
    // 2F94 003F;	
    // (⾔) KANGXI RADICAL SPEECH	[FB41 8A00 0267 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F94, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8A00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_441)
{
    // 2F94 0061;	
    // (⾔) KANGXI RADICAL SPEECH	[FB41 8A00 1CAD | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F94, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8A00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_442)
{
    // 2F94 0041;	
    // (⾔) KANGXI RADICAL SPEECH	[FB41 8A00 1CAD | 0020 0020 | 0004 0008 |]

    uint32_t cps[2] = { 0x2F94, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8A00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_443)
{
    // 2F94 0062;	
    // (⾔) KANGXI RADICAL SPEECH	[FB41 8A00 1CC6 | 0020 0020 | 0004 0002 |]

    uint32_t cps[2] = { 0x2F94, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8A00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_444)
{
    // 2F9CF 0021;	
    // (誠) CJK COMPATIBILITY IDEOGRAPH-2F9CF	[FB41 8AA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9CF, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8AA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_445)
{
    // 2F9CF 003F;	
    // (誠) CJK COMPATIBILITY IDEOGRAPH-2F9CF	[FB41 8AA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9CF, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8AA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_446)
{
    // 2F9CF 0061;	
    // (誠) CJK COMPATIBILITY IDEOGRAPH-2F9CF	[FB41 8AA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9CF, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8AA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_447)
{
    // 2F9CF 0041;	
    // (誠) CJK COMPATIBILITY IDEOGRAPH-2F9CF	[FB41 8AA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9CF, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8AA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_448)
{
    // 2F9CF 0062;	
    // (誠) CJK COMPATIBILITY IDEOGRAPH-2F9CF	[FB41 8AA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9CF, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8AA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_449)
{
    // F96F 0021;	
    // (說) CJK COMPATIBILITY IDEOGRAPH-F96F	[FB41 8AAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF96F, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8AAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_450)
{
    // F9A1 0021;	
    // (說) CJK COMPATIBILITY IDEOGRAPH-F9A1	[FB41 8AAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A1, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8AAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_451)
{
    // F96F 003F;	
    // (說) CJK COMPATIBILITY IDEOGRAPH-F96F	[FB41 8AAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF96F, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8AAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_452)
{
    // F9A1 003F;	
    // (說) CJK COMPATIBILITY IDEOGRAPH-F9A1	[FB41 8AAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A1, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8AAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_453)
{
    // F96F 0061;	
    // (說) CJK COMPATIBILITY IDEOGRAPH-F96F	[FB41 8AAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF96F, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8AAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_454)
{
    // F9A1 0061;	
    // (說) CJK COMPATIBILITY IDEOGRAPH-F9A1	[FB41 8AAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A1, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8AAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_455)
{
    // F96F 0041;	
    // (說) CJK COMPATIBILITY IDEOGRAPH-F96F	[FB41 8AAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF96F, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8AAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_456)
{
    // F9A1 0041;	
    // (說) CJK COMPATIBILITY IDEOGRAPH-F9A1	[FB41 8AAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF9A1, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8AAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_457)
{
    // F96F 0062;	
    // (說) CJK COMPATIBILITY IDEOGRAPH-F96F	[FB41 8AAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF96F, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8AAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_458)
{
    // F9A1 0062;	
    // (說) CJK COMPATIBILITY IDEOGRAPH-F9A1	[FB41 8AAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF9A1, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8AAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_459)
{
    // FAB9 0021;	
    // (調) CJK COMPATIBILITY IDEOGRAPH-FAB9	[FB41 8ABF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB9, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8ABF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_460)
{
    // FAB9 003F;	
    // (調) CJK COMPATIBILITY IDEOGRAPH-FAB9	[FB41 8ABF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB9, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8ABF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_461)
{
    // FAB9 0061;	
    // (調) CJK COMPATIBILITY IDEOGRAPH-FAB9	[FB41 8ABF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB9, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8ABF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_462)
{
    // FAB9 0041;	
    // (調) CJK COMPATIBILITY IDEOGRAPH-FAB9	[FB41 8ABF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFAB9, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8ABF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_463)
{
    // FAB9 0062;	
    // (調) CJK COMPATIBILITY IDEOGRAPH-FAB9	[FB41 8ABF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFAB9, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8ABF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_464)
{
    // FABB 0021;	
    // (請) CJK COMPATIBILITY IDEOGRAPH-FABB	[FB41 8ACB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFABB, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8ACB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_465)
{
    // FABB 003F;	
    // (請) CJK COMPATIBILITY IDEOGRAPH-FABB	[FB41 8ACB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFABB, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8ACB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_466)
{
    // FABB 0061;	
    // (請) CJK COMPATIBILITY IDEOGRAPH-FABB	[FB41 8ACB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFABB, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8ACB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_467)
{
    // FABB 0041;	
    // (請) CJK COMPATIBILITY IDEOGRAPH-FABB	[FB41 8ACB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFABB, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8ACB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_468)
{
    // FABB 0062;	
    // (請) CJK COMPATIBILITY IDEOGRAPH-FABB	[FB41 8ACB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFABB, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8ACB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_469)
{
    // F97D 0021;	
    // (諒) CJK COMPATIBILITY IDEOGRAPH-F97D	[FB41 8AD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF97D, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8AD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_470)
{
    // F97D 003F;	
    // (諒) CJK COMPATIBILITY IDEOGRAPH-F97D	[FB41 8AD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF97D, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8AD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_471)
{
    // F97D 0061;	
    // (諒) CJK COMPATIBILITY IDEOGRAPH-F97D	[FB41 8AD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF97D, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8AD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_472)
{
    // F97D 0041;	
    // (諒) CJK COMPATIBILITY IDEOGRAPH-F97D	[FB41 8AD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF97D, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8AD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_473)
{
    // F97D 0062;	
    // (諒) CJK COMPATIBILITY IDEOGRAPH-F97D	[FB41 8AD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF97D, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8AD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_474)
{
    // F941 0021;	
    // (論) CJK COMPATIBILITY IDEOGRAPH-F941	[FB41 8AD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF941, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8AD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_475)
{
    // F941 003F;	
    // (論) CJK COMPATIBILITY IDEOGRAPH-F941	[FB41 8AD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF941, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8AD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_476)
{
    // F941 0061;	
    // (論) CJK COMPATIBILITY IDEOGRAPH-F941	[FB41 8AD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF941, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8AD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_477)
{
    // F941 0041;	
    // (論) CJK COMPATIBILITY IDEOGRAPH-F941	[FB41 8AD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF941, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8AD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_478)
{
    // F941 0062;	
    // (論) CJK COMPATIBILITY IDEOGRAPH-F941	[FB41 8AD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF941, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8AD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_479)
{
    // FABE 0021;	
    // (諭) CJK COMPATIBILITY IDEOGRAPH-FABE	[FB41 8AED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFABE, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8AED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_480)
{
    // 2F9D0 0021;	
    // (諭) CJK COMPATIBILITY IDEOGRAPH-2F9D0	[FB41 8AED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9D0, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8AED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_481)
{
    // FABE 003F;	
    // (諭) CJK COMPATIBILITY IDEOGRAPH-FABE	[FB41 8AED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFABE, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8AED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_482)
{
    // 2F9D0 003F;	
    // (諭) CJK COMPATIBILITY IDEOGRAPH-2F9D0	[FB41 8AED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9D0, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8AED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_483)
{
    // FABE 0061;	
    // (諭) CJK COMPATIBILITY IDEOGRAPH-FABE	[FB41 8AED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFABE, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8AED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_484)
{
    // 2F9D0 0061;	
    // (諭) CJK COMPATIBILITY IDEOGRAPH-2F9D0	[FB41 8AED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9D0, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8AED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_485)
{
    // FABE 0041;	
    // (諭) CJK COMPATIBILITY IDEOGRAPH-FABE	[FB41 8AED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFABE, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8AED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_486)
{
    // 2F9D0 0041;	
    // (諭) CJK COMPATIBILITY IDEOGRAPH-2F9D0	[FB41 8AED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9D0, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8AED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_487)
{
    // FABE 0062;	
    // (諭) CJK COMPATIBILITY IDEOGRAPH-FABE	[FB41 8AED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFABE, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8AED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_488)
{
    // 2F9D0 0062;	
    // (諭) CJK COMPATIBILITY IDEOGRAPH-2F9D0	[FB41 8AED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9D0, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8AED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_489)
{
    // FA22 0021;	
    // (諸) CJK COMPATIBILITY IDEOGRAPH-FA22	[FB41 8AF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA22, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8AF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_490)
{
    // FABA 0021;	
    // (諸) CJK COMPATIBILITY IDEOGRAPH-FABA	[FB41 8AF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFABA, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8AF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_491)
{
    // FA22 003F;	
    // (諸) CJK COMPATIBILITY IDEOGRAPH-FA22	[FB41 8AF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA22, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8AF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_492)
{
    // FABA 003F;	
    // (諸) CJK COMPATIBILITY IDEOGRAPH-FABA	[FB41 8AF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFABA, 0x003F };
    uint32_t const ces[10] = { 0xFB41, 0x8AF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_493)
{
    // FA22 0061;	
    // (諸) CJK COMPATIBILITY IDEOGRAPH-FA22	[FB41 8AF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA22, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8AF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_494)
{
    // FABA 0061;	
    // (諸) CJK COMPATIBILITY IDEOGRAPH-FABA	[FB41 8AF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFABA, 0x0061 };
    uint32_t const ces[10] = { 0xFB41, 0x8AF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_495)
{
    // FA22 0041;	
    // (諸) CJK COMPATIBILITY IDEOGRAPH-FA22	[FB41 8AF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFA22, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8AF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_496)
{
    // FABA 0041;	
    // (諸) CJK COMPATIBILITY IDEOGRAPH-FABA	[FB41 8AF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFABA, 0x0041 };
    uint32_t const ces[10] = { 0xFB41, 0x8AF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_497)
{
    // FA22 0062;	
    // (諸) CJK COMPATIBILITY IDEOGRAPH-FA22	[FB41 8AF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFA22, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8AF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_498)
{
    // FABA 0062;	
    // (諸) CJK COMPATIBILITY IDEOGRAPH-FABA	[FB41 8AF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFABA, 0x0062 };
    uint32_t const ces[10] = { 0xFB41, 0x8AF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_323_499)
{
    // F95D 0021;	
    // (諾) CJK COMPATIBILITY IDEOGRAPH-F95D	[FB41 8AFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF95D, 0x0021 };
    uint32_t const ces[10] = { 0xFB41, 0x8AFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

