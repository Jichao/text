// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_049_000)
{
    // 1D07F 003F;	
    // (ùÅø) BYZANTINE MUSICAL SYMBOL KLASMA ANO	[106D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07F, 0x003F };
    uint32_t const ces[9] = { 0x106D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_001)
{
    // 1D07F 0061;	
    // (ùÅø) BYZANTINE MUSICAL SYMBOL KLASMA ANO	[106D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07F, 0x0061 };
    uint32_t const ces[9] = { 0x106D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_002)
{
    // 1D07F 0041;	
    // (ùÅø) BYZANTINE MUSICAL SYMBOL KLASMA ANO	[106D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D07F, 0x0041 };
    uint32_t const ces[9] = { 0x106D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_003)
{
    // 1D07F 0062;	
    // (ùÅø) BYZANTINE MUSICAL SYMBOL KLASMA ANO	[106D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D07F, 0x0062 };
    uint32_t const ces[9] = { 0x106D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_004)
{
    // 1D080 0021;	
    // (ùÇÄ) BYZANTINE MUSICAL SYMBOL DIPLI ARCHAION	[106E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D080, 0x0021 };
    uint32_t const ces[9] = { 0x106E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_005)
{
    // 1D080 003F;	
    // (ùÇÄ) BYZANTINE MUSICAL SYMBOL DIPLI ARCHAION	[106E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D080, 0x003F };
    uint32_t const ces[9] = { 0x106E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_006)
{
    // 1D080 0061;	
    // (ùÇÄ) BYZANTINE MUSICAL SYMBOL DIPLI ARCHAION	[106E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D080, 0x0061 };
    uint32_t const ces[9] = { 0x106E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_007)
{
    // 1D080 0041;	
    // (ùÇÄ) BYZANTINE MUSICAL SYMBOL DIPLI ARCHAION	[106E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D080, 0x0041 };
    uint32_t const ces[9] = { 0x106E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_008)
{
    // 1D080 0062;	
    // (ùÇÄ) BYZANTINE MUSICAL SYMBOL DIPLI ARCHAION	[106E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D080, 0x0062 };
    uint32_t const ces[9] = { 0x106E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_009)
{
    // 1D081 0021;	
    // (ùÇÅ) BYZANTINE MUSICAL SYMBOL KRATIMA ARCHAION	[106F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D081, 0x0021 };
    uint32_t const ces[9] = { 0x106F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_010)
{
    // 1D081 003F;	
    // (ùÇÅ) BYZANTINE MUSICAL SYMBOL KRATIMA ARCHAION	[106F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D081, 0x003F };
    uint32_t const ces[9] = { 0x106F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_011)
{
    // 1D081 0061;	
    // (ùÇÅ) BYZANTINE MUSICAL SYMBOL KRATIMA ARCHAION	[106F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D081, 0x0061 };
    uint32_t const ces[9] = { 0x106F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_012)
{
    // 1D081 0041;	
    // (ùÇÅ) BYZANTINE MUSICAL SYMBOL KRATIMA ARCHAION	[106F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D081, 0x0041 };
    uint32_t const ces[9] = { 0x106F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_013)
{
    // 1D081 0062;	
    // (ùÇÅ) BYZANTINE MUSICAL SYMBOL KRATIMA ARCHAION	[106F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D081, 0x0062 };
    uint32_t const ces[9] = { 0x106F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_014)
{
    // 1D082 0021;	
    // (ùÇÇ) BYZANTINE MUSICAL SYMBOL KRATIMA ALLO	[1070 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D082, 0x0021 };
    uint32_t const ces[9] = { 0x1070, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_015)
{
    // 1D082 003F;	
    // (ùÇÇ) BYZANTINE MUSICAL SYMBOL KRATIMA ALLO	[1070 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D082, 0x003F };
    uint32_t const ces[9] = { 0x1070, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_016)
{
    // 1D082 0061;	
    // (ùÇÇ) BYZANTINE MUSICAL SYMBOL KRATIMA ALLO	[1070 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D082, 0x0061 };
    uint32_t const ces[9] = { 0x1070, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_017)
{
    // 1D082 0041;	
    // (ùÇÇ) BYZANTINE MUSICAL SYMBOL KRATIMA ALLO	[1070 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D082, 0x0041 };
    uint32_t const ces[9] = { 0x1070, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_018)
{
    // 1D082 0062;	
    // (ùÇÇ) BYZANTINE MUSICAL SYMBOL KRATIMA ALLO	[1070 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D082, 0x0062 };
    uint32_t const ces[9] = { 0x1070, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_019)
{
    // 1D083 0021;	
    // (ùÇÉ) BYZANTINE MUSICAL SYMBOL KRATIMA NEO	[1071 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D083, 0x0021 };
    uint32_t const ces[9] = { 0x1071, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_020)
{
    // 1D083 003F;	
    // (ùÇÉ) BYZANTINE MUSICAL SYMBOL KRATIMA NEO	[1071 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D083, 0x003F };
    uint32_t const ces[9] = { 0x1071, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_021)
{
    // 1D083 0061;	
    // (ùÇÉ) BYZANTINE MUSICAL SYMBOL KRATIMA NEO	[1071 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D083, 0x0061 };
    uint32_t const ces[9] = { 0x1071, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_022)
{
    // 1D083 0041;	
    // (ùÇÉ) BYZANTINE MUSICAL SYMBOL KRATIMA NEO	[1071 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D083, 0x0041 };
    uint32_t const ces[9] = { 0x1071, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_023)
{
    // 1D083 0062;	
    // (ùÇÉ) BYZANTINE MUSICAL SYMBOL KRATIMA NEO	[1071 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D083, 0x0062 };
    uint32_t const ces[9] = { 0x1071, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_024)
{
    // 1D084 0021;	
    // (ùÇÑ) BYZANTINE MUSICAL SYMBOL APODERMA NEO	[1072 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D084, 0x0021 };
    uint32_t const ces[9] = { 0x1072, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_025)
{
    // 1D084 003F;	
    // (ùÇÑ) BYZANTINE MUSICAL SYMBOL APODERMA NEO	[1072 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D084, 0x003F };
    uint32_t const ces[9] = { 0x1072, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_026)
{
    // 1D084 0061;	
    // (ùÇÑ) BYZANTINE MUSICAL SYMBOL APODERMA NEO	[1072 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D084, 0x0061 };
    uint32_t const ces[9] = { 0x1072, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_027)
{
    // 1D084 0041;	
    // (ùÇÑ) BYZANTINE MUSICAL SYMBOL APODERMA NEO	[1072 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D084, 0x0041 };
    uint32_t const ces[9] = { 0x1072, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_028)
{
    // 1D084 0062;	
    // (ùÇÑ) BYZANTINE MUSICAL SYMBOL APODERMA NEO	[1072 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D084, 0x0062 };
    uint32_t const ces[9] = { 0x1072, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_029)
{
    // 1D085 0021;	
    // (ùÇÖ) BYZANTINE MUSICAL SYMBOL APLI	[1073 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D085, 0x0021 };
    uint32_t const ces[9] = { 0x1073, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_030)
{
    // 1D085 003F;	
    // (ùÇÖ) BYZANTINE MUSICAL SYMBOL APLI	[1073 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D085, 0x003F };
    uint32_t const ces[9] = { 0x1073, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_031)
{
    // 1D085 0061;	
    // (ùÇÖ) BYZANTINE MUSICAL SYMBOL APLI	[1073 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D085, 0x0061 };
    uint32_t const ces[9] = { 0x1073, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_032)
{
    // 1D085 0041;	
    // (ùÇÖ) BYZANTINE MUSICAL SYMBOL APLI	[1073 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D085, 0x0041 };
    uint32_t const ces[9] = { 0x1073, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_033)
{
    // 1D085 0062;	
    // (ùÇÖ) BYZANTINE MUSICAL SYMBOL APLI	[1073 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D085, 0x0062 };
    uint32_t const ces[9] = { 0x1073, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_034)
{
    // 1D086 0021;	
    // (ùÇÜ) BYZANTINE MUSICAL SYMBOL DIPLI	[1074 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D086, 0x0021 };
    uint32_t const ces[9] = { 0x1074, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_035)
{
    // 1D086 003F;	
    // (ùÇÜ) BYZANTINE MUSICAL SYMBOL DIPLI	[1074 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D086, 0x003F };
    uint32_t const ces[9] = { 0x1074, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_036)
{
    // 1D086 0061;	
    // (ùÇÜ) BYZANTINE MUSICAL SYMBOL DIPLI	[1074 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D086, 0x0061 };
    uint32_t const ces[9] = { 0x1074, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_037)
{
    // 1D086 0041;	
    // (ùÇÜ) BYZANTINE MUSICAL SYMBOL DIPLI	[1074 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D086, 0x0041 };
    uint32_t const ces[9] = { 0x1074, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_038)
{
    // 1D086 0062;	
    // (ùÇÜ) BYZANTINE MUSICAL SYMBOL DIPLI	[1074 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D086, 0x0062 };
    uint32_t const ces[9] = { 0x1074, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_039)
{
    // 1D087 0021;	
    // (ùÇá) BYZANTINE MUSICAL SYMBOL TRIPLI	[1075 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D087, 0x0021 };
    uint32_t const ces[9] = { 0x1075, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_040)
{
    // 1D087 003F;	
    // (ùÇá) BYZANTINE MUSICAL SYMBOL TRIPLI	[1075 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D087, 0x003F };
    uint32_t const ces[9] = { 0x1075, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_041)
{
    // 1D087 0061;	
    // (ùÇá) BYZANTINE MUSICAL SYMBOL TRIPLI	[1075 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D087, 0x0061 };
    uint32_t const ces[9] = { 0x1075, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_042)
{
    // 1D087 0041;	
    // (ùÇá) BYZANTINE MUSICAL SYMBOL TRIPLI	[1075 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D087, 0x0041 };
    uint32_t const ces[9] = { 0x1075, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_043)
{
    // 1D087 0062;	
    // (ùÇá) BYZANTINE MUSICAL SYMBOL TRIPLI	[1075 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D087, 0x0062 };
    uint32_t const ces[9] = { 0x1075, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_044)
{
    // 1D088 0021;	
    // (ùÇà) BYZANTINE MUSICAL SYMBOL TETRAPLI	[1076 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D088, 0x0021 };
    uint32_t const ces[9] = { 0x1076, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_045)
{
    // 1D088 003F;	
    // (ùÇà) BYZANTINE MUSICAL SYMBOL TETRAPLI	[1076 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D088, 0x003F };
    uint32_t const ces[9] = { 0x1076, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_046)
{
    // 1D088 0061;	
    // (ùÇà) BYZANTINE MUSICAL SYMBOL TETRAPLI	[1076 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D088, 0x0061 };
    uint32_t const ces[9] = { 0x1076, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_047)
{
    // 1D088 0041;	
    // (ùÇà) BYZANTINE MUSICAL SYMBOL TETRAPLI	[1076 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D088, 0x0041 };
    uint32_t const ces[9] = { 0x1076, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_048)
{
    // 1D088 0062;	
    // (ùÇà) BYZANTINE MUSICAL SYMBOL TETRAPLI	[1076 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D088, 0x0062 };
    uint32_t const ces[9] = { 0x1076, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_049)
{
    // 1D089 0021;	
    // (ùÇâ) BYZANTINE MUSICAL SYMBOL KORONIS	[1077 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D089, 0x0021 };
    uint32_t const ces[9] = { 0x1077, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_050)
{
    // 1D089 003F;	
    // (ùÇâ) BYZANTINE MUSICAL SYMBOL KORONIS	[1077 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D089, 0x003F };
    uint32_t const ces[9] = { 0x1077, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_051)
{
    // 1D089 0061;	
    // (ùÇâ) BYZANTINE MUSICAL SYMBOL KORONIS	[1077 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D089, 0x0061 };
    uint32_t const ces[9] = { 0x1077, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_052)
{
    // 1D089 0041;	
    // (ùÇâ) BYZANTINE MUSICAL SYMBOL KORONIS	[1077 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D089, 0x0041 };
    uint32_t const ces[9] = { 0x1077, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_053)
{
    // 1D089 0062;	
    // (ùÇâ) BYZANTINE MUSICAL SYMBOL KORONIS	[1077 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D089, 0x0062 };
    uint32_t const ces[9] = { 0x1077, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_054)
{
    // 1D08A 0021;	
    // (ùÇä) BYZANTINE MUSICAL SYMBOL LEIMMA ENOS CHRONOU	[1078 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08A, 0x0021 };
    uint32_t const ces[9] = { 0x1078, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_055)
{
    // 1D08A 003F;	
    // (ùÇä) BYZANTINE MUSICAL SYMBOL LEIMMA ENOS CHRONOU	[1078 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08A, 0x003F };
    uint32_t const ces[9] = { 0x1078, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_056)
{
    // 1D08A 0061;	
    // (ùÇä) BYZANTINE MUSICAL SYMBOL LEIMMA ENOS CHRONOU	[1078 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08A, 0x0061 };
    uint32_t const ces[9] = { 0x1078, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_057)
{
    // 1D08A 0041;	
    // (ùÇä) BYZANTINE MUSICAL SYMBOL LEIMMA ENOS CHRONOU	[1078 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D08A, 0x0041 };
    uint32_t const ces[9] = { 0x1078, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_058)
{
    // 1D08A 0062;	
    // (ùÇä) BYZANTINE MUSICAL SYMBOL LEIMMA ENOS CHRONOU	[1078 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08A, 0x0062 };
    uint32_t const ces[9] = { 0x1078, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_059)
{
    // 1D08B 0021;	
    // (ùÇã) BYZANTINE MUSICAL SYMBOL LEIMMA DYO CHRONON	[1079 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08B, 0x0021 };
    uint32_t const ces[9] = { 0x1079, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_060)
{
    // 1D08B 003F;	
    // (ùÇã) BYZANTINE MUSICAL SYMBOL LEIMMA DYO CHRONON	[1079 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08B, 0x003F };
    uint32_t const ces[9] = { 0x1079, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_061)
{
    // 1D08B 0061;	
    // (ùÇã) BYZANTINE MUSICAL SYMBOL LEIMMA DYO CHRONON	[1079 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08B, 0x0061 };
    uint32_t const ces[9] = { 0x1079, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_062)
{
    // 1D08B 0041;	
    // (ùÇã) BYZANTINE MUSICAL SYMBOL LEIMMA DYO CHRONON	[1079 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D08B, 0x0041 };
    uint32_t const ces[9] = { 0x1079, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_063)
{
    // 1D08B 0062;	
    // (ùÇã) BYZANTINE MUSICAL SYMBOL LEIMMA DYO CHRONON	[1079 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08B, 0x0062 };
    uint32_t const ces[9] = { 0x1079, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_064)
{
    // 1D08C 0021;	
    // (ùÇå) BYZANTINE MUSICAL SYMBOL LEIMMA TRION CHRONON	[107A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08C, 0x0021 };
    uint32_t const ces[9] = { 0x107A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_065)
{
    // 1D08C 003F;	
    // (ùÇå) BYZANTINE MUSICAL SYMBOL LEIMMA TRION CHRONON	[107A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08C, 0x003F };
    uint32_t const ces[9] = { 0x107A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_066)
{
    // 1D08C 0061;	
    // (ùÇå) BYZANTINE MUSICAL SYMBOL LEIMMA TRION CHRONON	[107A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08C, 0x0061 };
    uint32_t const ces[9] = { 0x107A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_067)
{
    // 1D08C 0041;	
    // (ùÇå) BYZANTINE MUSICAL SYMBOL LEIMMA TRION CHRONON	[107A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D08C, 0x0041 };
    uint32_t const ces[9] = { 0x107A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_068)
{
    // 1D08C 0062;	
    // (ùÇå) BYZANTINE MUSICAL SYMBOL LEIMMA TRION CHRONON	[107A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08C, 0x0062 };
    uint32_t const ces[9] = { 0x107A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_069)
{
    // 1D08D 0021;	
    // (ùÇç) BYZANTINE MUSICAL SYMBOL LEIMMA TESSARON CHRONON	[107B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08D, 0x0021 };
    uint32_t const ces[9] = { 0x107B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_070)
{
    // 1D08D 003F;	
    // (ùÇç) BYZANTINE MUSICAL SYMBOL LEIMMA TESSARON CHRONON	[107B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08D, 0x003F };
    uint32_t const ces[9] = { 0x107B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_071)
{
    // 1D08D 0061;	
    // (ùÇç) BYZANTINE MUSICAL SYMBOL LEIMMA TESSARON CHRONON	[107B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08D, 0x0061 };
    uint32_t const ces[9] = { 0x107B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_072)
{
    // 1D08D 0041;	
    // (ùÇç) BYZANTINE MUSICAL SYMBOL LEIMMA TESSARON CHRONON	[107B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D08D, 0x0041 };
    uint32_t const ces[9] = { 0x107B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_073)
{
    // 1D08D 0062;	
    // (ùÇç) BYZANTINE MUSICAL SYMBOL LEIMMA TESSARON CHRONON	[107B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08D, 0x0062 };
    uint32_t const ces[9] = { 0x107B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_074)
{
    // 1D08E 0021;	
    // (ùÇé) BYZANTINE MUSICAL SYMBOL LEIMMA IMISEOS CHRONOU	[107C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08E, 0x0021 };
    uint32_t const ces[9] = { 0x107C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_075)
{
    // 1D08E 003F;	
    // (ùÇé) BYZANTINE MUSICAL SYMBOL LEIMMA IMISEOS CHRONOU	[107C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08E, 0x003F };
    uint32_t const ces[9] = { 0x107C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_076)
{
    // 1D08E 0061;	
    // (ùÇé) BYZANTINE MUSICAL SYMBOL LEIMMA IMISEOS CHRONOU	[107C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08E, 0x0061 };
    uint32_t const ces[9] = { 0x107C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_077)
{
    // 1D08E 0041;	
    // (ùÇé) BYZANTINE MUSICAL SYMBOL LEIMMA IMISEOS CHRONOU	[107C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D08E, 0x0041 };
    uint32_t const ces[9] = { 0x107C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_078)
{
    // 1D08E 0062;	
    // (ùÇé) BYZANTINE MUSICAL SYMBOL LEIMMA IMISEOS CHRONOU	[107C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08E, 0x0062 };
    uint32_t const ces[9] = { 0x107C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_079)
{
    // 1D08F 0021;	
    // (ùÇè) BYZANTINE MUSICAL SYMBOL GORGON NEO ANO	[107D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08F, 0x0021 };
    uint32_t const ces[9] = { 0x107D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_080)
{
    // 1D08F 003F;	
    // (ùÇè) BYZANTINE MUSICAL SYMBOL GORGON NEO ANO	[107D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08F, 0x003F };
    uint32_t const ces[9] = { 0x107D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_081)
{
    // 1D08F 0061;	
    // (ùÇè) BYZANTINE MUSICAL SYMBOL GORGON NEO ANO	[107D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08F, 0x0061 };
    uint32_t const ces[9] = { 0x107D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_082)
{
    // 1D08F 0041;	
    // (ùÇè) BYZANTINE MUSICAL SYMBOL GORGON NEO ANO	[107D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D08F, 0x0041 };
    uint32_t const ces[9] = { 0x107D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_083)
{
    // 1D08F 0062;	
    // (ùÇè) BYZANTINE MUSICAL SYMBOL GORGON NEO ANO	[107D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D08F, 0x0062 };
    uint32_t const ces[9] = { 0x107D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_084)
{
    // 1D090 0021;	
    // (ùÇê) BYZANTINE MUSICAL SYMBOL GORGON PARESTIGMENON ARISTERA	[107E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D090, 0x0021 };
    uint32_t const ces[9] = { 0x107E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_085)
{
    // 1D090 003F;	
    // (ùÇê) BYZANTINE MUSICAL SYMBOL GORGON PARESTIGMENON ARISTERA	[107E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D090, 0x003F };
    uint32_t const ces[9] = { 0x107E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_086)
{
    // 1D090 0061;	
    // (ùÇê) BYZANTINE MUSICAL SYMBOL GORGON PARESTIGMENON ARISTERA	[107E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D090, 0x0061 };
    uint32_t const ces[9] = { 0x107E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_087)
{
    // 1D090 0041;	
    // (ùÇê) BYZANTINE MUSICAL SYMBOL GORGON PARESTIGMENON ARISTERA	[107E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D090, 0x0041 };
    uint32_t const ces[9] = { 0x107E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_088)
{
    // 1D090 0062;	
    // (ùÇê) BYZANTINE MUSICAL SYMBOL GORGON PARESTIGMENON ARISTERA	[107E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D090, 0x0062 };
    uint32_t const ces[9] = { 0x107E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_089)
{
    // 1D091 0021;	
    // (ùÇë) BYZANTINE MUSICAL SYMBOL GORGON PARESTIGMENON DEXIA	[107F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D091, 0x0021 };
    uint32_t const ces[9] = { 0x107F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_090)
{
    // 1D091 003F;	
    // (ùÇë) BYZANTINE MUSICAL SYMBOL GORGON PARESTIGMENON DEXIA	[107F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D091, 0x003F };
    uint32_t const ces[9] = { 0x107F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_091)
{
    // 1D091 0061;	
    // (ùÇë) BYZANTINE MUSICAL SYMBOL GORGON PARESTIGMENON DEXIA	[107F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D091, 0x0061 };
    uint32_t const ces[9] = { 0x107F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_092)
{
    // 1D091 0041;	
    // (ùÇë) BYZANTINE MUSICAL SYMBOL GORGON PARESTIGMENON DEXIA	[107F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D091, 0x0041 };
    uint32_t const ces[9] = { 0x107F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_093)
{
    // 1D091 0062;	
    // (ùÇë) BYZANTINE MUSICAL SYMBOL GORGON PARESTIGMENON DEXIA	[107F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D091, 0x0062 };
    uint32_t const ces[9] = { 0x107F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_094)
{
    // 1D092 0021;	
    // (ùÇí) BYZANTINE MUSICAL SYMBOL DIGORGON	[1080 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D092, 0x0021 };
    uint32_t const ces[9] = { 0x1080, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_095)
{
    // 1D092 003F;	
    // (ùÇí) BYZANTINE MUSICAL SYMBOL DIGORGON	[1080 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D092, 0x003F };
    uint32_t const ces[9] = { 0x1080, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_096)
{
    // 1D092 0061;	
    // (ùÇí) BYZANTINE MUSICAL SYMBOL DIGORGON	[1080 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D092, 0x0061 };
    uint32_t const ces[9] = { 0x1080, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_097)
{
    // 1D092 0041;	
    // (ùÇí) BYZANTINE MUSICAL SYMBOL DIGORGON	[1080 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D092, 0x0041 };
    uint32_t const ces[9] = { 0x1080, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_098)
{
    // 1D092 0062;	
    // (ùÇí) BYZANTINE MUSICAL SYMBOL DIGORGON	[1080 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D092, 0x0062 };
    uint32_t const ces[9] = { 0x1080, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_099)
{
    // 1D093 0021;	
    // (ùÇì) BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON ARISTERA KATO	[1081 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D093, 0x0021 };
    uint32_t const ces[9] = { 0x1081, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_100)
{
    // 1D093 003F;	
    // (ùÇì) BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON ARISTERA KATO	[1081 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D093, 0x003F };
    uint32_t const ces[9] = { 0x1081, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_101)
{
    // 1D093 0061;	
    // (ùÇì) BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON ARISTERA KATO	[1081 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D093, 0x0061 };
    uint32_t const ces[9] = { 0x1081, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_102)
{
    // 1D093 0041;	
    // (ùÇì) BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON ARISTERA KATO	[1081 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D093, 0x0041 };
    uint32_t const ces[9] = { 0x1081, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_103)
{
    // 1D093 0062;	
    // (ùÇì) BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON ARISTERA KATO	[1081 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D093, 0x0062 };
    uint32_t const ces[9] = { 0x1081, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_104)
{
    // 1D094 0021;	
    // (ùÇî) BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON ARISTERA ANO	[1082 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D094, 0x0021 };
    uint32_t const ces[9] = { 0x1082, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_105)
{
    // 1D094 003F;	
    // (ùÇî) BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON ARISTERA ANO	[1082 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D094, 0x003F };
    uint32_t const ces[9] = { 0x1082, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_106)
{
    // 1D094 0061;	
    // (ùÇî) BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON ARISTERA ANO	[1082 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D094, 0x0061 };
    uint32_t const ces[9] = { 0x1082, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_107)
{
    // 1D094 0041;	
    // (ùÇî) BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON ARISTERA ANO	[1082 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D094, 0x0041 };
    uint32_t const ces[9] = { 0x1082, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_108)
{
    // 1D094 0062;	
    // (ùÇî) BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON ARISTERA ANO	[1082 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D094, 0x0062 };
    uint32_t const ces[9] = { 0x1082, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_109)
{
    // 1D095 0021;	
    // (ùÇï) BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON DEXIA	[1083 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D095, 0x0021 };
    uint32_t const ces[9] = { 0x1083, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_110)
{
    // 1D095 003F;	
    // (ùÇï) BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON DEXIA	[1083 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D095, 0x003F };
    uint32_t const ces[9] = { 0x1083, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_111)
{
    // 1D095 0061;	
    // (ùÇï) BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON DEXIA	[1083 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D095, 0x0061 };
    uint32_t const ces[9] = { 0x1083, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_112)
{
    // 1D095 0041;	
    // (ùÇï) BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON DEXIA	[1083 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D095, 0x0041 };
    uint32_t const ces[9] = { 0x1083, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_113)
{
    // 1D095 0062;	
    // (ùÇï) BYZANTINE MUSICAL SYMBOL DIGORGON PARESTIGMENON DEXIA	[1083 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D095, 0x0062 };
    uint32_t const ces[9] = { 0x1083, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_114)
{
    // 1D096 0021;	
    // (ùÇñ) BYZANTINE MUSICAL SYMBOL TRIGORGON	[1084 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D096, 0x0021 };
    uint32_t const ces[9] = { 0x1084, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_115)
{
    // 1D096 003F;	
    // (ùÇñ) BYZANTINE MUSICAL SYMBOL TRIGORGON	[1084 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D096, 0x003F };
    uint32_t const ces[9] = { 0x1084, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_116)
{
    // 1D096 0061;	
    // (ùÇñ) BYZANTINE MUSICAL SYMBOL TRIGORGON	[1084 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D096, 0x0061 };
    uint32_t const ces[9] = { 0x1084, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_117)
{
    // 1D096 0041;	
    // (ùÇñ) BYZANTINE MUSICAL SYMBOL TRIGORGON	[1084 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D096, 0x0041 };
    uint32_t const ces[9] = { 0x1084, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_118)
{
    // 1D096 0062;	
    // (ùÇñ) BYZANTINE MUSICAL SYMBOL TRIGORGON	[1084 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D096, 0x0062 };
    uint32_t const ces[9] = { 0x1084, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_119)
{
    // 1D097 0021;	
    // (ùÇó) BYZANTINE MUSICAL SYMBOL ARGON	[1085 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D097, 0x0021 };
    uint32_t const ces[9] = { 0x1085, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_120)
{
    // 1D097 003F;	
    // (ùÇó) BYZANTINE MUSICAL SYMBOL ARGON	[1085 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D097, 0x003F };
    uint32_t const ces[9] = { 0x1085, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_121)
{
    // 1D097 0061;	
    // (ùÇó) BYZANTINE MUSICAL SYMBOL ARGON	[1085 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D097, 0x0061 };
    uint32_t const ces[9] = { 0x1085, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_122)
{
    // 1D097 0041;	
    // (ùÇó) BYZANTINE MUSICAL SYMBOL ARGON	[1085 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D097, 0x0041 };
    uint32_t const ces[9] = { 0x1085, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_123)
{
    // 1D097 0062;	
    // (ùÇó) BYZANTINE MUSICAL SYMBOL ARGON	[1085 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D097, 0x0062 };
    uint32_t const ces[9] = { 0x1085, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_124)
{
    // 1D098 0021;	
    // (ùÇò) BYZANTINE MUSICAL SYMBOL IMIDIARGON	[1086 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D098, 0x0021 };
    uint32_t const ces[9] = { 0x1086, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_125)
{
    // 1D098 003F;	
    // (ùÇò) BYZANTINE MUSICAL SYMBOL IMIDIARGON	[1086 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D098, 0x003F };
    uint32_t const ces[9] = { 0x1086, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_126)
{
    // 1D098 0061;	
    // (ùÇò) BYZANTINE MUSICAL SYMBOL IMIDIARGON	[1086 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D098, 0x0061 };
    uint32_t const ces[9] = { 0x1086, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_127)
{
    // 1D098 0041;	
    // (ùÇò) BYZANTINE MUSICAL SYMBOL IMIDIARGON	[1086 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D098, 0x0041 };
    uint32_t const ces[9] = { 0x1086, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_128)
{
    // 1D098 0062;	
    // (ùÇò) BYZANTINE MUSICAL SYMBOL IMIDIARGON	[1086 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D098, 0x0062 };
    uint32_t const ces[9] = { 0x1086, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_129)
{
    // 1D099 0021;	
    // (ùÇô) BYZANTINE MUSICAL SYMBOL DIARGON	[1087 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D099, 0x0021 };
    uint32_t const ces[9] = { 0x1087, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_130)
{
    // 1D099 003F;	
    // (ùÇô) BYZANTINE MUSICAL SYMBOL DIARGON	[1087 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D099, 0x003F };
    uint32_t const ces[9] = { 0x1087, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_131)
{
    // 1D099 0061;	
    // (ùÇô) BYZANTINE MUSICAL SYMBOL DIARGON	[1087 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D099, 0x0061 };
    uint32_t const ces[9] = { 0x1087, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_132)
{
    // 1D099 0041;	
    // (ùÇô) BYZANTINE MUSICAL SYMBOL DIARGON	[1087 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D099, 0x0041 };
    uint32_t const ces[9] = { 0x1087, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_133)
{
    // 1D099 0062;	
    // (ùÇô) BYZANTINE MUSICAL SYMBOL DIARGON	[1087 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D099, 0x0062 };
    uint32_t const ces[9] = { 0x1087, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_134)
{
    // 1D09A 0021;	
    // (ùÇö) BYZANTINE MUSICAL SYMBOL AGOGI POLI ARGI	[1088 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09A, 0x0021 };
    uint32_t const ces[9] = { 0x1088, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_135)
{
    // 1D09A 003F;	
    // (ùÇö) BYZANTINE MUSICAL SYMBOL AGOGI POLI ARGI	[1088 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09A, 0x003F };
    uint32_t const ces[9] = { 0x1088, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_136)
{
    // 1D09A 0061;	
    // (ùÇö) BYZANTINE MUSICAL SYMBOL AGOGI POLI ARGI	[1088 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09A, 0x0061 };
    uint32_t const ces[9] = { 0x1088, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_137)
{
    // 1D09A 0041;	
    // (ùÇö) BYZANTINE MUSICAL SYMBOL AGOGI POLI ARGI	[1088 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D09A, 0x0041 };
    uint32_t const ces[9] = { 0x1088, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_138)
{
    // 1D09A 0062;	
    // (ùÇö) BYZANTINE MUSICAL SYMBOL AGOGI POLI ARGI	[1088 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09A, 0x0062 };
    uint32_t const ces[9] = { 0x1088, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_139)
{
    // 1D09B 0021;	
    // (ùÇõ) BYZANTINE MUSICAL SYMBOL AGOGI ARGOTERI	[1089 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09B, 0x0021 };
    uint32_t const ces[9] = { 0x1089, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_140)
{
    // 1D09B 003F;	
    // (ùÇõ) BYZANTINE MUSICAL SYMBOL AGOGI ARGOTERI	[1089 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09B, 0x003F };
    uint32_t const ces[9] = { 0x1089, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_141)
{
    // 1D09B 0061;	
    // (ùÇõ) BYZANTINE MUSICAL SYMBOL AGOGI ARGOTERI	[1089 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09B, 0x0061 };
    uint32_t const ces[9] = { 0x1089, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_142)
{
    // 1D09B 0041;	
    // (ùÇõ) BYZANTINE MUSICAL SYMBOL AGOGI ARGOTERI	[1089 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D09B, 0x0041 };
    uint32_t const ces[9] = { 0x1089, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_143)
{
    // 1D09B 0062;	
    // (ùÇõ) BYZANTINE MUSICAL SYMBOL AGOGI ARGOTERI	[1089 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09B, 0x0062 };
    uint32_t const ces[9] = { 0x1089, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_144)
{
    // 1D09C 0021;	
    // (ùÇú) BYZANTINE MUSICAL SYMBOL AGOGI ARGI	[108A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09C, 0x0021 };
    uint32_t const ces[9] = { 0x108A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_145)
{
    // 1D09C 003F;	
    // (ùÇú) BYZANTINE MUSICAL SYMBOL AGOGI ARGI	[108A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09C, 0x003F };
    uint32_t const ces[9] = { 0x108A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_146)
{
    // 1D09C 0061;	
    // (ùÇú) BYZANTINE MUSICAL SYMBOL AGOGI ARGI	[108A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09C, 0x0061 };
    uint32_t const ces[9] = { 0x108A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_147)
{
    // 1D09C 0041;	
    // (ùÇú) BYZANTINE MUSICAL SYMBOL AGOGI ARGI	[108A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D09C, 0x0041 };
    uint32_t const ces[9] = { 0x108A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_148)
{
    // 1D09C 0062;	
    // (ùÇú) BYZANTINE MUSICAL SYMBOL AGOGI ARGI	[108A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09C, 0x0062 };
    uint32_t const ces[9] = { 0x108A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_149)
{
    // 1D09D 0021;	
    // (ùÇù) BYZANTINE MUSICAL SYMBOL AGOGI METRIA	[108B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09D, 0x0021 };
    uint32_t const ces[9] = { 0x108B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_150)
{
    // 1D09D 003F;	
    // (ùÇù) BYZANTINE MUSICAL SYMBOL AGOGI METRIA	[108B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09D, 0x003F };
    uint32_t const ces[9] = { 0x108B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_151)
{
    // 1D09D 0061;	
    // (ùÇù) BYZANTINE MUSICAL SYMBOL AGOGI METRIA	[108B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09D, 0x0061 };
    uint32_t const ces[9] = { 0x108B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_152)
{
    // 1D09D 0041;	
    // (ùÇù) BYZANTINE MUSICAL SYMBOL AGOGI METRIA	[108B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D09D, 0x0041 };
    uint32_t const ces[9] = { 0x108B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_153)
{
    // 1D09D 0062;	
    // (ùÇù) BYZANTINE MUSICAL SYMBOL AGOGI METRIA	[108B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09D, 0x0062 };
    uint32_t const ces[9] = { 0x108B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_154)
{
    // 1D09E 0021;	
    // (ùÇû) BYZANTINE MUSICAL SYMBOL AGOGI MESI	[108C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09E, 0x0021 };
    uint32_t const ces[9] = { 0x108C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_155)
{
    // 1D09E 003F;	
    // (ùÇû) BYZANTINE MUSICAL SYMBOL AGOGI MESI	[108C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09E, 0x003F };
    uint32_t const ces[9] = { 0x108C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_156)
{
    // 1D09E 0061;	
    // (ùÇû) BYZANTINE MUSICAL SYMBOL AGOGI MESI	[108C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09E, 0x0061 };
    uint32_t const ces[9] = { 0x108C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_157)
{
    // 1D09E 0041;	
    // (ùÇû) BYZANTINE MUSICAL SYMBOL AGOGI MESI	[108C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D09E, 0x0041 };
    uint32_t const ces[9] = { 0x108C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_158)
{
    // 1D09E 0062;	
    // (ùÇû) BYZANTINE MUSICAL SYMBOL AGOGI MESI	[108C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09E, 0x0062 };
    uint32_t const ces[9] = { 0x108C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_159)
{
    // 1D09F 0021;	
    // (ùÇü) BYZANTINE MUSICAL SYMBOL AGOGI GORGI	[108D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09F, 0x0021 };
    uint32_t const ces[9] = { 0x108D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_160)
{
    // 1D09F 003F;	
    // (ùÇü) BYZANTINE MUSICAL SYMBOL AGOGI GORGI	[108D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09F, 0x003F };
    uint32_t const ces[9] = { 0x108D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_161)
{
    // 1D09F 0061;	
    // (ùÇü) BYZANTINE MUSICAL SYMBOL AGOGI GORGI	[108D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09F, 0x0061 };
    uint32_t const ces[9] = { 0x108D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_162)
{
    // 1D09F 0041;	
    // (ùÇü) BYZANTINE MUSICAL SYMBOL AGOGI GORGI	[108D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D09F, 0x0041 };
    uint32_t const ces[9] = { 0x108D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_163)
{
    // 1D09F 0062;	
    // (ùÇü) BYZANTINE MUSICAL SYMBOL AGOGI GORGI	[108D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D09F, 0x0062 };
    uint32_t const ces[9] = { 0x108D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_164)
{
    // 1D0A0 0021;	
    // (ùÇ†) BYZANTINE MUSICAL SYMBOL AGOGI GORGOTERI	[108E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A0, 0x0021 };
    uint32_t const ces[9] = { 0x108E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_165)
{
    // 1D0A0 003F;	
    // (ùÇ†) BYZANTINE MUSICAL SYMBOL AGOGI GORGOTERI	[108E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A0, 0x003F };
    uint32_t const ces[9] = { 0x108E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_166)
{
    // 1D0A0 0061;	
    // (ùÇ†) BYZANTINE MUSICAL SYMBOL AGOGI GORGOTERI	[108E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A0, 0x0061 };
    uint32_t const ces[9] = { 0x108E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_167)
{
    // 1D0A0 0041;	
    // (ùÇ†) BYZANTINE MUSICAL SYMBOL AGOGI GORGOTERI	[108E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0A0, 0x0041 };
    uint32_t const ces[9] = { 0x108E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_168)
{
    // 1D0A0 0062;	
    // (ùÇ†) BYZANTINE MUSICAL SYMBOL AGOGI GORGOTERI	[108E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A0, 0x0062 };
    uint32_t const ces[9] = { 0x108E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_169)
{
    // 1D0A1 0021;	
    // (ùÇ°) BYZANTINE MUSICAL SYMBOL AGOGI POLI GORGI	[108F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A1, 0x0021 };
    uint32_t const ces[9] = { 0x108F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_170)
{
    // 1D0A1 003F;	
    // (ùÇ°) BYZANTINE MUSICAL SYMBOL AGOGI POLI GORGI	[108F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A1, 0x003F };
    uint32_t const ces[9] = { 0x108F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_171)
{
    // 1D0A1 0061;	
    // (ùÇ°) BYZANTINE MUSICAL SYMBOL AGOGI POLI GORGI	[108F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A1, 0x0061 };
    uint32_t const ces[9] = { 0x108F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_172)
{
    // 1D0A1 0041;	
    // (ùÇ°) BYZANTINE MUSICAL SYMBOL AGOGI POLI GORGI	[108F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0A1, 0x0041 };
    uint32_t const ces[9] = { 0x108F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_173)
{
    // 1D0A1 0062;	
    // (ùÇ°) BYZANTINE MUSICAL SYMBOL AGOGI POLI GORGI	[108F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A1, 0x0062 };
    uint32_t const ces[9] = { 0x108F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_174)
{
    // 1D0A2 0021;	
    // (ùÇ¢) BYZANTINE MUSICAL SYMBOL MARTYRIA PROTOS ICHOS	[1090 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A2, 0x0021 };
    uint32_t const ces[9] = { 0x1090, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_175)
{
    // 1D0A2 003F;	
    // (ùÇ¢) BYZANTINE MUSICAL SYMBOL MARTYRIA PROTOS ICHOS	[1090 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A2, 0x003F };
    uint32_t const ces[9] = { 0x1090, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_176)
{
    // 1D0A2 0061;	
    // (ùÇ¢) BYZANTINE MUSICAL SYMBOL MARTYRIA PROTOS ICHOS	[1090 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A2, 0x0061 };
    uint32_t const ces[9] = { 0x1090, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_177)
{
    // 1D0A2 0041;	
    // (ùÇ¢) BYZANTINE MUSICAL SYMBOL MARTYRIA PROTOS ICHOS	[1090 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0A2, 0x0041 };
    uint32_t const ces[9] = { 0x1090, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_178)
{
    // 1D0A2 0062;	
    // (ùÇ¢) BYZANTINE MUSICAL SYMBOL MARTYRIA PROTOS ICHOS	[1090 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A2, 0x0062 };
    uint32_t const ces[9] = { 0x1090, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_179)
{
    // 1D0A3 0021;	
    // (ùÇ£) BYZANTINE MUSICAL SYMBOL MARTYRIA ALLI PROTOS ICHOS	[1091 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A3, 0x0021 };
    uint32_t const ces[9] = { 0x1091, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_180)
{
    // 1D0A3 003F;	
    // (ùÇ£) BYZANTINE MUSICAL SYMBOL MARTYRIA ALLI PROTOS ICHOS	[1091 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A3, 0x003F };
    uint32_t const ces[9] = { 0x1091, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_181)
{
    // 1D0A3 0061;	
    // (ùÇ£) BYZANTINE MUSICAL SYMBOL MARTYRIA ALLI PROTOS ICHOS	[1091 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A3, 0x0061 };
    uint32_t const ces[9] = { 0x1091, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_182)
{
    // 1D0A3 0041;	
    // (ùÇ£) BYZANTINE MUSICAL SYMBOL MARTYRIA ALLI PROTOS ICHOS	[1091 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0A3, 0x0041 };
    uint32_t const ces[9] = { 0x1091, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_183)
{
    // 1D0A3 0062;	
    // (ùÇ£) BYZANTINE MUSICAL SYMBOL MARTYRIA ALLI PROTOS ICHOS	[1091 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A3, 0x0062 };
    uint32_t const ces[9] = { 0x1091, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_184)
{
    // 1D0A4 0021;	
    // (ùÇ§) BYZANTINE MUSICAL SYMBOL MARTYRIA DEYTEROS ICHOS	[1092 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A4, 0x0021 };
    uint32_t const ces[9] = { 0x1092, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_185)
{
    // 1D0A4 003F;	
    // (ùÇ§) BYZANTINE MUSICAL SYMBOL MARTYRIA DEYTEROS ICHOS	[1092 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A4, 0x003F };
    uint32_t const ces[9] = { 0x1092, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_186)
{
    // 1D0A4 0061;	
    // (ùÇ§) BYZANTINE MUSICAL SYMBOL MARTYRIA DEYTEROS ICHOS	[1092 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A4, 0x0061 };
    uint32_t const ces[9] = { 0x1092, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_187)
{
    // 1D0A4 0041;	
    // (ùÇ§) BYZANTINE MUSICAL SYMBOL MARTYRIA DEYTEROS ICHOS	[1092 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0A4, 0x0041 };
    uint32_t const ces[9] = { 0x1092, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_188)
{
    // 1D0A4 0062;	
    // (ùÇ§) BYZANTINE MUSICAL SYMBOL MARTYRIA DEYTEROS ICHOS	[1092 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A4, 0x0062 };
    uint32_t const ces[9] = { 0x1092, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_189)
{
    // 1D0A5 0021;	
    // (ùÇ•) BYZANTINE MUSICAL SYMBOL MARTYRIA ALLI DEYTEROS ICHOS	[1093 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A5, 0x0021 };
    uint32_t const ces[9] = { 0x1093, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_190)
{
    // 1D0A5 003F;	
    // (ùÇ•) BYZANTINE MUSICAL SYMBOL MARTYRIA ALLI DEYTEROS ICHOS	[1093 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A5, 0x003F };
    uint32_t const ces[9] = { 0x1093, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_191)
{
    // 1D0A5 0061;	
    // (ùÇ•) BYZANTINE MUSICAL SYMBOL MARTYRIA ALLI DEYTEROS ICHOS	[1093 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A5, 0x0061 };
    uint32_t const ces[9] = { 0x1093, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_192)
{
    // 1D0A5 0041;	
    // (ùÇ•) BYZANTINE MUSICAL SYMBOL MARTYRIA ALLI DEYTEROS ICHOS	[1093 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0A5, 0x0041 };
    uint32_t const ces[9] = { 0x1093, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_193)
{
    // 1D0A5 0062;	
    // (ùÇ•) BYZANTINE MUSICAL SYMBOL MARTYRIA ALLI DEYTEROS ICHOS	[1093 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A5, 0x0062 };
    uint32_t const ces[9] = { 0x1093, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_194)
{
    // 1D0A6 0021;	
    // (ùÇ¶) BYZANTINE MUSICAL SYMBOL MARTYRIA TRITOS ICHOS	[1094 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A6, 0x0021 };
    uint32_t const ces[9] = { 0x1094, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_195)
{
    // 1D0A6 003F;	
    // (ùÇ¶) BYZANTINE MUSICAL SYMBOL MARTYRIA TRITOS ICHOS	[1094 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A6, 0x003F };
    uint32_t const ces[9] = { 0x1094, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_196)
{
    // 1D0A6 0061;	
    // (ùÇ¶) BYZANTINE MUSICAL SYMBOL MARTYRIA TRITOS ICHOS	[1094 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A6, 0x0061 };
    uint32_t const ces[9] = { 0x1094, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_197)
{
    // 1D0A6 0041;	
    // (ùÇ¶) BYZANTINE MUSICAL SYMBOL MARTYRIA TRITOS ICHOS	[1094 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0A6, 0x0041 };
    uint32_t const ces[9] = { 0x1094, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_198)
{
    // 1D0A6 0062;	
    // (ùÇ¶) BYZANTINE MUSICAL SYMBOL MARTYRIA TRITOS ICHOS	[1094 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A6, 0x0062 };
    uint32_t const ces[9] = { 0x1094, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_199)
{
    // 1D0A7 0021;	
    // (ùÇß) BYZANTINE MUSICAL SYMBOL MARTYRIA TRIFONIAS	[1095 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A7, 0x0021 };
    uint32_t const ces[9] = { 0x1095, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_200)
{
    // 1D0A7 003F;	
    // (ùÇß) BYZANTINE MUSICAL SYMBOL MARTYRIA TRIFONIAS	[1095 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A7, 0x003F };
    uint32_t const ces[9] = { 0x1095, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_201)
{
    // 1D0A7 0061;	
    // (ùÇß) BYZANTINE MUSICAL SYMBOL MARTYRIA TRIFONIAS	[1095 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A7, 0x0061 };
    uint32_t const ces[9] = { 0x1095, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_202)
{
    // 1D0A7 0041;	
    // (ùÇß) BYZANTINE MUSICAL SYMBOL MARTYRIA TRIFONIAS	[1095 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0A7, 0x0041 };
    uint32_t const ces[9] = { 0x1095, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_203)
{
    // 1D0A7 0062;	
    // (ùÇß) BYZANTINE MUSICAL SYMBOL MARTYRIA TRIFONIAS	[1095 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A7, 0x0062 };
    uint32_t const ces[9] = { 0x1095, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_204)
{
    // 1D0A8 0021;	
    // (ùÇ®) BYZANTINE MUSICAL SYMBOL MARTYRIA TETARTOS ICHOS	[1096 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A8, 0x0021 };
    uint32_t const ces[9] = { 0x1096, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_205)
{
    // 1D0A8 003F;	
    // (ùÇ®) BYZANTINE MUSICAL SYMBOL MARTYRIA TETARTOS ICHOS	[1096 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A8, 0x003F };
    uint32_t const ces[9] = { 0x1096, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_206)
{
    // 1D0A8 0061;	
    // (ùÇ®) BYZANTINE MUSICAL SYMBOL MARTYRIA TETARTOS ICHOS	[1096 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A8, 0x0061 };
    uint32_t const ces[9] = { 0x1096, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_207)
{
    // 1D0A8 0041;	
    // (ùÇ®) BYZANTINE MUSICAL SYMBOL MARTYRIA TETARTOS ICHOS	[1096 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0A8, 0x0041 };
    uint32_t const ces[9] = { 0x1096, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_208)
{
    // 1D0A8 0062;	
    // (ùÇ®) BYZANTINE MUSICAL SYMBOL MARTYRIA TETARTOS ICHOS	[1096 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A8, 0x0062 };
    uint32_t const ces[9] = { 0x1096, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_209)
{
    // 1D0A9 0021;	
    // (ùÇ©) BYZANTINE MUSICAL SYMBOL MARTYRIA TETARTOS LEGETOS ICHOS	[1097 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A9, 0x0021 };
    uint32_t const ces[9] = { 0x1097, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_210)
{
    // 1D0A9 003F;	
    // (ùÇ©) BYZANTINE MUSICAL SYMBOL MARTYRIA TETARTOS LEGETOS ICHOS	[1097 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A9, 0x003F };
    uint32_t const ces[9] = { 0x1097, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_211)
{
    // 1D0A9 0061;	
    // (ùÇ©) BYZANTINE MUSICAL SYMBOL MARTYRIA TETARTOS LEGETOS ICHOS	[1097 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A9, 0x0061 };
    uint32_t const ces[9] = { 0x1097, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_212)
{
    // 1D0A9 0041;	
    // (ùÇ©) BYZANTINE MUSICAL SYMBOL MARTYRIA TETARTOS LEGETOS ICHOS	[1097 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0A9, 0x0041 };
    uint32_t const ces[9] = { 0x1097, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_213)
{
    // 1D0A9 0062;	
    // (ùÇ©) BYZANTINE MUSICAL SYMBOL MARTYRIA TETARTOS LEGETOS ICHOS	[1097 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0A9, 0x0062 };
    uint32_t const ces[9] = { 0x1097, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_214)
{
    // 1D0AA 0021;	
    // (ùÇ™) BYZANTINE MUSICAL SYMBOL MARTYRIA LEGETOS ICHOS	[1098 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AA, 0x0021 };
    uint32_t const ces[9] = { 0x1098, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_215)
{
    // 1D0AA 003F;	
    // (ùÇ™) BYZANTINE MUSICAL SYMBOL MARTYRIA LEGETOS ICHOS	[1098 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AA, 0x003F };
    uint32_t const ces[9] = { 0x1098, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_216)
{
    // 1D0AA 0061;	
    // (ùÇ™) BYZANTINE MUSICAL SYMBOL MARTYRIA LEGETOS ICHOS	[1098 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AA, 0x0061 };
    uint32_t const ces[9] = { 0x1098, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_217)
{
    // 1D0AA 0041;	
    // (ùÇ™) BYZANTINE MUSICAL SYMBOL MARTYRIA LEGETOS ICHOS	[1098 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0AA, 0x0041 };
    uint32_t const ces[9] = { 0x1098, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_218)
{
    // 1D0AA 0062;	
    // (ùÇ™) BYZANTINE MUSICAL SYMBOL MARTYRIA LEGETOS ICHOS	[1098 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AA, 0x0062 };
    uint32_t const ces[9] = { 0x1098, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_219)
{
    // 1D0AB 0021;	
    // (ùÇ´) BYZANTINE MUSICAL SYMBOL MARTYRIA PLAGIOS ICHOS	[1099 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AB, 0x0021 };
    uint32_t const ces[9] = { 0x1099, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_220)
{
    // 1D0AB 003F;	
    // (ùÇ´) BYZANTINE MUSICAL SYMBOL MARTYRIA PLAGIOS ICHOS	[1099 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AB, 0x003F };
    uint32_t const ces[9] = { 0x1099, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_221)
{
    // 1D0AB 0061;	
    // (ùÇ´) BYZANTINE MUSICAL SYMBOL MARTYRIA PLAGIOS ICHOS	[1099 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AB, 0x0061 };
    uint32_t const ces[9] = { 0x1099, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_222)
{
    // 1D0AB 0041;	
    // (ùÇ´) BYZANTINE MUSICAL SYMBOL MARTYRIA PLAGIOS ICHOS	[1099 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0AB, 0x0041 };
    uint32_t const ces[9] = { 0x1099, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_223)
{
    // 1D0AB 0062;	
    // (ùÇ´) BYZANTINE MUSICAL SYMBOL MARTYRIA PLAGIOS ICHOS	[1099 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AB, 0x0062 };
    uint32_t const ces[9] = { 0x1099, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_224)
{
    // 1D0AC 0021;	
    // (ùÇ¨) BYZANTINE MUSICAL SYMBOL ISAKIA TELOUS ICHIMATOS	[109A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AC, 0x0021 };
    uint32_t const ces[9] = { 0x109A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_225)
{
    // 1D0AC 003F;	
    // (ùÇ¨) BYZANTINE MUSICAL SYMBOL ISAKIA TELOUS ICHIMATOS	[109A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AC, 0x003F };
    uint32_t const ces[9] = { 0x109A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_226)
{
    // 1D0AC 0061;	
    // (ùÇ¨) BYZANTINE MUSICAL SYMBOL ISAKIA TELOUS ICHIMATOS	[109A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AC, 0x0061 };
    uint32_t const ces[9] = { 0x109A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_227)
{
    // 1D0AC 0041;	
    // (ùÇ¨) BYZANTINE MUSICAL SYMBOL ISAKIA TELOUS ICHIMATOS	[109A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0AC, 0x0041 };
    uint32_t const ces[9] = { 0x109A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_228)
{
    // 1D0AC 0062;	
    // (ùÇ¨) BYZANTINE MUSICAL SYMBOL ISAKIA TELOUS ICHIMATOS	[109A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AC, 0x0062 };
    uint32_t const ces[9] = { 0x109A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_229)
{
    // 1D0AD 0021;	
    // (ùÇ≠) BYZANTINE MUSICAL SYMBOL APOSTROFOI TELOUS ICHIMATOS	[109B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AD, 0x0021 };
    uint32_t const ces[9] = { 0x109B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_230)
{
    // 1D0AD 003F;	
    // (ùÇ≠) BYZANTINE MUSICAL SYMBOL APOSTROFOI TELOUS ICHIMATOS	[109B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AD, 0x003F };
    uint32_t const ces[9] = { 0x109B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_231)
{
    // 1D0AD 0061;	
    // (ùÇ≠) BYZANTINE MUSICAL SYMBOL APOSTROFOI TELOUS ICHIMATOS	[109B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AD, 0x0061 };
    uint32_t const ces[9] = { 0x109B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_232)
{
    // 1D0AD 0041;	
    // (ùÇ≠) BYZANTINE MUSICAL SYMBOL APOSTROFOI TELOUS ICHIMATOS	[109B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0AD, 0x0041 };
    uint32_t const ces[9] = { 0x109B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_233)
{
    // 1D0AD 0062;	
    // (ùÇ≠) BYZANTINE MUSICAL SYMBOL APOSTROFOI TELOUS ICHIMATOS	[109B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AD, 0x0062 };
    uint32_t const ces[9] = { 0x109B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_234)
{
    // 1D0AE 0021;	
    // (ùÇÆ) BYZANTINE MUSICAL SYMBOL FANEROSIS TETRAFONIAS	[109C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AE, 0x0021 };
    uint32_t const ces[9] = { 0x109C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_235)
{
    // 1D0AE 003F;	
    // (ùÇÆ) BYZANTINE MUSICAL SYMBOL FANEROSIS TETRAFONIAS	[109C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AE, 0x003F };
    uint32_t const ces[9] = { 0x109C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_236)
{
    // 1D0AE 0061;	
    // (ùÇÆ) BYZANTINE MUSICAL SYMBOL FANEROSIS TETRAFONIAS	[109C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AE, 0x0061 };
    uint32_t const ces[9] = { 0x109C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_237)
{
    // 1D0AE 0041;	
    // (ùÇÆ) BYZANTINE MUSICAL SYMBOL FANEROSIS TETRAFONIAS	[109C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0AE, 0x0041 };
    uint32_t const ces[9] = { 0x109C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_238)
{
    // 1D0AE 0062;	
    // (ùÇÆ) BYZANTINE MUSICAL SYMBOL FANEROSIS TETRAFONIAS	[109C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AE, 0x0062 };
    uint32_t const ces[9] = { 0x109C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_239)
{
    // 1D0AF 0021;	
    // (ùÇØ) BYZANTINE MUSICAL SYMBOL FANEROSIS MONOFONIAS	[109D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AF, 0x0021 };
    uint32_t const ces[9] = { 0x109D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_240)
{
    // 1D0AF 003F;	
    // (ùÇØ) BYZANTINE MUSICAL SYMBOL FANEROSIS MONOFONIAS	[109D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AF, 0x003F };
    uint32_t const ces[9] = { 0x109D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_241)
{
    // 1D0AF 0061;	
    // (ùÇØ) BYZANTINE MUSICAL SYMBOL FANEROSIS MONOFONIAS	[109D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AF, 0x0061 };
    uint32_t const ces[9] = { 0x109D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_242)
{
    // 1D0AF 0041;	
    // (ùÇØ) BYZANTINE MUSICAL SYMBOL FANEROSIS MONOFONIAS	[109D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0AF, 0x0041 };
    uint32_t const ces[9] = { 0x109D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_243)
{
    // 1D0AF 0062;	
    // (ùÇØ) BYZANTINE MUSICAL SYMBOL FANEROSIS MONOFONIAS	[109D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0AF, 0x0062 };
    uint32_t const ces[9] = { 0x109D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_244)
{
    // 1D0B0 0021;	
    // (ùÇ∞) BYZANTINE MUSICAL SYMBOL FANEROSIS DIFONIAS	[109E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B0, 0x0021 };
    uint32_t const ces[9] = { 0x109E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_245)
{
    // 1D0B0 003F;	
    // (ùÇ∞) BYZANTINE MUSICAL SYMBOL FANEROSIS DIFONIAS	[109E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B0, 0x003F };
    uint32_t const ces[9] = { 0x109E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_246)
{
    // 1D0B0 0061;	
    // (ùÇ∞) BYZANTINE MUSICAL SYMBOL FANEROSIS DIFONIAS	[109E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B0, 0x0061 };
    uint32_t const ces[9] = { 0x109E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_247)
{
    // 1D0B0 0041;	
    // (ùÇ∞) BYZANTINE MUSICAL SYMBOL FANEROSIS DIFONIAS	[109E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0B0, 0x0041 };
    uint32_t const ces[9] = { 0x109E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_248)
{
    // 1D0B0 0062;	
    // (ùÇ∞) BYZANTINE MUSICAL SYMBOL FANEROSIS DIFONIAS	[109E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B0, 0x0062 };
    uint32_t const ces[9] = { 0x109E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_249)
{
    // 1D0B1 0021;	
    // (ùÇ±) BYZANTINE MUSICAL SYMBOL MARTYRIA VARYS ICHOS	[109F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B1, 0x0021 };
    uint32_t const ces[9] = { 0x109F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_250)
{
    // 1D0B1 003F;	
    // (ùÇ±) BYZANTINE MUSICAL SYMBOL MARTYRIA VARYS ICHOS	[109F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B1, 0x003F };
    uint32_t const ces[9] = { 0x109F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_251)
{
    // 1D0B1 0061;	
    // (ùÇ±) BYZANTINE MUSICAL SYMBOL MARTYRIA VARYS ICHOS	[109F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B1, 0x0061 };
    uint32_t const ces[9] = { 0x109F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_252)
{
    // 1D0B1 0041;	
    // (ùÇ±) BYZANTINE MUSICAL SYMBOL MARTYRIA VARYS ICHOS	[109F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0B1, 0x0041 };
    uint32_t const ces[9] = { 0x109F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_253)
{
    // 1D0B1 0062;	
    // (ùÇ±) BYZANTINE MUSICAL SYMBOL MARTYRIA VARYS ICHOS	[109F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B1, 0x0062 };
    uint32_t const ces[9] = { 0x109F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_254)
{
    // 1D0B2 0021;	
    // (ùÇ≤) BYZANTINE MUSICAL SYMBOL MARTYRIA PROTOVARYS ICHOS	[10A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B2, 0x0021 };
    uint32_t const ces[9] = { 0x10A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_255)
{
    // 1D0B2 003F;	
    // (ùÇ≤) BYZANTINE MUSICAL SYMBOL MARTYRIA PROTOVARYS ICHOS	[10A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B2, 0x003F };
    uint32_t const ces[9] = { 0x10A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_256)
{
    // 1D0B2 0061;	
    // (ùÇ≤) BYZANTINE MUSICAL SYMBOL MARTYRIA PROTOVARYS ICHOS	[10A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B2, 0x0061 };
    uint32_t const ces[9] = { 0x10A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_257)
{
    // 1D0B2 0041;	
    // (ùÇ≤) BYZANTINE MUSICAL SYMBOL MARTYRIA PROTOVARYS ICHOS	[10A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0B2, 0x0041 };
    uint32_t const ces[9] = { 0x10A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_258)
{
    // 1D0B2 0062;	
    // (ùÇ≤) BYZANTINE MUSICAL SYMBOL MARTYRIA PROTOVARYS ICHOS	[10A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B2, 0x0062 };
    uint32_t const ces[9] = { 0x10A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_259)
{
    // 1D0B3 0021;	
    // (ùÇ≥) BYZANTINE MUSICAL SYMBOL MARTYRIA PLAGIOS TETARTOS ICHOS	[10A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B3, 0x0021 };
    uint32_t const ces[9] = { 0x10A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_260)
{
    // 1D0B3 003F;	
    // (ùÇ≥) BYZANTINE MUSICAL SYMBOL MARTYRIA PLAGIOS TETARTOS ICHOS	[10A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B3, 0x003F };
    uint32_t const ces[9] = { 0x10A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_261)
{
    // 1D0B3 0061;	
    // (ùÇ≥) BYZANTINE MUSICAL SYMBOL MARTYRIA PLAGIOS TETARTOS ICHOS	[10A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B3, 0x0061 };
    uint32_t const ces[9] = { 0x10A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_262)
{
    // 1D0B3 0041;	
    // (ùÇ≥) BYZANTINE MUSICAL SYMBOL MARTYRIA PLAGIOS TETARTOS ICHOS	[10A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0B3, 0x0041 };
    uint32_t const ces[9] = { 0x10A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_263)
{
    // 1D0B3 0062;	
    // (ùÇ≥) BYZANTINE MUSICAL SYMBOL MARTYRIA PLAGIOS TETARTOS ICHOS	[10A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B3, 0x0062 };
    uint32_t const ces[9] = { 0x10A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_264)
{
    // 1D0B4 0021;	
    // (ùÇ¥) BYZANTINE MUSICAL SYMBOL GORTHMIKON N APLOUN	[10A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B4, 0x0021 };
    uint32_t const ces[9] = { 0x10A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_265)
{
    // 1D0B4 003F;	
    // (ùÇ¥) BYZANTINE MUSICAL SYMBOL GORTHMIKON N APLOUN	[10A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B4, 0x003F };
    uint32_t const ces[9] = { 0x10A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_266)
{
    // 1D0B4 0061;	
    // (ùÇ¥) BYZANTINE MUSICAL SYMBOL GORTHMIKON N APLOUN	[10A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B4, 0x0061 };
    uint32_t const ces[9] = { 0x10A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_267)
{
    // 1D0B4 0041;	
    // (ùÇ¥) BYZANTINE MUSICAL SYMBOL GORTHMIKON N APLOUN	[10A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0B4, 0x0041 };
    uint32_t const ces[9] = { 0x10A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_268)
{
    // 1D0B4 0062;	
    // (ùÇ¥) BYZANTINE MUSICAL SYMBOL GORTHMIKON N APLOUN	[10A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B4, 0x0062 };
    uint32_t const ces[9] = { 0x10A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_269)
{
    // 1D0B5 0021;	
    // (ùÇµ) BYZANTINE MUSICAL SYMBOL GORTHMIKON N DIPLOUN	[10A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B5, 0x0021 };
    uint32_t const ces[9] = { 0x10A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_270)
{
    // 1D0B5 003F;	
    // (ùÇµ) BYZANTINE MUSICAL SYMBOL GORTHMIKON N DIPLOUN	[10A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B5, 0x003F };
    uint32_t const ces[9] = { 0x10A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_271)
{
    // 1D0B5 0061;	
    // (ùÇµ) BYZANTINE MUSICAL SYMBOL GORTHMIKON N DIPLOUN	[10A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B5, 0x0061 };
    uint32_t const ces[9] = { 0x10A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_272)
{
    // 1D0B5 0041;	
    // (ùÇµ) BYZANTINE MUSICAL SYMBOL GORTHMIKON N DIPLOUN	[10A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0B5, 0x0041 };
    uint32_t const ces[9] = { 0x10A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_273)
{
    // 1D0B5 0062;	
    // (ùÇµ) BYZANTINE MUSICAL SYMBOL GORTHMIKON N DIPLOUN	[10A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B5, 0x0062 };
    uint32_t const ces[9] = { 0x10A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_274)
{
    // 1D0B6 0021;	
    // (ùÇ∂) BYZANTINE MUSICAL SYMBOL ENARXIS KAI FTHORA VOU	[10A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B6, 0x0021 };
    uint32_t const ces[9] = { 0x10A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_275)
{
    // 1D0B6 003F;	
    // (ùÇ∂) BYZANTINE MUSICAL SYMBOL ENARXIS KAI FTHORA VOU	[10A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B6, 0x003F };
    uint32_t const ces[9] = { 0x10A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_276)
{
    // 1D0B6 0061;	
    // (ùÇ∂) BYZANTINE MUSICAL SYMBOL ENARXIS KAI FTHORA VOU	[10A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B6, 0x0061 };
    uint32_t const ces[9] = { 0x10A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_277)
{
    // 1D0B6 0041;	
    // (ùÇ∂) BYZANTINE MUSICAL SYMBOL ENARXIS KAI FTHORA VOU	[10A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0B6, 0x0041 };
    uint32_t const ces[9] = { 0x10A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_278)
{
    // 1D0B6 0062;	
    // (ùÇ∂) BYZANTINE MUSICAL SYMBOL ENARXIS KAI FTHORA VOU	[10A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B6, 0x0062 };
    uint32_t const ces[9] = { 0x10A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_279)
{
    // 1D0B7 0021;	
    // (ùÇ∑) BYZANTINE MUSICAL SYMBOL IMIFONON	[10A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B7, 0x0021 };
    uint32_t const ces[9] = { 0x10A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_280)
{
    // 1D0B7 003F;	
    // (ùÇ∑) BYZANTINE MUSICAL SYMBOL IMIFONON	[10A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B7, 0x003F };
    uint32_t const ces[9] = { 0x10A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_281)
{
    // 1D0B7 0061;	
    // (ùÇ∑) BYZANTINE MUSICAL SYMBOL IMIFONON	[10A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B7, 0x0061 };
    uint32_t const ces[9] = { 0x10A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_282)
{
    // 1D0B7 0041;	
    // (ùÇ∑) BYZANTINE MUSICAL SYMBOL IMIFONON	[10A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0B7, 0x0041 };
    uint32_t const ces[9] = { 0x10A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_283)
{
    // 1D0B7 0062;	
    // (ùÇ∑) BYZANTINE MUSICAL SYMBOL IMIFONON	[10A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B7, 0x0062 };
    uint32_t const ces[9] = { 0x10A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_284)
{
    // 1D0B8 0021;	
    // (ùÇ∏) BYZANTINE MUSICAL SYMBOL IMIFTHORON	[10A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B8, 0x0021 };
    uint32_t const ces[9] = { 0x10A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_285)
{
    // 1D0B8 003F;	
    // (ùÇ∏) BYZANTINE MUSICAL SYMBOL IMIFTHORON	[10A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B8, 0x003F };
    uint32_t const ces[9] = { 0x10A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_286)
{
    // 1D0B8 0061;	
    // (ùÇ∏) BYZANTINE MUSICAL SYMBOL IMIFTHORON	[10A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B8, 0x0061 };
    uint32_t const ces[9] = { 0x10A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_287)
{
    // 1D0B8 0041;	
    // (ùÇ∏) BYZANTINE MUSICAL SYMBOL IMIFTHORON	[10A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0B8, 0x0041 };
    uint32_t const ces[9] = { 0x10A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_288)
{
    // 1D0B8 0062;	
    // (ùÇ∏) BYZANTINE MUSICAL SYMBOL IMIFTHORON	[10A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B8, 0x0062 };
    uint32_t const ces[9] = { 0x10A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_289)
{
    // 1D0B9 0021;	
    // (ùÇπ) BYZANTINE MUSICAL SYMBOL FTHORA ARCHAION DEYTEROU ICHOU	[10A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B9, 0x0021 };
    uint32_t const ces[9] = { 0x10A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_290)
{
    // 1D0B9 003F;	
    // (ùÇπ) BYZANTINE MUSICAL SYMBOL FTHORA ARCHAION DEYTEROU ICHOU	[10A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B9, 0x003F };
    uint32_t const ces[9] = { 0x10A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_291)
{
    // 1D0B9 0061;	
    // (ùÇπ) BYZANTINE MUSICAL SYMBOL FTHORA ARCHAION DEYTEROU ICHOU	[10A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B9, 0x0061 };
    uint32_t const ces[9] = { 0x10A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_292)
{
    // 1D0B9 0041;	
    // (ùÇπ) BYZANTINE MUSICAL SYMBOL FTHORA ARCHAION DEYTEROU ICHOU	[10A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0B9, 0x0041 };
    uint32_t const ces[9] = { 0x10A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_293)
{
    // 1D0B9 0062;	
    // (ùÇπ) BYZANTINE MUSICAL SYMBOL FTHORA ARCHAION DEYTEROU ICHOU	[10A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0B9, 0x0062 };
    uint32_t const ces[9] = { 0x10A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_294)
{
    // 1D0BA 0021;	
    // (ùÇ∫) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI PA	[10A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BA, 0x0021 };
    uint32_t const ces[9] = { 0x10A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_295)
{
    // 1D0BA 003F;	
    // (ùÇ∫) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI PA	[10A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BA, 0x003F };
    uint32_t const ces[9] = { 0x10A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_296)
{
    // 1D0BA 0061;	
    // (ùÇ∫) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI PA	[10A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BA, 0x0061 };
    uint32_t const ces[9] = { 0x10A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_297)
{
    // 1D0BA 0041;	
    // (ùÇ∫) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI PA	[10A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0BA, 0x0041 };
    uint32_t const ces[9] = { 0x10A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_298)
{
    // 1D0BA 0062;	
    // (ùÇ∫) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI PA	[10A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BA, 0x0062 };
    uint32_t const ces[9] = { 0x10A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_299)
{
    // 1D0BB 0021;	
    // (ùÇª) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NANA	[10A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BB, 0x0021 };
    uint32_t const ces[9] = { 0x10A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_300)
{
    // 1D0BB 003F;	
    // (ùÇª) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NANA	[10A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BB, 0x003F };
    uint32_t const ces[9] = { 0x10A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_301)
{
    // 1D0BB 0061;	
    // (ùÇª) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NANA	[10A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BB, 0x0061 };
    uint32_t const ces[9] = { 0x10A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_302)
{
    // 1D0BB 0041;	
    // (ùÇª) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NANA	[10A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0BB, 0x0041 };
    uint32_t const ces[9] = { 0x10A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_303)
{
    // 1D0BB 0062;	
    // (ùÇª) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NANA	[10A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BB, 0x0062 };
    uint32_t const ces[9] = { 0x10A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_304)
{
    // 1D0BC 0021;	
    // (ùÇº) BYZANTINE MUSICAL SYMBOL FTHORA NAOS ICHOS	[10AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BC, 0x0021 };
    uint32_t const ces[9] = { 0x10AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_305)
{
    // 1D0BC 003F;	
    // (ùÇº) BYZANTINE MUSICAL SYMBOL FTHORA NAOS ICHOS	[10AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BC, 0x003F };
    uint32_t const ces[9] = { 0x10AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_306)
{
    // 1D0BC 0061;	
    // (ùÇº) BYZANTINE MUSICAL SYMBOL FTHORA NAOS ICHOS	[10AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BC, 0x0061 };
    uint32_t const ces[9] = { 0x10AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_307)
{
    // 1D0BC 0041;	
    // (ùÇº) BYZANTINE MUSICAL SYMBOL FTHORA NAOS ICHOS	[10AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0BC, 0x0041 };
    uint32_t const ces[9] = { 0x10AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_308)
{
    // 1D0BC 0062;	
    // (ùÇº) BYZANTINE MUSICAL SYMBOL FTHORA NAOS ICHOS	[10AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BC, 0x0062 };
    uint32_t const ces[9] = { 0x10AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_309)
{
    // 1D0BD 0021;	
    // (ùÇΩ) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI DI	[10AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BD, 0x0021 };
    uint32_t const ces[9] = { 0x10AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_310)
{
    // 1D0BD 003F;	
    // (ùÇΩ) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI DI	[10AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BD, 0x003F };
    uint32_t const ces[9] = { 0x10AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_311)
{
    // 1D0BD 0061;	
    // (ùÇΩ) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI DI	[10AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BD, 0x0061 };
    uint32_t const ces[9] = { 0x10AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_312)
{
    // 1D0BD 0041;	
    // (ùÇΩ) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI DI	[10AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0BD, 0x0041 };
    uint32_t const ces[9] = { 0x10AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_313)
{
    // 1D0BD 0062;	
    // (ùÇΩ) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI DI	[10AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BD, 0x0062 };
    uint32_t const ces[9] = { 0x10AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_314)
{
    // 1D0BE 0021;	
    // (ùÇæ) BYZANTINE MUSICAL SYMBOL FTHORA SKLIRON DIATONON DI	[10AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BE, 0x0021 };
    uint32_t const ces[9] = { 0x10AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_315)
{
    // 1D0BE 003F;	
    // (ùÇæ) BYZANTINE MUSICAL SYMBOL FTHORA SKLIRON DIATONON DI	[10AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BE, 0x003F };
    uint32_t const ces[9] = { 0x10AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_316)
{
    // 1D0BE 0061;	
    // (ùÇæ) BYZANTINE MUSICAL SYMBOL FTHORA SKLIRON DIATONON DI	[10AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BE, 0x0061 };
    uint32_t const ces[9] = { 0x10AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_317)
{
    // 1D0BE 0041;	
    // (ùÇæ) BYZANTINE MUSICAL SYMBOL FTHORA SKLIRON DIATONON DI	[10AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0BE, 0x0041 };
    uint32_t const ces[9] = { 0x10AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_318)
{
    // 1D0BE 0062;	
    // (ùÇæ) BYZANTINE MUSICAL SYMBOL FTHORA SKLIRON DIATONON DI	[10AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BE, 0x0062 };
    uint32_t const ces[9] = { 0x10AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_319)
{
    // 1D0BF 0021;	
    // (ùÇø) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI KE	[10AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BF, 0x0021 };
    uint32_t const ces[9] = { 0x10AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_320)
{
    // 1D0BF 003F;	
    // (ùÇø) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI KE	[10AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BF, 0x003F };
    uint32_t const ces[9] = { 0x10AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_321)
{
    // 1D0BF 0061;	
    // (ùÇø) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI KE	[10AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BF, 0x0061 };
    uint32_t const ces[9] = { 0x10AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_322)
{
    // 1D0BF 0041;	
    // (ùÇø) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI KE	[10AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0BF, 0x0041 };
    uint32_t const ces[9] = { 0x10AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_323)
{
    // 1D0BF 0062;	
    // (ùÇø) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI KE	[10AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0BF, 0x0062 };
    uint32_t const ces[9] = { 0x10AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_324)
{
    // 1D0C0 0021;	
    // (ùÉÄ) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI ZO	[10AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C0, 0x0021 };
    uint32_t const ces[9] = { 0x10AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_325)
{
    // 1D0C0 003F;	
    // (ùÉÄ) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI ZO	[10AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C0, 0x003F };
    uint32_t const ces[9] = { 0x10AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_326)
{
    // 1D0C0 0061;	
    // (ùÉÄ) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI ZO	[10AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C0, 0x0061 };
    uint32_t const ces[9] = { 0x10AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_327)
{
    // 1D0C0 0041;	
    // (ùÉÄ) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI ZO	[10AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0C0, 0x0041 };
    uint32_t const ces[9] = { 0x10AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_328)
{
    // 1D0C0 0062;	
    // (ùÉÄ) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI ZO	[10AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C0, 0x0062 };
    uint32_t const ces[9] = { 0x10AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_329)
{
    // 1D0C1 0021;	
    // (ùÉÅ) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NI KATO	[10AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C1, 0x0021 };
    uint32_t const ces[9] = { 0x10AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_330)
{
    // 1D0C1 003F;	
    // (ùÉÅ) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NI KATO	[10AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C1, 0x003F };
    uint32_t const ces[9] = { 0x10AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_331)
{
    // 1D0C1 0061;	
    // (ùÉÅ) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NI KATO	[10AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C1, 0x0061 };
    uint32_t const ces[9] = { 0x10AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_332)
{
    // 1D0C1 0041;	
    // (ùÉÅ) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NI KATO	[10AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0C1, 0x0041 };
    uint32_t const ces[9] = { 0x10AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_333)
{
    // 1D0C1 0062;	
    // (ùÉÅ) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NI KATO	[10AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C1, 0x0062 };
    uint32_t const ces[9] = { 0x10AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_334)
{
    // 1D0C2 0021;	
    // (ùÉÇ) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NI ANO	[10B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C2, 0x0021 };
    uint32_t const ces[9] = { 0x10B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_335)
{
    // 1D0C2 003F;	
    // (ùÉÇ) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NI ANO	[10B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C2, 0x003F };
    uint32_t const ces[9] = { 0x10B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_336)
{
    // 1D0C2 0061;	
    // (ùÉÇ) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NI ANO	[10B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C2, 0x0061 };
    uint32_t const ces[9] = { 0x10B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_337)
{
    // 1D0C2 0041;	
    // (ùÉÇ) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NI ANO	[10B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0C2, 0x0041 };
    uint32_t const ces[9] = { 0x10B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_338)
{
    // 1D0C2 0062;	
    // (ùÉÇ) BYZANTINE MUSICAL SYMBOL FTHORA DIATONIKI NI ANO	[10B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C2, 0x0062 };
    uint32_t const ces[9] = { 0x10B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_339)
{
    // 1D0C3 0021;	
    // (ùÉÉ) BYZANTINE MUSICAL SYMBOL FTHORA MALAKON CHROMA DIFONIAS	[10B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C3, 0x0021 };
    uint32_t const ces[9] = { 0x10B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_340)
{
    // 1D0C3 003F;	
    // (ùÉÉ) BYZANTINE MUSICAL SYMBOL FTHORA MALAKON CHROMA DIFONIAS	[10B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C3, 0x003F };
    uint32_t const ces[9] = { 0x10B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_341)
{
    // 1D0C3 0061;	
    // (ùÉÉ) BYZANTINE MUSICAL SYMBOL FTHORA MALAKON CHROMA DIFONIAS	[10B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C3, 0x0061 };
    uint32_t const ces[9] = { 0x10B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_342)
{
    // 1D0C3 0041;	
    // (ùÉÉ) BYZANTINE MUSICAL SYMBOL FTHORA MALAKON CHROMA DIFONIAS	[10B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0C3, 0x0041 };
    uint32_t const ces[9] = { 0x10B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_343)
{
    // 1D0C3 0062;	
    // (ùÉÉ) BYZANTINE MUSICAL SYMBOL FTHORA MALAKON CHROMA DIFONIAS	[10B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C3, 0x0062 };
    uint32_t const ces[9] = { 0x10B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_344)
{
    // 1D0C4 0021;	
    // (ùÉÑ) BYZANTINE MUSICAL SYMBOL FTHORA MALAKON CHROMA MONOFONIAS	[10B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C4, 0x0021 };
    uint32_t const ces[9] = { 0x10B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_345)
{
    // 1D0C4 003F;	
    // (ùÉÑ) BYZANTINE MUSICAL SYMBOL FTHORA MALAKON CHROMA MONOFONIAS	[10B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C4, 0x003F };
    uint32_t const ces[9] = { 0x10B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_346)
{
    // 1D0C4 0061;	
    // (ùÉÑ) BYZANTINE MUSICAL SYMBOL FTHORA MALAKON CHROMA MONOFONIAS	[10B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C4, 0x0061 };
    uint32_t const ces[9] = { 0x10B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_347)
{
    // 1D0C4 0041;	
    // (ùÉÑ) BYZANTINE MUSICAL SYMBOL FTHORA MALAKON CHROMA MONOFONIAS	[10B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0C4, 0x0041 };
    uint32_t const ces[9] = { 0x10B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_348)
{
    // 1D0C4 0062;	
    // (ùÉÑ) BYZANTINE MUSICAL SYMBOL FTHORA MALAKON CHROMA MONOFONIAS	[10B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C4, 0x0062 };
    uint32_t const ces[9] = { 0x10B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_349)
{
    // 1D0C5 0021;	
    // (ùÉÖ) BYZANTINE MUSICAL SYMBOL FHTORA SKLIRON CHROMA VASIS	[10B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C5, 0x0021 };
    uint32_t const ces[9] = { 0x10B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_350)
{
    // 1D0C5 003F;	
    // (ùÉÖ) BYZANTINE MUSICAL SYMBOL FHTORA SKLIRON CHROMA VASIS	[10B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C5, 0x003F };
    uint32_t const ces[9] = { 0x10B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_351)
{
    // 1D0C5 0061;	
    // (ùÉÖ) BYZANTINE MUSICAL SYMBOL FHTORA SKLIRON CHROMA VASIS	[10B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C5, 0x0061 };
    uint32_t const ces[9] = { 0x10B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_352)
{
    // 1D0C5 0041;	
    // (ùÉÖ) BYZANTINE MUSICAL SYMBOL FHTORA SKLIRON CHROMA VASIS	[10B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0C5, 0x0041 };
    uint32_t const ces[9] = { 0x10B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_353)
{
    // 1D0C5 0062;	
    // (ùÉÖ) BYZANTINE MUSICAL SYMBOL FHTORA SKLIRON CHROMA VASIS	[10B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C5, 0x0062 };
    uint32_t const ces[9] = { 0x10B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_354)
{
    // 1D0C6 0021;	
    // (ùÉÜ) BYZANTINE MUSICAL SYMBOL FTHORA SKLIRON CHROMA SYNAFI	[10B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C6, 0x0021 };
    uint32_t const ces[9] = { 0x10B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_355)
{
    // 1D0C6 003F;	
    // (ùÉÜ) BYZANTINE MUSICAL SYMBOL FTHORA SKLIRON CHROMA SYNAFI	[10B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C6, 0x003F };
    uint32_t const ces[9] = { 0x10B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_356)
{
    // 1D0C6 0061;	
    // (ùÉÜ) BYZANTINE MUSICAL SYMBOL FTHORA SKLIRON CHROMA SYNAFI	[10B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C6, 0x0061 };
    uint32_t const ces[9] = { 0x10B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_357)
{
    // 1D0C6 0041;	
    // (ùÉÜ) BYZANTINE MUSICAL SYMBOL FTHORA SKLIRON CHROMA SYNAFI	[10B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0C6, 0x0041 };
    uint32_t const ces[9] = { 0x10B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_358)
{
    // 1D0C6 0062;	
    // (ùÉÜ) BYZANTINE MUSICAL SYMBOL FTHORA SKLIRON CHROMA SYNAFI	[10B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C6, 0x0062 };
    uint32_t const ces[9] = { 0x10B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_359)
{
    // 1D0C7 0021;	
    // (ùÉá) BYZANTINE MUSICAL SYMBOL FTHORA NENANO	[10B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C7, 0x0021 };
    uint32_t const ces[9] = { 0x10B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_360)
{
    // 1D0C7 003F;	
    // (ùÉá) BYZANTINE MUSICAL SYMBOL FTHORA NENANO	[10B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C7, 0x003F };
    uint32_t const ces[9] = { 0x10B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_361)
{
    // 1D0C7 0061;	
    // (ùÉá) BYZANTINE MUSICAL SYMBOL FTHORA NENANO	[10B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C7, 0x0061 };
    uint32_t const ces[9] = { 0x10B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_362)
{
    // 1D0C7 0041;	
    // (ùÉá) BYZANTINE MUSICAL SYMBOL FTHORA NENANO	[10B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0C7, 0x0041 };
    uint32_t const ces[9] = { 0x10B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_363)
{
    // 1D0C7 0062;	
    // (ùÉá) BYZANTINE MUSICAL SYMBOL FTHORA NENANO	[10B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C7, 0x0062 };
    uint32_t const ces[9] = { 0x10B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_364)
{
    // 1D0C8 0021;	
    // (ùÉà) BYZANTINE MUSICAL SYMBOL CHROA ZYGOS	[10B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C8, 0x0021 };
    uint32_t const ces[9] = { 0x10B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_365)
{
    // 1D0C8 003F;	
    // (ùÉà) BYZANTINE MUSICAL SYMBOL CHROA ZYGOS	[10B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C8, 0x003F };
    uint32_t const ces[9] = { 0x10B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_366)
{
    // 1D0C8 0061;	
    // (ùÉà) BYZANTINE MUSICAL SYMBOL CHROA ZYGOS	[10B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C8, 0x0061 };
    uint32_t const ces[9] = { 0x10B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_367)
{
    // 1D0C8 0041;	
    // (ùÉà) BYZANTINE MUSICAL SYMBOL CHROA ZYGOS	[10B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0C8, 0x0041 };
    uint32_t const ces[9] = { 0x10B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_368)
{
    // 1D0C8 0062;	
    // (ùÉà) BYZANTINE MUSICAL SYMBOL CHROA ZYGOS	[10B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C8, 0x0062 };
    uint32_t const ces[9] = { 0x10B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_369)
{
    // 1D0C9 0021;	
    // (ùÉâ) BYZANTINE MUSICAL SYMBOL CHROA KLITON	[10B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C9, 0x0021 };
    uint32_t const ces[9] = { 0x10B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_370)
{
    // 1D0C9 003F;	
    // (ùÉâ) BYZANTINE MUSICAL SYMBOL CHROA KLITON	[10B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C9, 0x003F };
    uint32_t const ces[9] = { 0x10B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_371)
{
    // 1D0C9 0061;	
    // (ùÉâ) BYZANTINE MUSICAL SYMBOL CHROA KLITON	[10B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C9, 0x0061 };
    uint32_t const ces[9] = { 0x10B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_372)
{
    // 1D0C9 0041;	
    // (ùÉâ) BYZANTINE MUSICAL SYMBOL CHROA KLITON	[10B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0C9, 0x0041 };
    uint32_t const ces[9] = { 0x10B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_373)
{
    // 1D0C9 0062;	
    // (ùÉâ) BYZANTINE MUSICAL SYMBOL CHROA KLITON	[10B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0C9, 0x0062 };
    uint32_t const ces[9] = { 0x10B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_374)
{
    // 1D0CA 0021;	
    // (ùÉä) BYZANTINE MUSICAL SYMBOL CHROA SPATHI	[10B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CA, 0x0021 };
    uint32_t const ces[9] = { 0x10B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_375)
{
    // 1D0CA 003F;	
    // (ùÉä) BYZANTINE MUSICAL SYMBOL CHROA SPATHI	[10B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CA, 0x003F };
    uint32_t const ces[9] = { 0x10B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_376)
{
    // 1D0CA 0061;	
    // (ùÉä) BYZANTINE MUSICAL SYMBOL CHROA SPATHI	[10B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CA, 0x0061 };
    uint32_t const ces[9] = { 0x10B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_377)
{
    // 1D0CA 0041;	
    // (ùÉä) BYZANTINE MUSICAL SYMBOL CHROA SPATHI	[10B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0CA, 0x0041 };
    uint32_t const ces[9] = { 0x10B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_378)
{
    // 1D0CA 0062;	
    // (ùÉä) BYZANTINE MUSICAL SYMBOL CHROA SPATHI	[10B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CA, 0x0062 };
    uint32_t const ces[9] = { 0x10B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_379)
{
    // 1D0CB 0021;	
    // (ùÉã) BYZANTINE MUSICAL SYMBOL FTHORA I YFESIS TETARTIMORION	[10B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CB, 0x0021 };
    uint32_t const ces[9] = { 0x10B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_380)
{
    // 1D0CB 003F;	
    // (ùÉã) BYZANTINE MUSICAL SYMBOL FTHORA I YFESIS TETARTIMORION	[10B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CB, 0x003F };
    uint32_t const ces[9] = { 0x10B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_381)
{
    // 1D0CB 0061;	
    // (ùÉã) BYZANTINE MUSICAL SYMBOL FTHORA I YFESIS TETARTIMORION	[10B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CB, 0x0061 };
    uint32_t const ces[9] = { 0x10B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_382)
{
    // 1D0CB 0041;	
    // (ùÉã) BYZANTINE MUSICAL SYMBOL FTHORA I YFESIS TETARTIMORION	[10B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0CB, 0x0041 };
    uint32_t const ces[9] = { 0x10B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_383)
{
    // 1D0CB 0062;	
    // (ùÉã) BYZANTINE MUSICAL SYMBOL FTHORA I YFESIS TETARTIMORION	[10B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CB, 0x0062 };
    uint32_t const ces[9] = { 0x10B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_384)
{
    // 1D0CC 0021;	
    // (ùÉå) BYZANTINE MUSICAL SYMBOL FTHORA ENARMONIOS ANTIFONIA	[10BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CC, 0x0021 };
    uint32_t const ces[9] = { 0x10BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_385)
{
    // 1D0CC 003F;	
    // (ùÉå) BYZANTINE MUSICAL SYMBOL FTHORA ENARMONIOS ANTIFONIA	[10BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CC, 0x003F };
    uint32_t const ces[9] = { 0x10BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_386)
{
    // 1D0CC 0061;	
    // (ùÉå) BYZANTINE MUSICAL SYMBOL FTHORA ENARMONIOS ANTIFONIA	[10BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CC, 0x0061 };
    uint32_t const ces[9] = { 0x10BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_387)
{
    // 1D0CC 0041;	
    // (ùÉå) BYZANTINE MUSICAL SYMBOL FTHORA ENARMONIOS ANTIFONIA	[10BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0CC, 0x0041 };
    uint32_t const ces[9] = { 0x10BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_388)
{
    // 1D0CC 0062;	
    // (ùÉå) BYZANTINE MUSICAL SYMBOL FTHORA ENARMONIOS ANTIFONIA	[10BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CC, 0x0062 };
    uint32_t const ces[9] = { 0x10BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_389)
{
    // 1D0CD 0021;	
    // (ùÉç) BYZANTINE MUSICAL SYMBOL YFESIS TRITIMORION	[10BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CD, 0x0021 };
    uint32_t const ces[9] = { 0x10BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_390)
{
    // 1D0CD 003F;	
    // (ùÉç) BYZANTINE MUSICAL SYMBOL YFESIS TRITIMORION	[10BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CD, 0x003F };
    uint32_t const ces[9] = { 0x10BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_391)
{
    // 1D0CD 0061;	
    // (ùÉç) BYZANTINE MUSICAL SYMBOL YFESIS TRITIMORION	[10BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CD, 0x0061 };
    uint32_t const ces[9] = { 0x10BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_392)
{
    // 1D0CD 0041;	
    // (ùÉç) BYZANTINE MUSICAL SYMBOL YFESIS TRITIMORION	[10BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0CD, 0x0041 };
    uint32_t const ces[9] = { 0x10BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_393)
{
    // 1D0CD 0062;	
    // (ùÉç) BYZANTINE MUSICAL SYMBOL YFESIS TRITIMORION	[10BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CD, 0x0062 };
    uint32_t const ces[9] = { 0x10BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_394)
{
    // 1D0CE 0021;	
    // (ùÉé) BYZANTINE MUSICAL SYMBOL DIESIS TRITIMORION	[10BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CE, 0x0021 };
    uint32_t const ces[9] = { 0x10BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_395)
{
    // 1D0CE 003F;	
    // (ùÉé) BYZANTINE MUSICAL SYMBOL DIESIS TRITIMORION	[10BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CE, 0x003F };
    uint32_t const ces[9] = { 0x10BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_396)
{
    // 1D0CE 0061;	
    // (ùÉé) BYZANTINE MUSICAL SYMBOL DIESIS TRITIMORION	[10BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CE, 0x0061 };
    uint32_t const ces[9] = { 0x10BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_397)
{
    // 1D0CE 0041;	
    // (ùÉé) BYZANTINE MUSICAL SYMBOL DIESIS TRITIMORION	[10BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0CE, 0x0041 };
    uint32_t const ces[9] = { 0x10BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_398)
{
    // 1D0CE 0062;	
    // (ùÉé) BYZANTINE MUSICAL SYMBOL DIESIS TRITIMORION	[10BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CE, 0x0062 };
    uint32_t const ces[9] = { 0x10BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_399)
{
    // 1D0CF 0021;	
    // (ùÉè) BYZANTINE MUSICAL SYMBOL DIESIS TETARTIMORION	[10BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CF, 0x0021 };
    uint32_t const ces[9] = { 0x10BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_400)
{
    // 1D0CF 003F;	
    // (ùÉè) BYZANTINE MUSICAL SYMBOL DIESIS TETARTIMORION	[10BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CF, 0x003F };
    uint32_t const ces[9] = { 0x10BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_401)
{
    // 1D0CF 0061;	
    // (ùÉè) BYZANTINE MUSICAL SYMBOL DIESIS TETARTIMORION	[10BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CF, 0x0061 };
    uint32_t const ces[9] = { 0x10BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_402)
{
    // 1D0CF 0041;	
    // (ùÉè) BYZANTINE MUSICAL SYMBOL DIESIS TETARTIMORION	[10BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0CF, 0x0041 };
    uint32_t const ces[9] = { 0x10BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_403)
{
    // 1D0CF 0062;	
    // (ùÉè) BYZANTINE MUSICAL SYMBOL DIESIS TETARTIMORION	[10BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0CF, 0x0062 };
    uint32_t const ces[9] = { 0x10BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_404)
{
    // 1D0D0 0021;	
    // (ùÉê) BYZANTINE MUSICAL SYMBOL DIESIS APLI DYO DODEKATA	[10BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D0, 0x0021 };
    uint32_t const ces[9] = { 0x10BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_405)
{
    // 1D0D0 003F;	
    // (ùÉê) BYZANTINE MUSICAL SYMBOL DIESIS APLI DYO DODEKATA	[10BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D0, 0x003F };
    uint32_t const ces[9] = { 0x10BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_406)
{
    // 1D0D0 0061;	
    // (ùÉê) BYZANTINE MUSICAL SYMBOL DIESIS APLI DYO DODEKATA	[10BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D0, 0x0061 };
    uint32_t const ces[9] = { 0x10BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_407)
{
    // 1D0D0 0041;	
    // (ùÉê) BYZANTINE MUSICAL SYMBOL DIESIS APLI DYO DODEKATA	[10BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0D0, 0x0041 };
    uint32_t const ces[9] = { 0x10BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_408)
{
    // 1D0D0 0062;	
    // (ùÉê) BYZANTINE MUSICAL SYMBOL DIESIS APLI DYO DODEKATA	[10BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D0, 0x0062 };
    uint32_t const ces[9] = { 0x10BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_409)
{
    // 1D0D1 0021;	
    // (ùÉë) BYZANTINE MUSICAL SYMBOL DIESIS MONOGRAMMOS TESSERA DODEKATA	[10BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D1, 0x0021 };
    uint32_t const ces[9] = { 0x10BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_410)
{
    // 1D0D1 003F;	
    // (ùÉë) BYZANTINE MUSICAL SYMBOL DIESIS MONOGRAMMOS TESSERA DODEKATA	[10BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D1, 0x003F };
    uint32_t const ces[9] = { 0x10BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_411)
{
    // 1D0D1 0061;	
    // (ùÉë) BYZANTINE MUSICAL SYMBOL DIESIS MONOGRAMMOS TESSERA DODEKATA	[10BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D1, 0x0061 };
    uint32_t const ces[9] = { 0x10BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_412)
{
    // 1D0D1 0041;	
    // (ùÉë) BYZANTINE MUSICAL SYMBOL DIESIS MONOGRAMMOS TESSERA DODEKATA	[10BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0D1, 0x0041 };
    uint32_t const ces[9] = { 0x10BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_413)
{
    // 1D0D1 0062;	
    // (ùÉë) BYZANTINE MUSICAL SYMBOL DIESIS MONOGRAMMOS TESSERA DODEKATA	[10BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D1, 0x0062 };
    uint32_t const ces[9] = { 0x10BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_414)
{
    // 1D0D2 0021;	
    // (ùÉí) BYZANTINE MUSICAL SYMBOL DIESIS DIGRAMMOS EX DODEKATA	[10C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D2, 0x0021 };
    uint32_t const ces[9] = { 0x10C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_415)
{
    // 1D0D2 003F;	
    // (ùÉí) BYZANTINE MUSICAL SYMBOL DIESIS DIGRAMMOS EX DODEKATA	[10C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D2, 0x003F };
    uint32_t const ces[9] = { 0x10C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_416)
{
    // 1D0D2 0061;	
    // (ùÉí) BYZANTINE MUSICAL SYMBOL DIESIS DIGRAMMOS EX DODEKATA	[10C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D2, 0x0061 };
    uint32_t const ces[9] = { 0x10C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_417)
{
    // 1D0D2 0041;	
    // (ùÉí) BYZANTINE MUSICAL SYMBOL DIESIS DIGRAMMOS EX DODEKATA	[10C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0D2, 0x0041 };
    uint32_t const ces[9] = { 0x10C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_418)
{
    // 1D0D2 0062;	
    // (ùÉí) BYZANTINE MUSICAL SYMBOL DIESIS DIGRAMMOS EX DODEKATA	[10C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D2, 0x0062 };
    uint32_t const ces[9] = { 0x10C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_419)
{
    // 1D0D3 0021;	
    // (ùÉì) BYZANTINE MUSICAL SYMBOL DIESIS TRIGRAMMOS OKTO DODEKATA	[10C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D3, 0x0021 };
    uint32_t const ces[9] = { 0x10C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_420)
{
    // 1D0D3 003F;	
    // (ùÉì) BYZANTINE MUSICAL SYMBOL DIESIS TRIGRAMMOS OKTO DODEKATA	[10C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D3, 0x003F };
    uint32_t const ces[9] = { 0x10C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_421)
{
    // 1D0D3 0061;	
    // (ùÉì) BYZANTINE MUSICAL SYMBOL DIESIS TRIGRAMMOS OKTO DODEKATA	[10C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D3, 0x0061 };
    uint32_t const ces[9] = { 0x10C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_422)
{
    // 1D0D3 0041;	
    // (ùÉì) BYZANTINE MUSICAL SYMBOL DIESIS TRIGRAMMOS OKTO DODEKATA	[10C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0D3, 0x0041 };
    uint32_t const ces[9] = { 0x10C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_423)
{
    // 1D0D3 0062;	
    // (ùÉì) BYZANTINE MUSICAL SYMBOL DIESIS TRIGRAMMOS OKTO DODEKATA	[10C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D3, 0x0062 };
    uint32_t const ces[9] = { 0x10C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_424)
{
    // 1D0D4 0021;	
    // (ùÉî) BYZANTINE MUSICAL SYMBOL YFESIS APLI DYO DODEKATA	[10C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D4, 0x0021 };
    uint32_t const ces[9] = { 0x10C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_425)
{
    // 1D0D4 003F;	
    // (ùÉî) BYZANTINE MUSICAL SYMBOL YFESIS APLI DYO DODEKATA	[10C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D4, 0x003F };
    uint32_t const ces[9] = { 0x10C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_426)
{
    // 1D0D4 0061;	
    // (ùÉî) BYZANTINE MUSICAL SYMBOL YFESIS APLI DYO DODEKATA	[10C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D4, 0x0061 };
    uint32_t const ces[9] = { 0x10C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_427)
{
    // 1D0D4 0041;	
    // (ùÉî) BYZANTINE MUSICAL SYMBOL YFESIS APLI DYO DODEKATA	[10C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0D4, 0x0041 };
    uint32_t const ces[9] = { 0x10C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_428)
{
    // 1D0D4 0062;	
    // (ùÉî) BYZANTINE MUSICAL SYMBOL YFESIS APLI DYO DODEKATA	[10C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D4, 0x0062 };
    uint32_t const ces[9] = { 0x10C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_429)
{
    // 1D0D5 0021;	
    // (ùÉï) BYZANTINE MUSICAL SYMBOL YFESIS MONOGRAMMOS TESSERA DODEKATA	[10C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D5, 0x0021 };
    uint32_t const ces[9] = { 0x10C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_430)
{
    // 1D0D5 003F;	
    // (ùÉï) BYZANTINE MUSICAL SYMBOL YFESIS MONOGRAMMOS TESSERA DODEKATA	[10C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D5, 0x003F };
    uint32_t const ces[9] = { 0x10C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_431)
{
    // 1D0D5 0061;	
    // (ùÉï) BYZANTINE MUSICAL SYMBOL YFESIS MONOGRAMMOS TESSERA DODEKATA	[10C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D5, 0x0061 };
    uint32_t const ces[9] = { 0x10C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_432)
{
    // 1D0D5 0041;	
    // (ùÉï) BYZANTINE MUSICAL SYMBOL YFESIS MONOGRAMMOS TESSERA DODEKATA	[10C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0D5, 0x0041 };
    uint32_t const ces[9] = { 0x10C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_433)
{
    // 1D0D5 0062;	
    // (ùÉï) BYZANTINE MUSICAL SYMBOL YFESIS MONOGRAMMOS TESSERA DODEKATA	[10C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D5, 0x0062 };
    uint32_t const ces[9] = { 0x10C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_434)
{
    // 1D0D6 0021;	
    // (ùÉñ) BYZANTINE MUSICAL SYMBOL YFESIS DIGRAMMOS EX DODEKATA	[10C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D6, 0x0021 };
    uint32_t const ces[9] = { 0x10C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_435)
{
    // 1D0D6 003F;	
    // (ùÉñ) BYZANTINE MUSICAL SYMBOL YFESIS DIGRAMMOS EX DODEKATA	[10C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D6, 0x003F };
    uint32_t const ces[9] = { 0x10C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_436)
{
    // 1D0D6 0061;	
    // (ùÉñ) BYZANTINE MUSICAL SYMBOL YFESIS DIGRAMMOS EX DODEKATA	[10C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D6, 0x0061 };
    uint32_t const ces[9] = { 0x10C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_437)
{
    // 1D0D6 0041;	
    // (ùÉñ) BYZANTINE MUSICAL SYMBOL YFESIS DIGRAMMOS EX DODEKATA	[10C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0D6, 0x0041 };
    uint32_t const ces[9] = { 0x10C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_438)
{
    // 1D0D6 0062;	
    // (ùÉñ) BYZANTINE MUSICAL SYMBOL YFESIS DIGRAMMOS EX DODEKATA	[10C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D6, 0x0062 };
    uint32_t const ces[9] = { 0x10C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_439)
{
    // 1D0D7 0021;	
    // (ùÉó) BYZANTINE MUSICAL SYMBOL YFESIS TRIGRAMMOS OKTO DODEKATA	[10C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D7, 0x0021 };
    uint32_t const ces[9] = { 0x10C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_440)
{
    // 1D0D7 003F;	
    // (ùÉó) BYZANTINE MUSICAL SYMBOL YFESIS TRIGRAMMOS OKTO DODEKATA	[10C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D7, 0x003F };
    uint32_t const ces[9] = { 0x10C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_441)
{
    // 1D0D7 0061;	
    // (ùÉó) BYZANTINE MUSICAL SYMBOL YFESIS TRIGRAMMOS OKTO DODEKATA	[10C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D7, 0x0061 };
    uint32_t const ces[9] = { 0x10C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_442)
{
    // 1D0D7 0041;	
    // (ùÉó) BYZANTINE MUSICAL SYMBOL YFESIS TRIGRAMMOS OKTO DODEKATA	[10C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0D7, 0x0041 };
    uint32_t const ces[9] = { 0x10C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_443)
{
    // 1D0D7 0062;	
    // (ùÉó) BYZANTINE MUSICAL SYMBOL YFESIS TRIGRAMMOS OKTO DODEKATA	[10C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D7, 0x0062 };
    uint32_t const ces[9] = { 0x10C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_444)
{
    // 1D0D8 0021;	
    // (ùÉò) BYZANTINE MUSICAL SYMBOL GENIKI DIESIS	[10C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D8, 0x0021 };
    uint32_t const ces[9] = { 0x10C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_445)
{
    // 1D0D8 003F;	
    // (ùÉò) BYZANTINE MUSICAL SYMBOL GENIKI DIESIS	[10C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D8, 0x003F };
    uint32_t const ces[9] = { 0x10C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_446)
{
    // 1D0D8 0061;	
    // (ùÉò) BYZANTINE MUSICAL SYMBOL GENIKI DIESIS	[10C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D8, 0x0061 };
    uint32_t const ces[9] = { 0x10C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_447)
{
    // 1D0D8 0041;	
    // (ùÉò) BYZANTINE MUSICAL SYMBOL GENIKI DIESIS	[10C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0D8, 0x0041 };
    uint32_t const ces[9] = { 0x10C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_448)
{
    // 1D0D8 0062;	
    // (ùÉò) BYZANTINE MUSICAL SYMBOL GENIKI DIESIS	[10C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D8, 0x0062 };
    uint32_t const ces[9] = { 0x10C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_449)
{
    // 1D0D9 0021;	
    // (ùÉô) BYZANTINE MUSICAL SYMBOL GENIKI YFESIS	[10C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D9, 0x0021 };
    uint32_t const ces[9] = { 0x10C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_450)
{
    // 1D0D9 003F;	
    // (ùÉô) BYZANTINE MUSICAL SYMBOL GENIKI YFESIS	[10C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D9, 0x003F };
    uint32_t const ces[9] = { 0x10C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_451)
{
    // 1D0D9 0061;	
    // (ùÉô) BYZANTINE MUSICAL SYMBOL GENIKI YFESIS	[10C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D9, 0x0061 };
    uint32_t const ces[9] = { 0x10C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_452)
{
    // 1D0D9 0041;	
    // (ùÉô) BYZANTINE MUSICAL SYMBOL GENIKI YFESIS	[10C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0D9, 0x0041 };
    uint32_t const ces[9] = { 0x10C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_453)
{
    // 1D0D9 0062;	
    // (ùÉô) BYZANTINE MUSICAL SYMBOL GENIKI YFESIS	[10C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0D9, 0x0062 };
    uint32_t const ces[9] = { 0x10C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_454)
{
    // 1D0DA 0021;	
    // (ùÉö) BYZANTINE MUSICAL SYMBOL DIASTOLI APLI MIKRI	[10C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DA, 0x0021 };
    uint32_t const ces[9] = { 0x10C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_455)
{
    // 1D0DA 003F;	
    // (ùÉö) BYZANTINE MUSICAL SYMBOL DIASTOLI APLI MIKRI	[10C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DA, 0x003F };
    uint32_t const ces[9] = { 0x10C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_456)
{
    // 1D0DA 0061;	
    // (ùÉö) BYZANTINE MUSICAL SYMBOL DIASTOLI APLI MIKRI	[10C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DA, 0x0061 };
    uint32_t const ces[9] = { 0x10C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_457)
{
    // 1D0DA 0041;	
    // (ùÉö) BYZANTINE MUSICAL SYMBOL DIASTOLI APLI MIKRI	[10C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0DA, 0x0041 };
    uint32_t const ces[9] = { 0x10C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_458)
{
    // 1D0DA 0062;	
    // (ùÉö) BYZANTINE MUSICAL SYMBOL DIASTOLI APLI MIKRI	[10C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DA, 0x0062 };
    uint32_t const ces[9] = { 0x10C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_459)
{
    // 1D0DB 0021;	
    // (ùÉõ) BYZANTINE MUSICAL SYMBOL DIASTOLI APLI MEGALI	[10C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DB, 0x0021 };
    uint32_t const ces[9] = { 0x10C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_460)
{
    // 1D0DB 003F;	
    // (ùÉõ) BYZANTINE MUSICAL SYMBOL DIASTOLI APLI MEGALI	[10C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DB, 0x003F };
    uint32_t const ces[9] = { 0x10C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_461)
{
    // 1D0DB 0061;	
    // (ùÉõ) BYZANTINE MUSICAL SYMBOL DIASTOLI APLI MEGALI	[10C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DB, 0x0061 };
    uint32_t const ces[9] = { 0x10C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_462)
{
    // 1D0DB 0041;	
    // (ùÉõ) BYZANTINE MUSICAL SYMBOL DIASTOLI APLI MEGALI	[10C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0DB, 0x0041 };
    uint32_t const ces[9] = { 0x10C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_463)
{
    // 1D0DB 0062;	
    // (ùÉõ) BYZANTINE MUSICAL SYMBOL DIASTOLI APLI MEGALI	[10C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DB, 0x0062 };
    uint32_t const ces[9] = { 0x10C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_464)
{
    // 1D0DC 0021;	
    // (ùÉú) BYZANTINE MUSICAL SYMBOL DIASTOLI DIPLI	[10CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DC, 0x0021 };
    uint32_t const ces[9] = { 0x10CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_465)
{
    // 1D0DC 003F;	
    // (ùÉú) BYZANTINE MUSICAL SYMBOL DIASTOLI DIPLI	[10CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DC, 0x003F };
    uint32_t const ces[9] = { 0x10CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_466)
{
    // 1D0DC 0061;	
    // (ùÉú) BYZANTINE MUSICAL SYMBOL DIASTOLI DIPLI	[10CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DC, 0x0061 };
    uint32_t const ces[9] = { 0x10CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_467)
{
    // 1D0DC 0041;	
    // (ùÉú) BYZANTINE MUSICAL SYMBOL DIASTOLI DIPLI	[10CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0DC, 0x0041 };
    uint32_t const ces[9] = { 0x10CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_468)
{
    // 1D0DC 0062;	
    // (ùÉú) BYZANTINE MUSICAL SYMBOL DIASTOLI DIPLI	[10CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DC, 0x0062 };
    uint32_t const ces[9] = { 0x10CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_469)
{
    // 1D0DD 0021;	
    // (ùÉù) BYZANTINE MUSICAL SYMBOL DIASTOLI THESEOS	[10CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DD, 0x0021 };
    uint32_t const ces[9] = { 0x10CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_470)
{
    // 1D0DD 003F;	
    // (ùÉù) BYZANTINE MUSICAL SYMBOL DIASTOLI THESEOS	[10CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DD, 0x003F };
    uint32_t const ces[9] = { 0x10CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_471)
{
    // 1D0DD 0061;	
    // (ùÉù) BYZANTINE MUSICAL SYMBOL DIASTOLI THESEOS	[10CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DD, 0x0061 };
    uint32_t const ces[9] = { 0x10CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_472)
{
    // 1D0DD 0041;	
    // (ùÉù) BYZANTINE MUSICAL SYMBOL DIASTOLI THESEOS	[10CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0DD, 0x0041 };
    uint32_t const ces[9] = { 0x10CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_473)
{
    // 1D0DD 0062;	
    // (ùÉù) BYZANTINE MUSICAL SYMBOL DIASTOLI THESEOS	[10CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DD, 0x0062 };
    uint32_t const ces[9] = { 0x10CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_474)
{
    // 1D0DE 0021;	
    // (ùÉû) BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS	[10CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DE, 0x0021 };
    uint32_t const ces[9] = { 0x10CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_475)
{
    // 1D0DE 003F;	
    // (ùÉû) BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS	[10CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DE, 0x003F };
    uint32_t const ces[9] = { 0x10CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_476)
{
    // 1D0DE 0061;	
    // (ùÉû) BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS	[10CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DE, 0x0061 };
    uint32_t const ces[9] = { 0x10CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_477)
{
    // 1D0DE 0041;	
    // (ùÉû) BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS	[10CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0DE, 0x0041 };
    uint32_t const ces[9] = { 0x10CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_478)
{
    // 1D0DE 0062;	
    // (ùÉû) BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS	[10CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DE, 0x0062 };
    uint32_t const ces[9] = { 0x10CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_479)
{
    // 1D0DF 0021;	
    // (ùÉü) BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS DISIMOU	[10CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DF, 0x0021 };
    uint32_t const ces[9] = { 0x10CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_480)
{
    // 1D0DF 003F;	
    // (ùÉü) BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS DISIMOU	[10CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DF, 0x003F };
    uint32_t const ces[9] = { 0x10CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_481)
{
    // 1D0DF 0061;	
    // (ùÉü) BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS DISIMOU	[10CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DF, 0x0061 };
    uint32_t const ces[9] = { 0x10CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_482)
{
    // 1D0DF 0041;	
    // (ùÉü) BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS DISIMOU	[10CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0DF, 0x0041 };
    uint32_t const ces[9] = { 0x10CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_483)
{
    // 1D0DF 0062;	
    // (ùÉü) BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS DISIMOU	[10CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0DF, 0x0062 };
    uint32_t const ces[9] = { 0x10CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_484)
{
    // 1D0E0 0021;	
    // (ùÉ†) BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS TRISIMOU	[10CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E0, 0x0021 };
    uint32_t const ces[9] = { 0x10CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_485)
{
    // 1D0E0 003F;	
    // (ùÉ†) BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS TRISIMOU	[10CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E0, 0x003F };
    uint32_t const ces[9] = { 0x10CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_486)
{
    // 1D0E0 0061;	
    // (ùÉ†) BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS TRISIMOU	[10CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E0, 0x0061 };
    uint32_t const ces[9] = { 0x10CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_487)
{
    // 1D0E0 0041;	
    // (ùÉ†) BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS TRISIMOU	[10CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0E0, 0x0041 };
    uint32_t const ces[9] = { 0x10CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_488)
{
    // 1D0E0 0062;	
    // (ùÉ†) BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS TRISIMOU	[10CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E0, 0x0062 };
    uint32_t const ces[9] = { 0x10CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_489)
{
    // 1D0E1 0021;	
    // (ùÉ°) BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS TETRASIMOU	[10CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E1, 0x0021 };
    uint32_t const ces[9] = { 0x10CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_490)
{
    // 1D0E1 003F;	
    // (ùÉ°) BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS TETRASIMOU	[10CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E1, 0x003F };
    uint32_t const ces[9] = { 0x10CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_491)
{
    // 1D0E1 0061;	
    // (ùÉ°) BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS TETRASIMOU	[10CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E1, 0x0061 };
    uint32_t const ces[9] = { 0x10CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_492)
{
    // 1D0E1 0041;	
    // (ùÉ°) BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS TETRASIMOU	[10CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0E1, 0x0041 };
    uint32_t const ces[9] = { 0x10CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_493)
{
    // 1D0E1 0062;	
    // (ùÉ°) BYZANTINE MUSICAL SYMBOL SIMANSIS THESEOS TETRASIMOU	[10CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E1, 0x0062 };
    uint32_t const ces[9] = { 0x10CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_494)
{
    // 1D0E2 0021;	
    // (ùÉ¢) BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS	[10D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E2, 0x0021 };
    uint32_t const ces[9] = { 0x10D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_495)
{
    // 1D0E2 003F;	
    // (ùÉ¢) BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS	[10D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E2, 0x003F };
    uint32_t const ces[9] = { 0x10D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_496)
{
    // 1D0E2 0061;	
    // (ùÉ¢) BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS	[10D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E2, 0x0061 };
    uint32_t const ces[9] = { 0x10D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_497)
{
    // 1D0E2 0041;	
    // (ùÉ¢) BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS	[10D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1D0E2, 0x0041 };
    uint32_t const ces[9] = { 0x10D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_498)
{
    // 1D0E2 0062;	
    // (ùÉ¢) BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS	[10D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E2, 0x0062 };
    uint32_t const ces[9] = { 0x10D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_049_499)
{
    // 1D0E3 0021;	
    // (ùÉ£) BYZANTINE MUSICAL SYMBOL SIMANSIS ARSEOS DISIMOU	[10D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1D0E3, 0x0021 };
    uint32_t const ces[9] = { 0x10D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

