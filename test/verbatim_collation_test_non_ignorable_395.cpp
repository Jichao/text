// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_395_000)
{
    // DFFF 003F;	
    // ('\uDFFF') <surrogate-DFFF>	[FBC1 DFFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xDFFF, 0x003F };
    uint32_t const ces[10] = { 0xFBC1, 0xDFFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_001)
{
    // DFFF 0061;	
    // ('\uDFFF') <surrogate-DFFF>	[FBC1 DFFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xDFFF, 0x0061 };
    uint32_t const ces[10] = { 0xFBC1, 0xDFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_002)
{
    // DFFF 0041;	
    // ('\uDFFF') <surrogate-DFFF>	[FBC1 DFFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xDFFF, 0x0041 };
    uint32_t const ces[10] = { 0xFBC1, 0xDFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_003)
{
    // DFFF 0062;	
    // ('\uDFFF') <surrogate-DFFF>	[FBC1 DFFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xDFFF, 0x0062 };
    uint32_t const ces[10] = { 0xFBC1, 0xDFFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_004)
{
    // E000 0021;	
    // ('\uE000') <private-use-E000>	[FBC1 E000 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE000, 0x0021 };
    uint32_t const ces[10] = { 0xFBC1, 0xE000, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_005)
{
    // E000 003F;	
    // ('\uE000') <private-use-E000>	[FBC1 E000 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE000, 0x003F };
    uint32_t const ces[10] = { 0xFBC1, 0xE000, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_006)
{
    // E000 0061;	
    // ('\uE000') <private-use-E000>	[FBC1 E000 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE000, 0x0061 };
    uint32_t const ces[10] = { 0xFBC1, 0xE000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_007)
{
    // E000 0041;	
    // ('\uE000') <private-use-E000>	[FBC1 E000 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xE000, 0x0041 };
    uint32_t const ces[10] = { 0xFBC1, 0xE000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_008)
{
    // E000 0062;	
    // ('\uE000') <private-use-E000>	[FBC1 E000 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE000, 0x0062 };
    uint32_t const ces[10] = { 0xFBC1, 0xE000, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_009)
{
    // E001 0021;	
    // ('\uE001') <private-use-E001>	[FBC1 E001 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE001, 0x0021 };
    uint32_t const ces[10] = { 0xFBC1, 0xE001, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_010)
{
    // E001 003F;	
    // ('\uE001') <private-use-E001>	[FBC1 E001 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE001, 0x003F };
    uint32_t const ces[10] = { 0xFBC1, 0xE001, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_011)
{
    // E001 0061;	
    // ('\uE001') <private-use-E001>	[FBC1 E001 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE001, 0x0061 };
    uint32_t const ces[10] = { 0xFBC1, 0xE001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_012)
{
    // E001 0041;	
    // ('\uE001') <private-use-E001>	[FBC1 E001 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xE001, 0x0041 };
    uint32_t const ces[10] = { 0xFBC1, 0xE001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_013)
{
    // E001 0062;	
    // ('\uE001') <private-use-E001>	[FBC1 E001 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE001, 0x0062 };
    uint32_t const ces[10] = { 0xFBC1, 0xE001, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_014)
{
    // E002 0021;	
    // ('\uE002') <private-use-E002>	[FBC1 E002 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE002, 0x0021 };
    uint32_t const ces[10] = { 0xFBC1, 0xE002, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_015)
{
    // E002 003F;	
    // ('\uE002') <private-use-E002>	[FBC1 E002 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE002, 0x003F };
    uint32_t const ces[10] = { 0xFBC1, 0xE002, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_016)
{
    // E002 0061;	
    // ('\uE002') <private-use-E002>	[FBC1 E002 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE002, 0x0061 };
    uint32_t const ces[10] = { 0xFBC1, 0xE002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_017)
{
    // E002 0041;	
    // ('\uE002') <private-use-E002>	[FBC1 E002 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xE002, 0x0041 };
    uint32_t const ces[10] = { 0xFBC1, 0xE002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_018)
{
    // E002 0062;	
    // ('\uE002') <private-use-E002>	[FBC1 E002 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE002, 0x0062 };
    uint32_t const ces[10] = { 0xFBC1, 0xE002, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_019)
{
    // E003 0021;	
    // ('\uE003') <private-use-E003>	[FBC1 E003 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE003, 0x0021 };
    uint32_t const ces[10] = { 0xFBC1, 0xE003, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_020)
{
    // E003 003F;	
    // ('\uE003') <private-use-E003>	[FBC1 E003 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE003, 0x003F };
    uint32_t const ces[10] = { 0xFBC1, 0xE003, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_021)
{
    // E003 0061;	
    // ('\uE003') <private-use-E003>	[FBC1 E003 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE003, 0x0061 };
    uint32_t const ces[10] = { 0xFBC1, 0xE003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_022)
{
    // E003 0041;	
    // ('\uE003') <private-use-E003>	[FBC1 E003 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xE003, 0x0041 };
    uint32_t const ces[10] = { 0xFBC1, 0xE003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_023)
{
    // E003 0062;	
    // ('\uE003') <private-use-E003>	[FBC1 E003 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE003, 0x0062 };
    uint32_t const ces[10] = { 0xFBC1, 0xE003, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_024)
{
    // E004 0021;	
    // ('\uE004') <private-use-E004>	[FBC1 E004 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE004, 0x0021 };
    uint32_t const ces[10] = { 0xFBC1, 0xE004, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_025)
{
    // E004 003F;	
    // ('\uE004') <private-use-E004>	[FBC1 E004 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE004, 0x003F };
    uint32_t const ces[10] = { 0xFBC1, 0xE004, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_026)
{
    // E004 0061;	
    // ('\uE004') <private-use-E004>	[FBC1 E004 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE004, 0x0061 };
    uint32_t const ces[10] = { 0xFBC1, 0xE004, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_027)
{
    // E004 0041;	
    // ('\uE004') <private-use-E004>	[FBC1 E004 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xE004, 0x0041 };
    uint32_t const ces[10] = { 0xFBC1, 0xE004, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_028)
{
    // E004 0062;	
    // ('\uE004') <private-use-E004>	[FBC1 E004 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE004, 0x0062 };
    uint32_t const ces[10] = { 0xFBC1, 0xE004, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_029)
{
    // E005 0021;	
    // ('\uE005') <private-use-E005>	[FBC1 E005 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE005, 0x0021 };
    uint32_t const ces[10] = { 0xFBC1, 0xE005, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_030)
{
    // E005 003F;	
    // ('\uE005') <private-use-E005>	[FBC1 E005 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE005, 0x003F };
    uint32_t const ces[10] = { 0xFBC1, 0xE005, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_031)
{
    // E005 0061;	
    // ('\uE005') <private-use-E005>	[FBC1 E005 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE005, 0x0061 };
    uint32_t const ces[10] = { 0xFBC1, 0xE005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_032)
{
    // E005 0041;	
    // ('\uE005') <private-use-E005>	[FBC1 E005 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xE005, 0x0041 };
    uint32_t const ces[10] = { 0xFBC1, 0xE005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_033)
{
    // E005 0062;	
    // ('\uE005') <private-use-E005>	[FBC1 E005 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE005, 0x0062 };
    uint32_t const ces[10] = { 0xFBC1, 0xE005, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_034)
{
    // F8FA 0021;	
    // ('\uF8FA') <private-use-F8FA>	[FBC1 F8FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FA, 0x0021 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_035)
{
    // F8FA 003F;	
    // ('\uF8FA') <private-use-F8FA>	[FBC1 F8FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FA, 0x003F };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_036)
{
    // F8FA 0061;	
    // ('\uF8FA') <private-use-F8FA>	[FBC1 F8FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FA, 0x0061 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_037)
{
    // F8FA 0041;	
    // ('\uF8FA') <private-use-F8FA>	[FBC1 F8FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF8FA, 0x0041 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_038)
{
    // F8FA 0062;	
    // ('\uF8FA') <private-use-F8FA>	[FBC1 F8FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FA, 0x0062 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_039)
{
    // F8FB 0021;	
    // ('\uF8FB') <private-use-F8FB>	[FBC1 F8FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FB, 0x0021 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_040)
{
    // F8FB 003F;	
    // ('\uF8FB') <private-use-F8FB>	[FBC1 F8FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FB, 0x003F };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_041)
{
    // F8FB 0061;	
    // ('\uF8FB') <private-use-F8FB>	[FBC1 F8FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FB, 0x0061 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_042)
{
    // F8FB 0041;	
    // ('\uF8FB') <private-use-F8FB>	[FBC1 F8FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF8FB, 0x0041 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_043)
{
    // F8FB 0062;	
    // ('\uF8FB') <private-use-F8FB>	[FBC1 F8FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FB, 0x0062 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_044)
{
    // F8FC 0021;	
    // ('\uF8FC') <private-use-F8FC>	[FBC1 F8FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FC, 0x0021 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_045)
{
    // F8FC 003F;	
    // ('\uF8FC') <private-use-F8FC>	[FBC1 F8FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FC, 0x003F };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_046)
{
    // F8FC 0061;	
    // ('\uF8FC') <private-use-F8FC>	[FBC1 F8FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FC, 0x0061 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_047)
{
    // F8FC 0041;	
    // ('\uF8FC') <private-use-F8FC>	[FBC1 F8FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF8FC, 0x0041 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_048)
{
    // F8FC 0062;	
    // ('\uF8FC') <private-use-F8FC>	[FBC1 F8FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FC, 0x0062 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_049)
{
    // F8FD 0021;	
    // ('\uF8FD') <private-use-F8FD>	[FBC1 F8FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FD, 0x0021 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_050)
{
    // F8FD 003F;	
    // ('\uF8FD') <private-use-F8FD>	[FBC1 F8FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FD, 0x003F };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_051)
{
    // F8FD 0061;	
    // ('\uF8FD') <private-use-F8FD>	[FBC1 F8FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FD, 0x0061 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_052)
{
    // F8FD 0041;	
    // ('\uF8FD') <private-use-F8FD>	[FBC1 F8FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF8FD, 0x0041 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_053)
{
    // F8FD 0062;	
    // ('\uF8FD') <private-use-F8FD>	[FBC1 F8FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FD, 0x0062 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_054)
{
    // F8FE 0021;	
    // ('\uF8FE') <private-use-F8FE>	[FBC1 F8FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FE, 0x0021 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_055)
{
    // F8FE 003F;	
    // ('\uF8FE') <private-use-F8FE>	[FBC1 F8FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FE, 0x003F };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_056)
{
    // F8FE 0061;	
    // ('\uF8FE') <private-use-F8FE>	[FBC1 F8FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FE, 0x0061 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_057)
{
    // F8FE 0041;	
    // ('\uF8FE') <private-use-F8FE>	[FBC1 F8FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF8FE, 0x0041 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_058)
{
    // F8FE 0062;	
    // ('\uF8FE') <private-use-F8FE>	[FBC1 F8FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FE, 0x0062 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_059)
{
    // F8FF 0021;	
    // ('\uF8FF') <private-use-F8FF>	[FBC1 F8FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FF, 0x0021 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_060)
{
    // F8FF 003F;	
    // ('\uF8FF') <private-use-F8FF>	[FBC1 F8FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FF, 0x003F };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_061)
{
    // F8FF 0061;	
    // ('\uF8FF') <private-use-F8FF>	[FBC1 F8FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FF, 0x0061 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_062)
{
    // F8FF 0041;	
    // ('\uF8FF') <private-use-F8FF>	[FBC1 F8FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF8FF, 0x0041 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_063)
{
    // F8FF 0062;	
    // ('\uF8FF') <private-use-F8FF>	[FBC1 F8FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF8FF, 0x0062 };
    uint32_t const ces[10] = { 0xFBC1, 0xF8FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_064)
{
    // FDD0 0021;	
    // ('\uFDD0') <noncharacter-FDD0>	[FBC1 FDD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFDD0, 0x0021 };
    uint32_t const ces[10] = { 0xFBC1, 0xFDD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_065)
{
    // FDD0 003F;	
    // ('\uFDD0') <noncharacter-FDD0>	[FBC1 FDD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFDD0, 0x003F };
    uint32_t const ces[10] = { 0xFBC1, 0xFDD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_066)
{
    // FDD0 0061;	
    // ('\uFDD0') <noncharacter-FDD0>	[FBC1 FDD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFDD0, 0x0061 };
    uint32_t const ces[10] = { 0xFBC1, 0xFDD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_067)
{
    // FDD0 0041;	
    // ('\uFDD0') <noncharacter-FDD0>	[FBC1 FDD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFDD0, 0x0041 };
    uint32_t const ces[10] = { 0xFBC1, 0xFDD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_068)
{
    // FDD0 0062;	
    // ('\uFDD0') <noncharacter-FDD0>	[FBC1 FDD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFDD0, 0x0062 };
    uint32_t const ces[10] = { 0xFBC1, 0xFDD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_069)
{
    // FDD1 0021;	
    // ('\uFDD1') <noncharacter-FDD1>	[FBC1 FDD1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFDD1, 0x0021 };
    uint32_t const ces[10] = { 0xFBC1, 0xFDD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_070)
{
    // FDD1 003F;	
    // ('\uFDD1') <noncharacter-FDD1>	[FBC1 FDD1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFDD1, 0x003F };
    uint32_t const ces[10] = { 0xFBC1, 0xFDD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_071)
{
    // FDD1 0061;	
    // ('\uFDD1') <noncharacter-FDD1>	[FBC1 FDD1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFDD1, 0x0061 };
    uint32_t const ces[10] = { 0xFBC1, 0xFDD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_072)
{
    // FDD1 0041;	
    // ('\uFDD1') <noncharacter-FDD1>	[FBC1 FDD1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFDD1, 0x0041 };
    uint32_t const ces[10] = { 0xFBC1, 0xFDD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_073)
{
    // FDD1 0062;	
    // ('\uFDD1') <noncharacter-FDD1>	[FBC1 FDD1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFDD1, 0x0062 };
    uint32_t const ces[10] = { 0xFBC1, 0xFDD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_074)
{
    // FDD2 0021;	
    // ('\uFDD2') <noncharacter-FDD2>	[FBC1 FDD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFDD2, 0x0021 };
    uint32_t const ces[10] = { 0xFBC1, 0xFDD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_075)
{
    // FDD2 003F;	
    // ('\uFDD2') <noncharacter-FDD2>	[FBC1 FDD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFDD2, 0x003F };
    uint32_t const ces[10] = { 0xFBC1, 0xFDD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_076)
{
    // FDD2 0061;	
    // ('\uFDD2') <noncharacter-FDD2>	[FBC1 FDD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFDD2, 0x0061 };
    uint32_t const ces[10] = { 0xFBC1, 0xFDD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_077)
{
    // FDD2 0041;	
    // ('\uFDD2') <noncharacter-FDD2>	[FBC1 FDD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFDD2, 0x0041 };
    uint32_t const ces[10] = { 0xFBC1, 0xFDD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_078)
{
    // FDD2 0062;	
    // ('\uFDD2') <noncharacter-FDD2>	[FBC1 FDD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFDD2, 0x0062 };
    uint32_t const ces[10] = { 0xFBC1, 0xFDD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_079)
{
    // FDD3 0021;	
    // ('\uFDD3') <noncharacter-FDD3>	[FBC1 FDD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFDD3, 0x0021 };
    uint32_t const ces[10] = { 0xFBC1, 0xFDD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_080)
{
    // FDD3 003F;	
    // ('\uFDD3') <noncharacter-FDD3>	[FBC1 FDD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFDD3, 0x003F };
    uint32_t const ces[10] = { 0xFBC1, 0xFDD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_081)
{
    // FDD3 0061;	
    // ('\uFDD3') <noncharacter-FDD3>	[FBC1 FDD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFDD3, 0x0061 };
    uint32_t const ces[10] = { 0xFBC1, 0xFDD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_082)
{
    // FDD3 0041;	
    // ('\uFDD3') <noncharacter-FDD3>	[FBC1 FDD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFDD3, 0x0041 };
    uint32_t const ces[10] = { 0xFBC1, 0xFDD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_083)
{
    // FDD3 0062;	
    // ('\uFDD3') <noncharacter-FDD3>	[FBC1 FDD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFDD3, 0x0062 };
    uint32_t const ces[10] = { 0xFBC1, 0xFDD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_084)
{
    // FFF0 0021;	
    // ('\uFFF0') null	[FBC1 FFF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF0, 0x0021 };
    uint32_t const ces[10] = { 0xFBC1, 0xFFF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_085)
{
    // FFF0 003F;	
    // ('\uFFF0') null	[FBC1 FFF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF0, 0x003F };
    uint32_t const ces[10] = { 0xFBC1, 0xFFF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_086)
{
    // FFF0 0061;	
    // ('\uFFF0') null	[FBC1 FFF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF0, 0x0061 };
    uint32_t const ces[10] = { 0xFBC1, 0xFFF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_087)
{
    // FFF0 0041;	
    // ('\uFFF0') null	[FBC1 FFF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFFF0, 0x0041 };
    uint32_t const ces[10] = { 0xFBC1, 0xFFF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_088)
{
    // FFF0 0062;	
    // ('\uFFF0') null	[FBC1 FFF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF0, 0x0062 };
    uint32_t const ces[10] = { 0xFBC1, 0xFFF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_089)
{
    // FFFE 0021;	
    // ('\uFFFE') <noncharacter-FFFE>	[FBC1 FFFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFE, 0x0021 };
    uint32_t const ces[10] = { 0xFBC1, 0xFFFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_090)
{
    // FFFE 003F;	
    // ('\uFFFE') <noncharacter-FFFE>	[FBC1 FFFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFE, 0x003F };
    uint32_t const ces[10] = { 0xFBC1, 0xFFFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_091)
{
    // FFFE 0061;	
    // ('\uFFFE') <noncharacter-FFFE>	[FBC1 FFFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFE, 0x0061 };
    uint32_t const ces[10] = { 0xFBC1, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_092)
{
    // FFFE 0041;	
    // ('\uFFFE') <noncharacter-FFFE>	[FBC1 FFFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFFFE, 0x0041 };
    uint32_t const ces[10] = { 0xFBC1, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_093)
{
    // FFFE 0062;	
    // ('\uFFFE') <noncharacter-FFFE>	[FBC1 FFFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFE, 0x0062 };
    uint32_t const ces[10] = { 0xFBC1, 0xFFFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_094)
{
    // FFFF 0021;	
    // ('\uFFFF') <noncharacter-FFFF>	[FBC1 FFFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFF, 0x0021 };
    uint32_t const ces[10] = { 0xFBC1, 0xFFFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_095)
{
    // FFFF 003F;	
    // ('\uFFFF') <noncharacter-FFFF>	[FBC1 FFFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFF, 0x003F };
    uint32_t const ces[10] = { 0xFBC1, 0xFFFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_096)
{
    // FFFF 0061;	
    // ('\uFFFF') <noncharacter-FFFF>	[FBC1 FFFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFF, 0x0061 };
    uint32_t const ces[10] = { 0xFBC1, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_097)
{
    // FFFF 0041;	
    // ('\uFFFF') <noncharacter-FFFF>	[FBC1 FFFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFFFF, 0x0041 };
    uint32_t const ces[10] = { 0xFBC1, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_098)
{
    // FFFF 0062;	
    // ('\uFFFF') <noncharacter-FFFF>	[FBC1 FFFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFF, 0x0062 };
    uint32_t const ces[10] = { 0xFBC1, 0xFFFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_099)
{
    // 1FFFE 0021;	
    // ('\U0001FFFE') <noncharacter-1FFFE>	[FBC3 FFFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FFFE, 0x0021 };
    uint32_t const ces[10] = { 0xFBC3, 0xFFFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_100)
{
    // 1FFFE 003F;	
    // ('\U0001FFFE') <noncharacter-1FFFE>	[FBC3 FFFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FFFE, 0x003F };
    uint32_t const ces[10] = { 0xFBC3, 0xFFFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_101)
{
    // 1FFFE 0061;	
    // ('\U0001FFFE') <noncharacter-1FFFE>	[FBC3 FFFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FFFE, 0x0061 };
    uint32_t const ces[10] = { 0xFBC3, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_102)
{
    // 1FFFE 0041;	
    // ('\U0001FFFE') <noncharacter-1FFFE>	[FBC3 FFFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1FFFE, 0x0041 };
    uint32_t const ces[10] = { 0xFBC3, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_103)
{
    // 1FFFE 0062;	
    // ('\U0001FFFE') <noncharacter-1FFFE>	[FBC3 FFFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FFFE, 0x0062 };
    uint32_t const ces[10] = { 0xFBC3, 0xFFFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_104)
{
    // 1FFFF 0021;	
    // ('\U0001FFFF') <noncharacter-1FFFF>	[FBC3 FFFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FFFF, 0x0021 };
    uint32_t const ces[10] = { 0xFBC3, 0xFFFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_105)
{
    // 1FFFF 003F;	
    // ('\U0001FFFF') <noncharacter-1FFFF>	[FBC3 FFFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FFFF, 0x003F };
    uint32_t const ces[10] = { 0xFBC3, 0xFFFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_106)
{
    // 1FFFF 0061;	
    // ('\U0001FFFF') <noncharacter-1FFFF>	[FBC3 FFFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FFFF, 0x0061 };
    uint32_t const ces[10] = { 0xFBC3, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_107)
{
    // 1FFFF 0041;	
    // ('\U0001FFFF') <noncharacter-1FFFF>	[FBC3 FFFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1FFFF, 0x0041 };
    uint32_t const ces[10] = { 0xFBC3, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_108)
{
    // 1FFFF 0062;	
    // ('\U0001FFFF') <noncharacter-1FFFF>	[FBC3 FFFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1FFFF, 0x0062 };
    uint32_t const ces[10] = { 0xFBC3, 0xFFFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_109)
{
    // 2A6D7 0021;	
    // ('\U0002A6D7') null	[FBC5 A6D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6D7, 0x0021 };
    uint32_t const ces[10] = { 0xFBC5, 0xA6D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_110)
{
    // 2A6D7 003F;	
    // ('\U0002A6D7') null	[FBC5 A6D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6D7, 0x003F };
    uint32_t const ces[10] = { 0xFBC5, 0xA6D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_111)
{
    // 2A6D7 0061;	
    // ('\U0002A6D7') null	[FBC5 A6D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6D7, 0x0061 };
    uint32_t const ces[10] = { 0xFBC5, 0xA6D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_112)
{
    // 2A6D7 0041;	
    // ('\U0002A6D7') null	[FBC5 A6D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A6D7, 0x0041 };
    uint32_t const ces[10] = { 0xFBC5, 0xA6D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_113)
{
    // 2A6D7 0062;	
    // ('\U0002A6D7') null	[FBC5 A6D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A6D7, 0x0062 };
    uint32_t const ces[10] = { 0xFBC5, 0xA6D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_114)
{
    // 2B735 0021;	
    // ('\U0002B735') null	[FBC5 B735 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B735, 0x0021 };
    uint32_t const ces[10] = { 0xFBC5, 0xB735, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_115)
{
    // 2B735 003F;	
    // ('\U0002B735') null	[FBC5 B735 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B735, 0x003F };
    uint32_t const ces[10] = { 0xFBC5, 0xB735, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_116)
{
    // 2B735 0061;	
    // ('\U0002B735') null	[FBC5 B735 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B735, 0x0061 };
    uint32_t const ces[10] = { 0xFBC5, 0xB735, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_117)
{
    // 2B735 0041;	
    // ('\U0002B735') null	[FBC5 B735 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B735, 0x0041 };
    uint32_t const ces[10] = { 0xFBC5, 0xB735, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_118)
{
    // 2B735 0062;	
    // ('\U0002B735') null	[FBC5 B735 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B735, 0x0062 };
    uint32_t const ces[10] = { 0xFBC5, 0xB735, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_119)
{
    // 2B81E 0021;	
    // ('\U0002B81E') null	[FBC5 B81E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B81E, 0x0021 };
    uint32_t const ces[10] = { 0xFBC5, 0xB81E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_120)
{
    // 2B81E 003F;	
    // ('\U0002B81E') null	[FBC5 B81E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B81E, 0x003F };
    uint32_t const ces[10] = { 0xFBC5, 0xB81E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_121)
{
    // 2B81E 0061;	
    // ('\U0002B81E') null	[FBC5 B81E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B81E, 0x0061 };
    uint32_t const ces[10] = { 0xFBC5, 0xB81E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_122)
{
    // 2B81E 0041;	
    // ('\U0002B81E') null	[FBC5 B81E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2B81E, 0x0041 };
    uint32_t const ces[10] = { 0xFBC5, 0xB81E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_123)
{
    // 2B81E 0062;	
    // ('\U0002B81E') null	[FBC5 B81E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2B81E, 0x0062 };
    uint32_t const ces[10] = { 0xFBC5, 0xB81E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_124)
{
    // 2CEA2 0021;	
    // ('\U0002CEA2') null	[FBC5 CEA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CEA2, 0x0021 };
    uint32_t const ces[10] = { 0xFBC5, 0xCEA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_125)
{
    // 2CEA2 003F;	
    // ('\U0002CEA2') null	[FBC5 CEA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CEA2, 0x003F };
    uint32_t const ces[10] = { 0xFBC5, 0xCEA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_126)
{
    // 2CEA2 0061;	
    // ('\U0002CEA2') null	[FBC5 CEA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CEA2, 0x0061 };
    uint32_t const ces[10] = { 0xFBC5, 0xCEA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_127)
{
    // 2CEA2 0041;	
    // ('\U0002CEA2') null	[FBC5 CEA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2CEA2, 0x0041 };
    uint32_t const ces[10] = { 0xFBC5, 0xCEA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_128)
{
    // 2CEA2 0062;	
    // ('\U0002CEA2') null	[FBC5 CEA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CEA2, 0x0062 };
    uint32_t const ces[10] = { 0xFBC5, 0xCEA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_129)
{
    // 2EBE1 0021;	
    // ('\U0002EBE1') null	[FBC5 EBE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2EBE1, 0x0021 };
    uint32_t const ces[10] = { 0xFBC5, 0xEBE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_130)
{
    // 2EBE1 003F;	
    // ('\U0002EBE1') null	[FBC5 EBE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2EBE1, 0x003F };
    uint32_t const ces[10] = { 0xFBC5, 0xEBE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_131)
{
    // 2EBE1 0061;	
    // ('\U0002EBE1') null	[FBC5 EBE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2EBE1, 0x0061 };
    uint32_t const ces[10] = { 0xFBC5, 0xEBE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_132)
{
    // 2EBE1 0041;	
    // ('\U0002EBE1') null	[FBC5 EBE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2EBE1, 0x0041 };
    uint32_t const ces[10] = { 0xFBC5, 0xEBE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_133)
{
    // 2EBE1 0062;	
    // ('\U0002EBE1') null	[FBC5 EBE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2EBE1, 0x0062 };
    uint32_t const ces[10] = { 0xFBC5, 0xEBE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_134)
{
    // 2FFFE 0021;	
    // ('\U0002FFFE') <noncharacter-2FFFE>	[FBC5 FFFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FFFE, 0x0021 };
    uint32_t const ces[10] = { 0xFBC5, 0xFFFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_135)
{
    // 2FFFE 003F;	
    // ('\U0002FFFE') <noncharacter-2FFFE>	[FBC5 FFFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FFFE, 0x003F };
    uint32_t const ces[10] = { 0xFBC5, 0xFFFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_136)
{
    // 2FFFE 0061;	
    // ('\U0002FFFE') <noncharacter-2FFFE>	[FBC5 FFFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FFFE, 0x0061 };
    uint32_t const ces[10] = { 0xFBC5, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_137)
{
    // 2FFFE 0041;	
    // ('\U0002FFFE') <noncharacter-2FFFE>	[FBC5 FFFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FFFE, 0x0041 };
    uint32_t const ces[10] = { 0xFBC5, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_138)
{
    // 2FFFE 0062;	
    // ('\U0002FFFE') <noncharacter-2FFFE>	[FBC5 FFFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FFFE, 0x0062 };
    uint32_t const ces[10] = { 0xFBC5, 0xFFFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_139)
{
    // 2FFFF 0021;	
    // ('\U0002FFFF') <noncharacter-2FFFF>	[FBC5 FFFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FFFF, 0x0021 };
    uint32_t const ces[10] = { 0xFBC5, 0xFFFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_140)
{
    // 2FFFF 003F;	
    // ('\U0002FFFF') <noncharacter-2FFFF>	[FBC5 FFFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FFFF, 0x003F };
    uint32_t const ces[10] = { 0xFBC5, 0xFFFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_141)
{
    // 2FFFF 0061;	
    // ('\U0002FFFF') <noncharacter-2FFFF>	[FBC5 FFFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FFFF, 0x0061 };
    uint32_t const ces[10] = { 0xFBC5, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_142)
{
    // 2FFFF 0041;	
    // ('\U0002FFFF') <noncharacter-2FFFF>	[FBC5 FFFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FFFF, 0x0041 };
    uint32_t const ces[10] = { 0xFBC5, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_143)
{
    // 2FFFF 0062;	
    // ('\U0002FFFF') <noncharacter-2FFFF>	[FBC5 FFFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FFFF, 0x0062 };
    uint32_t const ces[10] = { 0xFBC5, 0xFFFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_144)
{
    // 3FFFE 0021;	
    // ('\U0003FFFE') <noncharacter-3FFFE>	[FBC7 FFFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFFE, 0x0021 };
    uint32_t const ces[10] = { 0xFBC7, 0xFFFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_145)
{
    // 3FFFE 003F;	
    // ('\U0003FFFE') <noncharacter-3FFFE>	[FBC7 FFFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFFE, 0x003F };
    uint32_t const ces[10] = { 0xFBC7, 0xFFFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_146)
{
    // 3FFFE 0061;	
    // ('\U0003FFFE') <noncharacter-3FFFE>	[FBC7 FFFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFFE, 0x0061 };
    uint32_t const ces[10] = { 0xFBC7, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_147)
{
    // 3FFFE 0041;	
    // ('\U0003FFFE') <noncharacter-3FFFE>	[FBC7 FFFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FFFE, 0x0041 };
    uint32_t const ces[10] = { 0xFBC7, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_148)
{
    // 3FFFE 0062;	
    // ('\U0003FFFE') <noncharacter-3FFFE>	[FBC7 FFFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFFE, 0x0062 };
    uint32_t const ces[10] = { 0xFBC7, 0xFFFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_149)
{
    // 3FFFF 0021;	
    // ('\U0003FFFF') <noncharacter-3FFFF>	[FBC7 FFFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFFF, 0x0021 };
    uint32_t const ces[10] = { 0xFBC7, 0xFFFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_150)
{
    // 3FFFF 003F;	
    // ('\U0003FFFF') <noncharacter-3FFFF>	[FBC7 FFFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFFF, 0x003F };
    uint32_t const ces[10] = { 0xFBC7, 0xFFFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_151)
{
    // 3FFFF 0061;	
    // ('\U0003FFFF') <noncharacter-3FFFF>	[FBC7 FFFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFFF, 0x0061 };
    uint32_t const ces[10] = { 0xFBC7, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_152)
{
    // 3FFFF 0041;	
    // ('\U0003FFFF') <noncharacter-3FFFF>	[FBC7 FFFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3FFFF, 0x0041 };
    uint32_t const ces[10] = { 0xFBC7, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_153)
{
    // 3FFFF 0062;	
    // ('\U0003FFFF') <noncharacter-3FFFF>	[FBC7 FFFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3FFFF, 0x0062 };
    uint32_t const ces[10] = { 0xFBC7, 0xFFFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_154)
{
    // 4FFFE 0021;	
    // ('\U0004FFFE') <noncharacter-4FFFE>	[FBC9 FFFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4FFFE, 0x0021 };
    uint32_t const ces[10] = { 0xFBC9, 0xFFFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_155)
{
    // 4FFFE 003F;	
    // ('\U0004FFFE') <noncharacter-4FFFE>	[FBC9 FFFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4FFFE, 0x003F };
    uint32_t const ces[10] = { 0xFBC9, 0xFFFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_156)
{
    // 4FFFE 0061;	
    // ('\U0004FFFE') <noncharacter-4FFFE>	[FBC9 FFFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4FFFE, 0x0061 };
    uint32_t const ces[10] = { 0xFBC9, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_157)
{
    // 4FFFE 0041;	
    // ('\U0004FFFE') <noncharacter-4FFFE>	[FBC9 FFFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4FFFE, 0x0041 };
    uint32_t const ces[10] = { 0xFBC9, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_158)
{
    // 4FFFE 0062;	
    // ('\U0004FFFE') <noncharacter-4FFFE>	[FBC9 FFFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4FFFE, 0x0062 };
    uint32_t const ces[10] = { 0xFBC9, 0xFFFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_159)
{
    // 4FFFF 0021;	
    // ('\U0004FFFF') <noncharacter-4FFFF>	[FBC9 FFFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4FFFF, 0x0021 };
    uint32_t const ces[10] = { 0xFBC9, 0xFFFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_160)
{
    // 4FFFF 003F;	
    // ('\U0004FFFF') <noncharacter-4FFFF>	[FBC9 FFFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4FFFF, 0x003F };
    uint32_t const ces[10] = { 0xFBC9, 0xFFFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_161)
{
    // 4FFFF 0061;	
    // ('\U0004FFFF') <noncharacter-4FFFF>	[FBC9 FFFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4FFFF, 0x0061 };
    uint32_t const ces[10] = { 0xFBC9, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_162)
{
    // 4FFFF 0041;	
    // ('\U0004FFFF') <noncharacter-4FFFF>	[FBC9 FFFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4FFFF, 0x0041 };
    uint32_t const ces[10] = { 0xFBC9, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_163)
{
    // 4FFFF 0062;	
    // ('\U0004FFFF') <noncharacter-4FFFF>	[FBC9 FFFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4FFFF, 0x0062 };
    uint32_t const ces[10] = { 0xFBC9, 0xFFFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_164)
{
    // 5FFFE 0021;	
    // ('\U0005FFFE') <noncharacter-5FFFE>	[FBCB FFFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x5FFFE, 0x0021 };
    uint32_t const ces[10] = { 0xFBCB, 0xFFFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_165)
{
    // 5FFFE 003F;	
    // ('\U0005FFFE') <noncharacter-5FFFE>	[FBCB FFFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x5FFFE, 0x003F };
    uint32_t const ces[10] = { 0xFBCB, 0xFFFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_166)
{
    // 5FFFE 0061;	
    // ('\U0005FFFE') <noncharacter-5FFFE>	[FBCB FFFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x5FFFE, 0x0061 };
    uint32_t const ces[10] = { 0xFBCB, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_167)
{
    // 5FFFE 0041;	
    // ('\U0005FFFE') <noncharacter-5FFFE>	[FBCB FFFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x5FFFE, 0x0041 };
    uint32_t const ces[10] = { 0xFBCB, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_168)
{
    // 5FFFE 0062;	
    // ('\U0005FFFE') <noncharacter-5FFFE>	[FBCB FFFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x5FFFE, 0x0062 };
    uint32_t const ces[10] = { 0xFBCB, 0xFFFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_169)
{
    // 5FFFF 0021;	
    // ('\U0005FFFF') <noncharacter-5FFFF>	[FBCB FFFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x5FFFF, 0x0021 };
    uint32_t const ces[10] = { 0xFBCB, 0xFFFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_170)
{
    // 5FFFF 003F;	
    // ('\U0005FFFF') <noncharacter-5FFFF>	[FBCB FFFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x5FFFF, 0x003F };
    uint32_t const ces[10] = { 0xFBCB, 0xFFFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_171)
{
    // 5FFFF 0061;	
    // ('\U0005FFFF') <noncharacter-5FFFF>	[FBCB FFFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x5FFFF, 0x0061 };
    uint32_t const ces[10] = { 0xFBCB, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_172)
{
    // 5FFFF 0041;	
    // ('\U0005FFFF') <noncharacter-5FFFF>	[FBCB FFFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x5FFFF, 0x0041 };
    uint32_t const ces[10] = { 0xFBCB, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_173)
{
    // 5FFFF 0062;	
    // ('\U0005FFFF') <noncharacter-5FFFF>	[FBCB FFFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x5FFFF, 0x0062 };
    uint32_t const ces[10] = { 0xFBCB, 0xFFFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_174)
{
    // 6FFFE 0021;	
    // ('\U0006FFFE') <noncharacter-6FFFE>	[FBCD FFFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x6FFFE, 0x0021 };
    uint32_t const ces[10] = { 0xFBCD, 0xFFFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_175)
{
    // 6FFFE 003F;	
    // ('\U0006FFFE') <noncharacter-6FFFE>	[FBCD FFFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x6FFFE, 0x003F };
    uint32_t const ces[10] = { 0xFBCD, 0xFFFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_176)
{
    // 6FFFE 0061;	
    // ('\U0006FFFE') <noncharacter-6FFFE>	[FBCD FFFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x6FFFE, 0x0061 };
    uint32_t const ces[10] = { 0xFBCD, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_177)
{
    // 6FFFE 0041;	
    // ('\U0006FFFE') <noncharacter-6FFFE>	[FBCD FFFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x6FFFE, 0x0041 };
    uint32_t const ces[10] = { 0xFBCD, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_178)
{
    // 6FFFE 0062;	
    // ('\U0006FFFE') <noncharacter-6FFFE>	[FBCD FFFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x6FFFE, 0x0062 };
    uint32_t const ces[10] = { 0xFBCD, 0xFFFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_179)
{
    // 6FFFF 0021;	
    // ('\U0006FFFF') <noncharacter-6FFFF>	[FBCD FFFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x6FFFF, 0x0021 };
    uint32_t const ces[10] = { 0xFBCD, 0xFFFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_180)
{
    // 6FFFF 003F;	
    // ('\U0006FFFF') <noncharacter-6FFFF>	[FBCD FFFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x6FFFF, 0x003F };
    uint32_t const ces[10] = { 0xFBCD, 0xFFFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_181)
{
    // 6FFFF 0061;	
    // ('\U0006FFFF') <noncharacter-6FFFF>	[FBCD FFFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x6FFFF, 0x0061 };
    uint32_t const ces[10] = { 0xFBCD, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_182)
{
    // 6FFFF 0041;	
    // ('\U0006FFFF') <noncharacter-6FFFF>	[FBCD FFFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x6FFFF, 0x0041 };
    uint32_t const ces[10] = { 0xFBCD, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_183)
{
    // 6FFFF 0062;	
    // ('\U0006FFFF') <noncharacter-6FFFF>	[FBCD FFFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x6FFFF, 0x0062 };
    uint32_t const ces[10] = { 0xFBCD, 0xFFFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_184)
{
    // 7FFFE 0021;	
    // ('\U0007FFFE') <noncharacter-7FFFE>	[FBCF FFFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x7FFFE, 0x0021 };
    uint32_t const ces[10] = { 0xFBCF, 0xFFFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_185)
{
    // 7FFFE 003F;	
    // ('\U0007FFFE') <noncharacter-7FFFE>	[FBCF FFFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x7FFFE, 0x003F };
    uint32_t const ces[10] = { 0xFBCF, 0xFFFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_186)
{
    // 7FFFE 0061;	
    // ('\U0007FFFE') <noncharacter-7FFFE>	[FBCF FFFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x7FFFE, 0x0061 };
    uint32_t const ces[10] = { 0xFBCF, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_187)
{
    // 7FFFE 0041;	
    // ('\U0007FFFE') <noncharacter-7FFFE>	[FBCF FFFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x7FFFE, 0x0041 };
    uint32_t const ces[10] = { 0xFBCF, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_188)
{
    // 7FFFE 0062;	
    // ('\U0007FFFE') <noncharacter-7FFFE>	[FBCF FFFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x7FFFE, 0x0062 };
    uint32_t const ces[10] = { 0xFBCF, 0xFFFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_189)
{
    // 7FFFF 0021;	
    // ('\U0007FFFF') <noncharacter-7FFFF>	[FBCF FFFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x7FFFF, 0x0021 };
    uint32_t const ces[10] = { 0xFBCF, 0xFFFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_190)
{
    // 7FFFF 003F;	
    // ('\U0007FFFF') <noncharacter-7FFFF>	[FBCF FFFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x7FFFF, 0x003F };
    uint32_t const ces[10] = { 0xFBCF, 0xFFFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_191)
{
    // 7FFFF 0061;	
    // ('\U0007FFFF') <noncharacter-7FFFF>	[FBCF FFFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x7FFFF, 0x0061 };
    uint32_t const ces[10] = { 0xFBCF, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_192)
{
    // 7FFFF 0041;	
    // ('\U0007FFFF') <noncharacter-7FFFF>	[FBCF FFFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x7FFFF, 0x0041 };
    uint32_t const ces[10] = { 0xFBCF, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_193)
{
    // 7FFFF 0062;	
    // ('\U0007FFFF') <noncharacter-7FFFF>	[FBCF FFFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x7FFFF, 0x0062 };
    uint32_t const ces[10] = { 0xFBCF, 0xFFFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_194)
{
    // 8FFFE 0021;	
    // ('\U0008FFFE') <noncharacter-8FFFE>	[FBD1 FFFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x8FFFE, 0x0021 };
    uint32_t const ces[10] = { 0xFBD1, 0xFFFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_195)
{
    // 8FFFE 003F;	
    // ('\U0008FFFE') <noncharacter-8FFFE>	[FBD1 FFFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x8FFFE, 0x003F };
    uint32_t const ces[10] = { 0xFBD1, 0xFFFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_196)
{
    // 8FFFE 0061;	
    // ('\U0008FFFE') <noncharacter-8FFFE>	[FBD1 FFFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x8FFFE, 0x0061 };
    uint32_t const ces[10] = { 0xFBD1, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_197)
{
    // 8FFFE 0041;	
    // ('\U0008FFFE') <noncharacter-8FFFE>	[FBD1 FFFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x8FFFE, 0x0041 };
    uint32_t const ces[10] = { 0xFBD1, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_198)
{
    // 8FFFE 0062;	
    // ('\U0008FFFE') <noncharacter-8FFFE>	[FBD1 FFFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x8FFFE, 0x0062 };
    uint32_t const ces[10] = { 0xFBD1, 0xFFFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_199)
{
    // 8FFFF 0021;	
    // ('\U0008FFFF') <noncharacter-8FFFF>	[FBD1 FFFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x8FFFF, 0x0021 };
    uint32_t const ces[10] = { 0xFBD1, 0xFFFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_200)
{
    // 8FFFF 003F;	
    // ('\U0008FFFF') <noncharacter-8FFFF>	[FBD1 FFFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x8FFFF, 0x003F };
    uint32_t const ces[10] = { 0xFBD1, 0xFFFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_201)
{
    // 8FFFF 0061;	
    // ('\U0008FFFF') <noncharacter-8FFFF>	[FBD1 FFFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x8FFFF, 0x0061 };
    uint32_t const ces[10] = { 0xFBD1, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_202)
{
    // 8FFFF 0041;	
    // ('\U0008FFFF') <noncharacter-8FFFF>	[FBD1 FFFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x8FFFF, 0x0041 };
    uint32_t const ces[10] = { 0xFBD1, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_203)
{
    // 8FFFF 0062;	
    // ('\U0008FFFF') <noncharacter-8FFFF>	[FBD1 FFFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x8FFFF, 0x0062 };
    uint32_t const ces[10] = { 0xFBD1, 0xFFFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_204)
{
    // 9FFFE 0021;	
    // ('\U0009FFFE') <noncharacter-9FFFE>	[FBD3 FFFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FFFE, 0x0021 };
    uint32_t const ces[10] = { 0xFBD3, 0xFFFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_205)
{
    // 9FFFE 003F;	
    // ('\U0009FFFE') <noncharacter-9FFFE>	[FBD3 FFFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FFFE, 0x003F };
    uint32_t const ces[10] = { 0xFBD3, 0xFFFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_206)
{
    // 9FFFE 0061;	
    // ('\U0009FFFE') <noncharacter-9FFFE>	[FBD3 FFFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FFFE, 0x0061 };
    uint32_t const ces[10] = { 0xFBD3, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_207)
{
    // 9FFFE 0041;	
    // ('\U0009FFFE') <noncharacter-9FFFE>	[FBD3 FFFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x9FFFE, 0x0041 };
    uint32_t const ces[10] = { 0xFBD3, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_208)
{
    // 9FFFE 0062;	
    // ('\U0009FFFE') <noncharacter-9FFFE>	[FBD3 FFFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FFFE, 0x0062 };
    uint32_t const ces[10] = { 0xFBD3, 0xFFFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_209)
{
    // 9FFFF 0021;	
    // ('\U0009FFFF') <noncharacter-9FFFF>	[FBD3 FFFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FFFF, 0x0021 };
    uint32_t const ces[10] = { 0xFBD3, 0xFFFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_210)
{
    // 9FFFF 003F;	
    // ('\U0009FFFF') <noncharacter-9FFFF>	[FBD3 FFFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FFFF, 0x003F };
    uint32_t const ces[10] = { 0xFBD3, 0xFFFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_211)
{
    // 9FFFF 0061;	
    // ('\U0009FFFF') <noncharacter-9FFFF>	[FBD3 FFFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FFFF, 0x0061 };
    uint32_t const ces[10] = { 0xFBD3, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_212)
{
    // 9FFFF 0041;	
    // ('\U0009FFFF') <noncharacter-9FFFF>	[FBD3 FFFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x9FFFF, 0x0041 };
    uint32_t const ces[10] = { 0xFBD3, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_213)
{
    // 9FFFF 0062;	
    // ('\U0009FFFF') <noncharacter-9FFFF>	[FBD3 FFFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x9FFFF, 0x0062 };
    uint32_t const ces[10] = { 0xFBD3, 0xFFFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_214)
{
    // AFFFE 0021;	
    // ('\U000AFFFE') <noncharacter-AFFFE>	[FBD5 FFFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAFFFE, 0x0021 };
    uint32_t const ces[10] = { 0xFBD5, 0xFFFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_215)
{
    // AFFFE 003F;	
    // ('\U000AFFFE') <noncharacter-AFFFE>	[FBD5 FFFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAFFFE, 0x003F };
    uint32_t const ces[10] = { 0xFBD5, 0xFFFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_216)
{
    // AFFFE 0061;	
    // ('\U000AFFFE') <noncharacter-AFFFE>	[FBD5 FFFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAFFFE, 0x0061 };
    uint32_t const ces[10] = { 0xFBD5, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_217)
{
    // AFFFE 0041;	
    // ('\U000AFFFE') <noncharacter-AFFFE>	[FBD5 FFFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAFFFE, 0x0041 };
    uint32_t const ces[10] = { 0xFBD5, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_218)
{
    // AFFFE 0062;	
    // ('\U000AFFFE') <noncharacter-AFFFE>	[FBD5 FFFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAFFFE, 0x0062 };
    uint32_t const ces[10] = { 0xFBD5, 0xFFFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_219)
{
    // AFFFF 0021;	
    // ('\U000AFFFF') <noncharacter-AFFFF>	[FBD5 FFFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAFFFF, 0x0021 };
    uint32_t const ces[10] = { 0xFBD5, 0xFFFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_220)
{
    // AFFFF 003F;	
    // ('\U000AFFFF') <noncharacter-AFFFF>	[FBD5 FFFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAFFFF, 0x003F };
    uint32_t const ces[10] = { 0xFBD5, 0xFFFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_221)
{
    // AFFFF 0061;	
    // ('\U000AFFFF') <noncharacter-AFFFF>	[FBD5 FFFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAFFFF, 0x0061 };
    uint32_t const ces[10] = { 0xFBD5, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_222)
{
    // AFFFF 0041;	
    // ('\U000AFFFF') <noncharacter-AFFFF>	[FBD5 FFFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAFFFF, 0x0041 };
    uint32_t const ces[10] = { 0xFBD5, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_223)
{
    // AFFFF 0062;	
    // ('\U000AFFFF') <noncharacter-AFFFF>	[FBD5 FFFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAFFFF, 0x0062 };
    uint32_t const ces[10] = { 0xFBD5, 0xFFFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_224)
{
    // BFFFE 0021;	
    // ('\U000BFFFE') <noncharacter-BFFFE>	[FBD7 FFFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xBFFFE, 0x0021 };
    uint32_t const ces[10] = { 0xFBD7, 0xFFFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_225)
{
    // BFFFE 003F;	
    // ('\U000BFFFE') <noncharacter-BFFFE>	[FBD7 FFFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xBFFFE, 0x003F };
    uint32_t const ces[10] = { 0xFBD7, 0xFFFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_226)
{
    // BFFFE 0061;	
    // ('\U000BFFFE') <noncharacter-BFFFE>	[FBD7 FFFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xBFFFE, 0x0061 };
    uint32_t const ces[10] = { 0xFBD7, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_227)
{
    // BFFFE 0041;	
    // ('\U000BFFFE') <noncharacter-BFFFE>	[FBD7 FFFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xBFFFE, 0x0041 };
    uint32_t const ces[10] = { 0xFBD7, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_228)
{
    // BFFFE 0062;	
    // ('\U000BFFFE') <noncharacter-BFFFE>	[FBD7 FFFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xBFFFE, 0x0062 };
    uint32_t const ces[10] = { 0xFBD7, 0xFFFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_229)
{
    // BFFFF 0021;	
    // ('\U000BFFFF') <noncharacter-BFFFF>	[FBD7 FFFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xBFFFF, 0x0021 };
    uint32_t const ces[10] = { 0xFBD7, 0xFFFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_230)
{
    // BFFFF 003F;	
    // ('\U000BFFFF') <noncharacter-BFFFF>	[FBD7 FFFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xBFFFF, 0x003F };
    uint32_t const ces[10] = { 0xFBD7, 0xFFFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_231)
{
    // BFFFF 0061;	
    // ('\U000BFFFF') <noncharacter-BFFFF>	[FBD7 FFFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xBFFFF, 0x0061 };
    uint32_t const ces[10] = { 0xFBD7, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_232)
{
    // BFFFF 0041;	
    // ('\U000BFFFF') <noncharacter-BFFFF>	[FBD7 FFFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xBFFFF, 0x0041 };
    uint32_t const ces[10] = { 0xFBD7, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_233)
{
    // BFFFF 0062;	
    // ('\U000BFFFF') <noncharacter-BFFFF>	[FBD7 FFFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xBFFFF, 0x0062 };
    uint32_t const ces[10] = { 0xFBD7, 0xFFFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_234)
{
    // C0000 0021;	
    // ('\U000C0000') <reserved-C0000>	[FBD8 8000 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xC0000, 0x0021 };
    uint32_t const ces[10] = { 0xFBD8, 0x8000, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_235)
{
    // C0000 003F;	
    // ('\U000C0000') <reserved-C0000>	[FBD8 8000 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xC0000, 0x003F };
    uint32_t const ces[10] = { 0xFBD8, 0x8000, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_236)
{
    // C0000 0061;	
    // ('\U000C0000') <reserved-C0000>	[FBD8 8000 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xC0000, 0x0061 };
    uint32_t const ces[10] = { 0xFBD8, 0x8000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_237)
{
    // C0000 0041;	
    // ('\U000C0000') <reserved-C0000>	[FBD8 8000 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xC0000, 0x0041 };
    uint32_t const ces[10] = { 0xFBD8, 0x8000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_238)
{
    // C0000 0062;	
    // ('\U000C0000') <reserved-C0000>	[FBD8 8000 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xC0000, 0x0062 };
    uint32_t const ces[10] = { 0xFBD8, 0x8000, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_239)
{
    // CFFFE 0021;	
    // ('\U000CFFFE') <noncharacter-CFFFE>	[FBD9 FFFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xCFFFE, 0x0021 };
    uint32_t const ces[10] = { 0xFBD9, 0xFFFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_240)
{
    // CFFFE 003F;	
    // ('\U000CFFFE') <noncharacter-CFFFE>	[FBD9 FFFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xCFFFE, 0x003F };
    uint32_t const ces[10] = { 0xFBD9, 0xFFFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_241)
{
    // CFFFE 0061;	
    // ('\U000CFFFE') <noncharacter-CFFFE>	[FBD9 FFFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xCFFFE, 0x0061 };
    uint32_t const ces[10] = { 0xFBD9, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_242)
{
    // CFFFE 0041;	
    // ('\U000CFFFE') <noncharacter-CFFFE>	[FBD9 FFFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xCFFFE, 0x0041 };
    uint32_t const ces[10] = { 0xFBD9, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_243)
{
    // CFFFE 0062;	
    // ('\U000CFFFE') <noncharacter-CFFFE>	[FBD9 FFFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xCFFFE, 0x0062 };
    uint32_t const ces[10] = { 0xFBD9, 0xFFFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_244)
{
    // CFFFF 0021;	
    // ('\U000CFFFF') <noncharacter-CFFFF>	[FBD9 FFFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xCFFFF, 0x0021 };
    uint32_t const ces[10] = { 0xFBD9, 0xFFFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_245)
{
    // CFFFF 003F;	
    // ('\U000CFFFF') <noncharacter-CFFFF>	[FBD9 FFFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xCFFFF, 0x003F };
    uint32_t const ces[10] = { 0xFBD9, 0xFFFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_246)
{
    // CFFFF 0061;	
    // ('\U000CFFFF') <noncharacter-CFFFF>	[FBD9 FFFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xCFFFF, 0x0061 };
    uint32_t const ces[10] = { 0xFBD9, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_247)
{
    // CFFFF 0041;	
    // ('\U000CFFFF') <noncharacter-CFFFF>	[FBD9 FFFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xCFFFF, 0x0041 };
    uint32_t const ces[10] = { 0xFBD9, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_248)
{
    // CFFFF 0062;	
    // ('\U000CFFFF') <noncharacter-CFFFF>	[FBD9 FFFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xCFFFF, 0x0062 };
    uint32_t const ces[10] = { 0xFBD9, 0xFFFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_249)
{
    // D0000 0021;	
    // ('\U000D0000') <reserved-D0000>	[FBDA 8000 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD0000, 0x0021 };
    uint32_t const ces[10] = { 0xFBDA, 0x8000, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_250)
{
    // D0000 003F;	
    // ('\U000D0000') <reserved-D0000>	[FBDA 8000 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD0000, 0x003F };
    uint32_t const ces[10] = { 0xFBDA, 0x8000, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_251)
{
    // D0000 0061;	
    // ('\U000D0000') <reserved-D0000>	[FBDA 8000 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD0000, 0x0061 };
    uint32_t const ces[10] = { 0xFBDA, 0x8000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_252)
{
    // D0000 0041;	
    // ('\U000D0000') <reserved-D0000>	[FBDA 8000 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xD0000, 0x0041 };
    uint32_t const ces[10] = { 0xFBDA, 0x8000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_253)
{
    // D0000 0062;	
    // ('\U000D0000') <reserved-D0000>	[FBDA 8000 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xD0000, 0x0062 };
    uint32_t const ces[10] = { 0xFBDA, 0x8000, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_254)
{
    // DFFFE 0021;	
    // ('\U000DFFFE') <noncharacter-DFFFE>	[FBDB FFFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xDFFFE, 0x0021 };
    uint32_t const ces[10] = { 0xFBDB, 0xFFFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_255)
{
    // DFFFE 003F;	
    // ('\U000DFFFE') <noncharacter-DFFFE>	[FBDB FFFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xDFFFE, 0x003F };
    uint32_t const ces[10] = { 0xFBDB, 0xFFFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_256)
{
    // DFFFE 0061;	
    // ('\U000DFFFE') <noncharacter-DFFFE>	[FBDB FFFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xDFFFE, 0x0061 };
    uint32_t const ces[10] = { 0xFBDB, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_257)
{
    // DFFFE 0041;	
    // ('\U000DFFFE') <noncharacter-DFFFE>	[FBDB FFFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xDFFFE, 0x0041 };
    uint32_t const ces[10] = { 0xFBDB, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_258)
{
    // DFFFE 0062;	
    // ('\U000DFFFE') <noncharacter-DFFFE>	[FBDB FFFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xDFFFE, 0x0062 };
    uint32_t const ces[10] = { 0xFBDB, 0xFFFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_259)
{
    // DFFFF 0021;	
    // ('\U000DFFFF') <noncharacter-DFFFF>	[FBDB FFFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xDFFFF, 0x0021 };
    uint32_t const ces[10] = { 0xFBDB, 0xFFFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_260)
{
    // DFFFF 003F;	
    // ('\U000DFFFF') <noncharacter-DFFFF>	[FBDB FFFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xDFFFF, 0x003F };
    uint32_t const ces[10] = { 0xFBDB, 0xFFFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_261)
{
    // DFFFF 0061;	
    // ('\U000DFFFF') <noncharacter-DFFFF>	[FBDB FFFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xDFFFF, 0x0061 };
    uint32_t const ces[10] = { 0xFBDB, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_262)
{
    // DFFFF 0041;	
    // ('\U000DFFFF') <noncharacter-DFFFF>	[FBDB FFFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xDFFFF, 0x0041 };
    uint32_t const ces[10] = { 0xFBDB, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_263)
{
    // DFFFF 0062;	
    // ('\U000DFFFF') <noncharacter-DFFFF>	[FBDB FFFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xDFFFF, 0x0062 };
    uint32_t const ces[10] = { 0xFBDB, 0xFFFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_264)
{
    // E0000 0021;	
    // ('\U000E0000') null	[FBDC 8000 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE0000, 0x0021 };
    uint32_t const ces[10] = { 0xFBDC, 0x8000, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_265)
{
    // E0000 003F;	
    // ('\U000E0000') null	[FBDC 8000 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE0000, 0x003F };
    uint32_t const ces[10] = { 0xFBDC, 0x8000, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_266)
{
    // E0000 0061;	
    // ('\U000E0000') null	[FBDC 8000 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE0000, 0x0061 };
    uint32_t const ces[10] = { 0xFBDC, 0x8000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_267)
{
    // E0000 0041;	
    // ('\U000E0000') null	[FBDC 8000 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xE0000, 0x0041 };
    uint32_t const ces[10] = { 0xFBDC, 0x8000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_268)
{
    // E0000 0062;	
    // ('\U000E0000') null	[FBDC 8000 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE0000, 0x0062 };
    uint32_t const ces[10] = { 0xFBDC, 0x8000, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_269)
{
    // E0002 0021;	
    // ('\U000E0002') null	[FBDC 8002 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE0002, 0x0021 };
    uint32_t const ces[10] = { 0xFBDC, 0x8002, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_270)
{
    // E0002 003F;	
    // ('\U000E0002') null	[FBDC 8002 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE0002, 0x003F };
    uint32_t const ces[10] = { 0xFBDC, 0x8002, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_271)
{
    // E0002 0061;	
    // ('\U000E0002') null	[FBDC 8002 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE0002, 0x0061 };
    uint32_t const ces[10] = { 0xFBDC, 0x8002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_272)
{
    // E0002 0041;	
    // ('\U000E0002') null	[FBDC 8002 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xE0002, 0x0041 };
    uint32_t const ces[10] = { 0xFBDC, 0x8002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_273)
{
    // E0002 0062;	
    // ('\U000E0002') null	[FBDC 8002 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE0002, 0x0062 };
    uint32_t const ces[10] = { 0xFBDC, 0x8002, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_274)
{
    // E0003 0021;	
    // ('\U000E0003') null	[FBDC 8003 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE0003, 0x0021 };
    uint32_t const ces[10] = { 0xFBDC, 0x8003, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_275)
{
    // E0003 003F;	
    // ('\U000E0003') null	[FBDC 8003 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE0003, 0x003F };
    uint32_t const ces[10] = { 0xFBDC, 0x8003, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_276)
{
    // E0003 0061;	
    // ('\U000E0003') null	[FBDC 8003 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE0003, 0x0061 };
    uint32_t const ces[10] = { 0xFBDC, 0x8003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_277)
{
    // E0003 0041;	
    // ('\U000E0003') null	[FBDC 8003 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xE0003, 0x0041 };
    uint32_t const ces[10] = { 0xFBDC, 0x8003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_278)
{
    // E0003 0062;	
    // ('\U000E0003') null	[FBDC 8003 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE0003, 0x0062 };
    uint32_t const ces[10] = { 0xFBDC, 0x8003, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_279)
{
    // E0004 0021;	
    // ('\U000E0004') null	[FBDC 8004 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE0004, 0x0021 };
    uint32_t const ces[10] = { 0xFBDC, 0x8004, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_280)
{
    // E0004 003F;	
    // ('\U000E0004') null	[FBDC 8004 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE0004, 0x003F };
    uint32_t const ces[10] = { 0xFBDC, 0x8004, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_281)
{
    // E0004 0061;	
    // ('\U000E0004') null	[FBDC 8004 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE0004, 0x0061 };
    uint32_t const ces[10] = { 0xFBDC, 0x8004, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_282)
{
    // E0004 0041;	
    // ('\U000E0004') null	[FBDC 8004 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xE0004, 0x0041 };
    uint32_t const ces[10] = { 0xFBDC, 0x8004, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_283)
{
    // E0004 0062;	
    // ('\U000E0004') null	[FBDC 8004 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE0004, 0x0062 };
    uint32_t const ces[10] = { 0xFBDC, 0x8004, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_284)
{
    // E0005 0021;	
    // ('\U000E0005') null	[FBDC 8005 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE0005, 0x0021 };
    uint32_t const ces[10] = { 0xFBDC, 0x8005, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_285)
{
    // E0005 003F;	
    // ('\U000E0005') null	[FBDC 8005 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE0005, 0x003F };
    uint32_t const ces[10] = { 0xFBDC, 0x8005, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_286)
{
    // E0005 0061;	
    // ('\U000E0005') null	[FBDC 8005 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE0005, 0x0061 };
    uint32_t const ces[10] = { 0xFBDC, 0x8005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_287)
{
    // E0005 0041;	
    // ('\U000E0005') null	[FBDC 8005 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xE0005, 0x0041 };
    uint32_t const ces[10] = { 0xFBDC, 0x8005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_288)
{
    // E0005 0062;	
    // ('\U000E0005') null	[FBDC 8005 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xE0005, 0x0062 };
    uint32_t const ces[10] = { 0xFBDC, 0x8005, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_289)
{
    // EFFFE 0021;	
    // ('\U000EFFFE') <noncharacter-EFFFE>	[FBDD FFFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xEFFFE, 0x0021 };
    uint32_t const ces[10] = { 0xFBDD, 0xFFFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_290)
{
    // EFFFE 003F;	
    // ('\U000EFFFE') <noncharacter-EFFFE>	[FBDD FFFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xEFFFE, 0x003F };
    uint32_t const ces[10] = { 0xFBDD, 0xFFFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_291)
{
    // EFFFE 0061;	
    // ('\U000EFFFE') <noncharacter-EFFFE>	[FBDD FFFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xEFFFE, 0x0061 };
    uint32_t const ces[10] = { 0xFBDD, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_292)
{
    // EFFFE 0041;	
    // ('\U000EFFFE') <noncharacter-EFFFE>	[FBDD FFFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xEFFFE, 0x0041 };
    uint32_t const ces[10] = { 0xFBDD, 0xFFFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_293)
{
    // EFFFE 0062;	
    // ('\U000EFFFE') <noncharacter-EFFFE>	[FBDD FFFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xEFFFE, 0x0062 };
    uint32_t const ces[10] = { 0xFBDD, 0xFFFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_294)
{
    // EFFFF 0021;	
    // ('\U000EFFFF') <noncharacter-EFFFF>	[FBDD FFFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xEFFFF, 0x0021 };
    uint32_t const ces[10] = { 0xFBDD, 0xFFFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_295)
{
    // EFFFF 003F;	
    // ('\U000EFFFF') <noncharacter-EFFFF>	[FBDD FFFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xEFFFF, 0x003F };
    uint32_t const ces[10] = { 0xFBDD, 0xFFFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_296)
{
    // EFFFF 0061;	
    // ('\U000EFFFF') <noncharacter-EFFFF>	[FBDD FFFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xEFFFF, 0x0061 };
    uint32_t const ces[10] = { 0xFBDD, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_297)
{
    // EFFFF 0041;	
    // ('\U000EFFFF') <noncharacter-EFFFF>	[FBDD FFFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xEFFFF, 0x0041 };
    uint32_t const ces[10] = { 0xFBDD, 0xFFFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_298)
{
    // EFFFF 0062;	
    // ('\U000EFFFF') <noncharacter-EFFFF>	[FBDD FFFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xEFFFF, 0x0062 };
    uint32_t const ces[10] = { 0xFBDD, 0xFFFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_299)
{
    // F0000 0021;	
    // ('\U000F0000') <private-use-F0000>	[FBDE 8000 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0000, 0x0021 };
    uint32_t const ces[10] = { 0xFBDE, 0x8000, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_300)
{
    // F0000 003F;	
    // ('\U000F0000') <private-use-F0000>	[FBDE 8000 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0000, 0x003F };
    uint32_t const ces[10] = { 0xFBDE, 0x8000, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_301)
{
    // F0000 0061;	
    // ('\U000F0000') <private-use-F0000>	[FBDE 8000 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0000, 0x0061 };
    uint32_t const ces[10] = { 0xFBDE, 0x8000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_302)
{
    // F0000 0041;	
    // ('\U000F0000') <private-use-F0000>	[FBDE 8000 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF0000, 0x0041 };
    uint32_t const ces[10] = { 0xFBDE, 0x8000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_303)
{
    // F0000 0062;	
    // ('\U000F0000') <private-use-F0000>	[FBDE 8000 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0000, 0x0062 };
    uint32_t const ces[10] = { 0xFBDE, 0x8000, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_304)
{
    // F0001 0021;	
    // ('\U000F0001') <private-use-F0001>	[FBDE 8001 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0001, 0x0021 };
    uint32_t const ces[10] = { 0xFBDE, 0x8001, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_305)
{
    // F0001 003F;	
    // ('\U000F0001') <private-use-F0001>	[FBDE 8001 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0001, 0x003F };
    uint32_t const ces[10] = { 0xFBDE, 0x8001, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_306)
{
    // F0001 0061;	
    // ('\U000F0001') <private-use-F0001>	[FBDE 8001 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0001, 0x0061 };
    uint32_t const ces[10] = { 0xFBDE, 0x8001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_307)
{
    // F0001 0041;	
    // ('\U000F0001') <private-use-F0001>	[FBDE 8001 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF0001, 0x0041 };
    uint32_t const ces[10] = { 0xFBDE, 0x8001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_308)
{
    // F0001 0062;	
    // ('\U000F0001') <private-use-F0001>	[FBDE 8001 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0001, 0x0062 };
    uint32_t const ces[10] = { 0xFBDE, 0x8001, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_309)
{
    // F0002 0021;	
    // ('\U000F0002') <private-use-F0002>	[FBDE 8002 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0002, 0x0021 };
    uint32_t const ces[10] = { 0xFBDE, 0x8002, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_310)
{
    // F0002 003F;	
    // ('\U000F0002') <private-use-F0002>	[FBDE 8002 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0002, 0x003F };
    uint32_t const ces[10] = { 0xFBDE, 0x8002, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_311)
{
    // F0002 0061;	
    // ('\U000F0002') <private-use-F0002>	[FBDE 8002 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0002, 0x0061 };
    uint32_t const ces[10] = { 0xFBDE, 0x8002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_312)
{
    // F0002 0041;	
    // ('\U000F0002') <private-use-F0002>	[FBDE 8002 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF0002, 0x0041 };
    uint32_t const ces[10] = { 0xFBDE, 0x8002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_313)
{
    // F0002 0062;	
    // ('\U000F0002') <private-use-F0002>	[FBDE 8002 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0002, 0x0062 };
    uint32_t const ces[10] = { 0xFBDE, 0x8002, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_314)
{
    // F0003 0021;	
    // ('\U000F0003') <private-use-F0003>	[FBDE 8003 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0003, 0x0021 };
    uint32_t const ces[10] = { 0xFBDE, 0x8003, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_315)
{
    // F0003 003F;	
    // ('\U000F0003') <private-use-F0003>	[FBDE 8003 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0003, 0x003F };
    uint32_t const ces[10] = { 0xFBDE, 0x8003, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_316)
{
    // F0003 0061;	
    // ('\U000F0003') <private-use-F0003>	[FBDE 8003 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0003, 0x0061 };
    uint32_t const ces[10] = { 0xFBDE, 0x8003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_317)
{
    // F0003 0041;	
    // ('\U000F0003') <private-use-F0003>	[FBDE 8003 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF0003, 0x0041 };
    uint32_t const ces[10] = { 0xFBDE, 0x8003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_318)
{
    // F0003 0062;	
    // ('\U000F0003') <private-use-F0003>	[FBDE 8003 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0003, 0x0062 };
    uint32_t const ces[10] = { 0xFBDE, 0x8003, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_319)
{
    // F0004 0021;	
    // ('\U000F0004') <private-use-F0004>	[FBDE 8004 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0004, 0x0021 };
    uint32_t const ces[10] = { 0xFBDE, 0x8004, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_320)
{
    // F0004 003F;	
    // ('\U000F0004') <private-use-F0004>	[FBDE 8004 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0004, 0x003F };
    uint32_t const ces[10] = { 0xFBDE, 0x8004, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_321)
{
    // F0004 0061;	
    // ('\U000F0004') <private-use-F0004>	[FBDE 8004 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0004, 0x0061 };
    uint32_t const ces[10] = { 0xFBDE, 0x8004, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_322)
{
    // F0004 0041;	
    // ('\U000F0004') <private-use-F0004>	[FBDE 8004 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF0004, 0x0041 };
    uint32_t const ces[10] = { 0xFBDE, 0x8004, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_323)
{
    // F0004 0062;	
    // ('\U000F0004') <private-use-F0004>	[FBDE 8004 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0004, 0x0062 };
    uint32_t const ces[10] = { 0xFBDE, 0x8004, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_324)
{
    // F0005 0021;	
    // ('\U000F0005') <private-use-F0005>	[FBDE 8005 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0005, 0x0021 };
    uint32_t const ces[10] = { 0xFBDE, 0x8005, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_325)
{
    // F0005 003F;	
    // ('\U000F0005') <private-use-F0005>	[FBDE 8005 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0005, 0x003F };
    uint32_t const ces[10] = { 0xFBDE, 0x8005, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_326)
{
    // F0005 0061;	
    // ('\U000F0005') <private-use-F0005>	[FBDE 8005 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0005, 0x0061 };
    uint32_t const ces[10] = { 0xFBDE, 0x8005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_327)
{
    // F0005 0041;	
    // ('\U000F0005') <private-use-F0005>	[FBDE 8005 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF0005, 0x0041 };
    uint32_t const ces[10] = { 0xFBDE, 0x8005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_328)
{
    // F0005 0062;	
    // ('\U000F0005') <private-use-F0005>	[FBDE 8005 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF0005, 0x0062 };
    uint32_t const ces[10] = { 0xFBDE, 0x8005, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_329)
{
    // F00F8 0021;	
    // ('\U000F00F8') <private-use-F00F8>	[FBDE 80F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00F8, 0x0021 };
    uint32_t const ces[10] = { 0xFBDE, 0x80F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_330)
{
    // F00F8 003F;	
    // ('\U000F00F8') <private-use-F00F8>	[FBDE 80F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00F8, 0x003F };
    uint32_t const ces[10] = { 0xFBDE, 0x80F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_331)
{
    // F00F8 0061;	
    // ('\U000F00F8') <private-use-F00F8>	[FBDE 80F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00F8, 0x0061 };
    uint32_t const ces[10] = { 0xFBDE, 0x80F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_332)
{
    // F00F8 0041;	
    // ('\U000F00F8') <private-use-F00F8>	[FBDE 80F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF00F8, 0x0041 };
    uint32_t const ces[10] = { 0xFBDE, 0x80F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_333)
{
    // F00F8 0062;	
    // ('\U000F00F8') <private-use-F00F8>	[FBDE 80F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00F8, 0x0062 };
    uint32_t const ces[10] = { 0xFBDE, 0x80F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_334)
{
    // F00F9 0021;	
    // ('\U000F00F9') <private-use-F00F9>	[FBDE 80F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00F9, 0x0021 };
    uint32_t const ces[10] = { 0xFBDE, 0x80F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_335)
{
    // F00F9 003F;	
    // ('\U000F00F9') <private-use-F00F9>	[FBDE 80F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00F9, 0x003F };
    uint32_t const ces[10] = { 0xFBDE, 0x80F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_336)
{
    // F00F9 0061;	
    // ('\U000F00F9') <private-use-F00F9>	[FBDE 80F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00F9, 0x0061 };
    uint32_t const ces[10] = { 0xFBDE, 0x80F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_337)
{
    // F00F9 0041;	
    // ('\U000F00F9') <private-use-F00F9>	[FBDE 80F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF00F9, 0x0041 };
    uint32_t const ces[10] = { 0xFBDE, 0x80F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_338)
{
    // F00F9 0062;	
    // ('\U000F00F9') <private-use-F00F9>	[FBDE 80F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00F9, 0x0062 };
    uint32_t const ces[10] = { 0xFBDE, 0x80F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_339)
{
    // F00FA 0021;	
    // ('\U000F00FA') <private-use-F00FA>	[FBDE 80FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00FA, 0x0021 };
    uint32_t const ces[10] = { 0xFBDE, 0x80FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_340)
{
    // F00FA 003F;	
    // ('\U000F00FA') <private-use-F00FA>	[FBDE 80FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00FA, 0x003F };
    uint32_t const ces[10] = { 0xFBDE, 0x80FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_341)
{
    // F00FA 0061;	
    // ('\U000F00FA') <private-use-F00FA>	[FBDE 80FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00FA, 0x0061 };
    uint32_t const ces[10] = { 0xFBDE, 0x80FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_342)
{
    // F00FA 0041;	
    // ('\U000F00FA') <private-use-F00FA>	[FBDE 80FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF00FA, 0x0041 };
    uint32_t const ces[10] = { 0xFBDE, 0x80FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_343)
{
    // F00FA 0062;	
    // ('\U000F00FA') <private-use-F00FA>	[FBDE 80FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00FA, 0x0062 };
    uint32_t const ces[10] = { 0xFBDE, 0x80FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_344)
{
    // F00FB 0021;	
    // ('\U000F00FB') <private-use-F00FB>	[FBDE 80FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00FB, 0x0021 };
    uint32_t const ces[10] = { 0xFBDE, 0x80FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_345)
{
    // F00FB 003F;	
    // ('\U000F00FB') <private-use-F00FB>	[FBDE 80FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00FB, 0x003F };
    uint32_t const ces[10] = { 0xFBDE, 0x80FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_346)
{
    // F00FB 0061;	
    // ('\U000F00FB') <private-use-F00FB>	[FBDE 80FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00FB, 0x0061 };
    uint32_t const ces[10] = { 0xFBDE, 0x80FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_347)
{
    // F00FB 0041;	
    // ('\U000F00FB') <private-use-F00FB>	[FBDE 80FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF00FB, 0x0041 };
    uint32_t const ces[10] = { 0xFBDE, 0x80FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_348)
{
    // F00FB 0062;	
    // ('\U000F00FB') <private-use-F00FB>	[FBDE 80FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00FB, 0x0062 };
    uint32_t const ces[10] = { 0xFBDE, 0x80FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_349)
{
    // F00FC 0021;	
    // ('\U000F00FC') <private-use-F00FC>	[FBDE 80FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00FC, 0x0021 };
    uint32_t const ces[10] = { 0xFBDE, 0x80FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_350)
{
    // F00FC 003F;	
    // ('\U000F00FC') <private-use-F00FC>	[FBDE 80FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00FC, 0x003F };
    uint32_t const ces[10] = { 0xFBDE, 0x80FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_351)
{
    // F00FC 0061;	
    // ('\U000F00FC') <private-use-F00FC>	[FBDE 80FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00FC, 0x0061 };
    uint32_t const ces[10] = { 0xFBDE, 0x80FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_352)
{
    // F00FC 0041;	
    // ('\U000F00FC') <private-use-F00FC>	[FBDE 80FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF00FC, 0x0041 };
    uint32_t const ces[10] = { 0xFBDE, 0x80FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_353)
{
    // F00FC 0062;	
    // ('\U000F00FC') <private-use-F00FC>	[FBDE 80FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00FC, 0x0062 };
    uint32_t const ces[10] = { 0xFBDE, 0x80FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_354)
{
    // F00FD 0021;	
    // ('\U000F00FD') <private-use-F00FD>	[FBDE 80FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00FD, 0x0021 };
    uint32_t const ces[10] = { 0xFBDE, 0x80FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_355)
{
    // F00FD 003F;	
    // ('\U000F00FD') <private-use-F00FD>	[FBDE 80FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00FD, 0x003F };
    uint32_t const ces[10] = { 0xFBDE, 0x80FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_356)
{
    // F00FD 0061;	
    // ('\U000F00FD') <private-use-F00FD>	[FBDE 80FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00FD, 0x0061 };
    uint32_t const ces[10] = { 0xFBDE, 0x80FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_357)
{
    // F00FD 0041;	
    // ('\U000F00FD') <private-use-F00FD>	[FBDE 80FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xF00FD, 0x0041 };
    uint32_t const ces[10] = { 0xFBDE, 0x80FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_358)
{
    // F00FD 0062;	
    // ('\U000F00FD') <private-use-F00FD>	[FBDE 80FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xF00FD, 0x0062 };
    uint32_t const ces[10] = { 0xFBDE, 0x80FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_359)
{
    // FFF00 0021;	
    // ('\U000FFF00') <private-use-FFF00>	[FBDF FF00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF00, 0x0021 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_360)
{
    // FFF00 003F;	
    // ('\U000FFF00') <private-use-FFF00>	[FBDF FF00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF00, 0x003F };
    uint32_t const ces[10] = { 0xFBDF, 0xFF00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_361)
{
    // FFF00 0061;	
    // ('\U000FFF00') <private-use-FFF00>	[FBDF FF00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF00, 0x0061 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_362)
{
    // FFF00 0041;	
    // ('\U000FFF00') <private-use-FFF00>	[FBDF FF00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFFF00, 0x0041 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_363)
{
    // FFF00 0062;	
    // ('\U000FFF00') <private-use-FFF00>	[FBDF FF00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF00, 0x0062 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_364)
{
    // FFF01 0021;	
    // ('\U000FFF01') <private-use-FFF01>	[FBDF FF01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF01, 0x0021 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_365)
{
    // FFF01 003F;	
    // ('\U000FFF01') <private-use-FFF01>	[FBDF FF01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF01, 0x003F };
    uint32_t const ces[10] = { 0xFBDF, 0xFF01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_366)
{
    // FFF01 0061;	
    // ('\U000FFF01') <private-use-FFF01>	[FBDF FF01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF01, 0x0061 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_367)
{
    // FFF01 0041;	
    // ('\U000FFF01') <private-use-FFF01>	[FBDF FF01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFFF01, 0x0041 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_368)
{
    // FFF01 0062;	
    // ('\U000FFF01') <private-use-FFF01>	[FBDF FF01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF01, 0x0062 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_369)
{
    // FFF02 0021;	
    // ('\U000FFF02') <private-use-FFF02>	[FBDF FF02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF02, 0x0021 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_370)
{
    // FFF02 003F;	
    // ('\U000FFF02') <private-use-FFF02>	[FBDF FF02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF02, 0x003F };
    uint32_t const ces[10] = { 0xFBDF, 0xFF02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_371)
{
    // FFF02 0061;	
    // ('\U000FFF02') <private-use-FFF02>	[FBDF FF02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF02, 0x0061 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_372)
{
    // FFF02 0041;	
    // ('\U000FFF02') <private-use-FFF02>	[FBDF FF02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFFF02, 0x0041 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_373)
{
    // FFF02 0062;	
    // ('\U000FFF02') <private-use-FFF02>	[FBDF FF02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF02, 0x0062 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_374)
{
    // FFF03 0021;	
    // ('\U000FFF03') <private-use-FFF03>	[FBDF FF03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF03, 0x0021 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_375)
{
    // FFF03 003F;	
    // ('\U000FFF03') <private-use-FFF03>	[FBDF FF03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF03, 0x003F };
    uint32_t const ces[10] = { 0xFBDF, 0xFF03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_376)
{
    // FFF03 0061;	
    // ('\U000FFF03') <private-use-FFF03>	[FBDF FF03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF03, 0x0061 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_377)
{
    // FFF03 0041;	
    // ('\U000FFF03') <private-use-FFF03>	[FBDF FF03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFFF03, 0x0041 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_378)
{
    // FFF03 0062;	
    // ('\U000FFF03') <private-use-FFF03>	[FBDF FF03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF03, 0x0062 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_379)
{
    // FFF04 0021;	
    // ('\U000FFF04') <private-use-FFF04>	[FBDF FF04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF04, 0x0021 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_380)
{
    // FFF04 003F;	
    // ('\U000FFF04') <private-use-FFF04>	[FBDF FF04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF04, 0x003F };
    uint32_t const ces[10] = { 0xFBDF, 0xFF04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_381)
{
    // FFF04 0061;	
    // ('\U000FFF04') <private-use-FFF04>	[FBDF FF04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF04, 0x0061 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_382)
{
    // FFF04 0041;	
    // ('\U000FFF04') <private-use-FFF04>	[FBDF FF04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFFF04, 0x0041 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_383)
{
    // FFF04 0062;	
    // ('\U000FFF04') <private-use-FFF04>	[FBDF FF04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF04, 0x0062 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_384)
{
    // FFF05 0021;	
    // ('\U000FFF05') <private-use-FFF05>	[FBDF FF05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF05, 0x0021 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_385)
{
    // FFF05 003F;	
    // ('\U000FFF05') <private-use-FFF05>	[FBDF FF05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF05, 0x003F };
    uint32_t const ces[10] = { 0xFBDF, 0xFF05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_386)
{
    // FFF05 0061;	
    // ('\U000FFF05') <private-use-FFF05>	[FBDF FF05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF05, 0x0061 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_387)
{
    // FFF05 0041;	
    // ('\U000FFF05') <private-use-FFF05>	[FBDF FF05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFFF05, 0x0041 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_388)
{
    // FFF05 0062;	
    // ('\U000FFF05') <private-use-FFF05>	[FBDF FF05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFF05, 0x0062 };
    uint32_t const ces[10] = { 0xFBDF, 0xFF05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_389)
{
    // FFFF8 0021;	
    // ('\U000FFFF8') <private-use-FFFF8>	[FBDF FFF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFF8, 0x0021 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_390)
{
    // FFFF8 003F;	
    // ('\U000FFFF8') <private-use-FFFF8>	[FBDF FFF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFF8, 0x003F };
    uint32_t const ces[10] = { 0xFBDF, 0xFFF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_391)
{
    // FFFF8 0061;	
    // ('\U000FFFF8') <private-use-FFFF8>	[FBDF FFF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFF8, 0x0061 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_392)
{
    // FFFF8 0041;	
    // ('\U000FFFF8') <private-use-FFFF8>	[FBDF FFF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFFFF8, 0x0041 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_393)
{
    // FFFF8 0062;	
    // ('\U000FFFF8') <private-use-FFFF8>	[FBDF FFF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFF8, 0x0062 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_394)
{
    // FFFF9 0021;	
    // ('\U000FFFF9') <private-use-FFFF9>	[FBDF FFF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFF9, 0x0021 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_395)
{
    // FFFF9 003F;	
    // ('\U000FFFF9') <private-use-FFFF9>	[FBDF FFF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFF9, 0x003F };
    uint32_t const ces[10] = { 0xFBDF, 0xFFF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_396)
{
    // FFFF9 0061;	
    // ('\U000FFFF9') <private-use-FFFF9>	[FBDF FFF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFF9, 0x0061 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_397)
{
    // FFFF9 0041;	
    // ('\U000FFFF9') <private-use-FFFF9>	[FBDF FFF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFFFF9, 0x0041 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_398)
{
    // FFFF9 0062;	
    // ('\U000FFFF9') <private-use-FFFF9>	[FBDF FFF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFF9, 0x0062 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_399)
{
    // FFFFA 0021;	
    // ('\U000FFFFA') <private-use-FFFFA>	[FBDF FFFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFFA, 0x0021 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_400)
{
    // FFFFA 003F;	
    // ('\U000FFFFA') <private-use-FFFFA>	[FBDF FFFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFFA, 0x003F };
    uint32_t const ces[10] = { 0xFBDF, 0xFFFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_401)
{
    // FFFFA 0061;	
    // ('\U000FFFFA') <private-use-FFFFA>	[FBDF FFFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFFA, 0x0061 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_402)
{
    // FFFFA 0041;	
    // ('\U000FFFFA') <private-use-FFFFA>	[FBDF FFFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFFFFA, 0x0041 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_403)
{
    // FFFFA 0062;	
    // ('\U000FFFFA') <private-use-FFFFA>	[FBDF FFFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFFA, 0x0062 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_404)
{
    // FFFFB 0021;	
    // ('\U000FFFFB') <private-use-FFFFB>	[FBDF FFFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFFB, 0x0021 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_405)
{
    // FFFFB 003F;	
    // ('\U000FFFFB') <private-use-FFFFB>	[FBDF FFFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFFB, 0x003F };
    uint32_t const ces[10] = { 0xFBDF, 0xFFFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_406)
{
    // FFFFB 0061;	
    // ('\U000FFFFB') <private-use-FFFFB>	[FBDF FFFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFFB, 0x0061 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_407)
{
    // FFFFB 0041;	
    // ('\U000FFFFB') <private-use-FFFFB>	[FBDF FFFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFFFFB, 0x0041 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_408)
{
    // FFFFB 0062;	
    // ('\U000FFFFB') <private-use-FFFFB>	[FBDF FFFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFFB, 0x0062 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_409)
{
    // FFFFC 0021;	
    // ('\U000FFFFC') <private-use-FFFFC>	[FBDF FFFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFFC, 0x0021 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_410)
{
    // FFFFC 003F;	
    // ('\U000FFFFC') <private-use-FFFFC>	[FBDF FFFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFFC, 0x003F };
    uint32_t const ces[10] = { 0xFBDF, 0xFFFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_411)
{
    // FFFFC 0061;	
    // ('\U000FFFFC') <private-use-FFFFC>	[FBDF FFFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFFC, 0x0061 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_412)
{
    // FFFFC 0041;	
    // ('\U000FFFFC') <private-use-FFFFC>	[FBDF FFFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFFFFC, 0x0041 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_413)
{
    // FFFFC 0062;	
    // ('\U000FFFFC') <private-use-FFFFC>	[FBDF FFFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFFC, 0x0062 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_414)
{
    // FFFFD 0021;	
    // ('\U000FFFFD') <private-use-FFFFD>	[FBDF FFFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFFD, 0x0021 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_415)
{
    // FFFFD 003F;	
    // ('\U000FFFFD') <private-use-FFFFD>	[FBDF FFFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFFD, 0x003F };
    uint32_t const ces[10] = { 0xFBDF, 0xFFFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_416)
{
    // FFFFD 0061;	
    // ('\U000FFFFD') <private-use-FFFFD>	[FBDF FFFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFFD, 0x0061 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_417)
{
    // FFFFD 0041;	
    // ('\U000FFFFD') <private-use-FFFFD>	[FBDF FFFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xFFFFD, 0x0041 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_418)
{
    // FFFFD 0062;	
    // ('\U000FFFFD') <private-use-FFFFD>	[FBDF FFFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xFFFFD, 0x0062 };
    uint32_t const ces[10] = { 0xFBDF, 0xFFFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_419)
{
    // 100000 0021;	
    // ('\U00100000') <private-use-100000>	[FBE0 8000 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100000, 0x0021 };
    uint32_t const ces[10] = { 0xFBE0, 0x8000, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_420)
{
    // 100000 003F;	
    // ('\U00100000') <private-use-100000>	[FBE0 8000 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100000, 0x003F };
    uint32_t const ces[10] = { 0xFBE0, 0x8000, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_421)
{
    // 100000 0061;	
    // ('\U00100000') <private-use-100000>	[FBE0 8000 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100000, 0x0061 };
    uint32_t const ces[10] = { 0xFBE0, 0x8000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_422)
{
    // 100000 0041;	
    // ('\U00100000') <private-use-100000>	[FBE0 8000 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100000, 0x0041 };
    uint32_t const ces[10] = { 0xFBE0, 0x8000, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_423)
{
    // 100000 0062;	
    // ('\U00100000') <private-use-100000>	[FBE0 8000 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100000, 0x0062 };
    uint32_t const ces[10] = { 0xFBE0, 0x8000, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_424)
{
    // 100001 0021;	
    // ('\U00100001') <private-use-100001>	[FBE0 8001 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100001, 0x0021 };
    uint32_t const ces[10] = { 0xFBE0, 0x8001, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_425)
{
    // 100001 003F;	
    // ('\U00100001') <private-use-100001>	[FBE0 8001 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100001, 0x003F };
    uint32_t const ces[10] = { 0xFBE0, 0x8001, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_426)
{
    // 100001 0061;	
    // ('\U00100001') <private-use-100001>	[FBE0 8001 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100001, 0x0061 };
    uint32_t const ces[10] = { 0xFBE0, 0x8001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_427)
{
    // 100001 0041;	
    // ('\U00100001') <private-use-100001>	[FBE0 8001 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100001, 0x0041 };
    uint32_t const ces[10] = { 0xFBE0, 0x8001, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_428)
{
    // 100001 0062;	
    // ('\U00100001') <private-use-100001>	[FBE0 8001 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100001, 0x0062 };
    uint32_t const ces[10] = { 0xFBE0, 0x8001, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_429)
{
    // 100002 0021;	
    // ('\U00100002') <private-use-100002>	[FBE0 8002 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100002, 0x0021 };
    uint32_t const ces[10] = { 0xFBE0, 0x8002, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_430)
{
    // 100002 003F;	
    // ('\U00100002') <private-use-100002>	[FBE0 8002 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100002, 0x003F };
    uint32_t const ces[10] = { 0xFBE0, 0x8002, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_431)
{
    // 100002 0061;	
    // ('\U00100002') <private-use-100002>	[FBE0 8002 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100002, 0x0061 };
    uint32_t const ces[10] = { 0xFBE0, 0x8002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_432)
{
    // 100002 0041;	
    // ('\U00100002') <private-use-100002>	[FBE0 8002 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100002, 0x0041 };
    uint32_t const ces[10] = { 0xFBE0, 0x8002, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_433)
{
    // 100002 0062;	
    // ('\U00100002') <private-use-100002>	[FBE0 8002 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100002, 0x0062 };
    uint32_t const ces[10] = { 0xFBE0, 0x8002, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_434)
{
    // 100003 0021;	
    // ('\U00100003') <private-use-100003>	[FBE0 8003 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100003, 0x0021 };
    uint32_t const ces[10] = { 0xFBE0, 0x8003, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_435)
{
    // 100003 003F;	
    // ('\U00100003') <private-use-100003>	[FBE0 8003 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100003, 0x003F };
    uint32_t const ces[10] = { 0xFBE0, 0x8003, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_436)
{
    // 100003 0061;	
    // ('\U00100003') <private-use-100003>	[FBE0 8003 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100003, 0x0061 };
    uint32_t const ces[10] = { 0xFBE0, 0x8003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_437)
{
    // 100003 0041;	
    // ('\U00100003') <private-use-100003>	[FBE0 8003 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100003, 0x0041 };
    uint32_t const ces[10] = { 0xFBE0, 0x8003, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_438)
{
    // 100003 0062;	
    // ('\U00100003') <private-use-100003>	[FBE0 8003 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100003, 0x0062 };
    uint32_t const ces[10] = { 0xFBE0, 0x8003, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_439)
{
    // 100004 0021;	
    // ('\U00100004') <private-use-100004>	[FBE0 8004 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100004, 0x0021 };
    uint32_t const ces[10] = { 0xFBE0, 0x8004, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_440)
{
    // 100004 003F;	
    // ('\U00100004') <private-use-100004>	[FBE0 8004 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100004, 0x003F };
    uint32_t const ces[10] = { 0xFBE0, 0x8004, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_441)
{
    // 100004 0061;	
    // ('\U00100004') <private-use-100004>	[FBE0 8004 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100004, 0x0061 };
    uint32_t const ces[10] = { 0xFBE0, 0x8004, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_442)
{
    // 100004 0041;	
    // ('\U00100004') <private-use-100004>	[FBE0 8004 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100004, 0x0041 };
    uint32_t const ces[10] = { 0xFBE0, 0x8004, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_443)
{
    // 100004 0062;	
    // ('\U00100004') <private-use-100004>	[FBE0 8004 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100004, 0x0062 };
    uint32_t const ces[10] = { 0xFBE0, 0x8004, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_444)
{
    // 100005 0021;	
    // ('\U00100005') <private-use-100005>	[FBE0 8005 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100005, 0x0021 };
    uint32_t const ces[10] = { 0xFBE0, 0x8005, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_445)
{
    // 100005 003F;	
    // ('\U00100005') <private-use-100005>	[FBE0 8005 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100005, 0x003F };
    uint32_t const ces[10] = { 0xFBE0, 0x8005, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_446)
{
    // 100005 0061;	
    // ('\U00100005') <private-use-100005>	[FBE0 8005 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100005, 0x0061 };
    uint32_t const ces[10] = { 0xFBE0, 0x8005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_447)
{
    // 100005 0041;	
    // ('\U00100005') <private-use-100005>	[FBE0 8005 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x100005, 0x0041 };
    uint32_t const ces[10] = { 0xFBE0, 0x8005, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_448)
{
    // 100005 0062;	
    // ('\U00100005') <private-use-100005>	[FBE0 8005 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x100005, 0x0062 };
    uint32_t const ces[10] = { 0xFBE0, 0x8005, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_449)
{
    // 1000F8 0021;	
    // ('\U001000F8') <private-use-1000F8>	[FBE0 80F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000F8, 0x0021 };
    uint32_t const ces[10] = { 0xFBE0, 0x80F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_450)
{
    // 1000F8 003F;	
    // ('\U001000F8') <private-use-1000F8>	[FBE0 80F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000F8, 0x003F };
    uint32_t const ces[10] = { 0xFBE0, 0x80F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_451)
{
    // 1000F8 0061;	
    // ('\U001000F8') <private-use-1000F8>	[FBE0 80F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000F8, 0x0061 };
    uint32_t const ces[10] = { 0xFBE0, 0x80F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_452)
{
    // 1000F8 0041;	
    // ('\U001000F8') <private-use-1000F8>	[FBE0 80F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1000F8, 0x0041 };
    uint32_t const ces[10] = { 0xFBE0, 0x80F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_453)
{
    // 1000F8 0062;	
    // ('\U001000F8') <private-use-1000F8>	[FBE0 80F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000F8, 0x0062 };
    uint32_t const ces[10] = { 0xFBE0, 0x80F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_454)
{
    // 1000F9 0021;	
    // ('\U001000F9') <private-use-1000F9>	[FBE0 80F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000F9, 0x0021 };
    uint32_t const ces[10] = { 0xFBE0, 0x80F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_455)
{
    // 1000F9 003F;	
    // ('\U001000F9') <private-use-1000F9>	[FBE0 80F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000F9, 0x003F };
    uint32_t const ces[10] = { 0xFBE0, 0x80F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_456)
{
    // 1000F9 0061;	
    // ('\U001000F9') <private-use-1000F9>	[FBE0 80F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000F9, 0x0061 };
    uint32_t const ces[10] = { 0xFBE0, 0x80F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_457)
{
    // 1000F9 0041;	
    // ('\U001000F9') <private-use-1000F9>	[FBE0 80F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1000F9, 0x0041 };
    uint32_t const ces[10] = { 0xFBE0, 0x80F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_458)
{
    // 1000F9 0062;	
    // ('\U001000F9') <private-use-1000F9>	[FBE0 80F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000F9, 0x0062 };
    uint32_t const ces[10] = { 0xFBE0, 0x80F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_459)
{
    // 1000FA 0021;	
    // ('\U001000FA') <private-use-1000FA>	[FBE0 80FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000FA, 0x0021 };
    uint32_t const ces[10] = { 0xFBE0, 0x80FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_460)
{
    // 1000FA 003F;	
    // ('\U001000FA') <private-use-1000FA>	[FBE0 80FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000FA, 0x003F };
    uint32_t const ces[10] = { 0xFBE0, 0x80FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_461)
{
    // 1000FA 0061;	
    // ('\U001000FA') <private-use-1000FA>	[FBE0 80FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000FA, 0x0061 };
    uint32_t const ces[10] = { 0xFBE0, 0x80FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_462)
{
    // 1000FA 0041;	
    // ('\U001000FA') <private-use-1000FA>	[FBE0 80FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1000FA, 0x0041 };
    uint32_t const ces[10] = { 0xFBE0, 0x80FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_463)
{
    // 1000FA 0062;	
    // ('\U001000FA') <private-use-1000FA>	[FBE0 80FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000FA, 0x0062 };
    uint32_t const ces[10] = { 0xFBE0, 0x80FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_464)
{
    // 1000FB 0021;	
    // ('\U001000FB') <private-use-1000FB>	[FBE0 80FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000FB, 0x0021 };
    uint32_t const ces[10] = { 0xFBE0, 0x80FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_465)
{
    // 1000FB 003F;	
    // ('\U001000FB') <private-use-1000FB>	[FBE0 80FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000FB, 0x003F };
    uint32_t const ces[10] = { 0xFBE0, 0x80FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_466)
{
    // 1000FB 0061;	
    // ('\U001000FB') <private-use-1000FB>	[FBE0 80FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000FB, 0x0061 };
    uint32_t const ces[10] = { 0xFBE0, 0x80FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_467)
{
    // 1000FB 0041;	
    // ('\U001000FB') <private-use-1000FB>	[FBE0 80FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1000FB, 0x0041 };
    uint32_t const ces[10] = { 0xFBE0, 0x80FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_468)
{
    // 1000FB 0062;	
    // ('\U001000FB') <private-use-1000FB>	[FBE0 80FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000FB, 0x0062 };
    uint32_t const ces[10] = { 0xFBE0, 0x80FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_469)
{
    // 1000FC 0021;	
    // ('\U001000FC') <private-use-1000FC>	[FBE0 80FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000FC, 0x0021 };
    uint32_t const ces[10] = { 0xFBE0, 0x80FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_470)
{
    // 1000FC 003F;	
    // ('\U001000FC') <private-use-1000FC>	[FBE0 80FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000FC, 0x003F };
    uint32_t const ces[10] = { 0xFBE0, 0x80FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_471)
{
    // 1000FC 0061;	
    // ('\U001000FC') <private-use-1000FC>	[FBE0 80FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000FC, 0x0061 };
    uint32_t const ces[10] = { 0xFBE0, 0x80FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_472)
{
    // 1000FC 0041;	
    // ('\U001000FC') <private-use-1000FC>	[FBE0 80FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1000FC, 0x0041 };
    uint32_t const ces[10] = { 0xFBE0, 0x80FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_473)
{
    // 1000FC 0062;	
    // ('\U001000FC') <private-use-1000FC>	[FBE0 80FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000FC, 0x0062 };
    uint32_t const ces[10] = { 0xFBE0, 0x80FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_474)
{
    // 1000FD 0021;	
    // ('\U001000FD') <private-use-1000FD>	[FBE0 80FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000FD, 0x0021 };
    uint32_t const ces[10] = { 0xFBE0, 0x80FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_475)
{
    // 1000FD 003F;	
    // ('\U001000FD') <private-use-1000FD>	[FBE0 80FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000FD, 0x003F };
    uint32_t const ces[10] = { 0xFBE0, 0x80FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_476)
{
    // 1000FD 0061;	
    // ('\U001000FD') <private-use-1000FD>	[FBE0 80FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000FD, 0x0061 };
    uint32_t const ces[10] = { 0xFBE0, 0x80FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_477)
{
    // 1000FD 0041;	
    // ('\U001000FD') <private-use-1000FD>	[FBE0 80FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1000FD, 0x0041 };
    uint32_t const ces[10] = { 0xFBE0, 0x80FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_478)
{
    // 1000FD 0062;	
    // ('\U001000FD') <private-use-1000FD>	[FBE0 80FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1000FD, 0x0062 };
    uint32_t const ces[10] = { 0xFBE0, 0x80FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_479)
{
    // 10FF00 0021;	
    // ('\U0010FF00') <private-use-10FF00>	[FBE1 FF00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FF00, 0x0021 };
    uint32_t const ces[10] = { 0xFBE1, 0xFF00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_480)
{
    // 10FF00 003F;	
    // ('\U0010FF00') <private-use-10FF00>	[FBE1 FF00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FF00, 0x003F };
    uint32_t const ces[10] = { 0xFBE1, 0xFF00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_481)
{
    // 10FF00 0061;	
    // ('\U0010FF00') <private-use-10FF00>	[FBE1 FF00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FF00, 0x0061 };
    uint32_t const ces[10] = { 0xFBE1, 0xFF00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_482)
{
    // 10FF00 0041;	
    // ('\U0010FF00') <private-use-10FF00>	[FBE1 FF00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10FF00, 0x0041 };
    uint32_t const ces[10] = { 0xFBE1, 0xFF00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_483)
{
    // 10FF00 0062;	
    // ('\U0010FF00') <private-use-10FF00>	[FBE1 FF00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FF00, 0x0062 };
    uint32_t const ces[10] = { 0xFBE1, 0xFF00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_484)
{
    // 10FF01 0021;	
    // ('\U0010FF01') <private-use-10FF01>	[FBE1 FF01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FF01, 0x0021 };
    uint32_t const ces[10] = { 0xFBE1, 0xFF01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_485)
{
    // 10FF01 003F;	
    // ('\U0010FF01') <private-use-10FF01>	[FBE1 FF01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FF01, 0x003F };
    uint32_t const ces[10] = { 0xFBE1, 0xFF01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_486)
{
    // 10FF01 0061;	
    // ('\U0010FF01') <private-use-10FF01>	[FBE1 FF01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FF01, 0x0061 };
    uint32_t const ces[10] = { 0xFBE1, 0xFF01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_487)
{
    // 10FF01 0041;	
    // ('\U0010FF01') <private-use-10FF01>	[FBE1 FF01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10FF01, 0x0041 };
    uint32_t const ces[10] = { 0xFBE1, 0xFF01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_488)
{
    // 10FF01 0062;	
    // ('\U0010FF01') <private-use-10FF01>	[FBE1 FF01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FF01, 0x0062 };
    uint32_t const ces[10] = { 0xFBE1, 0xFF01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_489)
{
    // 10FF02 0021;	
    // ('\U0010FF02') <private-use-10FF02>	[FBE1 FF02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FF02, 0x0021 };
    uint32_t const ces[10] = { 0xFBE1, 0xFF02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_490)
{
    // 10FF02 003F;	
    // ('\U0010FF02') <private-use-10FF02>	[FBE1 FF02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FF02, 0x003F };
    uint32_t const ces[10] = { 0xFBE1, 0xFF02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_491)
{
    // 10FF02 0061;	
    // ('\U0010FF02') <private-use-10FF02>	[FBE1 FF02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FF02, 0x0061 };
    uint32_t const ces[10] = { 0xFBE1, 0xFF02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_492)
{
    // 10FF02 0041;	
    // ('\U0010FF02') <private-use-10FF02>	[FBE1 FF02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10FF02, 0x0041 };
    uint32_t const ces[10] = { 0xFBE1, 0xFF02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_493)
{
    // 10FF02 0062;	
    // ('\U0010FF02') <private-use-10FF02>	[FBE1 FF02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FF02, 0x0062 };
    uint32_t const ces[10] = { 0xFBE1, 0xFF02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_494)
{
    // 10FF03 0021;	
    // ('\U0010FF03') <private-use-10FF03>	[FBE1 FF03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FF03, 0x0021 };
    uint32_t const ces[10] = { 0xFBE1, 0xFF03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_495)
{
    // 10FF03 003F;	
    // ('\U0010FF03') <private-use-10FF03>	[FBE1 FF03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FF03, 0x003F };
    uint32_t const ces[10] = { 0xFBE1, 0xFF03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_496)
{
    // 10FF03 0061;	
    // ('\U0010FF03') <private-use-10FF03>	[FBE1 FF03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FF03, 0x0061 };
    uint32_t const ces[10] = { 0xFBE1, 0xFF03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_497)
{
    // 10FF03 0041;	
    // ('\U0010FF03') <private-use-10FF03>	[FBE1 FF03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10FF03, 0x0041 };
    uint32_t const ces[10] = { 0xFBE1, 0xFF03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_498)
{
    // 10FF03 0062;	
    // ('\U0010FF03') <private-use-10FF03>	[FBE1 FF03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FF03, 0x0062 };
    uint32_t const ces[10] = { 0xFBE1, 0xFF03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_395_499)
{
    // 10FF04 0021;	
    // ('\U0010FF04') <private-use-10FF04>	[FBE1 FF04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10FF04, 0x0021 };
    uint32_t const ces[10] = { 0xFBE1, 0xFF04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

