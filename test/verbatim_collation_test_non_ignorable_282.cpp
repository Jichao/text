// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_282_000)
{
    // 10A8D 003F;	
    // (‚Äé‚Äéê™ç‚Äé‚Äé) OLD NORTH ARABIAN LETTER KHAH	[4AA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A8D, 0x003F };
    uint32_t const ces[9] = { 0x4AA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_001)
{
    // 10A8D 0061;	
    // (‚Äé‚Äéê™ç‚Äé‚Äé) OLD NORTH ARABIAN LETTER KHAH	[4AA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A8D, 0x0061 };
    uint32_t const ces[9] = { 0x4AA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_002)
{
    // 10A8D 0041;	
    // (‚Äé‚Äéê™ç‚Äé‚Äé) OLD NORTH ARABIAN LETTER KHAH	[4AA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A8D, 0x0041 };
    uint32_t const ces[9] = { 0x4AA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_003)
{
    // 10A8D 0062;	
    // (‚Äé‚Äéê™ç‚Äé‚Äé) OLD NORTH ARABIAN LETTER KHAH	[4AA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A8D, 0x0062 };
    uint32_t const ces[9] = { 0x4AA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_004)
{
    // 10A8E 0021;	
    // (‚Äé‚Äéê™é‚Äé‚Äé) OLD NORTH ARABIAN LETTER SAD	[4AA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A8E, 0x0021 };
    uint32_t const ces[9] = { 0x4AA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_005)
{
    // 10A8E 003F;	
    // (‚Äé‚Äéê™é‚Äé‚Äé) OLD NORTH ARABIAN LETTER SAD	[4AA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A8E, 0x003F };
    uint32_t const ces[9] = { 0x4AA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_006)
{
    // 10A8E 0061;	
    // (‚Äé‚Äéê™é‚Äé‚Äé) OLD NORTH ARABIAN LETTER SAD	[4AA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A8E, 0x0061 };
    uint32_t const ces[9] = { 0x4AA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_007)
{
    // 10A8E 0041;	
    // (‚Äé‚Äéê™é‚Äé‚Äé) OLD NORTH ARABIAN LETTER SAD	[4AA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A8E, 0x0041 };
    uint32_t const ces[9] = { 0x4AA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_008)
{
    // 10A8E 0062;	
    // (‚Äé‚Äéê™é‚Äé‚Äé) OLD NORTH ARABIAN LETTER SAD	[4AA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A8E, 0x0062 };
    uint32_t const ces[9] = { 0x4AA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_009)
{
    // 10A8F 0021;	
    // (‚Äé‚Äéê™è‚Äé‚Äé) OLD NORTH ARABIAN LETTER ES-3	[4AA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A8F, 0x0021 };
    uint32_t const ces[9] = { 0x4AA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_010)
{
    // 10A8F 003F;	
    // (‚Äé‚Äéê™è‚Äé‚Äé) OLD NORTH ARABIAN LETTER ES-3	[4AA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A8F, 0x003F };
    uint32_t const ces[9] = { 0x4AA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_011)
{
    // 10A8F 0061;	
    // (‚Äé‚Äéê™è‚Äé‚Äé) OLD NORTH ARABIAN LETTER ES-3	[4AA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A8F, 0x0061 };
    uint32_t const ces[9] = { 0x4AA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_012)
{
    // 10A8F 0041;	
    // (‚Äé‚Äéê™è‚Äé‚Äé) OLD NORTH ARABIAN LETTER ES-3	[4AA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A8F, 0x0041 };
    uint32_t const ces[9] = { 0x4AA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_013)
{
    // 10A8F 0062;	
    // (‚Äé‚Äéê™è‚Äé‚Äé) OLD NORTH ARABIAN LETTER ES-3	[4AA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A8F, 0x0062 };
    uint32_t const ces[9] = { 0x4AA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_014)
{
    // 10A90 0021;	
    // (‚Äé‚Äéê™ê‚Äé‚Äé) OLD NORTH ARABIAN LETTER FEH	[4AAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A90, 0x0021 };
    uint32_t const ces[9] = { 0x4AAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_015)
{
    // 10A90 003F;	
    // (‚Äé‚Äéê™ê‚Äé‚Äé) OLD NORTH ARABIAN LETTER FEH	[4AAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A90, 0x003F };
    uint32_t const ces[9] = { 0x4AAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_016)
{
    // 10A90 0061;	
    // (‚Äé‚Äéê™ê‚Äé‚Äé) OLD NORTH ARABIAN LETTER FEH	[4AAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A90, 0x0061 };
    uint32_t const ces[9] = { 0x4AAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_017)
{
    // 10A90 0041;	
    // (‚Äé‚Äéê™ê‚Äé‚Äé) OLD NORTH ARABIAN LETTER FEH	[4AAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A90, 0x0041 };
    uint32_t const ces[9] = { 0x4AAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_018)
{
    // 10A90 0062;	
    // (‚Äé‚Äéê™ê‚Äé‚Äé) OLD NORTH ARABIAN LETTER FEH	[4AAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A90, 0x0062 };
    uint32_t const ces[9] = { 0x4AAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_019)
{
    // 10A91 0021;	
    // (‚Äé‚Äéê™ë‚Äé‚Äé) OLD NORTH ARABIAN LETTER ALEF	[4AAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A91, 0x0021 };
    uint32_t const ces[9] = { 0x4AAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_020)
{
    // 10A91 003F;	
    // (‚Äé‚Äéê™ë‚Äé‚Äé) OLD NORTH ARABIAN LETTER ALEF	[4AAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A91, 0x003F };
    uint32_t const ces[9] = { 0x4AAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_021)
{
    // 10A91 0061;	
    // (‚Äé‚Äéê™ë‚Äé‚Äé) OLD NORTH ARABIAN LETTER ALEF	[4AAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A91, 0x0061 };
    uint32_t const ces[9] = { 0x4AAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_022)
{
    // 10A91 0041;	
    // (‚Äé‚Äéê™ë‚Äé‚Äé) OLD NORTH ARABIAN LETTER ALEF	[4AAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A91, 0x0041 };
    uint32_t const ces[9] = { 0x4AAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_023)
{
    // 10A91 0062;	
    // (‚Äé‚Äéê™ë‚Äé‚Äé) OLD NORTH ARABIAN LETTER ALEF	[4AAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A91, 0x0062 };
    uint32_t const ces[9] = { 0x4AAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_024)
{
    // 10A92 0021;	
    // (‚Äé‚Äéê™í‚Äé‚Äé) OLD NORTH ARABIAN LETTER AIN	[4AAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A92, 0x0021 };
    uint32_t const ces[9] = { 0x4AAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_025)
{
    // 10A92 003F;	
    // (‚Äé‚Äéê™í‚Äé‚Äé) OLD NORTH ARABIAN LETTER AIN	[4AAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A92, 0x003F };
    uint32_t const ces[9] = { 0x4AAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_026)
{
    // 10A92 0061;	
    // (‚Äé‚Äéê™í‚Äé‚Äé) OLD NORTH ARABIAN LETTER AIN	[4AAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A92, 0x0061 };
    uint32_t const ces[9] = { 0x4AAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_027)
{
    // 10A92 0041;	
    // (‚Äé‚Äéê™í‚Äé‚Äé) OLD NORTH ARABIAN LETTER AIN	[4AAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A92, 0x0041 };
    uint32_t const ces[9] = { 0x4AAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_028)
{
    // 10A92 0062;	
    // (‚Äé‚Äéê™í‚Äé‚Äé) OLD NORTH ARABIAN LETTER AIN	[4AAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A92, 0x0062 };
    uint32_t const ces[9] = { 0x4AAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_029)
{
    // 10A93 0021;	
    // (‚Äé‚Äéê™ì‚Äé‚Äé) OLD NORTH ARABIAN LETTER DAD	[4AAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A93, 0x0021 };
    uint32_t const ces[9] = { 0x4AAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_030)
{
    // 10A93 003F;	
    // (‚Äé‚Äéê™ì‚Äé‚Äé) OLD NORTH ARABIAN LETTER DAD	[4AAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A93, 0x003F };
    uint32_t const ces[9] = { 0x4AAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_031)
{
    // 10A93 0061;	
    // (‚Äé‚Äéê™ì‚Äé‚Äé) OLD NORTH ARABIAN LETTER DAD	[4AAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A93, 0x0061 };
    uint32_t const ces[9] = { 0x4AAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_032)
{
    // 10A93 0041;	
    // (‚Äé‚Äéê™ì‚Äé‚Äé) OLD NORTH ARABIAN LETTER DAD	[4AAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A93, 0x0041 };
    uint32_t const ces[9] = { 0x4AAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_033)
{
    // 10A93 0062;	
    // (‚Äé‚Äéê™ì‚Äé‚Äé) OLD NORTH ARABIAN LETTER DAD	[4AAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A93, 0x0062 };
    uint32_t const ces[9] = { 0x4AAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_034)
{
    // 10A94 0021;	
    // (‚Äé‚Äéê™î‚Äé‚Äé) OLD NORTH ARABIAN LETTER GEEM	[4AAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A94, 0x0021 };
    uint32_t const ces[9] = { 0x4AAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_035)
{
    // 10A94 003F;	
    // (‚Äé‚Äéê™î‚Äé‚Äé) OLD NORTH ARABIAN LETTER GEEM	[4AAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A94, 0x003F };
    uint32_t const ces[9] = { 0x4AAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_036)
{
    // 10A94 0061;	
    // (‚Äé‚Äéê™î‚Äé‚Äé) OLD NORTH ARABIAN LETTER GEEM	[4AAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A94, 0x0061 };
    uint32_t const ces[9] = { 0x4AAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_037)
{
    // 10A94 0041;	
    // (‚Äé‚Äéê™î‚Äé‚Äé) OLD NORTH ARABIAN LETTER GEEM	[4AAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A94, 0x0041 };
    uint32_t const ces[9] = { 0x4AAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_038)
{
    // 10A94 0062;	
    // (‚Äé‚Äéê™î‚Äé‚Äé) OLD NORTH ARABIAN LETTER GEEM	[4AAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A94, 0x0062 };
    uint32_t const ces[9] = { 0x4AAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_039)
{
    // 10A95 0021;	
    // (‚Äé‚Äéê™ï‚Äé‚Äé) OLD NORTH ARABIAN LETTER DAL	[4AAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A95, 0x0021 };
    uint32_t const ces[9] = { 0x4AAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_040)
{
    // 10A95 003F;	
    // (‚Äé‚Äéê™ï‚Äé‚Äé) OLD NORTH ARABIAN LETTER DAL	[4AAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A95, 0x003F };
    uint32_t const ces[9] = { 0x4AAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_041)
{
    // 10A95 0061;	
    // (‚Äé‚Äéê™ï‚Äé‚Äé) OLD NORTH ARABIAN LETTER DAL	[4AAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A95, 0x0061 };
    uint32_t const ces[9] = { 0x4AAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_042)
{
    // 10A95 0041;	
    // (‚Äé‚Äéê™ï‚Äé‚Äé) OLD NORTH ARABIAN LETTER DAL	[4AAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A95, 0x0041 };
    uint32_t const ces[9] = { 0x4AAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_043)
{
    // 10A95 0062;	
    // (‚Äé‚Äéê™ï‚Äé‚Äé) OLD NORTH ARABIAN LETTER DAL	[4AAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A95, 0x0062 };
    uint32_t const ces[9] = { 0x4AAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_044)
{
    // 10A96 0021;	
    // (‚Äé‚Äéê™ñ‚Äé‚Äé) OLD NORTH ARABIAN LETTER GHAIN	[4AB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A96, 0x0021 };
    uint32_t const ces[9] = { 0x4AB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_045)
{
    // 10A96 003F;	
    // (‚Äé‚Äéê™ñ‚Äé‚Äé) OLD NORTH ARABIAN LETTER GHAIN	[4AB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A96, 0x003F };
    uint32_t const ces[9] = { 0x4AB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_046)
{
    // 10A96 0061;	
    // (‚Äé‚Äéê™ñ‚Äé‚Äé) OLD NORTH ARABIAN LETTER GHAIN	[4AB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A96, 0x0061 };
    uint32_t const ces[9] = { 0x4AB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_047)
{
    // 10A96 0041;	
    // (‚Äé‚Äéê™ñ‚Äé‚Äé) OLD NORTH ARABIAN LETTER GHAIN	[4AB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A96, 0x0041 };
    uint32_t const ces[9] = { 0x4AB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_048)
{
    // 10A96 0062;	
    // (‚Äé‚Äéê™ñ‚Äé‚Äé) OLD NORTH ARABIAN LETTER GHAIN	[4AB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A96, 0x0062 };
    uint32_t const ces[9] = { 0x4AB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_049)
{
    // 10A97 0021;	
    // (‚Äé‚Äéê™ó‚Äé‚Äé) OLD NORTH ARABIAN LETTER TAH	[4AB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A97, 0x0021 };
    uint32_t const ces[9] = { 0x4AB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_050)
{
    // 10A97 003F;	
    // (‚Äé‚Äéê™ó‚Äé‚Äé) OLD NORTH ARABIAN LETTER TAH	[4AB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A97, 0x003F };
    uint32_t const ces[9] = { 0x4AB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_051)
{
    // 10A97 0061;	
    // (‚Äé‚Äéê™ó‚Äé‚Äé) OLD NORTH ARABIAN LETTER TAH	[4AB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A97, 0x0061 };
    uint32_t const ces[9] = { 0x4AB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_052)
{
    // 10A97 0041;	
    // (‚Äé‚Äéê™ó‚Äé‚Äé) OLD NORTH ARABIAN LETTER TAH	[4AB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A97, 0x0041 };
    uint32_t const ces[9] = { 0x4AB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_053)
{
    // 10A97 0062;	
    // (‚Äé‚Äéê™ó‚Äé‚Äé) OLD NORTH ARABIAN LETTER TAH	[4AB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A97, 0x0062 };
    uint32_t const ces[9] = { 0x4AB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_054)
{
    // 10A98 0021;	
    // (‚Äé‚Äéê™ò‚Äé‚Äé) OLD NORTH ARABIAN LETTER ZAIN	[4AB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A98, 0x0021 };
    uint32_t const ces[9] = { 0x4AB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_055)
{
    // 10A98 003F;	
    // (‚Äé‚Äéê™ò‚Äé‚Äé) OLD NORTH ARABIAN LETTER ZAIN	[4AB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A98, 0x003F };
    uint32_t const ces[9] = { 0x4AB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_056)
{
    // 10A98 0061;	
    // (‚Äé‚Äéê™ò‚Äé‚Äé) OLD NORTH ARABIAN LETTER ZAIN	[4AB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A98, 0x0061 };
    uint32_t const ces[9] = { 0x4AB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_057)
{
    // 10A98 0041;	
    // (‚Äé‚Äéê™ò‚Äé‚Äé) OLD NORTH ARABIAN LETTER ZAIN	[4AB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A98, 0x0041 };
    uint32_t const ces[9] = { 0x4AB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_058)
{
    // 10A98 0062;	
    // (‚Äé‚Äéê™ò‚Äé‚Äé) OLD NORTH ARABIAN LETTER ZAIN	[4AB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A98, 0x0062 };
    uint32_t const ces[9] = { 0x4AB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_059)
{
    // 10A99 0021;	
    // (‚Äé‚Äéê™ô‚Äé‚Äé) OLD NORTH ARABIAN LETTER THAL	[4AB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A99, 0x0021 };
    uint32_t const ces[9] = { 0x4AB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_060)
{
    // 10A99 003F;	
    // (‚Äé‚Äéê™ô‚Äé‚Äé) OLD NORTH ARABIAN LETTER THAL	[4AB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A99, 0x003F };
    uint32_t const ces[9] = { 0x4AB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_061)
{
    // 10A99 0061;	
    // (‚Äé‚Äéê™ô‚Äé‚Äé) OLD NORTH ARABIAN LETTER THAL	[4AB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A99, 0x0061 };
    uint32_t const ces[9] = { 0x4AB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_062)
{
    // 10A99 0041;	
    // (‚Äé‚Äéê™ô‚Äé‚Äé) OLD NORTH ARABIAN LETTER THAL	[4AB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A99, 0x0041 };
    uint32_t const ces[9] = { 0x4AB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_063)
{
    // 10A99 0062;	
    // (‚Äé‚Äéê™ô‚Äé‚Äé) OLD NORTH ARABIAN LETTER THAL	[4AB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A99, 0x0062 };
    uint32_t const ces[9] = { 0x4AB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_064)
{
    // 10A9A 0021;	
    // (‚Äé‚Äéê™ö‚Äé‚Äé) OLD NORTH ARABIAN LETTER YEH	[4AB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A9A, 0x0021 };
    uint32_t const ces[9] = { 0x4AB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_065)
{
    // 10A9A 003F;	
    // (‚Äé‚Äéê™ö‚Äé‚Äé) OLD NORTH ARABIAN LETTER YEH	[4AB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A9A, 0x003F };
    uint32_t const ces[9] = { 0x4AB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_066)
{
    // 10A9A 0061;	
    // (‚Äé‚Äéê™ö‚Äé‚Äé) OLD NORTH ARABIAN LETTER YEH	[4AB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A9A, 0x0061 };
    uint32_t const ces[9] = { 0x4AB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_067)
{
    // 10A9A 0041;	
    // (‚Äé‚Äéê™ö‚Äé‚Äé) OLD NORTH ARABIAN LETTER YEH	[4AB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A9A, 0x0041 };
    uint32_t const ces[9] = { 0x4AB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_068)
{
    // 10A9A 0062;	
    // (‚Äé‚Äéê™ö‚Äé‚Äé) OLD NORTH ARABIAN LETTER YEH	[4AB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A9A, 0x0062 };
    uint32_t const ces[9] = { 0x4AB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_069)
{
    // 10A9B 0021;	
    // (‚Äé‚Äéê™õ‚Äé‚Äé) OLD NORTH ARABIAN LETTER THEH	[4AB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A9B, 0x0021 };
    uint32_t const ces[9] = { 0x4AB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_070)
{
    // 10A9B 003F;	
    // (‚Äé‚Äéê™õ‚Äé‚Äé) OLD NORTH ARABIAN LETTER THEH	[4AB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A9B, 0x003F };
    uint32_t const ces[9] = { 0x4AB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_071)
{
    // 10A9B 0061;	
    // (‚Äé‚Äéê™õ‚Äé‚Äé) OLD NORTH ARABIAN LETTER THEH	[4AB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A9B, 0x0061 };
    uint32_t const ces[9] = { 0x4AB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_072)
{
    // 10A9B 0041;	
    // (‚Äé‚Äéê™õ‚Äé‚Äé) OLD NORTH ARABIAN LETTER THEH	[4AB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A9B, 0x0041 };
    uint32_t const ces[9] = { 0x4AB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_073)
{
    // 10A9B 0062;	
    // (‚Äé‚Äéê™õ‚Äé‚Äé) OLD NORTH ARABIAN LETTER THEH	[4AB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A9B, 0x0062 };
    uint32_t const ces[9] = { 0x4AB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_074)
{
    // 10A9C 0021;	
    // (‚Äé‚Äéê™ú‚Äé‚Äé) OLD NORTH ARABIAN LETTER ZAH	[4AB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A9C, 0x0021 };
    uint32_t const ces[9] = { 0x4AB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_075)
{
    // 10A9C 003F;	
    // (‚Äé‚Äéê™ú‚Äé‚Äé) OLD NORTH ARABIAN LETTER ZAH	[4AB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A9C, 0x003F };
    uint32_t const ces[9] = { 0x4AB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_076)
{
    // 10A9C 0061;	
    // (‚Äé‚Äéê™ú‚Äé‚Äé) OLD NORTH ARABIAN LETTER ZAH	[4AB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A9C, 0x0061 };
    uint32_t const ces[9] = { 0x4AB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_077)
{
    // 10A9C 0041;	
    // (‚Äé‚Äéê™ú‚Äé‚Äé) OLD NORTH ARABIAN LETTER ZAH	[4AB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10A9C, 0x0041 };
    uint32_t const ces[9] = { 0x4AB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_078)
{
    // 10A9C 0062;	
    // (‚Äé‚Äéê™ú‚Äé‚Äé) OLD NORTH ARABIAN LETTER ZAH	[4AB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10A9C, 0x0062 };
    uint32_t const ces[9] = { 0x4AB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_079)
{
    // 10B00 0021;	
    // (‚Äé‚Äéê¨Ä‚Äé‚Äé) AVESTAN LETTER A	[4AB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B00, 0x0021 };
    uint32_t const ces[9] = { 0x4AB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_080)
{
    // 10B00 003F;	
    // (‚Äé‚Äéê¨Ä‚Äé‚Äé) AVESTAN LETTER A	[4AB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B00, 0x003F };
    uint32_t const ces[9] = { 0x4AB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_081)
{
    // 10B00 0061;	
    // (‚Äé‚Äéê¨Ä‚Äé‚Äé) AVESTAN LETTER A	[4AB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B00, 0x0061 };
    uint32_t const ces[9] = { 0x4AB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_082)
{
    // 10B00 0041;	
    // (‚Äé‚Äéê¨Ä‚Äé‚Äé) AVESTAN LETTER A	[4AB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B00, 0x0041 };
    uint32_t const ces[9] = { 0x4AB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_083)
{
    // 10B00 0062;	
    // (‚Äé‚Äéê¨Ä‚Äé‚Äé) AVESTAN LETTER A	[4AB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B00, 0x0062 };
    uint32_t const ces[9] = { 0x4AB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_084)
{
    // 10B01 0021;	
    // (‚Äé‚Äéê¨Å‚Äé‚Äé) AVESTAN LETTER AA	[4AB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B01, 0x0021 };
    uint32_t const ces[9] = { 0x4AB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_085)
{
    // 10B01 003F;	
    // (‚Äé‚Äéê¨Å‚Äé‚Äé) AVESTAN LETTER AA	[4AB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B01, 0x003F };
    uint32_t const ces[9] = { 0x4AB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_086)
{
    // 10B01 0061;	
    // (‚Äé‚Äéê¨Å‚Äé‚Äé) AVESTAN LETTER AA	[4AB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B01, 0x0061 };
    uint32_t const ces[9] = { 0x4AB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_087)
{
    // 10B01 0041;	
    // (‚Äé‚Äéê¨Å‚Äé‚Äé) AVESTAN LETTER AA	[4AB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B01, 0x0041 };
    uint32_t const ces[9] = { 0x4AB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_088)
{
    // 10B01 0062;	
    // (‚Äé‚Äéê¨Å‚Äé‚Äé) AVESTAN LETTER AA	[4AB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B01, 0x0062 };
    uint32_t const ces[9] = { 0x4AB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_089)
{
    // 10B02 0021;	
    // (‚Äé‚Äéê¨Ç‚Äé‚Äé) AVESTAN LETTER AO	[4AB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B02, 0x0021 };
    uint32_t const ces[9] = { 0x4AB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_090)
{
    // 10B02 003F;	
    // (‚Äé‚Äéê¨Ç‚Äé‚Äé) AVESTAN LETTER AO	[4AB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B02, 0x003F };
    uint32_t const ces[9] = { 0x4AB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_091)
{
    // 10B02 0061;	
    // (‚Äé‚Äéê¨Ç‚Äé‚Äé) AVESTAN LETTER AO	[4AB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B02, 0x0061 };
    uint32_t const ces[9] = { 0x4AB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_092)
{
    // 10B02 0041;	
    // (‚Äé‚Äéê¨Ç‚Äé‚Äé) AVESTAN LETTER AO	[4AB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B02, 0x0041 };
    uint32_t const ces[9] = { 0x4AB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_093)
{
    // 10B02 0062;	
    // (‚Äé‚Äéê¨Ç‚Äé‚Äé) AVESTAN LETTER AO	[4AB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B02, 0x0062 };
    uint32_t const ces[9] = { 0x4AB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_094)
{
    // 10B03 0021;	
    // (‚Äé‚Äéê¨É‚Äé‚Äé) AVESTAN LETTER AAO	[4ABA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B03, 0x0021 };
    uint32_t const ces[9] = { 0x4ABA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_095)
{
    // 10B03 003F;	
    // (‚Äé‚Äéê¨É‚Äé‚Äé) AVESTAN LETTER AAO	[4ABA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B03, 0x003F };
    uint32_t const ces[9] = { 0x4ABA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_096)
{
    // 10B03 0061;	
    // (‚Äé‚Äéê¨É‚Äé‚Äé) AVESTAN LETTER AAO	[4ABA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B03, 0x0061 };
    uint32_t const ces[9] = { 0x4ABA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_097)
{
    // 10B03 0041;	
    // (‚Äé‚Äéê¨É‚Äé‚Äé) AVESTAN LETTER AAO	[4ABA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B03, 0x0041 };
    uint32_t const ces[9] = { 0x4ABA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_098)
{
    // 10B03 0062;	
    // (‚Äé‚Äéê¨É‚Äé‚Äé) AVESTAN LETTER AAO	[4ABA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B03, 0x0062 };
    uint32_t const ces[9] = { 0x4ABA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_099)
{
    // 10B04 0021;	
    // (‚Äé‚Äéê¨Ñ‚Äé‚Äé) AVESTAN LETTER AN	[4ABB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B04, 0x0021 };
    uint32_t const ces[9] = { 0x4ABB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_100)
{
    // 10B04 003F;	
    // (‚Äé‚Äéê¨Ñ‚Äé‚Äé) AVESTAN LETTER AN	[4ABB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B04, 0x003F };
    uint32_t const ces[9] = { 0x4ABB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_101)
{
    // 10B04 0061;	
    // (‚Äé‚Äéê¨Ñ‚Äé‚Äé) AVESTAN LETTER AN	[4ABB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B04, 0x0061 };
    uint32_t const ces[9] = { 0x4ABB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_102)
{
    // 10B04 0041;	
    // (‚Äé‚Äéê¨Ñ‚Äé‚Äé) AVESTAN LETTER AN	[4ABB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B04, 0x0041 };
    uint32_t const ces[9] = { 0x4ABB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_103)
{
    // 10B04 0062;	
    // (‚Äé‚Äéê¨Ñ‚Äé‚Äé) AVESTAN LETTER AN	[4ABB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B04, 0x0062 };
    uint32_t const ces[9] = { 0x4ABB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_104)
{
    // 10B05 0021;	
    // (‚Äé‚Äéê¨Ö‚Äé‚Äé) AVESTAN LETTER AAN	[4ABC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B05, 0x0021 };
    uint32_t const ces[9] = { 0x4ABC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_105)
{
    // 10B05 003F;	
    // (‚Äé‚Äéê¨Ö‚Äé‚Äé) AVESTAN LETTER AAN	[4ABC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B05, 0x003F };
    uint32_t const ces[9] = { 0x4ABC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_106)
{
    // 10B05 0061;	
    // (‚Äé‚Äéê¨Ö‚Äé‚Äé) AVESTAN LETTER AAN	[4ABC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B05, 0x0061 };
    uint32_t const ces[9] = { 0x4ABC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_107)
{
    // 10B05 0041;	
    // (‚Äé‚Äéê¨Ö‚Äé‚Äé) AVESTAN LETTER AAN	[4ABC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B05, 0x0041 };
    uint32_t const ces[9] = { 0x4ABC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_108)
{
    // 10B05 0062;	
    // (‚Äé‚Äéê¨Ö‚Äé‚Äé) AVESTAN LETTER AAN	[4ABC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B05, 0x0062 };
    uint32_t const ces[9] = { 0x4ABC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_109)
{
    // 10B06 0021;	
    // (‚Äé‚Äéê¨Ü‚Äé‚Äé) AVESTAN LETTER AE	[4ABD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B06, 0x0021 };
    uint32_t const ces[9] = { 0x4ABD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_110)
{
    // 10B06 003F;	
    // (‚Äé‚Äéê¨Ü‚Äé‚Äé) AVESTAN LETTER AE	[4ABD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B06, 0x003F };
    uint32_t const ces[9] = { 0x4ABD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_111)
{
    // 10B06 0061;	
    // (‚Äé‚Äéê¨Ü‚Äé‚Äé) AVESTAN LETTER AE	[4ABD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B06, 0x0061 };
    uint32_t const ces[9] = { 0x4ABD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_112)
{
    // 10B06 0041;	
    // (‚Äé‚Äéê¨Ü‚Äé‚Äé) AVESTAN LETTER AE	[4ABD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B06, 0x0041 };
    uint32_t const ces[9] = { 0x4ABD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_113)
{
    // 10B06 0062;	
    // (‚Äé‚Äéê¨Ü‚Äé‚Äé) AVESTAN LETTER AE	[4ABD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B06, 0x0062 };
    uint32_t const ces[9] = { 0x4ABD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_114)
{
    // 10B07 0021;	
    // (‚Äé‚Äéê¨á‚Äé‚Äé) AVESTAN LETTER AEE	[4ABE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B07, 0x0021 };
    uint32_t const ces[9] = { 0x4ABE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_115)
{
    // 10B07 003F;	
    // (‚Äé‚Äéê¨á‚Äé‚Äé) AVESTAN LETTER AEE	[4ABE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B07, 0x003F };
    uint32_t const ces[9] = { 0x4ABE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_116)
{
    // 10B07 0061;	
    // (‚Äé‚Äéê¨á‚Äé‚Äé) AVESTAN LETTER AEE	[4ABE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B07, 0x0061 };
    uint32_t const ces[9] = { 0x4ABE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_117)
{
    // 10B07 0041;	
    // (‚Äé‚Äéê¨á‚Äé‚Äé) AVESTAN LETTER AEE	[4ABE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B07, 0x0041 };
    uint32_t const ces[9] = { 0x4ABE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_118)
{
    // 10B07 0062;	
    // (‚Äé‚Äéê¨á‚Äé‚Äé) AVESTAN LETTER AEE	[4ABE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B07, 0x0062 };
    uint32_t const ces[9] = { 0x4ABE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_119)
{
    // 10B08 0021;	
    // (‚Äé‚Äéê¨à‚Äé‚Äé) AVESTAN LETTER E	[4ABF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B08, 0x0021 };
    uint32_t const ces[9] = { 0x4ABF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_120)
{
    // 10B08 003F;	
    // (‚Äé‚Äéê¨à‚Äé‚Äé) AVESTAN LETTER E	[4ABF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B08, 0x003F };
    uint32_t const ces[9] = { 0x4ABF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_121)
{
    // 10B08 0061;	
    // (‚Äé‚Äéê¨à‚Äé‚Äé) AVESTAN LETTER E	[4ABF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B08, 0x0061 };
    uint32_t const ces[9] = { 0x4ABF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_122)
{
    // 10B08 0041;	
    // (‚Äé‚Äéê¨à‚Äé‚Äé) AVESTAN LETTER E	[4ABF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B08, 0x0041 };
    uint32_t const ces[9] = { 0x4ABF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_123)
{
    // 10B08 0062;	
    // (‚Äé‚Äéê¨à‚Äé‚Äé) AVESTAN LETTER E	[4ABF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B08, 0x0062 };
    uint32_t const ces[9] = { 0x4ABF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_124)
{
    // 10B09 0021;	
    // (‚Äé‚Äéê¨â‚Äé‚Äé) AVESTAN LETTER EE	[4AC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B09, 0x0021 };
    uint32_t const ces[9] = { 0x4AC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_125)
{
    // 10B09 003F;	
    // (‚Äé‚Äéê¨â‚Äé‚Äé) AVESTAN LETTER EE	[4AC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B09, 0x003F };
    uint32_t const ces[9] = { 0x4AC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_126)
{
    // 10B09 0061;	
    // (‚Äé‚Äéê¨â‚Äé‚Äé) AVESTAN LETTER EE	[4AC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B09, 0x0061 };
    uint32_t const ces[9] = { 0x4AC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_127)
{
    // 10B09 0041;	
    // (‚Äé‚Äéê¨â‚Äé‚Äé) AVESTAN LETTER EE	[4AC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B09, 0x0041 };
    uint32_t const ces[9] = { 0x4AC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_128)
{
    // 10B09 0062;	
    // (‚Äé‚Äéê¨â‚Äé‚Äé) AVESTAN LETTER EE	[4AC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B09, 0x0062 };
    uint32_t const ces[9] = { 0x4AC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_129)
{
    // 10B0A 0021;	
    // (‚Äé‚Äéê¨ä‚Äé‚Äé) AVESTAN LETTER O	[4AC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0A, 0x0021 };
    uint32_t const ces[9] = { 0x4AC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_130)
{
    // 10B0A 003F;	
    // (‚Äé‚Äéê¨ä‚Äé‚Äé) AVESTAN LETTER O	[4AC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0A, 0x003F };
    uint32_t const ces[9] = { 0x4AC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_131)
{
    // 10B0A 0061;	
    // (‚Äé‚Äéê¨ä‚Äé‚Äé) AVESTAN LETTER O	[4AC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0A, 0x0061 };
    uint32_t const ces[9] = { 0x4AC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_132)
{
    // 10B0A 0041;	
    // (‚Äé‚Äéê¨ä‚Äé‚Äé) AVESTAN LETTER O	[4AC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B0A, 0x0041 };
    uint32_t const ces[9] = { 0x4AC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_133)
{
    // 10B0A 0062;	
    // (‚Äé‚Äéê¨ä‚Äé‚Äé) AVESTAN LETTER O	[4AC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0A, 0x0062 };
    uint32_t const ces[9] = { 0x4AC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_134)
{
    // 10B0B 0021;	
    // (‚Äé‚Äéê¨ã‚Äé‚Äé) AVESTAN LETTER OO	[4AC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0B, 0x0021 };
    uint32_t const ces[9] = { 0x4AC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_135)
{
    // 10B0B 003F;	
    // (‚Äé‚Äéê¨ã‚Äé‚Äé) AVESTAN LETTER OO	[4AC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0B, 0x003F };
    uint32_t const ces[9] = { 0x4AC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_136)
{
    // 10B0B 0061;	
    // (‚Äé‚Äéê¨ã‚Äé‚Äé) AVESTAN LETTER OO	[4AC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0B, 0x0061 };
    uint32_t const ces[9] = { 0x4AC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_137)
{
    // 10B0B 0041;	
    // (‚Äé‚Äéê¨ã‚Äé‚Äé) AVESTAN LETTER OO	[4AC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B0B, 0x0041 };
    uint32_t const ces[9] = { 0x4AC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_138)
{
    // 10B0B 0062;	
    // (‚Äé‚Äéê¨ã‚Äé‚Äé) AVESTAN LETTER OO	[4AC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0B, 0x0062 };
    uint32_t const ces[9] = { 0x4AC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_139)
{
    // 10B0C 0021;	
    // (‚Äé‚Äéê¨å‚Äé‚Äé) AVESTAN LETTER I	[4AC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0C, 0x0021 };
    uint32_t const ces[9] = { 0x4AC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_140)
{
    // 10B0C 003F;	
    // (‚Äé‚Äéê¨å‚Äé‚Äé) AVESTAN LETTER I	[4AC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0C, 0x003F };
    uint32_t const ces[9] = { 0x4AC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_141)
{
    // 10B0C 0061;	
    // (‚Äé‚Äéê¨å‚Äé‚Äé) AVESTAN LETTER I	[4AC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0C, 0x0061 };
    uint32_t const ces[9] = { 0x4AC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_142)
{
    // 10B0C 0041;	
    // (‚Äé‚Äéê¨å‚Äé‚Äé) AVESTAN LETTER I	[4AC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B0C, 0x0041 };
    uint32_t const ces[9] = { 0x4AC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_143)
{
    // 10B0C 0062;	
    // (‚Äé‚Äéê¨å‚Äé‚Äé) AVESTAN LETTER I	[4AC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0C, 0x0062 };
    uint32_t const ces[9] = { 0x4AC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_144)
{
    // 10B0D 0021;	
    // (‚Äé‚Äéê¨ç‚Äé‚Äé) AVESTAN LETTER II	[4AC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0D, 0x0021 };
    uint32_t const ces[9] = { 0x4AC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_145)
{
    // 10B0D 003F;	
    // (‚Äé‚Äéê¨ç‚Äé‚Äé) AVESTAN LETTER II	[4AC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0D, 0x003F };
    uint32_t const ces[9] = { 0x4AC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_146)
{
    // 10B0D 0061;	
    // (‚Äé‚Äéê¨ç‚Äé‚Äé) AVESTAN LETTER II	[4AC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0D, 0x0061 };
    uint32_t const ces[9] = { 0x4AC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_147)
{
    // 10B0D 0041;	
    // (‚Äé‚Äéê¨ç‚Äé‚Äé) AVESTAN LETTER II	[4AC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B0D, 0x0041 };
    uint32_t const ces[9] = { 0x4AC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_148)
{
    // 10B0D 0062;	
    // (‚Äé‚Äéê¨ç‚Äé‚Äé) AVESTAN LETTER II	[4AC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0D, 0x0062 };
    uint32_t const ces[9] = { 0x4AC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_149)
{
    // 10B0E 0021;	
    // (‚Äé‚Äéê¨é‚Äé‚Äé) AVESTAN LETTER U	[4AC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0E, 0x0021 };
    uint32_t const ces[9] = { 0x4AC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_150)
{
    // 10B0E 003F;	
    // (‚Äé‚Äéê¨é‚Äé‚Äé) AVESTAN LETTER U	[4AC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0E, 0x003F };
    uint32_t const ces[9] = { 0x4AC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_151)
{
    // 10B0E 0061;	
    // (‚Äé‚Äéê¨é‚Äé‚Äé) AVESTAN LETTER U	[4AC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0E, 0x0061 };
    uint32_t const ces[9] = { 0x4AC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_152)
{
    // 10B0E 0041;	
    // (‚Äé‚Äéê¨é‚Äé‚Äé) AVESTAN LETTER U	[4AC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B0E, 0x0041 };
    uint32_t const ces[9] = { 0x4AC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_153)
{
    // 10B0E 0062;	
    // (‚Äé‚Äéê¨é‚Äé‚Äé) AVESTAN LETTER U	[4AC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0E, 0x0062 };
    uint32_t const ces[9] = { 0x4AC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_154)
{
    // 10B0F 0021;	
    // (‚Äé‚Äéê¨è‚Äé‚Äé) AVESTAN LETTER UU	[4AC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0F, 0x0021 };
    uint32_t const ces[9] = { 0x4AC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_155)
{
    // 10B0F 003F;	
    // (‚Äé‚Äéê¨è‚Äé‚Äé) AVESTAN LETTER UU	[4AC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0F, 0x003F };
    uint32_t const ces[9] = { 0x4AC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_156)
{
    // 10B0F 0061;	
    // (‚Äé‚Äéê¨è‚Äé‚Äé) AVESTAN LETTER UU	[4AC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0F, 0x0061 };
    uint32_t const ces[9] = { 0x4AC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_157)
{
    // 10B0F 0041;	
    // (‚Äé‚Äéê¨è‚Äé‚Äé) AVESTAN LETTER UU	[4AC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B0F, 0x0041 };
    uint32_t const ces[9] = { 0x4AC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_158)
{
    // 10B0F 0062;	
    // (‚Äé‚Äéê¨è‚Äé‚Äé) AVESTAN LETTER UU	[4AC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B0F, 0x0062 };
    uint32_t const ces[9] = { 0x4AC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_159)
{
    // 10B10 0021;	
    // (‚Äé‚Äéê¨ê‚Äé‚Äé) AVESTAN LETTER KE	[4AC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B10, 0x0021 };
    uint32_t const ces[9] = { 0x4AC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_160)
{
    // 10B10 003F;	
    // (‚Äé‚Äéê¨ê‚Äé‚Äé) AVESTAN LETTER KE	[4AC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B10, 0x003F };
    uint32_t const ces[9] = { 0x4AC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_161)
{
    // 10B10 0061;	
    // (‚Äé‚Äéê¨ê‚Äé‚Äé) AVESTAN LETTER KE	[4AC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B10, 0x0061 };
    uint32_t const ces[9] = { 0x4AC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_162)
{
    // 10B10 0041;	
    // (‚Äé‚Äéê¨ê‚Äé‚Äé) AVESTAN LETTER KE	[4AC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B10, 0x0041 };
    uint32_t const ces[9] = { 0x4AC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_163)
{
    // 10B10 0062;	
    // (‚Äé‚Äéê¨ê‚Äé‚Äé) AVESTAN LETTER KE	[4AC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B10, 0x0062 };
    uint32_t const ces[9] = { 0x4AC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_164)
{
    // 10B11 0021;	
    // (‚Äé‚Äéê¨ë‚Äé‚Äé) AVESTAN LETTER XE	[4AC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B11, 0x0021 };
    uint32_t const ces[9] = { 0x4AC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_165)
{
    // 10B11 003F;	
    // (‚Äé‚Äéê¨ë‚Äé‚Äé) AVESTAN LETTER XE	[4AC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B11, 0x003F };
    uint32_t const ces[9] = { 0x4AC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_166)
{
    // 10B11 0061;	
    // (‚Äé‚Äéê¨ë‚Äé‚Äé) AVESTAN LETTER XE	[4AC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B11, 0x0061 };
    uint32_t const ces[9] = { 0x4AC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_167)
{
    // 10B11 0041;	
    // (‚Äé‚Äéê¨ë‚Äé‚Äé) AVESTAN LETTER XE	[4AC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B11, 0x0041 };
    uint32_t const ces[9] = { 0x4AC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_168)
{
    // 10B11 0062;	
    // (‚Äé‚Äéê¨ë‚Äé‚Äé) AVESTAN LETTER XE	[4AC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B11, 0x0062 };
    uint32_t const ces[9] = { 0x4AC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_169)
{
    // 10B12 0021;	
    // (‚Äé‚Äéê¨í‚Äé‚Äé) AVESTAN LETTER XYE	[4AC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B12, 0x0021 };
    uint32_t const ces[9] = { 0x4AC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_170)
{
    // 10B12 003F;	
    // (‚Äé‚Äéê¨í‚Äé‚Äé) AVESTAN LETTER XYE	[4AC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B12, 0x003F };
    uint32_t const ces[9] = { 0x4AC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_171)
{
    // 10B12 0061;	
    // (‚Äé‚Äéê¨í‚Äé‚Äé) AVESTAN LETTER XYE	[4AC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B12, 0x0061 };
    uint32_t const ces[9] = { 0x4AC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_172)
{
    // 10B12 0041;	
    // (‚Äé‚Äéê¨í‚Äé‚Äé) AVESTAN LETTER XYE	[4AC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B12, 0x0041 };
    uint32_t const ces[9] = { 0x4AC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_173)
{
    // 10B12 0062;	
    // (‚Äé‚Äéê¨í‚Äé‚Äé) AVESTAN LETTER XYE	[4AC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B12, 0x0062 };
    uint32_t const ces[9] = { 0x4AC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_174)
{
    // 10B13 0021;	
    // (‚Äé‚Äéê¨ì‚Äé‚Äé) AVESTAN LETTER XVE	[4ACA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B13, 0x0021 };
    uint32_t const ces[9] = { 0x4ACA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_175)
{
    // 10B13 003F;	
    // (‚Äé‚Äéê¨ì‚Äé‚Äé) AVESTAN LETTER XVE	[4ACA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B13, 0x003F };
    uint32_t const ces[9] = { 0x4ACA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_176)
{
    // 10B13 0061;	
    // (‚Äé‚Äéê¨ì‚Äé‚Äé) AVESTAN LETTER XVE	[4ACA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B13, 0x0061 };
    uint32_t const ces[9] = { 0x4ACA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_177)
{
    // 10B13 0041;	
    // (‚Äé‚Äéê¨ì‚Äé‚Äé) AVESTAN LETTER XVE	[4ACA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B13, 0x0041 };
    uint32_t const ces[9] = { 0x4ACA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_178)
{
    // 10B13 0062;	
    // (‚Äé‚Äéê¨ì‚Äé‚Äé) AVESTAN LETTER XVE	[4ACA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B13, 0x0062 };
    uint32_t const ces[9] = { 0x4ACA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_179)
{
    // 10B14 0021;	
    // (‚Äé‚Äéê¨î‚Äé‚Äé) AVESTAN LETTER GE	[4ACB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B14, 0x0021 };
    uint32_t const ces[9] = { 0x4ACB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_180)
{
    // 10B14 003F;	
    // (‚Äé‚Äéê¨î‚Äé‚Äé) AVESTAN LETTER GE	[4ACB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B14, 0x003F };
    uint32_t const ces[9] = { 0x4ACB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_181)
{
    // 10B14 0061;	
    // (‚Äé‚Äéê¨î‚Äé‚Äé) AVESTAN LETTER GE	[4ACB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B14, 0x0061 };
    uint32_t const ces[9] = { 0x4ACB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_182)
{
    // 10B14 0041;	
    // (‚Äé‚Äéê¨î‚Äé‚Äé) AVESTAN LETTER GE	[4ACB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B14, 0x0041 };
    uint32_t const ces[9] = { 0x4ACB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_183)
{
    // 10B14 0062;	
    // (‚Äé‚Äéê¨î‚Äé‚Äé) AVESTAN LETTER GE	[4ACB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B14, 0x0062 };
    uint32_t const ces[9] = { 0x4ACB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_184)
{
    // 10B15 0021;	
    // (‚Äé‚Äéê¨ï‚Äé‚Äé) AVESTAN LETTER GGE	[4ACC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B15, 0x0021 };
    uint32_t const ces[9] = { 0x4ACC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_185)
{
    // 10B15 003F;	
    // (‚Äé‚Äéê¨ï‚Äé‚Äé) AVESTAN LETTER GGE	[4ACC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B15, 0x003F };
    uint32_t const ces[9] = { 0x4ACC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_186)
{
    // 10B15 0061;	
    // (‚Äé‚Äéê¨ï‚Äé‚Äé) AVESTAN LETTER GGE	[4ACC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B15, 0x0061 };
    uint32_t const ces[9] = { 0x4ACC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_187)
{
    // 10B15 0041;	
    // (‚Äé‚Äéê¨ï‚Äé‚Äé) AVESTAN LETTER GGE	[4ACC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B15, 0x0041 };
    uint32_t const ces[9] = { 0x4ACC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_188)
{
    // 10B15 0062;	
    // (‚Äé‚Äéê¨ï‚Äé‚Äé) AVESTAN LETTER GGE	[4ACC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B15, 0x0062 };
    uint32_t const ces[9] = { 0x4ACC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_189)
{
    // 10B16 0021;	
    // (‚Äé‚Äéê¨ñ‚Äé‚Äé) AVESTAN LETTER GHE	[4ACD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B16, 0x0021 };
    uint32_t const ces[9] = { 0x4ACD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_190)
{
    // 10B16 003F;	
    // (‚Äé‚Äéê¨ñ‚Äé‚Äé) AVESTAN LETTER GHE	[4ACD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B16, 0x003F };
    uint32_t const ces[9] = { 0x4ACD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_191)
{
    // 10B16 0061;	
    // (‚Äé‚Äéê¨ñ‚Äé‚Äé) AVESTAN LETTER GHE	[4ACD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B16, 0x0061 };
    uint32_t const ces[9] = { 0x4ACD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_192)
{
    // 10B16 0041;	
    // (‚Äé‚Äéê¨ñ‚Äé‚Äé) AVESTAN LETTER GHE	[4ACD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B16, 0x0041 };
    uint32_t const ces[9] = { 0x4ACD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_193)
{
    // 10B16 0062;	
    // (‚Äé‚Äéê¨ñ‚Äé‚Äé) AVESTAN LETTER GHE	[4ACD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B16, 0x0062 };
    uint32_t const ces[9] = { 0x4ACD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_194)
{
    // 10B17 0021;	
    // (‚Äé‚Äéê¨ó‚Äé‚Äé) AVESTAN LETTER CE	[4ACE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B17, 0x0021 };
    uint32_t const ces[9] = { 0x4ACE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_195)
{
    // 10B17 003F;	
    // (‚Äé‚Äéê¨ó‚Äé‚Äé) AVESTAN LETTER CE	[4ACE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B17, 0x003F };
    uint32_t const ces[9] = { 0x4ACE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_196)
{
    // 10B17 0061;	
    // (‚Äé‚Äéê¨ó‚Äé‚Äé) AVESTAN LETTER CE	[4ACE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B17, 0x0061 };
    uint32_t const ces[9] = { 0x4ACE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_197)
{
    // 10B17 0041;	
    // (‚Äé‚Äéê¨ó‚Äé‚Äé) AVESTAN LETTER CE	[4ACE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B17, 0x0041 };
    uint32_t const ces[9] = { 0x4ACE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_198)
{
    // 10B17 0062;	
    // (‚Äé‚Äéê¨ó‚Äé‚Äé) AVESTAN LETTER CE	[4ACE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B17, 0x0062 };
    uint32_t const ces[9] = { 0x4ACE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_199)
{
    // 10B18 0021;	
    // (‚Äé‚Äéê¨ò‚Äé‚Äé) AVESTAN LETTER JE	[4ACF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B18, 0x0021 };
    uint32_t const ces[9] = { 0x4ACF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_200)
{
    // 10B18 003F;	
    // (‚Äé‚Äéê¨ò‚Äé‚Äé) AVESTAN LETTER JE	[4ACF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B18, 0x003F };
    uint32_t const ces[9] = { 0x4ACF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_201)
{
    // 10B18 0061;	
    // (‚Äé‚Äéê¨ò‚Äé‚Äé) AVESTAN LETTER JE	[4ACF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B18, 0x0061 };
    uint32_t const ces[9] = { 0x4ACF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_202)
{
    // 10B18 0041;	
    // (‚Äé‚Äéê¨ò‚Äé‚Äé) AVESTAN LETTER JE	[4ACF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B18, 0x0041 };
    uint32_t const ces[9] = { 0x4ACF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_203)
{
    // 10B18 0062;	
    // (‚Äé‚Äéê¨ò‚Äé‚Äé) AVESTAN LETTER JE	[4ACF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B18, 0x0062 };
    uint32_t const ces[9] = { 0x4ACF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_204)
{
    // 10B19 0021;	
    // (‚Äé‚Äéê¨ô‚Äé‚Äé) AVESTAN LETTER TE	[4AD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B19, 0x0021 };
    uint32_t const ces[9] = { 0x4AD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_205)
{
    // 10B19 003F;	
    // (‚Äé‚Äéê¨ô‚Äé‚Äé) AVESTAN LETTER TE	[4AD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B19, 0x003F };
    uint32_t const ces[9] = { 0x4AD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_206)
{
    // 10B19 0061;	
    // (‚Äé‚Äéê¨ô‚Äé‚Äé) AVESTAN LETTER TE	[4AD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B19, 0x0061 };
    uint32_t const ces[9] = { 0x4AD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_207)
{
    // 10B19 0041;	
    // (‚Äé‚Äéê¨ô‚Äé‚Äé) AVESTAN LETTER TE	[4AD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B19, 0x0041 };
    uint32_t const ces[9] = { 0x4AD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_208)
{
    // 10B19 0062;	
    // (‚Äé‚Äéê¨ô‚Äé‚Äé) AVESTAN LETTER TE	[4AD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B19, 0x0062 };
    uint32_t const ces[9] = { 0x4AD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_209)
{
    // 10B1A 0021;	
    // (‚Äé‚Äéê¨ö‚Äé‚Äé) AVESTAN LETTER THE	[4AD1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1A, 0x0021 };
    uint32_t const ces[9] = { 0x4AD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_210)
{
    // 10B1A 003F;	
    // (‚Äé‚Äéê¨ö‚Äé‚Äé) AVESTAN LETTER THE	[4AD1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1A, 0x003F };
    uint32_t const ces[9] = { 0x4AD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_211)
{
    // 10B1A 0061;	
    // (‚Äé‚Äéê¨ö‚Äé‚Äé) AVESTAN LETTER THE	[4AD1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1A, 0x0061 };
    uint32_t const ces[9] = { 0x4AD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_212)
{
    // 10B1A 0041;	
    // (‚Äé‚Äéê¨ö‚Äé‚Äé) AVESTAN LETTER THE	[4AD1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B1A, 0x0041 };
    uint32_t const ces[9] = { 0x4AD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_213)
{
    // 10B1A 0062;	
    // (‚Äé‚Äéê¨ö‚Äé‚Äé) AVESTAN LETTER THE	[4AD1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1A, 0x0062 };
    uint32_t const ces[9] = { 0x4AD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_214)
{
    // 10B1B 0021;	
    // (‚Äé‚Äéê¨õ‚Äé‚Äé) AVESTAN LETTER DE	[4AD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1B, 0x0021 };
    uint32_t const ces[9] = { 0x4AD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_215)
{
    // 10B1B 003F;	
    // (‚Äé‚Äéê¨õ‚Äé‚Äé) AVESTAN LETTER DE	[4AD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1B, 0x003F };
    uint32_t const ces[9] = { 0x4AD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_216)
{
    // 10B1B 0061;	
    // (‚Äé‚Äéê¨õ‚Äé‚Äé) AVESTAN LETTER DE	[4AD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1B, 0x0061 };
    uint32_t const ces[9] = { 0x4AD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_217)
{
    // 10B1B 0041;	
    // (‚Äé‚Äéê¨õ‚Äé‚Äé) AVESTAN LETTER DE	[4AD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B1B, 0x0041 };
    uint32_t const ces[9] = { 0x4AD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_218)
{
    // 10B1B 0062;	
    // (‚Äé‚Äéê¨õ‚Äé‚Äé) AVESTAN LETTER DE	[4AD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1B, 0x0062 };
    uint32_t const ces[9] = { 0x4AD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_219)
{
    // 10B1C 0021;	
    // (‚Äé‚Äéê¨ú‚Äé‚Äé) AVESTAN LETTER DHE	[4AD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1C, 0x0021 };
    uint32_t const ces[9] = { 0x4AD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_220)
{
    // 10B1C 003F;	
    // (‚Äé‚Äéê¨ú‚Äé‚Äé) AVESTAN LETTER DHE	[4AD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1C, 0x003F };
    uint32_t const ces[9] = { 0x4AD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_221)
{
    // 10B1C 0061;	
    // (‚Äé‚Äéê¨ú‚Äé‚Äé) AVESTAN LETTER DHE	[4AD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1C, 0x0061 };
    uint32_t const ces[9] = { 0x4AD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_222)
{
    // 10B1C 0041;	
    // (‚Äé‚Äéê¨ú‚Äé‚Äé) AVESTAN LETTER DHE	[4AD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B1C, 0x0041 };
    uint32_t const ces[9] = { 0x4AD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_223)
{
    // 10B1C 0062;	
    // (‚Äé‚Äéê¨ú‚Äé‚Äé) AVESTAN LETTER DHE	[4AD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1C, 0x0062 };
    uint32_t const ces[9] = { 0x4AD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_224)
{
    // 10B1D 0021;	
    // (‚Äé‚Äéê¨ù‚Äé‚Äé) AVESTAN LETTER TTE	[4AD4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1D, 0x0021 };
    uint32_t const ces[9] = { 0x4AD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_225)
{
    // 10B1D 003F;	
    // (‚Äé‚Äéê¨ù‚Äé‚Äé) AVESTAN LETTER TTE	[4AD4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1D, 0x003F };
    uint32_t const ces[9] = { 0x4AD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_226)
{
    // 10B1D 0061;	
    // (‚Äé‚Äéê¨ù‚Äé‚Äé) AVESTAN LETTER TTE	[4AD4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1D, 0x0061 };
    uint32_t const ces[9] = { 0x4AD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_227)
{
    // 10B1D 0041;	
    // (‚Äé‚Äéê¨ù‚Äé‚Äé) AVESTAN LETTER TTE	[4AD4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B1D, 0x0041 };
    uint32_t const ces[9] = { 0x4AD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_228)
{
    // 10B1D 0062;	
    // (‚Äé‚Äéê¨ù‚Äé‚Äé) AVESTAN LETTER TTE	[4AD4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1D, 0x0062 };
    uint32_t const ces[9] = { 0x4AD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_229)
{
    // 10B1E 0021;	
    // (‚Äé‚Äéê¨û‚Äé‚Äé) AVESTAN LETTER PE	[4AD5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1E, 0x0021 };
    uint32_t const ces[9] = { 0x4AD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_230)
{
    // 10B1E 003F;	
    // (‚Äé‚Äéê¨û‚Äé‚Äé) AVESTAN LETTER PE	[4AD5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1E, 0x003F };
    uint32_t const ces[9] = { 0x4AD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_231)
{
    // 10B1E 0061;	
    // (‚Äé‚Äéê¨û‚Äé‚Äé) AVESTAN LETTER PE	[4AD5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1E, 0x0061 };
    uint32_t const ces[9] = { 0x4AD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_232)
{
    // 10B1E 0041;	
    // (‚Äé‚Äéê¨û‚Äé‚Äé) AVESTAN LETTER PE	[4AD5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B1E, 0x0041 };
    uint32_t const ces[9] = { 0x4AD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_233)
{
    // 10B1E 0062;	
    // (‚Äé‚Äéê¨û‚Äé‚Äé) AVESTAN LETTER PE	[4AD5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1E, 0x0062 };
    uint32_t const ces[9] = { 0x4AD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_234)
{
    // 10B1F 0021;	
    // (‚Äé‚Äéê¨ü‚Äé‚Äé) AVESTAN LETTER FE	[4AD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1F, 0x0021 };
    uint32_t const ces[9] = { 0x4AD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_235)
{
    // 10B1F 003F;	
    // (‚Äé‚Äéê¨ü‚Äé‚Äé) AVESTAN LETTER FE	[4AD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1F, 0x003F };
    uint32_t const ces[9] = { 0x4AD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_236)
{
    // 10B1F 0061;	
    // (‚Äé‚Äéê¨ü‚Äé‚Äé) AVESTAN LETTER FE	[4AD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1F, 0x0061 };
    uint32_t const ces[9] = { 0x4AD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_237)
{
    // 10B1F 0041;	
    // (‚Äé‚Äéê¨ü‚Äé‚Äé) AVESTAN LETTER FE	[4AD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B1F, 0x0041 };
    uint32_t const ces[9] = { 0x4AD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_238)
{
    // 10B1F 0062;	
    // (‚Äé‚Äéê¨ü‚Äé‚Äé) AVESTAN LETTER FE	[4AD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B1F, 0x0062 };
    uint32_t const ces[9] = { 0x4AD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_239)
{
    // 10B20 0021;	
    // (‚Äé‚Äéê¨†‚Äé‚Äé) AVESTAN LETTER BE	[4AD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B20, 0x0021 };
    uint32_t const ces[9] = { 0x4AD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_240)
{
    // 10B20 003F;	
    // (‚Äé‚Äéê¨†‚Äé‚Äé) AVESTAN LETTER BE	[4AD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B20, 0x003F };
    uint32_t const ces[9] = { 0x4AD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_241)
{
    // 10B20 0061;	
    // (‚Äé‚Äéê¨†‚Äé‚Äé) AVESTAN LETTER BE	[4AD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B20, 0x0061 };
    uint32_t const ces[9] = { 0x4AD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_242)
{
    // 10B20 0041;	
    // (‚Äé‚Äéê¨†‚Äé‚Äé) AVESTAN LETTER BE	[4AD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B20, 0x0041 };
    uint32_t const ces[9] = { 0x4AD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_243)
{
    // 10B20 0062;	
    // (‚Äé‚Äéê¨†‚Äé‚Äé) AVESTAN LETTER BE	[4AD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B20, 0x0062 };
    uint32_t const ces[9] = { 0x4AD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_244)
{
    // 10B21 0021;	
    // (‚Äé‚Äéê¨°‚Äé‚Äé) AVESTAN LETTER BHE	[4AD8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B21, 0x0021 };
    uint32_t const ces[9] = { 0x4AD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_245)
{
    // 10B21 003F;	
    // (‚Äé‚Äéê¨°‚Äé‚Äé) AVESTAN LETTER BHE	[4AD8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B21, 0x003F };
    uint32_t const ces[9] = { 0x4AD8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_246)
{
    // 10B21 0061;	
    // (‚Äé‚Äéê¨°‚Äé‚Äé) AVESTAN LETTER BHE	[4AD8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B21, 0x0061 };
    uint32_t const ces[9] = { 0x4AD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_247)
{
    // 10B21 0041;	
    // (‚Äé‚Äéê¨°‚Äé‚Äé) AVESTAN LETTER BHE	[4AD8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B21, 0x0041 };
    uint32_t const ces[9] = { 0x4AD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_248)
{
    // 10B21 0062;	
    // (‚Äé‚Äéê¨°‚Äé‚Äé) AVESTAN LETTER BHE	[4AD8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B21, 0x0062 };
    uint32_t const ces[9] = { 0x4AD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_249)
{
    // 10B22 0021;	
    // (‚Äé‚Äéê¨¢‚Äé‚Äé) AVESTAN LETTER NGE	[4AD9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B22, 0x0021 };
    uint32_t const ces[9] = { 0x4AD9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_250)
{
    // 10B22 003F;	
    // (‚Äé‚Äéê¨¢‚Äé‚Äé) AVESTAN LETTER NGE	[4AD9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B22, 0x003F };
    uint32_t const ces[9] = { 0x4AD9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_251)
{
    // 10B22 0061;	
    // (‚Äé‚Äéê¨¢‚Äé‚Äé) AVESTAN LETTER NGE	[4AD9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B22, 0x0061 };
    uint32_t const ces[9] = { 0x4AD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_252)
{
    // 10B22 0041;	
    // (‚Äé‚Äéê¨¢‚Äé‚Äé) AVESTAN LETTER NGE	[4AD9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B22, 0x0041 };
    uint32_t const ces[9] = { 0x4AD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_253)
{
    // 10B22 0062;	
    // (‚Äé‚Äéê¨¢‚Äé‚Äé) AVESTAN LETTER NGE	[4AD9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B22, 0x0062 };
    uint32_t const ces[9] = { 0x4AD9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_254)
{
    // 10B23 0021;	
    // (‚Äé‚Äéê¨£‚Äé‚Äé) AVESTAN LETTER NGYE	[4ADA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B23, 0x0021 };
    uint32_t const ces[9] = { 0x4ADA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_255)
{
    // 10B23 003F;	
    // (‚Äé‚Äéê¨£‚Äé‚Äé) AVESTAN LETTER NGYE	[4ADA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B23, 0x003F };
    uint32_t const ces[9] = { 0x4ADA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_256)
{
    // 10B23 0061;	
    // (‚Äé‚Äéê¨£‚Äé‚Äé) AVESTAN LETTER NGYE	[4ADA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B23, 0x0061 };
    uint32_t const ces[9] = { 0x4ADA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_257)
{
    // 10B23 0041;	
    // (‚Äé‚Äéê¨£‚Äé‚Äé) AVESTAN LETTER NGYE	[4ADA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B23, 0x0041 };
    uint32_t const ces[9] = { 0x4ADA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_258)
{
    // 10B23 0062;	
    // (‚Äé‚Äéê¨£‚Äé‚Äé) AVESTAN LETTER NGYE	[4ADA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B23, 0x0062 };
    uint32_t const ces[9] = { 0x4ADA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_259)
{
    // 10B24 0021;	
    // (‚Äé‚Äéê¨§‚Äé‚Äé) AVESTAN LETTER NGVE	[4ADB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B24, 0x0021 };
    uint32_t const ces[9] = { 0x4ADB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_260)
{
    // 10B24 003F;	
    // (‚Äé‚Äéê¨§‚Äé‚Äé) AVESTAN LETTER NGVE	[4ADB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B24, 0x003F };
    uint32_t const ces[9] = { 0x4ADB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_261)
{
    // 10B24 0061;	
    // (‚Äé‚Äéê¨§‚Äé‚Äé) AVESTAN LETTER NGVE	[4ADB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B24, 0x0061 };
    uint32_t const ces[9] = { 0x4ADB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_262)
{
    // 10B24 0041;	
    // (‚Äé‚Äéê¨§‚Äé‚Äé) AVESTAN LETTER NGVE	[4ADB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B24, 0x0041 };
    uint32_t const ces[9] = { 0x4ADB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_263)
{
    // 10B24 0062;	
    // (‚Äé‚Äéê¨§‚Äé‚Äé) AVESTAN LETTER NGVE	[4ADB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B24, 0x0062 };
    uint32_t const ces[9] = { 0x4ADB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_264)
{
    // 10B25 0021;	
    // (‚Äé‚Äéê¨•‚Äé‚Äé) AVESTAN LETTER NE	[4ADC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B25, 0x0021 };
    uint32_t const ces[9] = { 0x4ADC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_265)
{
    // 10B25 003F;	
    // (‚Äé‚Äéê¨•‚Äé‚Äé) AVESTAN LETTER NE	[4ADC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B25, 0x003F };
    uint32_t const ces[9] = { 0x4ADC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_266)
{
    // 10B25 0061;	
    // (‚Äé‚Äéê¨•‚Äé‚Äé) AVESTAN LETTER NE	[4ADC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B25, 0x0061 };
    uint32_t const ces[9] = { 0x4ADC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_267)
{
    // 10B25 0041;	
    // (‚Äé‚Äéê¨•‚Äé‚Äé) AVESTAN LETTER NE	[4ADC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B25, 0x0041 };
    uint32_t const ces[9] = { 0x4ADC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_268)
{
    // 10B25 0062;	
    // (‚Äé‚Äéê¨•‚Äé‚Äé) AVESTAN LETTER NE	[4ADC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B25, 0x0062 };
    uint32_t const ces[9] = { 0x4ADC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_269)
{
    // 10B26 0021;	
    // (‚Äé‚Äéê¨¶‚Äé‚Äé) AVESTAN LETTER NYE	[4ADD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B26, 0x0021 };
    uint32_t const ces[9] = { 0x4ADD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_270)
{
    // 10B26 003F;	
    // (‚Äé‚Äéê¨¶‚Äé‚Äé) AVESTAN LETTER NYE	[4ADD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B26, 0x003F };
    uint32_t const ces[9] = { 0x4ADD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_271)
{
    // 10B26 0061;	
    // (‚Äé‚Äéê¨¶‚Äé‚Äé) AVESTAN LETTER NYE	[4ADD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B26, 0x0061 };
    uint32_t const ces[9] = { 0x4ADD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_272)
{
    // 10B26 0041;	
    // (‚Äé‚Äéê¨¶‚Äé‚Äé) AVESTAN LETTER NYE	[4ADD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B26, 0x0041 };
    uint32_t const ces[9] = { 0x4ADD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_273)
{
    // 10B26 0062;	
    // (‚Äé‚Äéê¨¶‚Äé‚Äé) AVESTAN LETTER NYE	[4ADD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B26, 0x0062 };
    uint32_t const ces[9] = { 0x4ADD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_274)
{
    // 10B27 0021;	
    // (‚Äé‚Äéê¨ß‚Äé‚Äé) AVESTAN LETTER NNE	[4ADE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B27, 0x0021 };
    uint32_t const ces[9] = { 0x4ADE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_275)
{
    // 10B27 003F;	
    // (‚Äé‚Äéê¨ß‚Äé‚Äé) AVESTAN LETTER NNE	[4ADE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B27, 0x003F };
    uint32_t const ces[9] = { 0x4ADE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_276)
{
    // 10B27 0061;	
    // (‚Äé‚Äéê¨ß‚Äé‚Äé) AVESTAN LETTER NNE	[4ADE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B27, 0x0061 };
    uint32_t const ces[9] = { 0x4ADE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_277)
{
    // 10B27 0041;	
    // (‚Äé‚Äéê¨ß‚Äé‚Äé) AVESTAN LETTER NNE	[4ADE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B27, 0x0041 };
    uint32_t const ces[9] = { 0x4ADE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_278)
{
    // 10B27 0062;	
    // (‚Äé‚Äéê¨ß‚Äé‚Äé) AVESTAN LETTER NNE	[4ADE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B27, 0x0062 };
    uint32_t const ces[9] = { 0x4ADE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_279)
{
    // 10B28 0021;	
    // (‚Äé‚Äéê¨®‚Äé‚Äé) AVESTAN LETTER ME	[4ADF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B28, 0x0021 };
    uint32_t const ces[9] = { 0x4ADF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_280)
{
    // 10B28 003F;	
    // (‚Äé‚Äéê¨®‚Äé‚Äé) AVESTAN LETTER ME	[4ADF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B28, 0x003F };
    uint32_t const ces[9] = { 0x4ADF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_281)
{
    // 10B28 0061;	
    // (‚Äé‚Äéê¨®‚Äé‚Äé) AVESTAN LETTER ME	[4ADF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B28, 0x0061 };
    uint32_t const ces[9] = { 0x4ADF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_282)
{
    // 10B28 0041;	
    // (‚Äé‚Äéê¨®‚Äé‚Äé) AVESTAN LETTER ME	[4ADF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B28, 0x0041 };
    uint32_t const ces[9] = { 0x4ADF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_283)
{
    // 10B28 0062;	
    // (‚Äé‚Äéê¨®‚Äé‚Äé) AVESTAN LETTER ME	[4ADF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B28, 0x0062 };
    uint32_t const ces[9] = { 0x4ADF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_284)
{
    // 10B29 0021;	
    // (‚Äé‚Äéê¨©‚Äé‚Äé) AVESTAN LETTER HME	[4AE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B29, 0x0021 };
    uint32_t const ces[9] = { 0x4AE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_285)
{
    // 10B29 003F;	
    // (‚Äé‚Äéê¨©‚Äé‚Äé) AVESTAN LETTER HME	[4AE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B29, 0x003F };
    uint32_t const ces[9] = { 0x4AE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_286)
{
    // 10B29 0061;	
    // (‚Äé‚Äéê¨©‚Äé‚Äé) AVESTAN LETTER HME	[4AE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B29, 0x0061 };
    uint32_t const ces[9] = { 0x4AE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_287)
{
    // 10B29 0041;	
    // (‚Äé‚Äéê¨©‚Äé‚Äé) AVESTAN LETTER HME	[4AE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B29, 0x0041 };
    uint32_t const ces[9] = { 0x4AE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_288)
{
    // 10B29 0062;	
    // (‚Äé‚Äéê¨©‚Äé‚Äé) AVESTAN LETTER HME	[4AE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B29, 0x0062 };
    uint32_t const ces[9] = { 0x4AE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_289)
{
    // 10B2A 0021;	
    // (‚Äé‚Äéê¨™‚Äé‚Äé) AVESTAN LETTER YYE	[4AE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B2A, 0x0021 };
    uint32_t const ces[9] = { 0x4AE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_290)
{
    // 10B2A 003F;	
    // (‚Äé‚Äéê¨™‚Äé‚Äé) AVESTAN LETTER YYE	[4AE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B2A, 0x003F };
    uint32_t const ces[9] = { 0x4AE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_291)
{
    // 10B2A 0061;	
    // (‚Äé‚Äéê¨™‚Äé‚Äé) AVESTAN LETTER YYE	[4AE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B2A, 0x0061 };
    uint32_t const ces[9] = { 0x4AE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_292)
{
    // 10B2A 0041;	
    // (‚Äé‚Äéê¨™‚Äé‚Äé) AVESTAN LETTER YYE	[4AE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B2A, 0x0041 };
    uint32_t const ces[9] = { 0x4AE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_293)
{
    // 10B2A 0062;	
    // (‚Äé‚Äéê¨™‚Äé‚Äé) AVESTAN LETTER YYE	[4AE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B2A, 0x0062 };
    uint32_t const ces[9] = { 0x4AE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_294)
{
    // 10B2B 0021;	
    // (‚Äé‚Äéê¨´‚Äé‚Äé) AVESTAN LETTER YE	[4AE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B2B, 0x0021 };
    uint32_t const ces[9] = { 0x4AE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_295)
{
    // 10B2B 003F;	
    // (‚Äé‚Äéê¨´‚Äé‚Äé) AVESTAN LETTER YE	[4AE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B2B, 0x003F };
    uint32_t const ces[9] = { 0x4AE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_296)
{
    // 10B2B 0061;	
    // (‚Äé‚Äéê¨´‚Äé‚Äé) AVESTAN LETTER YE	[4AE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B2B, 0x0061 };
    uint32_t const ces[9] = { 0x4AE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_297)
{
    // 10B2B 0041;	
    // (‚Äé‚Äéê¨´‚Äé‚Äé) AVESTAN LETTER YE	[4AE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B2B, 0x0041 };
    uint32_t const ces[9] = { 0x4AE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_298)
{
    // 10B2B 0062;	
    // (‚Äé‚Äéê¨´‚Äé‚Äé) AVESTAN LETTER YE	[4AE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B2B, 0x0062 };
    uint32_t const ces[9] = { 0x4AE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_299)
{
    // 10B2C 0021;	
    // (‚Äé‚Äéê¨¨‚Äé‚Äé) AVESTAN LETTER VE	[4AE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B2C, 0x0021 };
    uint32_t const ces[9] = { 0x4AE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_300)
{
    // 10B2C 003F;	
    // (‚Äé‚Äéê¨¨‚Äé‚Äé) AVESTAN LETTER VE	[4AE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B2C, 0x003F };
    uint32_t const ces[9] = { 0x4AE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_301)
{
    // 10B2C 0061;	
    // (‚Äé‚Äéê¨¨‚Äé‚Äé) AVESTAN LETTER VE	[4AE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B2C, 0x0061 };
    uint32_t const ces[9] = { 0x4AE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_302)
{
    // 10B2C 0041;	
    // (‚Äé‚Äéê¨¨‚Äé‚Äé) AVESTAN LETTER VE	[4AE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B2C, 0x0041 };
    uint32_t const ces[9] = { 0x4AE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_303)
{
    // 10B2C 0062;	
    // (‚Äé‚Äéê¨¨‚Äé‚Äé) AVESTAN LETTER VE	[4AE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B2C, 0x0062 };
    uint32_t const ces[9] = { 0x4AE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_304)
{
    // 10B2D 0021;	
    // (‚Äé‚Äéê¨≠‚Äé‚Äé) AVESTAN LETTER RE	[4AE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B2D, 0x0021 };
    uint32_t const ces[9] = { 0x4AE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_305)
{
    // 10B2E 0021;	
    // (‚Äé‚Äéê¨Æ‚Äé‚Äé) AVESTAN LETTER LE	[4AE4 0261 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10B2E, 0x0021 };
    uint32_t const ces[11] = { 0x4AE4, 0x0261, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_306)
{
    // 10B2D 003F;	
    // (‚Äé‚Äéê¨≠‚Äé‚Äé) AVESTAN LETTER RE	[4AE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B2D, 0x003F };
    uint32_t const ces[9] = { 0x4AE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_307)
{
    // 10B2E 003F;	
    // (‚Äé‚Äéê¨Æ‚Äé‚Äé) AVESTAN LETTER LE	[4AE4 0267 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10B2E, 0x003F };
    uint32_t const ces[11] = { 0x4AE4, 0x0267, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_308)
{
    // 10B2D 0061;	
    // (‚Äé‚Äéê¨≠‚Äé‚Äé) AVESTAN LETTER RE	[4AE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B2D, 0x0061 };
    uint32_t const ces[9] = { 0x4AE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_309)
{
    // 10B2D 0041;	
    // (‚Äé‚Äéê¨≠‚Äé‚Äé) AVESTAN LETTER RE	[4AE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B2D, 0x0041 };
    uint32_t const ces[9] = { 0x4AE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_310)
{
    // 10B2E 0061;	
    // (‚Äé‚Äéê¨Æ‚Äé‚Äé) AVESTAN LETTER LE	[4AE4 1CAD | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10B2E, 0x0061 };
    uint32_t const ces[11] = { 0x4AE4, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_311)
{
    // 10B2E 0041;	
    // (‚Äé‚Äéê¨Æ‚Äé‚Äé) AVESTAN LETTER LE	[4AE4 1CAD | 0020 0111 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x10B2E, 0x0041 };
    uint32_t const ces[11] = { 0x4AE4, 0x1CAD, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_312)
{
    // 10B2D 0062;	
    // (‚Äé‚Äéê¨≠‚Äé‚Äé) AVESTAN LETTER RE	[4AE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B2D, 0x0062 };
    uint32_t const ces[9] = { 0x4AE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_313)
{
    // 10B2E 0062;	
    // (‚Äé‚Äéê¨Æ‚Äé‚Äé) AVESTAN LETTER LE	[4AE4 1CC6 | 0020 0111 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x10B2E, 0x0062 };
    uint32_t const ces[11] = { 0x4AE4, 0x1CC6, 0x0000, 0x0020, 0x0111, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_314)
{
    // 10B2F 0021;	
    // (‚Äé‚Äéê¨Ø‚Äé‚Äé) AVESTAN LETTER SE	[4AE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B2F, 0x0021 };
    uint32_t const ces[9] = { 0x4AE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_315)
{
    // 10B2F 003F;	
    // (‚Äé‚Äéê¨Ø‚Äé‚Äé) AVESTAN LETTER SE	[4AE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B2F, 0x003F };
    uint32_t const ces[9] = { 0x4AE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_316)
{
    // 10B2F 0061;	
    // (‚Äé‚Äéê¨Ø‚Äé‚Äé) AVESTAN LETTER SE	[4AE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B2F, 0x0061 };
    uint32_t const ces[9] = { 0x4AE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_317)
{
    // 10B2F 0041;	
    // (‚Äé‚Äéê¨Ø‚Äé‚Äé) AVESTAN LETTER SE	[4AE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B2F, 0x0041 };
    uint32_t const ces[9] = { 0x4AE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_318)
{
    // 10B2F 0062;	
    // (‚Äé‚Äéê¨Ø‚Äé‚Äé) AVESTAN LETTER SE	[4AE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B2F, 0x0062 };
    uint32_t const ces[9] = { 0x4AE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_319)
{
    // 10B30 0021;	
    // (‚Äé‚Äéê¨∞‚Äé‚Äé) AVESTAN LETTER ZE	[4AE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B30, 0x0021 };
    uint32_t const ces[9] = { 0x4AE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_320)
{
    // 10B30 003F;	
    // (‚Äé‚Äéê¨∞‚Äé‚Äé) AVESTAN LETTER ZE	[4AE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B30, 0x003F };
    uint32_t const ces[9] = { 0x4AE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_321)
{
    // 10B30 0061;	
    // (‚Äé‚Äéê¨∞‚Äé‚Äé) AVESTAN LETTER ZE	[4AE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B30, 0x0061 };
    uint32_t const ces[9] = { 0x4AE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_322)
{
    // 10B30 0041;	
    // (‚Äé‚Äéê¨∞‚Äé‚Äé) AVESTAN LETTER ZE	[4AE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B30, 0x0041 };
    uint32_t const ces[9] = { 0x4AE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_323)
{
    // 10B30 0062;	
    // (‚Äé‚Äéê¨∞‚Äé‚Äé) AVESTAN LETTER ZE	[4AE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B30, 0x0062 };
    uint32_t const ces[9] = { 0x4AE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_324)
{
    // 10B31 0021;	
    // (‚Äé‚Äéê¨±‚Äé‚Äé) AVESTAN LETTER SHE	[4AE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B31, 0x0021 };
    uint32_t const ces[9] = { 0x4AE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_325)
{
    // 10B31 003F;	
    // (‚Äé‚Äéê¨±‚Äé‚Äé) AVESTAN LETTER SHE	[4AE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B31, 0x003F };
    uint32_t const ces[9] = { 0x4AE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_326)
{
    // 10B31 0061;	
    // (‚Äé‚Äéê¨±‚Äé‚Äé) AVESTAN LETTER SHE	[4AE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B31, 0x0061 };
    uint32_t const ces[9] = { 0x4AE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_327)
{
    // 10B31 0041;	
    // (‚Äé‚Äéê¨±‚Äé‚Äé) AVESTAN LETTER SHE	[4AE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B31, 0x0041 };
    uint32_t const ces[9] = { 0x4AE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_328)
{
    // 10B31 0062;	
    // (‚Äé‚Äéê¨±‚Äé‚Äé) AVESTAN LETTER SHE	[4AE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B31, 0x0062 };
    uint32_t const ces[9] = { 0x4AE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_329)
{
    // 10B32 0021;	
    // (‚Äé‚Äéê¨≤‚Äé‚Äé) AVESTAN LETTER ZHE	[4AE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B32, 0x0021 };
    uint32_t const ces[9] = { 0x4AE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_330)
{
    // 10B32 003F;	
    // (‚Äé‚Äéê¨≤‚Äé‚Äé) AVESTAN LETTER ZHE	[4AE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B32, 0x003F };
    uint32_t const ces[9] = { 0x4AE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_331)
{
    // 10B32 0061;	
    // (‚Äé‚Äéê¨≤‚Äé‚Äé) AVESTAN LETTER ZHE	[4AE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B32, 0x0061 };
    uint32_t const ces[9] = { 0x4AE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_332)
{
    // 10B32 0041;	
    // (‚Äé‚Äéê¨≤‚Äé‚Äé) AVESTAN LETTER ZHE	[4AE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B32, 0x0041 };
    uint32_t const ces[9] = { 0x4AE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_333)
{
    // 10B32 0062;	
    // (‚Äé‚Äéê¨≤‚Äé‚Äé) AVESTAN LETTER ZHE	[4AE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B32, 0x0062 };
    uint32_t const ces[9] = { 0x4AE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_334)
{
    // 10B33 0021;	
    // (‚Äé‚Äéê¨≥‚Äé‚Äé) AVESTAN LETTER SHYE	[4AE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B33, 0x0021 };
    uint32_t const ces[9] = { 0x4AE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_335)
{
    // 10B33 003F;	
    // (‚Äé‚Äéê¨≥‚Äé‚Äé) AVESTAN LETTER SHYE	[4AE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B33, 0x003F };
    uint32_t const ces[9] = { 0x4AE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_336)
{
    // 10B33 0061;	
    // (‚Äé‚Äéê¨≥‚Äé‚Äé) AVESTAN LETTER SHYE	[4AE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B33, 0x0061 };
    uint32_t const ces[9] = { 0x4AE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_337)
{
    // 10B33 0041;	
    // (‚Äé‚Äéê¨≥‚Äé‚Äé) AVESTAN LETTER SHYE	[4AE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B33, 0x0041 };
    uint32_t const ces[9] = { 0x4AE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_338)
{
    // 10B33 0062;	
    // (‚Äé‚Äéê¨≥‚Äé‚Äé) AVESTAN LETTER SHYE	[4AE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B33, 0x0062 };
    uint32_t const ces[9] = { 0x4AE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_339)
{
    // 10B34 0021;	
    // (‚Äé‚Äéê¨¥‚Äé‚Äé) AVESTAN LETTER SSHE	[4AEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B34, 0x0021 };
    uint32_t const ces[9] = { 0x4AEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_340)
{
    // 10B34 003F;	
    // (‚Äé‚Äéê¨¥‚Äé‚Äé) AVESTAN LETTER SSHE	[4AEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B34, 0x003F };
    uint32_t const ces[9] = { 0x4AEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_341)
{
    // 10B34 0061;	
    // (‚Äé‚Äéê¨¥‚Äé‚Äé) AVESTAN LETTER SSHE	[4AEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B34, 0x0061 };
    uint32_t const ces[9] = { 0x4AEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_342)
{
    // 10B34 0041;	
    // (‚Äé‚Äéê¨¥‚Äé‚Äé) AVESTAN LETTER SSHE	[4AEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B34, 0x0041 };
    uint32_t const ces[9] = { 0x4AEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_343)
{
    // 10B34 0062;	
    // (‚Äé‚Äéê¨¥‚Äé‚Äé) AVESTAN LETTER SSHE	[4AEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B34, 0x0062 };
    uint32_t const ces[9] = { 0x4AEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_344)
{
    // 10B35 0021;	
    // (‚Äé‚Äéê¨µ‚Äé‚Äé) AVESTAN LETTER HE	[4AEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B35, 0x0021 };
    uint32_t const ces[9] = { 0x4AEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_345)
{
    // 10B35 003F;	
    // (‚Äé‚Äéê¨µ‚Äé‚Äé) AVESTAN LETTER HE	[4AEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B35, 0x003F };
    uint32_t const ces[9] = { 0x4AEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_346)
{
    // 10B35 0061;	
    // (‚Äé‚Äéê¨µ‚Äé‚Äé) AVESTAN LETTER HE	[4AEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B35, 0x0061 };
    uint32_t const ces[9] = { 0x4AEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_347)
{
    // 10B35 0041;	
    // (‚Äé‚Äéê¨µ‚Äé‚Äé) AVESTAN LETTER HE	[4AEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10B35, 0x0041 };
    uint32_t const ces[9] = { 0x4AEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_348)
{
    // 10B35 0062;	
    // (‚Äé‚Äéê¨µ‚Äé‚Äé) AVESTAN LETTER HE	[4AEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10B35, 0x0062 };
    uint32_t const ces[9] = { 0x4AEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_349)
{
    // 10860 0021;	
    // (‚Äé‚Äéê°†‚Äé‚Äé) PALMYRENE LETTER ALEPH	[4AEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10860, 0x0021 };
    uint32_t const ces[9] = { 0x4AEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_350)
{
    // 10860 003F;	
    // (‚Äé‚Äéê°†‚Äé‚Äé) PALMYRENE LETTER ALEPH	[4AEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10860, 0x003F };
    uint32_t const ces[9] = { 0x4AEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_351)
{
    // 10860 0061;	
    // (‚Äé‚Äéê°†‚Äé‚Äé) PALMYRENE LETTER ALEPH	[4AEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10860, 0x0061 };
    uint32_t const ces[9] = { 0x4AEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_352)
{
    // 10860 0041;	
    // (‚Äé‚Äéê°†‚Äé‚Äé) PALMYRENE LETTER ALEPH	[4AEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10860, 0x0041 };
    uint32_t const ces[9] = { 0x4AEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_353)
{
    // 10860 0062;	
    // (‚Äé‚Äéê°†‚Äé‚Äé) PALMYRENE LETTER ALEPH	[4AEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10860, 0x0062 };
    uint32_t const ces[9] = { 0x4AEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_354)
{
    // 10861 0021;	
    // (‚Äé‚Äéê°°‚Äé‚Äé) PALMYRENE LETTER BETH	[4AED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10861, 0x0021 };
    uint32_t const ces[9] = { 0x4AED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_355)
{
    // 10861 003F;	
    // (‚Äé‚Äéê°°‚Äé‚Äé) PALMYRENE LETTER BETH	[4AED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10861, 0x003F };
    uint32_t const ces[9] = { 0x4AED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_356)
{
    // 10861 0061;	
    // (‚Äé‚Äéê°°‚Äé‚Äé) PALMYRENE LETTER BETH	[4AED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10861, 0x0061 };
    uint32_t const ces[9] = { 0x4AED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_357)
{
    // 10861 0041;	
    // (‚Äé‚Äéê°°‚Äé‚Äé) PALMYRENE LETTER BETH	[4AED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10861, 0x0041 };
    uint32_t const ces[9] = { 0x4AED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_358)
{
    // 10861 0062;	
    // (‚Äé‚Äéê°°‚Äé‚Äé) PALMYRENE LETTER BETH	[4AED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10861, 0x0062 };
    uint32_t const ces[9] = { 0x4AED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_359)
{
    // 10862 0021;	
    // (‚Äé‚Äéê°¢‚Äé‚Äé) PALMYRENE LETTER GIMEL	[4AEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10862, 0x0021 };
    uint32_t const ces[9] = { 0x4AEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_360)
{
    // 10862 003F;	
    // (‚Äé‚Äéê°¢‚Äé‚Äé) PALMYRENE LETTER GIMEL	[4AEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10862, 0x003F };
    uint32_t const ces[9] = { 0x4AEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_361)
{
    // 10862 0061;	
    // (‚Äé‚Äéê°¢‚Äé‚Äé) PALMYRENE LETTER GIMEL	[4AEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10862, 0x0061 };
    uint32_t const ces[9] = { 0x4AEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_362)
{
    // 10862 0041;	
    // (‚Äé‚Äéê°¢‚Äé‚Äé) PALMYRENE LETTER GIMEL	[4AEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10862, 0x0041 };
    uint32_t const ces[9] = { 0x4AEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_363)
{
    // 10862 0062;	
    // (‚Äé‚Äéê°¢‚Äé‚Äé) PALMYRENE LETTER GIMEL	[4AEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10862, 0x0062 };
    uint32_t const ces[9] = { 0x4AEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_364)
{
    // 10863 0021;	
    // (‚Äé‚Äéê°£‚Äé‚Äé) PALMYRENE LETTER DALETH	[4AEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10863, 0x0021 };
    uint32_t const ces[9] = { 0x4AEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_365)
{
    // 10863 003F;	
    // (‚Äé‚Äéê°£‚Äé‚Äé) PALMYRENE LETTER DALETH	[4AEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10863, 0x003F };
    uint32_t const ces[9] = { 0x4AEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_366)
{
    // 10863 0061;	
    // (‚Äé‚Äéê°£‚Äé‚Äé) PALMYRENE LETTER DALETH	[4AEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10863, 0x0061 };
    uint32_t const ces[9] = { 0x4AEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_367)
{
    // 10863 0041;	
    // (‚Äé‚Äéê°£‚Äé‚Äé) PALMYRENE LETTER DALETH	[4AEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10863, 0x0041 };
    uint32_t const ces[9] = { 0x4AEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_368)
{
    // 10863 0062;	
    // (‚Äé‚Äéê°£‚Äé‚Äé) PALMYRENE LETTER DALETH	[4AEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10863, 0x0062 };
    uint32_t const ces[9] = { 0x4AEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_369)
{
    // 10864 0021;	
    // (‚Äé‚Äéê°§‚Äé‚Äé) PALMYRENE LETTER HE	[4AF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10864, 0x0021 };
    uint32_t const ces[9] = { 0x4AF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_370)
{
    // 10864 003F;	
    // (‚Äé‚Äéê°§‚Äé‚Äé) PALMYRENE LETTER HE	[4AF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10864, 0x003F };
    uint32_t const ces[9] = { 0x4AF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_371)
{
    // 10864 0061;	
    // (‚Äé‚Äéê°§‚Äé‚Äé) PALMYRENE LETTER HE	[4AF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10864, 0x0061 };
    uint32_t const ces[9] = { 0x4AF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_372)
{
    // 10864 0041;	
    // (‚Äé‚Äéê°§‚Äé‚Äé) PALMYRENE LETTER HE	[4AF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10864, 0x0041 };
    uint32_t const ces[9] = { 0x4AF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_373)
{
    // 10864 0062;	
    // (‚Äé‚Äéê°§‚Äé‚Äé) PALMYRENE LETTER HE	[4AF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10864, 0x0062 };
    uint32_t const ces[9] = { 0x4AF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_374)
{
    // 10865 0021;	
    // (‚Äé‚Äéê°•‚Äé‚Äé) PALMYRENE LETTER WAW	[4AF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10865, 0x0021 };
    uint32_t const ces[9] = { 0x4AF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_375)
{
    // 10865 003F;	
    // (‚Äé‚Äéê°•‚Äé‚Äé) PALMYRENE LETTER WAW	[4AF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10865, 0x003F };
    uint32_t const ces[9] = { 0x4AF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_376)
{
    // 10865 0061;	
    // (‚Äé‚Äéê°•‚Äé‚Äé) PALMYRENE LETTER WAW	[4AF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10865, 0x0061 };
    uint32_t const ces[9] = { 0x4AF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_377)
{
    // 10865 0041;	
    // (‚Äé‚Äéê°•‚Äé‚Äé) PALMYRENE LETTER WAW	[4AF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10865, 0x0041 };
    uint32_t const ces[9] = { 0x4AF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_378)
{
    // 10865 0062;	
    // (‚Äé‚Äéê°•‚Äé‚Äé) PALMYRENE LETTER WAW	[4AF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10865, 0x0062 };
    uint32_t const ces[9] = { 0x4AF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_379)
{
    // 10866 0021;	
    // (‚Äé‚Äéê°¶‚Äé‚Äé) PALMYRENE LETTER ZAYIN	[4AF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10866, 0x0021 };
    uint32_t const ces[9] = { 0x4AF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_380)
{
    // 10866 003F;	
    // (‚Äé‚Äéê°¶‚Äé‚Äé) PALMYRENE LETTER ZAYIN	[4AF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10866, 0x003F };
    uint32_t const ces[9] = { 0x4AF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_381)
{
    // 10866 0061;	
    // (‚Äé‚Äéê°¶‚Äé‚Äé) PALMYRENE LETTER ZAYIN	[4AF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10866, 0x0061 };
    uint32_t const ces[9] = { 0x4AF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_382)
{
    // 10866 0041;	
    // (‚Äé‚Äéê°¶‚Äé‚Äé) PALMYRENE LETTER ZAYIN	[4AF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10866, 0x0041 };
    uint32_t const ces[9] = { 0x4AF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_383)
{
    // 10866 0062;	
    // (‚Äé‚Äéê°¶‚Äé‚Äé) PALMYRENE LETTER ZAYIN	[4AF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10866, 0x0062 };
    uint32_t const ces[9] = { 0x4AF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_384)
{
    // 10867 0021;	
    // (‚Äé‚Äéê°ß‚Äé‚Äé) PALMYRENE LETTER HETH	[4AF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10867, 0x0021 };
    uint32_t const ces[9] = { 0x4AF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_385)
{
    // 10867 003F;	
    // (‚Äé‚Äéê°ß‚Äé‚Äé) PALMYRENE LETTER HETH	[4AF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10867, 0x003F };
    uint32_t const ces[9] = { 0x4AF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_386)
{
    // 10867 0061;	
    // (‚Äé‚Äéê°ß‚Äé‚Äé) PALMYRENE LETTER HETH	[4AF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10867, 0x0061 };
    uint32_t const ces[9] = { 0x4AF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_387)
{
    // 10867 0041;	
    // (‚Äé‚Äéê°ß‚Äé‚Äé) PALMYRENE LETTER HETH	[4AF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10867, 0x0041 };
    uint32_t const ces[9] = { 0x4AF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_388)
{
    // 10867 0062;	
    // (‚Äé‚Äéê°ß‚Äé‚Äé) PALMYRENE LETTER HETH	[4AF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10867, 0x0062 };
    uint32_t const ces[9] = { 0x4AF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_389)
{
    // 10868 0021;	
    // (‚Äé‚Äéê°®‚Äé‚Äé) PALMYRENE LETTER TETH	[4AF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10868, 0x0021 };
    uint32_t const ces[9] = { 0x4AF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_390)
{
    // 10868 003F;	
    // (‚Äé‚Äéê°®‚Äé‚Äé) PALMYRENE LETTER TETH	[4AF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10868, 0x003F };
    uint32_t const ces[9] = { 0x4AF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_391)
{
    // 10868 0061;	
    // (‚Äé‚Äéê°®‚Äé‚Äé) PALMYRENE LETTER TETH	[4AF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10868, 0x0061 };
    uint32_t const ces[9] = { 0x4AF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_392)
{
    // 10868 0041;	
    // (‚Äé‚Äéê°®‚Äé‚Äé) PALMYRENE LETTER TETH	[4AF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10868, 0x0041 };
    uint32_t const ces[9] = { 0x4AF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_393)
{
    // 10868 0062;	
    // (‚Äé‚Äéê°®‚Äé‚Äé) PALMYRENE LETTER TETH	[4AF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10868, 0x0062 };
    uint32_t const ces[9] = { 0x4AF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_394)
{
    // 10869 0021;	
    // (‚Äé‚Äéê°©‚Äé‚Äé) PALMYRENE LETTER YODH	[4AF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10869, 0x0021 };
    uint32_t const ces[9] = { 0x4AF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_395)
{
    // 10869 003F;	
    // (‚Äé‚Äéê°©‚Äé‚Äé) PALMYRENE LETTER YODH	[4AF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10869, 0x003F };
    uint32_t const ces[9] = { 0x4AF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_396)
{
    // 10869 0061;	
    // (‚Äé‚Äéê°©‚Äé‚Äé) PALMYRENE LETTER YODH	[4AF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10869, 0x0061 };
    uint32_t const ces[9] = { 0x4AF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_397)
{
    // 10869 0041;	
    // (‚Äé‚Äéê°©‚Äé‚Äé) PALMYRENE LETTER YODH	[4AF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10869, 0x0041 };
    uint32_t const ces[9] = { 0x4AF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_398)
{
    // 10869 0062;	
    // (‚Äé‚Äéê°©‚Äé‚Äé) PALMYRENE LETTER YODH	[4AF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10869, 0x0062 };
    uint32_t const ces[9] = { 0x4AF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_399)
{
    // 1086A 0021;	
    // (‚Äé‚Äéê°™‚Äé‚Äé) PALMYRENE LETTER KAPH	[4AF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086A, 0x0021 };
    uint32_t const ces[9] = { 0x4AF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_400)
{
    // 1086A 003F;	
    // (‚Äé‚Äéê°™‚Äé‚Äé) PALMYRENE LETTER KAPH	[4AF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086A, 0x003F };
    uint32_t const ces[9] = { 0x4AF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_401)
{
    // 1086A 0061;	
    // (‚Äé‚Äéê°™‚Äé‚Äé) PALMYRENE LETTER KAPH	[4AF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086A, 0x0061 };
    uint32_t const ces[9] = { 0x4AF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_402)
{
    // 1086A 0041;	
    // (‚Äé‚Äéê°™‚Äé‚Äé) PALMYRENE LETTER KAPH	[4AF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1086A, 0x0041 };
    uint32_t const ces[9] = { 0x4AF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_403)
{
    // 1086A 0062;	
    // (‚Äé‚Äéê°™‚Äé‚Äé) PALMYRENE LETTER KAPH	[4AF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086A, 0x0062 };
    uint32_t const ces[9] = { 0x4AF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_404)
{
    // 1086B 0021;	
    // (‚Äé‚Äéê°´‚Äé‚Äé) PALMYRENE LETTER LAMEDH	[4AF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086B, 0x0021 };
    uint32_t const ces[9] = { 0x4AF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_405)
{
    // 1086B 003F;	
    // (‚Äé‚Äéê°´‚Äé‚Äé) PALMYRENE LETTER LAMEDH	[4AF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086B, 0x003F };
    uint32_t const ces[9] = { 0x4AF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_406)
{
    // 1086B 0061;	
    // (‚Äé‚Äéê°´‚Äé‚Äé) PALMYRENE LETTER LAMEDH	[4AF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086B, 0x0061 };
    uint32_t const ces[9] = { 0x4AF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_407)
{
    // 1086B 0041;	
    // (‚Äé‚Äéê°´‚Äé‚Äé) PALMYRENE LETTER LAMEDH	[4AF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1086B, 0x0041 };
    uint32_t const ces[9] = { 0x4AF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_408)
{
    // 1086B 0062;	
    // (‚Äé‚Äéê°´‚Äé‚Äé) PALMYRENE LETTER LAMEDH	[4AF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086B, 0x0062 };
    uint32_t const ces[9] = { 0x4AF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_409)
{
    // 1086C 0021;	
    // (‚Äé‚Äéê°¨‚Äé‚Äé) PALMYRENE LETTER MEM	[4AF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086C, 0x0021 };
    uint32_t const ces[9] = { 0x4AF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_410)
{
    // 1086C 003F;	
    // (‚Äé‚Äéê°¨‚Äé‚Äé) PALMYRENE LETTER MEM	[4AF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086C, 0x003F };
    uint32_t const ces[9] = { 0x4AF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_411)
{
    // 1086C 0061;	
    // (‚Äé‚Äéê°¨‚Äé‚Äé) PALMYRENE LETTER MEM	[4AF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086C, 0x0061 };
    uint32_t const ces[9] = { 0x4AF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_412)
{
    // 1086C 0041;	
    // (‚Äé‚Äéê°¨‚Äé‚Äé) PALMYRENE LETTER MEM	[4AF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1086C, 0x0041 };
    uint32_t const ces[9] = { 0x4AF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_413)
{
    // 1086C 0062;	
    // (‚Äé‚Äéê°¨‚Äé‚Äé) PALMYRENE LETTER MEM	[4AF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086C, 0x0062 };
    uint32_t const ces[9] = { 0x4AF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_414)
{
    // 1086E 0021;	
    // (‚Äé‚Äéê°Æ‚Äé‚Äé) PALMYRENE LETTER NUN	[4AF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086E, 0x0021 };
    uint32_t const ces[9] = { 0x4AF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_415)
{
    // 1086D 0021;	
    // (‚Äé‚Äéê°≠‚Äé‚Äé) PALMYRENE LETTER FINAL NUN	[4AF9 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x1086D, 0x0021 };
    uint32_t const ces[9] = { 0x4AF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_416)
{
    // 1086E 003F;	
    // (‚Äé‚Äéê°Æ‚Äé‚Äé) PALMYRENE LETTER NUN	[4AF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086E, 0x003F };
    uint32_t const ces[9] = { 0x4AF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_417)
{
    // 1086D 003F;	
    // (‚Äé‚Äéê°≠‚Äé‚Äé) PALMYRENE LETTER FINAL NUN	[4AF9 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x1086D, 0x003F };
    uint32_t const ces[9] = { 0x4AF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_418)
{
    // 1086E 0061;	
    // (‚Äé‚Äéê°Æ‚Äé‚Äé) PALMYRENE LETTER NUN	[4AF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086E, 0x0061 };
    uint32_t const ces[9] = { 0x4AF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_419)
{
    // 1086E 0041;	
    // (‚Äé‚Äéê°Æ‚Äé‚Äé) PALMYRENE LETTER NUN	[4AF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1086E, 0x0041 };
    uint32_t const ces[9] = { 0x4AF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_420)
{
    // 1086D 0061;	
    // (‚Äé‚Äéê°≠‚Äé‚Äé) PALMYRENE LETTER FINAL NUN	[4AF9 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x1086D, 0x0061 };
    uint32_t const ces[9] = { 0x4AF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_421)
{
    // 1086D 0041;	
    // (‚Äé‚Äéê°≠‚Äé‚Äé) PALMYRENE LETTER FINAL NUN	[4AF9 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x1086D, 0x0041 };
    uint32_t const ces[9] = { 0x4AF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_422)
{
    // 1086E 0062;	
    // (‚Äé‚Äéê°Æ‚Äé‚Äé) PALMYRENE LETTER NUN	[4AF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086E, 0x0062 };
    uint32_t const ces[9] = { 0x4AF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_423)
{
    // 1086D 0062;	
    // (‚Äé‚Äéê°≠‚Äé‚Äé) PALMYRENE LETTER FINAL NUN	[4AF9 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x1086D, 0x0062 };
    uint32_t const ces[9] = { 0x4AF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_424)
{
    // 1086F 0021;	
    // (‚Äé‚Äéê°Ø‚Äé‚Äé) PALMYRENE LETTER SAMEKH	[4AFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086F, 0x0021 };
    uint32_t const ces[9] = { 0x4AFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_425)
{
    // 1086F 003F;	
    // (‚Äé‚Äéê°Ø‚Äé‚Äé) PALMYRENE LETTER SAMEKH	[4AFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086F, 0x003F };
    uint32_t const ces[9] = { 0x4AFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_426)
{
    // 1086F 0061;	
    // (‚Äé‚Äéê°Ø‚Äé‚Äé) PALMYRENE LETTER SAMEKH	[4AFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086F, 0x0061 };
    uint32_t const ces[9] = { 0x4AFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_427)
{
    // 1086F 0041;	
    // (‚Äé‚Äéê°Ø‚Äé‚Äé) PALMYRENE LETTER SAMEKH	[4AFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1086F, 0x0041 };
    uint32_t const ces[9] = { 0x4AFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_428)
{
    // 1086F 0062;	
    // (‚Äé‚Äéê°Ø‚Äé‚Äé) PALMYRENE LETTER SAMEKH	[4AFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1086F, 0x0062 };
    uint32_t const ces[9] = { 0x4AFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_429)
{
    // 10870 0021;	
    // (‚Äé‚Äéê°∞‚Äé‚Äé) PALMYRENE LETTER AYIN	[4AFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10870, 0x0021 };
    uint32_t const ces[9] = { 0x4AFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_430)
{
    // 10870 003F;	
    // (‚Äé‚Äéê°∞‚Äé‚Äé) PALMYRENE LETTER AYIN	[4AFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10870, 0x003F };
    uint32_t const ces[9] = { 0x4AFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_431)
{
    // 10870 0061;	
    // (‚Äé‚Äéê°∞‚Äé‚Äé) PALMYRENE LETTER AYIN	[4AFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10870, 0x0061 };
    uint32_t const ces[9] = { 0x4AFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_432)
{
    // 10870 0041;	
    // (‚Äé‚Äéê°∞‚Äé‚Äé) PALMYRENE LETTER AYIN	[4AFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10870, 0x0041 };
    uint32_t const ces[9] = { 0x4AFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_433)
{
    // 10870 0062;	
    // (‚Äé‚Äéê°∞‚Äé‚Äé) PALMYRENE LETTER AYIN	[4AFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10870, 0x0062 };
    uint32_t const ces[9] = { 0x4AFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_434)
{
    // 10871 0021;	
    // (‚Äé‚Äéê°±‚Äé‚Äé) PALMYRENE LETTER PE	[4AFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10871, 0x0021 };
    uint32_t const ces[9] = { 0x4AFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_435)
{
    // 10871 003F;	
    // (‚Äé‚Äéê°±‚Äé‚Äé) PALMYRENE LETTER PE	[4AFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10871, 0x003F };
    uint32_t const ces[9] = { 0x4AFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_436)
{
    // 10871 0061;	
    // (‚Äé‚Äéê°±‚Äé‚Äé) PALMYRENE LETTER PE	[4AFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10871, 0x0061 };
    uint32_t const ces[9] = { 0x4AFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_437)
{
    // 10871 0041;	
    // (‚Äé‚Äéê°±‚Äé‚Äé) PALMYRENE LETTER PE	[4AFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10871, 0x0041 };
    uint32_t const ces[9] = { 0x4AFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_438)
{
    // 10871 0062;	
    // (‚Äé‚Äéê°±‚Äé‚Äé) PALMYRENE LETTER PE	[4AFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10871, 0x0062 };
    uint32_t const ces[9] = { 0x4AFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_439)
{
    // 10872 0021;	
    // (‚Äé‚Äéê°≤‚Äé‚Äé) PALMYRENE LETTER SADHE	[4AFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10872, 0x0021 };
    uint32_t const ces[9] = { 0x4AFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_440)
{
    // 10872 003F;	
    // (‚Äé‚Äéê°≤‚Äé‚Äé) PALMYRENE LETTER SADHE	[4AFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10872, 0x003F };
    uint32_t const ces[9] = { 0x4AFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_441)
{
    // 10872 0061;	
    // (‚Äé‚Äéê°≤‚Äé‚Äé) PALMYRENE LETTER SADHE	[4AFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10872, 0x0061 };
    uint32_t const ces[9] = { 0x4AFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_442)
{
    // 10872 0041;	
    // (‚Äé‚Äéê°≤‚Äé‚Äé) PALMYRENE LETTER SADHE	[4AFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10872, 0x0041 };
    uint32_t const ces[9] = { 0x4AFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_443)
{
    // 10872 0062;	
    // (‚Äé‚Äéê°≤‚Äé‚Äé) PALMYRENE LETTER SADHE	[4AFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10872, 0x0062 };
    uint32_t const ces[9] = { 0x4AFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_444)
{
    // 10873 0021;	
    // (‚Äé‚Äéê°≥‚Äé‚Äé) PALMYRENE LETTER QOPH	[4AFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10873, 0x0021 };
    uint32_t const ces[9] = { 0x4AFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_445)
{
    // 10873 003F;	
    // (‚Äé‚Äéê°≥‚Äé‚Äé) PALMYRENE LETTER QOPH	[4AFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10873, 0x003F };
    uint32_t const ces[9] = { 0x4AFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_446)
{
    // 10873 0061;	
    // (‚Äé‚Äéê°≥‚Äé‚Äé) PALMYRENE LETTER QOPH	[4AFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10873, 0x0061 };
    uint32_t const ces[9] = { 0x4AFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_447)
{
    // 10873 0041;	
    // (‚Äé‚Äéê°≥‚Äé‚Äé) PALMYRENE LETTER QOPH	[4AFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10873, 0x0041 };
    uint32_t const ces[9] = { 0x4AFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_448)
{
    // 10873 0062;	
    // (‚Äé‚Äéê°≥‚Äé‚Äé) PALMYRENE LETTER QOPH	[4AFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10873, 0x0062 };
    uint32_t const ces[9] = { 0x4AFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_449)
{
    // 10874 0021;	
    // (‚Äé‚Äéê°¥‚Äé‚Äé) PALMYRENE LETTER RESH	[4AFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10874, 0x0021 };
    uint32_t const ces[9] = { 0x4AFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_450)
{
    // 10874 003F;	
    // (‚Äé‚Äéê°¥‚Äé‚Äé) PALMYRENE LETTER RESH	[4AFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10874, 0x003F };
    uint32_t const ces[9] = { 0x4AFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_451)
{
    // 10874 0061;	
    // (‚Äé‚Äéê°¥‚Äé‚Äé) PALMYRENE LETTER RESH	[4AFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10874, 0x0061 };
    uint32_t const ces[9] = { 0x4AFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_452)
{
    // 10874 0041;	
    // (‚Äé‚Äéê°¥‚Äé‚Äé) PALMYRENE LETTER RESH	[4AFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10874, 0x0041 };
    uint32_t const ces[9] = { 0x4AFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_453)
{
    // 10874 0062;	
    // (‚Äé‚Äéê°¥‚Äé‚Äé) PALMYRENE LETTER RESH	[4AFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10874, 0x0062 };
    uint32_t const ces[9] = { 0x4AFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_454)
{
    // 10875 0021;	
    // (‚Äé‚Äéê°µ‚Äé‚Äé) PALMYRENE LETTER SHIN	[4B00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10875, 0x0021 };
    uint32_t const ces[9] = { 0x4B00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_455)
{
    // 10875 003F;	
    // (‚Äé‚Äéê°µ‚Äé‚Äé) PALMYRENE LETTER SHIN	[4B00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10875, 0x003F };
    uint32_t const ces[9] = { 0x4B00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_456)
{
    // 10875 0061;	
    // (‚Äé‚Äéê°µ‚Äé‚Äé) PALMYRENE LETTER SHIN	[4B00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10875, 0x0061 };
    uint32_t const ces[9] = { 0x4B00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_457)
{
    // 10875 0041;	
    // (‚Äé‚Äéê°µ‚Äé‚Äé) PALMYRENE LETTER SHIN	[4B00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10875, 0x0041 };
    uint32_t const ces[9] = { 0x4B00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_458)
{
    // 10875 0062;	
    // (‚Äé‚Äéê°µ‚Äé‚Äé) PALMYRENE LETTER SHIN	[4B00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10875, 0x0062 };
    uint32_t const ces[9] = { 0x4B00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_459)
{
    // 10876 0021;	
    // (‚Äé‚Äéê°∂‚Äé‚Äé) PALMYRENE LETTER TAW	[4B01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10876, 0x0021 };
    uint32_t const ces[9] = { 0x4B01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_460)
{
    // 10876 003F;	
    // (‚Äé‚Äéê°∂‚Äé‚Äé) PALMYRENE LETTER TAW	[4B01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10876, 0x003F };
    uint32_t const ces[9] = { 0x4B01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_461)
{
    // 10876 0061;	
    // (‚Äé‚Äéê°∂‚Äé‚Äé) PALMYRENE LETTER TAW	[4B01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10876, 0x0061 };
    uint32_t const ces[9] = { 0x4B01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_462)
{
    // 10876 0041;	
    // (‚Äé‚Äéê°∂‚Äé‚Äé) PALMYRENE LETTER TAW	[4B01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10876, 0x0041 };
    uint32_t const ces[9] = { 0x4B01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_463)
{
    // 10876 0062;	
    // (‚Äé‚Äéê°∂‚Äé‚Äé) PALMYRENE LETTER TAW	[4B01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10876, 0x0062 };
    uint32_t const ces[9] = { 0x4B01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_464)
{
    // 10881 0021;	
    // (‚Äé‚Äéê¢Å‚Äé‚Äé) NABATAEAN LETTER ALEPH	[4B02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10881, 0x0021 };
    uint32_t const ces[9] = { 0x4B02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_465)
{
    // 10880 0021;	
    // (‚Äé‚Äéê¢Ä‚Äé‚Äé) NABATAEAN LETTER FINAL ALEPH	[4B02 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x10880, 0x0021 };
    uint32_t const ces[9] = { 0x4B02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_466)
{
    // 10881 003F;	
    // (‚Äé‚Äéê¢Å‚Äé‚Äé) NABATAEAN LETTER ALEPH	[4B02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10881, 0x003F };
    uint32_t const ces[9] = { 0x4B02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_467)
{
    // 10880 003F;	
    // (‚Äé‚Äéê¢Ä‚Äé‚Äé) NABATAEAN LETTER FINAL ALEPH	[4B02 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x10880, 0x003F };
    uint32_t const ces[9] = { 0x4B02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_468)
{
    // 10881 0061;	
    // (‚Äé‚Äéê¢Å‚Äé‚Äé) NABATAEAN LETTER ALEPH	[4B02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10881, 0x0061 };
    uint32_t const ces[9] = { 0x4B02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_469)
{
    // 10881 0041;	
    // (‚Äé‚Äéê¢Å‚Äé‚Äé) NABATAEAN LETTER ALEPH	[4B02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10881, 0x0041 };
    uint32_t const ces[9] = { 0x4B02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_470)
{
    // 10880 0061;	
    // (‚Äé‚Äéê¢Ä‚Äé‚Äé) NABATAEAN LETTER FINAL ALEPH	[4B02 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x10880, 0x0061 };
    uint32_t const ces[9] = { 0x4B02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_471)
{
    // 10880 0041;	
    // (‚Äé‚Äéê¢Ä‚Äé‚Äé) NABATAEAN LETTER FINAL ALEPH	[4B02 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x10880, 0x0041 };
    uint32_t const ces[9] = { 0x4B02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_472)
{
    // 10881 0062;	
    // (‚Äé‚Äéê¢Å‚Äé‚Äé) NABATAEAN LETTER ALEPH	[4B02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10881, 0x0062 };
    uint32_t const ces[9] = { 0x4B02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_473)
{
    // 10880 0062;	
    // (‚Äé‚Äéê¢Ä‚Äé‚Äé) NABATAEAN LETTER FINAL ALEPH	[4B02 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x10880, 0x0062 };
    uint32_t const ces[9] = { 0x4B02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_474)
{
    // 10883 0021;	
    // (‚Äé‚Äéê¢É‚Äé‚Äé) NABATAEAN LETTER BETH	[4B03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10883, 0x0021 };
    uint32_t const ces[9] = { 0x4B03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_475)
{
    // 10882 0021;	
    // (‚Äé‚Äéê¢Ç‚Äé‚Äé) NABATAEAN LETTER FINAL BETH	[4B03 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x10882, 0x0021 };
    uint32_t const ces[9] = { 0x4B03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_476)
{
    // 10883 003F;	
    // (‚Äé‚Äéê¢É‚Äé‚Äé) NABATAEAN LETTER BETH	[4B03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10883, 0x003F };
    uint32_t const ces[9] = { 0x4B03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_477)
{
    // 10882 003F;	
    // (‚Äé‚Äéê¢Ç‚Äé‚Äé) NABATAEAN LETTER FINAL BETH	[4B03 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x10882, 0x003F };
    uint32_t const ces[9] = { 0x4B03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_478)
{
    // 10883 0061;	
    // (‚Äé‚Äéê¢É‚Äé‚Äé) NABATAEAN LETTER BETH	[4B03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10883, 0x0061 };
    uint32_t const ces[9] = { 0x4B03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_479)
{
    // 10883 0041;	
    // (‚Äé‚Äéê¢É‚Äé‚Äé) NABATAEAN LETTER BETH	[4B03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10883, 0x0041 };
    uint32_t const ces[9] = { 0x4B03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_480)
{
    // 10882 0061;	
    // (‚Äé‚Äéê¢Ç‚Äé‚Äé) NABATAEAN LETTER FINAL BETH	[4B03 1CAD | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x10882, 0x0061 };
    uint32_t const ces[9] = { 0x4B03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_481)
{
    // 10882 0041;	
    // (‚Äé‚Äéê¢Ç‚Äé‚Äé) NABATAEAN LETTER FINAL BETH	[4B03 1CAD | 0020 0020 | 0019 0008 |]

    uint32_t cps[2] = { 0x10882, 0x0041 };
    uint32_t const ces[9] = { 0x4B03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_482)
{
    // 10883 0062;	
    // (‚Äé‚Äéê¢É‚Äé‚Äé) NABATAEAN LETTER BETH	[4B03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10883, 0x0062 };
    uint32_t const ces[9] = { 0x4B03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_483)
{
    // 10882 0062;	
    // (‚Äé‚Äéê¢Ç‚Äé‚Äé) NABATAEAN LETTER FINAL BETH	[4B03 1CC6 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x10882, 0x0062 };
    uint32_t const ces[9] = { 0x4B03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_484)
{
    // 10884 0021;	
    // (‚Äé‚Äéê¢Ñ‚Äé‚Äé) NABATAEAN LETTER GIMEL	[4B04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10884, 0x0021 };
    uint32_t const ces[9] = { 0x4B04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_485)
{
    // 10884 003F;	
    // (‚Äé‚Äéê¢Ñ‚Äé‚Äé) NABATAEAN LETTER GIMEL	[4B04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10884, 0x003F };
    uint32_t const ces[9] = { 0x4B04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_486)
{
    // 10884 0061;	
    // (‚Äé‚Äéê¢Ñ‚Äé‚Äé) NABATAEAN LETTER GIMEL	[4B04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10884, 0x0061 };
    uint32_t const ces[9] = { 0x4B04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_487)
{
    // 10884 0041;	
    // (‚Äé‚Äéê¢Ñ‚Äé‚Äé) NABATAEAN LETTER GIMEL	[4B04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10884, 0x0041 };
    uint32_t const ces[9] = { 0x4B04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_488)
{
    // 10884 0062;	
    // (‚Äé‚Äéê¢Ñ‚Äé‚Äé) NABATAEAN LETTER GIMEL	[4B04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10884, 0x0062 };
    uint32_t const ces[9] = { 0x4B04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_489)
{
    // 10885 0021;	
    // (‚Äé‚Äéê¢Ö‚Äé‚Äé) NABATAEAN LETTER DALETH	[4B05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10885, 0x0021 };
    uint32_t const ces[9] = { 0x4B05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_490)
{
    // 10885 003F;	
    // (‚Äé‚Äéê¢Ö‚Äé‚Äé) NABATAEAN LETTER DALETH	[4B05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10885, 0x003F };
    uint32_t const ces[9] = { 0x4B05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_491)
{
    // 10885 0061;	
    // (‚Äé‚Äéê¢Ö‚Äé‚Äé) NABATAEAN LETTER DALETH	[4B05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10885, 0x0061 };
    uint32_t const ces[9] = { 0x4B05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_492)
{
    // 10885 0041;	
    // (‚Äé‚Äéê¢Ö‚Äé‚Äé) NABATAEAN LETTER DALETH	[4B05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10885, 0x0041 };
    uint32_t const ces[9] = { 0x4B05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_493)
{
    // 10885 0062;	
    // (‚Äé‚Äéê¢Ö‚Äé‚Äé) NABATAEAN LETTER DALETH	[4B05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10885, 0x0062 };
    uint32_t const ces[9] = { 0x4B05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_494)
{
    // 10887 0021;	
    // (‚Äé‚Äéê¢á‚Äé‚Äé) NABATAEAN LETTER HE	[4B06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10887, 0x0021 };
    uint32_t const ces[9] = { 0x4B06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_495)
{
    // 10886 0021;	
    // (‚Äé‚Äéê¢Ü‚Äé‚Äé) NABATAEAN LETTER FINAL HE	[4B06 0261 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x10886, 0x0021 };
    uint32_t const ces[9] = { 0x4B06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_496)
{
    // 10887 003F;	
    // (‚Äé‚Äéê¢á‚Äé‚Äé) NABATAEAN LETTER HE	[4B06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10887, 0x003F };
    uint32_t const ces[9] = { 0x4B06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_497)
{
    // 10886 003F;	
    // (‚Äé‚Äéê¢Ü‚Äé‚Äé) NABATAEAN LETTER FINAL HE	[4B06 0267 | 0020 0020 | 0019 0002 |]

    uint32_t cps[2] = { 0x10886, 0x003F };
    uint32_t const ces[9] = { 0x4B06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0019, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_498)
{
    // 10887 0061;	
    // (‚Äé‚Äéê¢á‚Äé‚Äé) NABATAEAN LETTER HE	[4B06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x10887, 0x0061 };
    uint32_t const ces[9] = { 0x4B06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_282_499)
{
    // 10887 0041;	
    // (‚Äé‚Äéê¢á‚Äé‚Äé) NABATAEAN LETTER HE	[4B06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x10887, 0x0041 };
    uint32_t const ces[9] = { 0x4B06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

