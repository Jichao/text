// Warning! This file is autogenerated.
#include <boost/text/detail/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_081_000)
{
    // 3237  ; [*0318.0020.0004][.FB40.0020.0004][.F95D.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH CONGRATULATION

    uint32_t const cps[1] = { 0x3237 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xf95d), uint8_t(0x0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_081_001)
{
    // 3238  ; [*0318.0020.0004][.FB40.0020.0004][.D2B4.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH LABOR

    uint32_t const cps[1] = { 0x3238 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xd2b4), uint8_t(0x0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_081_002)
{
    // 3239  ; [*0318.0020.0004][.FB40.0020.0004][.CEE3.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH REPRESENT

    uint32_t const cps[1] = { 0x3239 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xcee3), uint8_t(0x0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_081_003)
{
    // 323A  ; [*0318.0020.0004][.FB40.0020.0004][.D47C.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH CALL

    uint32_t const cps[1] = { 0x323a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xd47c), uint8_t(0x0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_081_004)
{
    // 323B  ; [*0318.0020.0004][.FB40.0020.0004][.DB66.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH STUDY

    uint32_t const cps[1] = { 0x323b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xdb66), uint8_t(0x0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_081_005)
{
    // 323C  ; [*0318.0020.0004][.FB40.0020.0004][.F6E3.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH SUPERVISE

    uint32_t const cps[1] = { 0x323c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xf6e3), uint8_t(0x0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_081_006)
{
    // 323D  ; [*0318.0020.0004][.FB40.0020.0004][.CF01.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH ENTERPRISE

    uint32_t const cps[1] = { 0x323d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xcf01), uint8_t(0x0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_081_007)
{
    // 323E  ; [*0318.0020.0004][.FB41.0020.0004][.8CC7.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH RESOURCE

    uint32_t const cps[1] = { 0x323e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb41), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x8cc7), uint8_t(0x0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_081_008)
{
    // 323F  ; [*0318.0020.0004][.FB40.0020.0004][.D354.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH ALLIANCE

    uint32_t const cps[1] = { 0x323f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xd354), uint8_t(0x0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_081_009)
{
    // 3240  ; [*0318.0020.0004][.FB40.0020.0004][.F96D.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH FESTIVAL

    uint32_t const cps[1] = { 0x3240 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xf96d), uint8_t(0x0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_081_010)
{
    // 3241  ; [*0318.0020.0004][.FB40.0020.0004][.CF11.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH REST

    uint32_t const cps[1] = { 0x3241 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xcf11), uint8_t(0x0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_081_011)
{
    // 3242  ; [*0318.0020.0004][.FB41.0020.0004][.81EA.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH SELF

    uint32_t const cps[1] = { 0x3242 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb41), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x81ea), uint8_t(0x0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_081_012)
{
    // 3243  ; [*0318.0020.0004][.FB41.0020.0004][.81F3.0000.0000][*0319.0020.0004] 
    // PARENTHESIZED IDEOGRAPH REACH

    uint32_t const cps[1] = { 0x3243 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x318), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb41), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x81f3), uint8_t(0x0), uint8_t(0x0)}, {uint16_t(0x319), uint8_t(0x1), uint8_t(0x4)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_081_013)
{
    // 3244  ; [.FB40.0020.0006][.D54F.0000.0000] 
    // CIRCLED IDEOGRAPH QUESTION

    uint32_t const cps[1] = { 0x3244 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xd54f), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_014)
{
    // 3245  ; [.FB40.0020.0006][.DE7C.0000.0000] 
    // CIRCLED IDEOGRAPH KINDERGARTEN

    uint32_t const cps[1] = { 0x3245 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xde7c), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_015)
{
    // 3246  ; [.FB40.0020.0006][.E587.0000.0000] 
    // CIRCLED IDEOGRAPH SCHOOL

    uint32_t const cps[1] = { 0x3246 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xe587), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_016)
{
    // 3247  ; [.FB40.0020.0006][.FB8F.0000.0000] 
    // CIRCLED IDEOGRAPH KOTO

    uint32_t const cps[1] = { 0x3247 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xfb8f), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_017)
{
    // 3248  ; [.1CA4.0020.0006][.1CA3.0020.0006] 
    // CIRCLED NUMBER TEN ON BLACK SQUARE

    uint32_t const cps[1] = { 0x3248 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca4), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca3), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_018)
{
    // 3249  ; [.1CA5.0020.0006][.1CA3.0020.0006] 
    // CIRCLED NUMBER TWENTY ON BLACK SQUARE

    uint32_t const cps[1] = { 0x3249 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca5), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca3), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_019)
{
    // 324A  ; [.1CA6.0020.0006][.1CA3.0020.0006] 
    // CIRCLED NUMBER THIRTY ON BLACK SQUARE

    uint32_t const cps[1] = { 0x324a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca6), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca3), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_020)
{
    // 324B  ; [.1CA7.0020.0006][.1CA3.0020.0006] 
    // CIRCLED NUMBER FORTY ON BLACK SQUARE

    uint32_t const cps[1] = { 0x324b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca7), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca3), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_021)
{
    // 324C  ; [.1CA8.0020.0006][.1CA3.0020.0006] 
    // CIRCLED NUMBER FIFTY ON BLACK SQUARE

    uint32_t const cps[1] = { 0x324c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca8), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca3), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_022)
{
    // 324D  ; [.1CA9.0020.0006][.1CA3.0020.0006] 
    // CIRCLED NUMBER SIXTY ON BLACK SQUARE

    uint32_t const cps[1] = { 0x324d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca9), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca3), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_023)
{
    // 324E  ; [.1CAA.0020.0006][.1CA3.0020.0006] 
    // CIRCLED NUMBER SEVENTY ON BLACK SQUARE

    uint32_t const cps[1] = { 0x324e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1caa), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca3), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_024)
{
    // 324F  ; [.1CAB.0020.0006][.1CA3.0020.0006] 
    // CIRCLED NUMBER EIGHTY ON BLACK SQUARE

    uint32_t const cps[1] = { 0x324f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1cab), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca3), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_025)
{
    // 3250  ; [.1E72.0020.001D][.1EFB.0020.001D][.1D10.0020.001D] 
    // PARTNERSHIP SIGN

    uint32_t const cps[1] = { 0x3250 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1e72), uint8_t(0x1), uint8_t(0x1d)}, {uint16_t(0x1efb), uint8_t(0x1), uint8_t(0x1d)}, {uint16_t(0x1d10), uint8_t(0x1), uint8_t(0x1d)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_081_026)
{
    // 3251  ; [.1CA5.0020.0006][.1CA4.0020.0006] 
    // CIRCLED NUMBER TWENTY ONE

    uint32_t const cps[1] = { 0x3251 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca5), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca4), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_027)
{
    // 3252  ; [.1CA5.0020.0006][.1CA5.0020.0006] 
    // CIRCLED NUMBER TWENTY TWO

    uint32_t const cps[1] = { 0x3252 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca5), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca5), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_028)
{
    // 3253  ; [.1CA5.0020.0006][.1CA6.0020.0006] 
    // CIRCLED NUMBER TWENTY THREE

    uint32_t const cps[1] = { 0x3253 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca5), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca6), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_029)
{
    // 3254  ; [.1CA5.0020.0006][.1CA7.0020.0006] 
    // CIRCLED NUMBER TWENTY FOUR

    uint32_t const cps[1] = { 0x3254 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca5), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca7), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_030)
{
    // 3255  ; [.1CA5.0020.0006][.1CA8.0020.0006] 
    // CIRCLED NUMBER TWENTY FIVE

    uint32_t const cps[1] = { 0x3255 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca5), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca8), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_031)
{
    // 3256  ; [.1CA5.0020.0006][.1CA9.0020.0006] 
    // CIRCLED NUMBER TWENTY SIX

    uint32_t const cps[1] = { 0x3256 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca5), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca9), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_032)
{
    // 3257  ; [.1CA5.0020.0006][.1CAA.0020.0006] 
    // CIRCLED NUMBER TWENTY SEVEN

    uint32_t const cps[1] = { 0x3257 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca5), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1caa), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_033)
{
    // 3258  ; [.1CA5.0020.0006][.1CAB.0020.0006] 
    // CIRCLED NUMBER TWENTY EIGHT

    uint32_t const cps[1] = { 0x3258 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca5), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1cab), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_034)
{
    // 3259  ; [.1CA5.0020.0006][.1CAC.0020.0006] 
    // CIRCLED NUMBER TWENTY NINE

    uint32_t const cps[1] = { 0x3259 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca5), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1cac), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_035)
{
    // 325A  ; [.1CA6.0020.0006][.1CA3.0020.0006] 
    // CIRCLED NUMBER THIRTY

    uint32_t const cps[1] = { 0x325a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca6), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca3), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_036)
{
    // 325B  ; [.1CA6.0020.0006][.1CA4.0020.0006] 
    // CIRCLED NUMBER THIRTY ONE

    uint32_t const cps[1] = { 0x325b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca6), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca4), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_037)
{
    // 325C  ; [.1CA6.0020.0006][.1CA5.0020.0006] 
    // CIRCLED NUMBER THIRTY TWO

    uint32_t const cps[1] = { 0x325c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca6), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca5), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_038)
{
    // 325D  ; [.1CA6.0020.0006][.1CA6.0020.0006] 
    // CIRCLED NUMBER THIRTY THREE

    uint32_t const cps[1] = { 0x325d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca6), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca6), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_039)
{
    // 325E  ; [.1CA6.0020.0006][.1CA7.0020.0006] 
    // CIRCLED NUMBER THIRTY FOUR

    uint32_t const cps[1] = { 0x325e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca6), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca7), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_040)
{
    // 325F  ; [.1CA6.0020.0006][.1CA8.0020.0006] 
    // CIRCLED NUMBER THIRTY FIVE

    uint32_t const cps[1] = { 0x325f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca6), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca8), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_041)
{
    // 3260  ; [.3D0C.0020.0006] 
    // CIRCLED HANGUL KIYEOK

    uint32_t const cps[1] = { 0x3260 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d0c), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_081_042)
{
    // 3261  ; [.3D0E.0020.0006] 
    // CIRCLED HANGUL NIEUN

    uint32_t const cps[1] = { 0x3261 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d0e), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_081_043)
{
    // 3262  ; [.3D0F.0020.0006] 
    // CIRCLED HANGUL TIKEUT

    uint32_t const cps[1] = { 0x3262 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d0f), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_081_044)
{
    // 3263  ; [.3D11.0020.0006] 
    // CIRCLED HANGUL RIEUL

    uint32_t const cps[1] = { 0x3263 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d11), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_081_045)
{
    // 3264  ; [.3D12.0020.0006] 
    // CIRCLED HANGUL MIEUM

    uint32_t const cps[1] = { 0x3264 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d12), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_081_046)
{
    // 3265  ; [.3D13.0020.0006] 
    // CIRCLED HANGUL PIEUP

    uint32_t const cps[1] = { 0x3265 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d13), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_081_047)
{
    // 3266  ; [.3D15.0020.0006] 
    // CIRCLED HANGUL SIOS

    uint32_t const cps[1] = { 0x3266 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d15), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_081_048)
{
    // 3267  ; [.3D17.0020.0006] 
    // CIRCLED HANGUL IEUNG

    uint32_t const cps[1] = { 0x3267 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d17), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_081_049)
{
    // 3268  ; [.3D18.0020.0006] 
    // CIRCLED HANGUL CIEUC

    uint32_t const cps[1] = { 0x3268 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d18), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_081_050)
{
    // 3269  ; [.3D1A.0020.0006] 
    // CIRCLED HANGUL CHIEUCH

    uint32_t const cps[1] = { 0x3269 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d1a), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_081_051)
{
    // 326A  ; [.3D1B.0020.0006] 
    // CIRCLED HANGUL KHIEUKH

    uint32_t const cps[1] = { 0x326a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d1b), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_081_052)
{
    // 326B  ; [.3D1C.0020.0006] 
    // CIRCLED HANGUL THIEUTH

    uint32_t const cps[1] = { 0x326b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d1c), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_081_053)
{
    // 326C  ; [.3D1D.0020.0006] 
    // CIRCLED HANGUL PHIEUPH

    uint32_t const cps[1] = { 0x326c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d1d), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_081_054)
{
    // 326D  ; [.3D1E.0020.0006] 
    // CIRCLED HANGUL HIEUH

    uint32_t const cps[1] = { 0x326d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x3d1e), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_081_055)
{
    // 326E  ; [.3D0C.0020.0006][.3D8A.0020.0006] 
    // CIRCLED HANGUL KIYEOK A

    uint32_t const cps[1] = { 0x326e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3d0c), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x3d8a), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_056)
{
    // 326F  ; [.3D0E.0020.0006][.3D8A.0020.0006] 
    // CIRCLED HANGUL NIEUN A

    uint32_t const cps[1] = { 0x326f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3d0e), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x3d8a), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_057)
{
    // 3270  ; [.3D0F.0020.0006][.3D8A.0020.0006] 
    // CIRCLED HANGUL TIKEUT A

    uint32_t const cps[1] = { 0x3270 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3d0f), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x3d8a), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_058)
{
    // 3271  ; [.3D11.0020.0006][.3D8A.0020.0006] 
    // CIRCLED HANGUL RIEUL A

    uint32_t const cps[1] = { 0x3271 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3d11), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x3d8a), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_059)
{
    // 3272  ; [.3D12.0020.0006][.3D8A.0020.0006] 
    // CIRCLED HANGUL MIEUM A

    uint32_t const cps[1] = { 0x3272 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3d12), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x3d8a), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_060)
{
    // 3273  ; [.3D13.0020.0006][.3D8A.0020.0006] 
    // CIRCLED HANGUL PIEUP A

    uint32_t const cps[1] = { 0x3273 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3d13), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x3d8a), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_061)
{
    // 3274  ; [.3D15.0020.0006][.3D8A.0020.0006] 
    // CIRCLED HANGUL SIOS A

    uint32_t const cps[1] = { 0x3274 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3d15), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x3d8a), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_062)
{
    // 3275  ; [.3D17.0020.0006][.3D8A.0020.0006] 
    // CIRCLED HANGUL IEUNG A

    uint32_t const cps[1] = { 0x3275 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3d17), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x3d8a), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_063)
{
    // 3276  ; [.3D18.0020.0006][.3D8A.0020.0006] 
    // CIRCLED HANGUL CIEUC A

    uint32_t const cps[1] = { 0x3276 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3d18), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x3d8a), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_064)
{
    // 3277  ; [.3D1A.0020.0006][.3D8A.0020.0006] 
    // CIRCLED HANGUL CHIEUCH A

    uint32_t const cps[1] = { 0x3277 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3d1a), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x3d8a), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_065)
{
    // 3278  ; [.3D1B.0020.0006][.3D8A.0020.0006] 
    // CIRCLED HANGUL KHIEUKH A

    uint32_t const cps[1] = { 0x3278 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3d1b), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x3d8a), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_066)
{
    // 3279  ; [.3D1C.0020.0006][.3D8A.0020.0006] 
    // CIRCLED HANGUL THIEUTH A

    uint32_t const cps[1] = { 0x3279 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3d1c), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x3d8a), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_067)
{
    // 327A  ; [.3D1D.0020.0006][.3D8A.0020.0006] 
    // CIRCLED HANGUL PHIEUPH A

    uint32_t const cps[1] = { 0x327a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3d1d), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x3d8a), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_068)
{
    // 327B  ; [.3D1E.0020.0006][.3D8A.0020.0006] 
    // CIRCLED HANGUL HIEUH A

    uint32_t const cps[1] = { 0x327b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3d1e), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x3d8a), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_069)
{
    // 327C  ; [.3D1A.0020.0006][.3D8A.0020.0006][.3DF7.0020.0006][.3D0C.0020.0006][.3D92.0020.0006] 
    // CIRCLED KOREAN CHARACTER CHAMKO

    uint32_t const cps[1] = { 0x327c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[5] = { {uint16_t(0x3d1a), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x3d8a), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x3df7), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x3d0c), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x3d92), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 5));
}

TEST(collation, table_lookup_081_070)
{
    // 327D  ; [.3D18.0020.0006][.3D97.0020.0006][.3D17.0020.0006][.3D9D.0020.0006] 
    // CIRCLED KOREAN CHARACTER JUEUI

    uint32_t const cps[1] = { 0x327d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x3d18), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x3d97), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x3d17), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x3d9d), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_081_071)
{
    // 327E  ; [.3D17.0020.0006][.3D97.0020.0006] 
    // CIRCLED HANGUL IEUNG U

    uint32_t const cps[1] = { 0x327e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x3d17), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x3d97), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_072)
{
    // 327F  ; [*1AF8.0020.0002] 
    // KOREAN STANDARD SYMBOL

    uint32_t const cps[1] = { 0x327f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[1] = { {uint16_t(0x1af8), uint8_t(0x1), uint8_t(0x2)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_081_073)
{
    // 3280  ; [.FB40.0020.0006][.CE00.0000.0000] 
    // CIRCLED IDEOGRAPH ONE

    uint32_t const cps[1] = { 0x3280 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xce00), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_074)
{
    // 3281  ; [.FB40.0020.0006][.CE8C.0000.0000] 
    // CIRCLED IDEOGRAPH TWO

    uint32_t const cps[1] = { 0x3281 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xce8c), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_075)
{
    // 3282  ; [.FB40.0020.0006][.CE09.0000.0000] 
    // CIRCLED IDEOGRAPH THREE

    uint32_t const cps[1] = { 0x3282 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xce09), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_076)
{
    // 3283  ; [.FB40.0020.0006][.D6DB.0000.0000] 
    // CIRCLED IDEOGRAPH FOUR

    uint32_t const cps[1] = { 0x3283 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xd6db), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_077)
{
    // 3284  ; [.FB40.0020.0006][.CE94.0000.0000] 
    // CIRCLED IDEOGRAPH FIVE

    uint32_t const cps[1] = { 0x3284 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xce94), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_078)
{
    // 3285  ; [.FB40.0020.0006][.D16D.0000.0000] 
    // CIRCLED IDEOGRAPH SIX

    uint32_t const cps[1] = { 0x3285 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xd16d), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_079)
{
    // 3286  ; [.FB40.0020.0006][.CE03.0000.0000] 
    // CIRCLED IDEOGRAPH SEVEN

    uint32_t const cps[1] = { 0x3286 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xce03), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_080)
{
    // 3287  ; [.FB40.0020.0006][.D16B.0000.0000] 
    // CIRCLED IDEOGRAPH EIGHT

    uint32_t const cps[1] = { 0x3287 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xd16b), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_081)
{
    // 3288  ; [.FB40.0020.0006][.CE5D.0000.0000] 
    // CIRCLED IDEOGRAPH NINE

    uint32_t const cps[1] = { 0x3288 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xce5d), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_082)
{
    // 3289  ; [.FB40.0020.0006][.D341.0000.0000] 
    // CIRCLED IDEOGRAPH TEN

    uint32_t const cps[1] = { 0x3289 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xd341), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_083)
{
    // 328A  ; [.FB40.0020.0006][.E708.0000.0000] 
    // CIRCLED IDEOGRAPH MOON

    uint32_t const cps[1] = { 0x328a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xe708), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_084)
{
    // 328B  ; [.FB40.0020.0006][.F06B.0000.0000] 
    // CIRCLED IDEOGRAPH FIRE

    uint32_t const cps[1] = { 0x328b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xf06b), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_085)
{
    // 328C  ; [.FB40.0020.0006][.EC34.0000.0000] 
    // CIRCLED IDEOGRAPH WATER

    uint32_t const cps[1] = { 0x328c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xec34), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_086)
{
    // 328D  ; [.FB40.0020.0006][.E728.0000.0000] 
    // CIRCLED IDEOGRAPH WOOD

    uint32_t const cps[1] = { 0x328d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xe728), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_087)
{
    // 328E  ; [.FB41.0020.0006][.91D1.0000.0000] 
    // CIRCLED IDEOGRAPH METAL

    uint32_t const cps[1] = { 0x328e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x91d1), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_088)
{
    // 328F  ; [.FB40.0020.0006][.D71F.0000.0000] 
    // CIRCLED IDEOGRAPH EARTH

    uint32_t const cps[1] = { 0x328f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xd71f), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_089)
{
    // 3290  ; [.FB40.0020.0006][.E5E5.0000.0000] 
    // CIRCLED IDEOGRAPH SUN

    uint32_t const cps[1] = { 0x3290 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xe5e5), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_090)
{
    // 3291  ; [.FB40.0020.0006][.E82A.0000.0000] 
    // CIRCLED IDEOGRAPH STOCK

    uint32_t const cps[1] = { 0x3291 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xe82a), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_091)
{
    // 3292  ; [.FB40.0020.0006][.E709.0000.0000] 
    // CIRCLED IDEOGRAPH HAVE

    uint32_t const cps[1] = { 0x3292 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xe709), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_092)
{
    // 3293  ; [.FB40.0020.0006][.F93E.0000.0000] 
    // CIRCLED IDEOGRAPH SOCIETY

    uint32_t const cps[1] = { 0x3293 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xf93e), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_093)
{
    // 3294  ; [.FB40.0020.0006][.D40D.0000.0000] 
    // CIRCLED IDEOGRAPH NAME

    uint32_t const cps[1] = { 0x3294 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xd40d), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_094)
{
    // 3295  ; [.FB40.0020.0006][.F279.0000.0000] 
    // CIRCLED IDEOGRAPH SPECIAL

    uint32_t const cps[1] = { 0x3295 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xf279), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_095)
{
    // 3296  ; [.FB41.0020.0006][.8CA1.0000.0000] 
    // CIRCLED IDEOGRAPH FINANCIAL

    uint32_t const cps[1] = { 0x3296 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x8ca1), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_096)
{
    // 3297  ; [.FB40.0020.0006][.F95D.0000.0000] 
    // CIRCLED IDEOGRAPH CONGRATULATION

    uint32_t const cps[1] = { 0x3297 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xf95d), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_097)
{
    // 3298  ; [.FB40.0020.0006][.D2B4.0000.0000] 
    // CIRCLED IDEOGRAPH LABOR

    uint32_t const cps[1] = { 0x3298 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xd2b4), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_098)
{
    // 3299  ; [.FB40.0020.0006][.F9D8.0000.0000] 
    // CIRCLED IDEOGRAPH SECRET

    uint32_t const cps[1] = { 0x3299 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xf9d8), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_099)
{
    // 329A  ; [.FB40.0020.0006][.F537.0000.0000] 
    // CIRCLED IDEOGRAPH MALE

    uint32_t const cps[1] = { 0x329a };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xf537), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_100)
{
    // 329B  ; [.FB40.0020.0006][.D973.0000.0000] 
    // CIRCLED IDEOGRAPH FEMALE

    uint32_t const cps[1] = { 0x329b };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xd973), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_101)
{
    // 329C  ; [.FB41.0020.0006][.9069.0000.0000] 
    // CIRCLED IDEOGRAPH SUITABLE

    uint32_t const cps[1] = { 0x329c };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x9069), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_102)
{
    // 329D  ; [.FB40.0020.0006][.D12A.0000.0000] 
    // CIRCLED IDEOGRAPH EXCELLENT

    uint32_t const cps[1] = { 0x329d };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xd12a), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_103)
{
    // 329E  ; [.FB40.0020.0006][.D370.0000.0000] 
    // CIRCLED IDEOGRAPH PRINT

    uint32_t const cps[1] = { 0x329e };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xd370), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_104)
{
    // 329F  ; [.FB40.0020.0006][.ECE8.0000.0000] 
    // CIRCLED IDEOGRAPH ATTENTION

    uint32_t const cps[1] = { 0x329f };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xece8), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_105)
{
    // 32A0  ; [.FB41.0020.0006][.9805.0000.0000] 
    // CIRCLED IDEOGRAPH ITEM

    uint32_t const cps[1] = { 0x32a0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x9805), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_106)
{
    // 32A1  ; [.FB40.0020.0006][.CF11.0000.0000] 
    // CIRCLED IDEOGRAPH REST

    uint32_t const cps[1] = { 0x32a1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xcf11), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_107)
{
    // 32A2  ; [.FB40.0020.0006][.D199.0000.0000] 
    // CIRCLED IDEOGRAPH COPY

    uint32_t const cps[1] = { 0x32a2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xd199), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_108)
{
    // 32A3  ; [.FB40.0020.0006][.EB63.0000.0000] 
    // CIRCLED IDEOGRAPH CORRECT

    uint32_t const cps[1] = { 0x32a3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xeb63), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_109)
{
    // 32A4  ; [.FB40.0020.0006][.CE0A.0000.0000] 
    // CIRCLED IDEOGRAPH HIGH

    uint32_t const cps[1] = { 0x32a4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xce0a), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_110)
{
    // 32A5  ; [.FB40.0020.0006][.CE2D.0000.0000] 
    // CIRCLED IDEOGRAPH CENTRE

    uint32_t const cps[1] = { 0x32a5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xce2d), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_111)
{
    // 32A6  ; [.FB40.0020.0006][.CE0B.0000.0000] 
    // CIRCLED IDEOGRAPH LOW

    uint32_t const cps[1] = { 0x32a6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xce0b), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_112)
{
    // 32A7  ; [.FB40.0020.0006][.DDE6.0000.0000] 
    // CIRCLED IDEOGRAPH LEFT

    uint32_t const cps[1] = { 0x32a7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xdde6), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_113)
{
    // 32A8  ; [.FB40.0020.0006][.D3F3.0000.0000] 
    // CIRCLED IDEOGRAPH RIGHT

    uint32_t const cps[1] = { 0x32a8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xd3f3), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_114)
{
    // 32A9  ; [.FB40.0020.0006][.D33B.0000.0000] 
    // CIRCLED IDEOGRAPH MEDICINE

    uint32_t const cps[1] = { 0x32a9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xd33b), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_115)
{
    // 32AA  ; [.FB40.0020.0006][.DB97.0000.0000] 
    // CIRCLED IDEOGRAPH RELIGION

    uint32_t const cps[1] = { 0x32aa };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xdb97), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_116)
{
    // 32AB  ; [.FB40.0020.0006][.DB66.0000.0000] 
    // CIRCLED IDEOGRAPH STUDY

    uint32_t const cps[1] = { 0x32ab };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xdb66), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_117)
{
    // 32AC  ; [.FB40.0020.0006][.F6E3.0000.0000] 
    // CIRCLED IDEOGRAPH SUPERVISE

    uint32_t const cps[1] = { 0x32ac };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xf6e3), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_118)
{
    // 32AD  ; [.FB40.0020.0006][.CF01.0000.0000] 
    // CIRCLED IDEOGRAPH ENTERPRISE

    uint32_t const cps[1] = { 0x32ad };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xcf01), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_119)
{
    // 32AE  ; [.FB41.0020.0006][.8CC7.0000.0000] 
    // CIRCLED IDEOGRAPH RESOURCE

    uint32_t const cps[1] = { 0x32ae };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb41), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x8cc7), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_120)
{
    // 32AF  ; [.FB40.0020.0006][.D354.0000.0000] 
    // CIRCLED IDEOGRAPH ALLIANCE

    uint32_t const cps[1] = { 0x32af };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xd354), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_121)
{
    // 32B0  ; [.FB40.0020.0006][.D91C.0000.0000] 
    // CIRCLED IDEOGRAPH NIGHT

    uint32_t const cps[1] = { 0x32b0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0xd91c), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_122)
{
    // 32B1  ; [.1CA6.0020.0006][.1CA9.0020.0006] 
    // CIRCLED NUMBER THIRTY SIX

    uint32_t const cps[1] = { 0x32b1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca6), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca9), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_123)
{
    // 32B2  ; [.1CA6.0020.0006][.1CAA.0020.0006] 
    // CIRCLED NUMBER THIRTY SEVEN

    uint32_t const cps[1] = { 0x32b2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca6), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1caa), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_124)
{
    // 32B3  ; [.1CA6.0020.0006][.1CAB.0020.0006] 
    // CIRCLED NUMBER THIRTY EIGHT

    uint32_t const cps[1] = { 0x32b3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca6), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1cab), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_125)
{
    // 32B4  ; [.1CA6.0020.0006][.1CAC.0020.0006] 
    // CIRCLED NUMBER THIRTY NINE

    uint32_t const cps[1] = { 0x32b4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca6), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1cac), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_126)
{
    // 32B5  ; [.1CA7.0020.0006][.1CA3.0020.0006] 
    // CIRCLED NUMBER FORTY

    uint32_t const cps[1] = { 0x32b5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca7), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca3), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_127)
{
    // 32B6  ; [.1CA7.0020.0006][.1CA4.0020.0006] 
    // CIRCLED NUMBER FORTY ONE

    uint32_t const cps[1] = { 0x32b6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca7), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca4), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_128)
{
    // 32B7  ; [.1CA7.0020.0006][.1CA5.0020.0006] 
    // CIRCLED NUMBER FORTY TWO

    uint32_t const cps[1] = { 0x32b7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca7), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca5), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_129)
{
    // 32B8  ; [.1CA7.0020.0006][.1CA6.0020.0006] 
    // CIRCLED NUMBER FORTY THREE

    uint32_t const cps[1] = { 0x32b8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca7), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca6), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_130)
{
    // 32B9  ; [.1CA7.0020.0006][.1CA7.0020.0006] 
    // CIRCLED NUMBER FORTY FOUR

    uint32_t const cps[1] = { 0x32b9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca7), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca7), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_131)
{
    // 32BA  ; [.1CA7.0020.0006][.1CA8.0020.0006] 
    // CIRCLED NUMBER FORTY FIVE

    uint32_t const cps[1] = { 0x32ba };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca7), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca8), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_132)
{
    // 32BB  ; [.1CA7.0020.0006][.1CA9.0020.0006] 
    // CIRCLED NUMBER FORTY SIX

    uint32_t const cps[1] = { 0x32bb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca7), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca9), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_133)
{
    // 32BC  ; [.1CA7.0020.0006][.1CAA.0020.0006] 
    // CIRCLED NUMBER FORTY SEVEN

    uint32_t const cps[1] = { 0x32bc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca7), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1caa), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_134)
{
    // 32BD  ; [.1CA7.0020.0006][.1CAB.0020.0006] 
    // CIRCLED NUMBER FORTY EIGHT

    uint32_t const cps[1] = { 0x32bd };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca7), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1cab), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_135)
{
    // 32BE  ; [.1CA7.0020.0006][.1CAC.0020.0006] 
    // CIRCLED NUMBER FORTY NINE

    uint32_t const cps[1] = { 0x32be };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca7), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1cac), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_136)
{
    // 32BF  ; [.1CA8.0020.0006][.1CA3.0020.0006] 
    // CIRCLED NUMBER FIFTY

    uint32_t const cps[1] = { 0x32bf };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1ca8), uint8_t(0x1), uint8_t(0x6)}, {uint16_t(0x1ca3), uint8_t(0x1), uint8_t(0x6)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_081_137)
{
    // 32C0  ; [.1CA4.0020.0004][.FB40.0020.0004][.E708.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR JANUARY

    uint32_t const cps[1] = { 0x32c0 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1ca4), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xe708), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_081_138)
{
    // 32C1  ; [.1CA5.0020.0004][.FB40.0020.0004][.E708.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR FEBRUARY

    uint32_t const cps[1] = { 0x32c1 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1ca5), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xe708), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_081_139)
{
    // 32C2  ; [.1CA6.0020.0004][.FB40.0020.0004][.E708.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR MARCH

    uint32_t const cps[1] = { 0x32c2 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1ca6), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xe708), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_081_140)
{
    // 32C3  ; [.1CA7.0020.0004][.FB40.0020.0004][.E708.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR APRIL

    uint32_t const cps[1] = { 0x32c3 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1ca7), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xe708), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_081_141)
{
    // 32C4  ; [.1CA8.0020.0004][.FB40.0020.0004][.E708.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR MAY

    uint32_t const cps[1] = { 0x32c4 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1ca8), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xe708), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_081_142)
{
    // 32C5  ; [.1CA9.0020.0004][.FB40.0020.0004][.E708.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR JUNE

    uint32_t const cps[1] = { 0x32c5 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1ca9), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xe708), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_081_143)
{
    // 32C6  ; [.1CAA.0020.0004][.FB40.0020.0004][.E708.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR JULY

    uint32_t const cps[1] = { 0x32c6 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1caa), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xe708), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_081_144)
{
    // 32C7  ; [.1CAB.0020.0004][.FB40.0020.0004][.E708.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR AUGUST

    uint32_t const cps[1] = { 0x32c7 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1cab), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xe708), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_081_145)
{
    // 32C8  ; [.1CAC.0020.0004][.FB40.0020.0004][.E708.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR SEPTEMBER

    uint32_t const cps[1] = { 0x32c8 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[3] = { {uint16_t(0x1cac), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xe708), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_081_146)
{
    // 32C9  ; [.1CA4.0020.0004][.1CA3.0020.0004][.FB40.0020.0004][.E708.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR OCTOBER

    uint32_t const cps[1] = { 0x32c9 };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x1ca3), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xe708), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_081_147)
{
    // 32CA  ; [.1CA4.0020.0004][.1CA4.0020.0004][.FB40.0020.0004][.E708.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR NOVEMBER

    uint32_t const cps[1] = { 0x32ca };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x1ca4), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xe708), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_081_148)
{
    // 32CB  ; [.1CA4.0020.0004][.1CA5.0020.0004][.FB40.0020.0004][.E708.0000.0000] 
    // IDEOGRAPHIC TELEGRAPH SYMBOL FOR DECEMBER

    uint32_t const cps[1] = { 0x32cb };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[4] = { {uint16_t(0x1ca4), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0x1ca5), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xfb40), uint8_t(0x1), uint8_t(0x4)}, {uint16_t(0xe708), uint8_t(0x0), uint8_t(0x0)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_081_149)
{
    // 32CC  ; [.1D7E.0020.001D][.1D5A.0020.001C] 
    // SQUARE HG

    uint32_t const cps[1] = { 0x32cc };
    // biased L2 weight
    boost::text::detail::compressed_collation_element const ces[2] = { {uint16_t(0x1d7e), uint8_t(0x1), uint8_t(0x1d)}, {uint16_t(0x1d5a), uint8_t(0x1), uint8_t(0x1c)} };

    auto const coll = boost::text::detail::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

