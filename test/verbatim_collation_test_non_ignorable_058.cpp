// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_058_000)
{
    // 1F413 0041;	
    // (üêì) ROOSTER	[13DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F413, 0x0041 };
    uint32_t const ces[9] = { 0x13DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_001)
{
    // 1F413 0062;	
    // (üêì) ROOSTER	[13DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F413, 0x0062 };
    uint32_t const ces[9] = { 0x13DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_002)
{
    // 1F414 0021;	
    // (üêî) CHICKEN	[13DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F414, 0x0021 };
    uint32_t const ces[9] = { 0x13DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_003)
{
    // 1F414 003F;	
    // (üêî) CHICKEN	[13DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F414, 0x003F };
    uint32_t const ces[9] = { 0x13DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_004)
{
    // 1F414 0061;	
    // (üêî) CHICKEN	[13DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F414, 0x0061 };
    uint32_t const ces[9] = { 0x13DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_005)
{
    // 1F414 0041;	
    // (üêî) CHICKEN	[13DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F414, 0x0041 };
    uint32_t const ces[9] = { 0x13DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_006)
{
    // 1F414 0062;	
    // (üêî) CHICKEN	[13DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F414, 0x0062 };
    uint32_t const ces[9] = { 0x13DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_007)
{
    // 1F415 0021;	
    // (üêï) DOG	[13DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F415, 0x0021 };
    uint32_t const ces[9] = { 0x13DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_008)
{
    // 1F415 003F;	
    // (üêï) DOG	[13DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F415, 0x003F };
    uint32_t const ces[9] = { 0x13DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_009)
{
    // 1F415 0061;	
    // (üêï) DOG	[13DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F415, 0x0061 };
    uint32_t const ces[9] = { 0x13DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_010)
{
    // 1F415 0041;	
    // (üêï) DOG	[13DC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F415, 0x0041 };
    uint32_t const ces[9] = { 0x13DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_011)
{
    // 1F415 0062;	
    // (üêï) DOG	[13DC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F415, 0x0062 };
    uint32_t const ces[9] = { 0x13DC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_012)
{
    // 1F416 0021;	
    // (üêñ) PIG	[13DD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F416, 0x0021 };
    uint32_t const ces[9] = { 0x13DD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_013)
{
    // 1F416 003F;	
    // (üêñ) PIG	[13DD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F416, 0x003F };
    uint32_t const ces[9] = { 0x13DD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_014)
{
    // 1F416 0061;	
    // (üêñ) PIG	[13DD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F416, 0x0061 };
    uint32_t const ces[9] = { 0x13DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_015)
{
    // 1F416 0041;	
    // (üêñ) PIG	[13DD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F416, 0x0041 };
    uint32_t const ces[9] = { 0x13DD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_016)
{
    // 1F416 0062;	
    // (üêñ) PIG	[13DD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F416, 0x0062 };
    uint32_t const ces[9] = { 0x13DD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_017)
{
    // 1F417 0021;	
    // (üêó) BOAR	[13DE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F417, 0x0021 };
    uint32_t const ces[9] = { 0x13DE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_018)
{
    // 1F417 003F;	
    // (üêó) BOAR	[13DE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F417, 0x003F };
    uint32_t const ces[9] = { 0x13DE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_019)
{
    // 1F417 0061;	
    // (üêó) BOAR	[13DE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F417, 0x0061 };
    uint32_t const ces[9] = { 0x13DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_020)
{
    // 1F417 0041;	
    // (üêó) BOAR	[13DE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F417, 0x0041 };
    uint32_t const ces[9] = { 0x13DE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_021)
{
    // 1F417 0062;	
    // (üêó) BOAR	[13DE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F417, 0x0062 };
    uint32_t const ces[9] = { 0x13DE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_022)
{
    // 1F418 0021;	
    // (üêò) ELEPHANT	[13DF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F418, 0x0021 };
    uint32_t const ces[9] = { 0x13DF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_023)
{
    // 1F418 003F;	
    // (üêò) ELEPHANT	[13DF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F418, 0x003F };
    uint32_t const ces[9] = { 0x13DF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_024)
{
    // 1F418 0061;	
    // (üêò) ELEPHANT	[13DF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F418, 0x0061 };
    uint32_t const ces[9] = { 0x13DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_025)
{
    // 1F418 0041;	
    // (üêò) ELEPHANT	[13DF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F418, 0x0041 };
    uint32_t const ces[9] = { 0x13DF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_026)
{
    // 1F418 0062;	
    // (üêò) ELEPHANT	[13DF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F418, 0x0062 };
    uint32_t const ces[9] = { 0x13DF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_027)
{
    // 1F419 0021;	
    // (üêô) OCTOPUS	[13E0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F419, 0x0021 };
    uint32_t const ces[9] = { 0x13E0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_028)
{
    // 1F419 003F;	
    // (üêô) OCTOPUS	[13E0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F419, 0x003F };
    uint32_t const ces[9] = { 0x13E0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_029)
{
    // 1F419 0061;	
    // (üêô) OCTOPUS	[13E0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F419, 0x0061 };
    uint32_t const ces[9] = { 0x13E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_030)
{
    // 1F419 0041;	
    // (üêô) OCTOPUS	[13E0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F419, 0x0041 };
    uint32_t const ces[9] = { 0x13E0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_031)
{
    // 1F419 0062;	
    // (üêô) OCTOPUS	[13E0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F419, 0x0062 };
    uint32_t const ces[9] = { 0x13E0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_032)
{
    // 1F41A 0021;	
    // (üêö) SPIRAL SHELL	[13E1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41A, 0x0021 };
    uint32_t const ces[9] = { 0x13E1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_033)
{
    // 1F41A 003F;	
    // (üêö) SPIRAL SHELL	[13E1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41A, 0x003F };
    uint32_t const ces[9] = { 0x13E1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_034)
{
    // 1F41A 0061;	
    // (üêö) SPIRAL SHELL	[13E1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41A, 0x0061 };
    uint32_t const ces[9] = { 0x13E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_035)
{
    // 1F41A 0041;	
    // (üêö) SPIRAL SHELL	[13E1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F41A, 0x0041 };
    uint32_t const ces[9] = { 0x13E1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_036)
{
    // 1F41A 0062;	
    // (üêö) SPIRAL SHELL	[13E1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41A, 0x0062 };
    uint32_t const ces[9] = { 0x13E1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_037)
{
    // 1F41B 0021;	
    // (üêõ) BUG	[13E2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41B, 0x0021 };
    uint32_t const ces[9] = { 0x13E2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_038)
{
    // 1F41B 003F;	
    // (üêõ) BUG	[13E2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41B, 0x003F };
    uint32_t const ces[9] = { 0x13E2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_039)
{
    // 1F41B 0061;	
    // (üêõ) BUG	[13E2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41B, 0x0061 };
    uint32_t const ces[9] = { 0x13E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_040)
{
    // 1F41B 0041;	
    // (üêõ) BUG	[13E2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F41B, 0x0041 };
    uint32_t const ces[9] = { 0x13E2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_041)
{
    // 1F41B 0062;	
    // (üêõ) BUG	[13E2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41B, 0x0062 };
    uint32_t const ces[9] = { 0x13E2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_042)
{
    // 1F41C 0021;	
    // (üêú) ANT	[13E3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41C, 0x0021 };
    uint32_t const ces[9] = { 0x13E3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_043)
{
    // 1F41C 003F;	
    // (üêú) ANT	[13E3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41C, 0x003F };
    uint32_t const ces[9] = { 0x13E3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_044)
{
    // 1F41C 0061;	
    // (üêú) ANT	[13E3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41C, 0x0061 };
    uint32_t const ces[9] = { 0x13E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_045)
{
    // 1F41C 0041;	
    // (üêú) ANT	[13E3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F41C, 0x0041 };
    uint32_t const ces[9] = { 0x13E3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_046)
{
    // 1F41C 0062;	
    // (üêú) ANT	[13E3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41C, 0x0062 };
    uint32_t const ces[9] = { 0x13E3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_047)
{
    // 1F41D 0021;	
    // (üêù) HONEYBEE	[13E4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41D, 0x0021 };
    uint32_t const ces[9] = { 0x13E4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_048)
{
    // 1F41D 003F;	
    // (üêù) HONEYBEE	[13E4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41D, 0x003F };
    uint32_t const ces[9] = { 0x13E4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_049)
{
    // 1F41D 0061;	
    // (üêù) HONEYBEE	[13E4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41D, 0x0061 };
    uint32_t const ces[9] = { 0x13E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_050)
{
    // 1F41D 0041;	
    // (üêù) HONEYBEE	[13E4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F41D, 0x0041 };
    uint32_t const ces[9] = { 0x13E4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_051)
{
    // 1F41D 0062;	
    // (üêù) HONEYBEE	[13E4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41D, 0x0062 };
    uint32_t const ces[9] = { 0x13E4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_052)
{
    // 1F41E 0021;	
    // (üêû) LADY BEETLE	[13E5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41E, 0x0021 };
    uint32_t const ces[9] = { 0x13E5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_053)
{
    // 1F41E 003F;	
    // (üêû) LADY BEETLE	[13E5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41E, 0x003F };
    uint32_t const ces[9] = { 0x13E5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_054)
{
    // 1F41E 0061;	
    // (üêû) LADY BEETLE	[13E5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41E, 0x0061 };
    uint32_t const ces[9] = { 0x13E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_055)
{
    // 1F41E 0041;	
    // (üêû) LADY BEETLE	[13E5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F41E, 0x0041 };
    uint32_t const ces[9] = { 0x13E5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_056)
{
    // 1F41E 0062;	
    // (üêû) LADY BEETLE	[13E5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41E, 0x0062 };
    uint32_t const ces[9] = { 0x13E5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_057)
{
    // 1F41F 0021;	
    // (üêü) FISH	[13E6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41F, 0x0021 };
    uint32_t const ces[9] = { 0x13E6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_058)
{
    // 1F41F 003F;	
    // (üêü) FISH	[13E6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41F, 0x003F };
    uint32_t const ces[9] = { 0x13E6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_059)
{
    // 1F41F 0061;	
    // (üêü) FISH	[13E6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41F, 0x0061 };
    uint32_t const ces[9] = { 0x13E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_060)
{
    // 1F41F 0041;	
    // (üêü) FISH	[13E6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F41F, 0x0041 };
    uint32_t const ces[9] = { 0x13E6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_061)
{
    // 1F41F 0062;	
    // (üêü) FISH	[13E6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F41F, 0x0062 };
    uint32_t const ces[9] = { 0x13E6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_062)
{
    // 1F420 0021;	
    // (üê†) TROPICAL FISH	[13E7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F420, 0x0021 };
    uint32_t const ces[9] = { 0x13E7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_063)
{
    // 1F420 003F;	
    // (üê†) TROPICAL FISH	[13E7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F420, 0x003F };
    uint32_t const ces[9] = { 0x13E7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_064)
{
    // 1F420 0061;	
    // (üê†) TROPICAL FISH	[13E7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F420, 0x0061 };
    uint32_t const ces[9] = { 0x13E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_065)
{
    // 1F420 0041;	
    // (üê†) TROPICAL FISH	[13E7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F420, 0x0041 };
    uint32_t const ces[9] = { 0x13E7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_066)
{
    // 1F420 0062;	
    // (üê†) TROPICAL FISH	[13E7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F420, 0x0062 };
    uint32_t const ces[9] = { 0x13E7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_067)
{
    // 1F421 0021;	
    // (üê°) BLOWFISH	[13E8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F421, 0x0021 };
    uint32_t const ces[9] = { 0x13E8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_068)
{
    // 1F421 003F;	
    // (üê°) BLOWFISH	[13E8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F421, 0x003F };
    uint32_t const ces[9] = { 0x13E8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_069)
{
    // 1F421 0061;	
    // (üê°) BLOWFISH	[13E8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F421, 0x0061 };
    uint32_t const ces[9] = { 0x13E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_070)
{
    // 1F421 0041;	
    // (üê°) BLOWFISH	[13E8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F421, 0x0041 };
    uint32_t const ces[9] = { 0x13E8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_071)
{
    // 1F421 0062;	
    // (üê°) BLOWFISH	[13E8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F421, 0x0062 };
    uint32_t const ces[9] = { 0x13E8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_072)
{
    // 1F422 0021;	
    // (üê¢) TURTLE	[13E9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F422, 0x0021 };
    uint32_t const ces[9] = { 0x13E9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_073)
{
    // 1F422 003F;	
    // (üê¢) TURTLE	[13E9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F422, 0x003F };
    uint32_t const ces[9] = { 0x13E9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_074)
{
    // 1F422 0061;	
    // (üê¢) TURTLE	[13E9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F422, 0x0061 };
    uint32_t const ces[9] = { 0x13E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_075)
{
    // 1F422 0041;	
    // (üê¢) TURTLE	[13E9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F422, 0x0041 };
    uint32_t const ces[9] = { 0x13E9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_076)
{
    // 1F422 0062;	
    // (üê¢) TURTLE	[13E9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F422, 0x0062 };
    uint32_t const ces[9] = { 0x13E9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_077)
{
    // 1F423 0021;	
    // (üê£) HATCHING CHICK	[13EA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F423, 0x0021 };
    uint32_t const ces[9] = { 0x13EA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_078)
{
    // 1F423 003F;	
    // (üê£) HATCHING CHICK	[13EA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F423, 0x003F };
    uint32_t const ces[9] = { 0x13EA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_079)
{
    // 1F423 0061;	
    // (üê£) HATCHING CHICK	[13EA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F423, 0x0061 };
    uint32_t const ces[9] = { 0x13EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_080)
{
    // 1F423 0041;	
    // (üê£) HATCHING CHICK	[13EA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F423, 0x0041 };
    uint32_t const ces[9] = { 0x13EA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_081)
{
    // 1F423 0062;	
    // (üê£) HATCHING CHICK	[13EA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F423, 0x0062 };
    uint32_t const ces[9] = { 0x13EA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_082)
{
    // 1F424 0021;	
    // (üê§) BABY CHICK	[13EB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F424, 0x0021 };
    uint32_t const ces[9] = { 0x13EB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_083)
{
    // 1F424 003F;	
    // (üê§) BABY CHICK	[13EB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F424, 0x003F };
    uint32_t const ces[9] = { 0x13EB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_084)
{
    // 1F424 0061;	
    // (üê§) BABY CHICK	[13EB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F424, 0x0061 };
    uint32_t const ces[9] = { 0x13EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_085)
{
    // 1F424 0041;	
    // (üê§) BABY CHICK	[13EB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F424, 0x0041 };
    uint32_t const ces[9] = { 0x13EB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_086)
{
    // 1F424 0062;	
    // (üê§) BABY CHICK	[13EB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F424, 0x0062 };
    uint32_t const ces[9] = { 0x13EB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_087)
{
    // 1F425 0021;	
    // (üê•) FRONT-FACING BABY CHICK	[13EC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F425, 0x0021 };
    uint32_t const ces[9] = { 0x13EC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_088)
{
    // 1F425 003F;	
    // (üê•) FRONT-FACING BABY CHICK	[13EC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F425, 0x003F };
    uint32_t const ces[9] = { 0x13EC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_089)
{
    // 1F425 0061;	
    // (üê•) FRONT-FACING BABY CHICK	[13EC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F425, 0x0061 };
    uint32_t const ces[9] = { 0x13EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_090)
{
    // 1F425 0041;	
    // (üê•) FRONT-FACING BABY CHICK	[13EC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F425, 0x0041 };
    uint32_t const ces[9] = { 0x13EC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_091)
{
    // 1F425 0062;	
    // (üê•) FRONT-FACING BABY CHICK	[13EC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F425, 0x0062 };
    uint32_t const ces[9] = { 0x13EC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_092)
{
    // 1F426 0021;	
    // (üê¶) BIRD	[13ED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F426, 0x0021 };
    uint32_t const ces[9] = { 0x13ED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_093)
{
    // 1F426 003F;	
    // (üê¶) BIRD	[13ED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F426, 0x003F };
    uint32_t const ces[9] = { 0x13ED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_094)
{
    // 1F426 0061;	
    // (üê¶) BIRD	[13ED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F426, 0x0061 };
    uint32_t const ces[9] = { 0x13ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_095)
{
    // 1F426 0041;	
    // (üê¶) BIRD	[13ED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F426, 0x0041 };
    uint32_t const ces[9] = { 0x13ED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_096)
{
    // 1F426 0062;	
    // (üê¶) BIRD	[13ED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F426, 0x0062 };
    uint32_t const ces[9] = { 0x13ED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_097)
{
    // 1F427 0021;	
    // (üêß) PENGUIN	[13EE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F427, 0x0021 };
    uint32_t const ces[9] = { 0x13EE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_098)
{
    // 1F427 003F;	
    // (üêß) PENGUIN	[13EE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F427, 0x003F };
    uint32_t const ces[9] = { 0x13EE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_099)
{
    // 1F427 0061;	
    // (üêß) PENGUIN	[13EE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F427, 0x0061 };
    uint32_t const ces[9] = { 0x13EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_100)
{
    // 1F427 0041;	
    // (üêß) PENGUIN	[13EE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F427, 0x0041 };
    uint32_t const ces[9] = { 0x13EE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_101)
{
    // 1F427 0062;	
    // (üêß) PENGUIN	[13EE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F427, 0x0062 };
    uint32_t const ces[9] = { 0x13EE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_102)
{
    // 1F428 0021;	
    // (üê®) KOALA	[13EF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F428, 0x0021 };
    uint32_t const ces[9] = { 0x13EF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_103)
{
    // 1F428 003F;	
    // (üê®) KOALA	[13EF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F428, 0x003F };
    uint32_t const ces[9] = { 0x13EF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_104)
{
    // 1F428 0061;	
    // (üê®) KOALA	[13EF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F428, 0x0061 };
    uint32_t const ces[9] = { 0x13EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_105)
{
    // 1F428 0041;	
    // (üê®) KOALA	[13EF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F428, 0x0041 };
    uint32_t const ces[9] = { 0x13EF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_106)
{
    // 1F428 0062;	
    // (üê®) KOALA	[13EF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F428, 0x0062 };
    uint32_t const ces[9] = { 0x13EF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_107)
{
    // 1F429 0021;	
    // (üê©) POODLE	[13F0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F429, 0x0021 };
    uint32_t const ces[9] = { 0x13F0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_108)
{
    // 1F429 003F;	
    // (üê©) POODLE	[13F0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F429, 0x003F };
    uint32_t const ces[9] = { 0x13F0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_109)
{
    // 1F429 0061;	
    // (üê©) POODLE	[13F0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F429, 0x0061 };
    uint32_t const ces[9] = { 0x13F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_110)
{
    // 1F429 0041;	
    // (üê©) POODLE	[13F0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F429, 0x0041 };
    uint32_t const ces[9] = { 0x13F0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_111)
{
    // 1F429 0062;	
    // (üê©) POODLE	[13F0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F429, 0x0062 };
    uint32_t const ces[9] = { 0x13F0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_112)
{
    // 1F42A 0021;	
    // (üê™) DROMEDARY CAMEL	[13F1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42A, 0x0021 };
    uint32_t const ces[9] = { 0x13F1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_113)
{
    // 1F42A 003F;	
    // (üê™) DROMEDARY CAMEL	[13F1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42A, 0x003F };
    uint32_t const ces[9] = { 0x13F1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_114)
{
    // 1F42A 0061;	
    // (üê™) DROMEDARY CAMEL	[13F1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42A, 0x0061 };
    uint32_t const ces[9] = { 0x13F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_115)
{
    // 1F42A 0041;	
    // (üê™) DROMEDARY CAMEL	[13F1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F42A, 0x0041 };
    uint32_t const ces[9] = { 0x13F1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_116)
{
    // 1F42A 0062;	
    // (üê™) DROMEDARY CAMEL	[13F1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42A, 0x0062 };
    uint32_t const ces[9] = { 0x13F1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_117)
{
    // 1F42B 0021;	
    // (üê´) BACTRIAN CAMEL	[13F2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42B, 0x0021 };
    uint32_t const ces[9] = { 0x13F2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_118)
{
    // 1F42B 003F;	
    // (üê´) BACTRIAN CAMEL	[13F2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42B, 0x003F };
    uint32_t const ces[9] = { 0x13F2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_119)
{
    // 1F42B 0061;	
    // (üê´) BACTRIAN CAMEL	[13F2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42B, 0x0061 };
    uint32_t const ces[9] = { 0x13F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_120)
{
    // 1F42B 0041;	
    // (üê´) BACTRIAN CAMEL	[13F2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F42B, 0x0041 };
    uint32_t const ces[9] = { 0x13F2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_121)
{
    // 1F42B 0062;	
    // (üê´) BACTRIAN CAMEL	[13F2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42B, 0x0062 };
    uint32_t const ces[9] = { 0x13F2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_122)
{
    // 1F42C 0021;	
    // (üê¨) DOLPHIN	[13F3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42C, 0x0021 };
    uint32_t const ces[9] = { 0x13F3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_123)
{
    // 1F42C 003F;	
    // (üê¨) DOLPHIN	[13F3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42C, 0x003F };
    uint32_t const ces[9] = { 0x13F3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_124)
{
    // 1F42C 0061;	
    // (üê¨) DOLPHIN	[13F3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42C, 0x0061 };
    uint32_t const ces[9] = { 0x13F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_125)
{
    // 1F42C 0041;	
    // (üê¨) DOLPHIN	[13F3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F42C, 0x0041 };
    uint32_t const ces[9] = { 0x13F3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_126)
{
    // 1F42C 0062;	
    // (üê¨) DOLPHIN	[13F3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42C, 0x0062 };
    uint32_t const ces[9] = { 0x13F3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_127)
{
    // 1F42D 0021;	
    // (üê≠) MOUSE FACE	[13F4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42D, 0x0021 };
    uint32_t const ces[9] = { 0x13F4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_128)
{
    // 1F42D 003F;	
    // (üê≠) MOUSE FACE	[13F4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42D, 0x003F };
    uint32_t const ces[9] = { 0x13F4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_129)
{
    // 1F42D 0061;	
    // (üê≠) MOUSE FACE	[13F4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42D, 0x0061 };
    uint32_t const ces[9] = { 0x13F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_130)
{
    // 1F42D 0041;	
    // (üê≠) MOUSE FACE	[13F4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F42D, 0x0041 };
    uint32_t const ces[9] = { 0x13F4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_131)
{
    // 1F42D 0062;	
    // (üê≠) MOUSE FACE	[13F4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42D, 0x0062 };
    uint32_t const ces[9] = { 0x13F4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_132)
{
    // 1F42E 0021;	
    // (üêÆ) COW FACE	[13F5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42E, 0x0021 };
    uint32_t const ces[9] = { 0x13F5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_133)
{
    // 1F42E 003F;	
    // (üêÆ) COW FACE	[13F5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42E, 0x003F };
    uint32_t const ces[9] = { 0x13F5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_134)
{
    // 1F42E 0061;	
    // (üêÆ) COW FACE	[13F5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42E, 0x0061 };
    uint32_t const ces[9] = { 0x13F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_135)
{
    // 1F42E 0041;	
    // (üêÆ) COW FACE	[13F5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F42E, 0x0041 };
    uint32_t const ces[9] = { 0x13F5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_136)
{
    // 1F42E 0062;	
    // (üêÆ) COW FACE	[13F5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42E, 0x0062 };
    uint32_t const ces[9] = { 0x13F5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_137)
{
    // 1F42F 0021;	
    // (üêØ) TIGER FACE	[13F6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42F, 0x0021 };
    uint32_t const ces[9] = { 0x13F6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_138)
{
    // 1F42F 003F;	
    // (üêØ) TIGER FACE	[13F6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42F, 0x003F };
    uint32_t const ces[9] = { 0x13F6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_139)
{
    // 1F42F 0061;	
    // (üêØ) TIGER FACE	[13F6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42F, 0x0061 };
    uint32_t const ces[9] = { 0x13F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_140)
{
    // 1F42F 0041;	
    // (üêØ) TIGER FACE	[13F6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F42F, 0x0041 };
    uint32_t const ces[9] = { 0x13F6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_141)
{
    // 1F42F 0062;	
    // (üêØ) TIGER FACE	[13F6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F42F, 0x0062 };
    uint32_t const ces[9] = { 0x13F6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_142)
{
    // 1F430 0021;	
    // (üê∞) RABBIT FACE	[13F7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F430, 0x0021 };
    uint32_t const ces[9] = { 0x13F7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_143)
{
    // 1F430 003F;	
    // (üê∞) RABBIT FACE	[13F7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F430, 0x003F };
    uint32_t const ces[9] = { 0x13F7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_144)
{
    // 1F430 0061;	
    // (üê∞) RABBIT FACE	[13F7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F430, 0x0061 };
    uint32_t const ces[9] = { 0x13F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_145)
{
    // 1F430 0041;	
    // (üê∞) RABBIT FACE	[13F7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F430, 0x0041 };
    uint32_t const ces[9] = { 0x13F7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_146)
{
    // 1F430 0062;	
    // (üê∞) RABBIT FACE	[13F7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F430, 0x0062 };
    uint32_t const ces[9] = { 0x13F7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_147)
{
    // 1F431 0021;	
    // (üê±) CAT FACE	[13F8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F431, 0x0021 };
    uint32_t const ces[9] = { 0x13F8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_148)
{
    // 1F431 003F;	
    // (üê±) CAT FACE	[13F8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F431, 0x003F };
    uint32_t const ces[9] = { 0x13F8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_149)
{
    // 1F431 0061;	
    // (üê±) CAT FACE	[13F8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F431, 0x0061 };
    uint32_t const ces[9] = { 0x13F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_150)
{
    // 1F431 0041;	
    // (üê±) CAT FACE	[13F8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F431, 0x0041 };
    uint32_t const ces[9] = { 0x13F8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_151)
{
    // 1F431 0062;	
    // (üê±) CAT FACE	[13F8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F431, 0x0062 };
    uint32_t const ces[9] = { 0x13F8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_152)
{
    // 1F432 0021;	
    // (üê≤) DRAGON FACE	[13F9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F432, 0x0021 };
    uint32_t const ces[9] = { 0x13F9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_153)
{
    // 1F432 003F;	
    // (üê≤) DRAGON FACE	[13F9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F432, 0x003F };
    uint32_t const ces[9] = { 0x13F9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_154)
{
    // 1F432 0061;	
    // (üê≤) DRAGON FACE	[13F9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F432, 0x0061 };
    uint32_t const ces[9] = { 0x13F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_155)
{
    // 1F432 0041;	
    // (üê≤) DRAGON FACE	[13F9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F432, 0x0041 };
    uint32_t const ces[9] = { 0x13F9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_156)
{
    // 1F432 0062;	
    // (üê≤) DRAGON FACE	[13F9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F432, 0x0062 };
    uint32_t const ces[9] = { 0x13F9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_157)
{
    // 1F433 0021;	
    // (üê≥) SPOUTING WHALE	[13FA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F433, 0x0021 };
    uint32_t const ces[9] = { 0x13FA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_158)
{
    // 1F433 003F;	
    // (üê≥) SPOUTING WHALE	[13FA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F433, 0x003F };
    uint32_t const ces[9] = { 0x13FA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_159)
{
    // 1F433 0061;	
    // (üê≥) SPOUTING WHALE	[13FA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F433, 0x0061 };
    uint32_t const ces[9] = { 0x13FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_160)
{
    // 1F433 0041;	
    // (üê≥) SPOUTING WHALE	[13FA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F433, 0x0041 };
    uint32_t const ces[9] = { 0x13FA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_161)
{
    // 1F433 0062;	
    // (üê≥) SPOUTING WHALE	[13FA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F433, 0x0062 };
    uint32_t const ces[9] = { 0x13FA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_162)
{
    // 1F434 0021;	
    // (üê¥) HORSE FACE	[13FB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F434, 0x0021 };
    uint32_t const ces[9] = { 0x13FB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_163)
{
    // 1F434 003F;	
    // (üê¥) HORSE FACE	[13FB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F434, 0x003F };
    uint32_t const ces[9] = { 0x13FB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_164)
{
    // 1F434 0061;	
    // (üê¥) HORSE FACE	[13FB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F434, 0x0061 };
    uint32_t const ces[9] = { 0x13FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_165)
{
    // 1F434 0041;	
    // (üê¥) HORSE FACE	[13FB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F434, 0x0041 };
    uint32_t const ces[9] = { 0x13FB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_166)
{
    // 1F434 0062;	
    // (üê¥) HORSE FACE	[13FB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F434, 0x0062 };
    uint32_t const ces[9] = { 0x13FB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_167)
{
    // 1F435 0021;	
    // (üêµ) MONKEY FACE	[13FC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F435, 0x0021 };
    uint32_t const ces[9] = { 0x13FC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_168)
{
    // 1F435 003F;	
    // (üêµ) MONKEY FACE	[13FC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F435, 0x003F };
    uint32_t const ces[9] = { 0x13FC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_169)
{
    // 1F435 0061;	
    // (üêµ) MONKEY FACE	[13FC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F435, 0x0061 };
    uint32_t const ces[9] = { 0x13FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_170)
{
    // 1F435 0041;	
    // (üêµ) MONKEY FACE	[13FC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F435, 0x0041 };
    uint32_t const ces[9] = { 0x13FC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_171)
{
    // 1F435 0062;	
    // (üêµ) MONKEY FACE	[13FC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F435, 0x0062 };
    uint32_t const ces[9] = { 0x13FC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_172)
{
    // 1F436 0021;	
    // (üê∂) DOG FACE	[13FD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F436, 0x0021 };
    uint32_t const ces[9] = { 0x13FD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_173)
{
    // 1F436 003F;	
    // (üê∂) DOG FACE	[13FD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F436, 0x003F };
    uint32_t const ces[9] = { 0x13FD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_174)
{
    // 1F436 0061;	
    // (üê∂) DOG FACE	[13FD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F436, 0x0061 };
    uint32_t const ces[9] = { 0x13FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_175)
{
    // 1F436 0041;	
    // (üê∂) DOG FACE	[13FD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F436, 0x0041 };
    uint32_t const ces[9] = { 0x13FD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_176)
{
    // 1F436 0062;	
    // (üê∂) DOG FACE	[13FD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F436, 0x0062 };
    uint32_t const ces[9] = { 0x13FD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_177)
{
    // 1F437 0021;	
    // (üê∑) PIG FACE	[13FE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F437, 0x0021 };
    uint32_t const ces[9] = { 0x13FE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_178)
{
    // 1F437 003F;	
    // (üê∑) PIG FACE	[13FE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F437, 0x003F };
    uint32_t const ces[9] = { 0x13FE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_179)
{
    // 1F437 0061;	
    // (üê∑) PIG FACE	[13FE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F437, 0x0061 };
    uint32_t const ces[9] = { 0x13FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_180)
{
    // 1F437 0041;	
    // (üê∑) PIG FACE	[13FE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F437, 0x0041 };
    uint32_t const ces[9] = { 0x13FE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_181)
{
    // 1F437 0062;	
    // (üê∑) PIG FACE	[13FE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F437, 0x0062 };
    uint32_t const ces[9] = { 0x13FE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_182)
{
    // 1F438 0021;	
    // (üê∏) FROG FACE	[13FF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F438, 0x0021 };
    uint32_t const ces[9] = { 0x13FF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_183)
{
    // 1F438 003F;	
    // (üê∏) FROG FACE	[13FF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F438, 0x003F };
    uint32_t const ces[9] = { 0x13FF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_184)
{
    // 1F438 0061;	
    // (üê∏) FROG FACE	[13FF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F438, 0x0061 };
    uint32_t const ces[9] = { 0x13FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_185)
{
    // 1F438 0041;	
    // (üê∏) FROG FACE	[13FF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F438, 0x0041 };
    uint32_t const ces[9] = { 0x13FF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_186)
{
    // 1F438 0062;	
    // (üê∏) FROG FACE	[13FF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F438, 0x0062 };
    uint32_t const ces[9] = { 0x13FF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_187)
{
    // 1F439 0021;	
    // (üêπ) HAMSTER FACE	[1400 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F439, 0x0021 };
    uint32_t const ces[9] = { 0x1400, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_188)
{
    // 1F439 003F;	
    // (üêπ) HAMSTER FACE	[1400 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F439, 0x003F };
    uint32_t const ces[9] = { 0x1400, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_189)
{
    // 1F439 0061;	
    // (üêπ) HAMSTER FACE	[1400 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F439, 0x0061 };
    uint32_t const ces[9] = { 0x1400, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_190)
{
    // 1F439 0041;	
    // (üêπ) HAMSTER FACE	[1400 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F439, 0x0041 };
    uint32_t const ces[9] = { 0x1400, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_191)
{
    // 1F439 0062;	
    // (üêπ) HAMSTER FACE	[1400 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F439, 0x0062 };
    uint32_t const ces[9] = { 0x1400, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_192)
{
    // 1F43A 0021;	
    // (üê∫) WOLF FACE	[1401 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43A, 0x0021 };
    uint32_t const ces[9] = { 0x1401, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_193)
{
    // 1F43A 003F;	
    // (üê∫) WOLF FACE	[1401 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43A, 0x003F };
    uint32_t const ces[9] = { 0x1401, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_194)
{
    // 1F43A 0061;	
    // (üê∫) WOLF FACE	[1401 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43A, 0x0061 };
    uint32_t const ces[9] = { 0x1401, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_195)
{
    // 1F43A 0041;	
    // (üê∫) WOLF FACE	[1401 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F43A, 0x0041 };
    uint32_t const ces[9] = { 0x1401, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_196)
{
    // 1F43A 0062;	
    // (üê∫) WOLF FACE	[1401 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43A, 0x0062 };
    uint32_t const ces[9] = { 0x1401, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_197)
{
    // 1F43B 0021;	
    // (üêª) BEAR FACE	[1402 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43B, 0x0021 };
    uint32_t const ces[9] = { 0x1402, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_198)
{
    // 1F43B 003F;	
    // (üêª) BEAR FACE	[1402 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43B, 0x003F };
    uint32_t const ces[9] = { 0x1402, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_199)
{
    // 1F43B 0061;	
    // (üêª) BEAR FACE	[1402 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43B, 0x0061 };
    uint32_t const ces[9] = { 0x1402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_200)
{
    // 1F43B 0041;	
    // (üêª) BEAR FACE	[1402 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F43B, 0x0041 };
    uint32_t const ces[9] = { 0x1402, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_201)
{
    // 1F43B 0062;	
    // (üêª) BEAR FACE	[1402 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43B, 0x0062 };
    uint32_t const ces[9] = { 0x1402, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_202)
{
    // 1F43C 0021;	
    // (üêº) PANDA FACE	[1403 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43C, 0x0021 };
    uint32_t const ces[9] = { 0x1403, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_203)
{
    // 1F43C 003F;	
    // (üêº) PANDA FACE	[1403 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43C, 0x003F };
    uint32_t const ces[9] = { 0x1403, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_204)
{
    // 1F43C 0061;	
    // (üêº) PANDA FACE	[1403 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43C, 0x0061 };
    uint32_t const ces[9] = { 0x1403, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_205)
{
    // 1F43C 0041;	
    // (üêº) PANDA FACE	[1403 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F43C, 0x0041 };
    uint32_t const ces[9] = { 0x1403, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_206)
{
    // 1F43C 0062;	
    // (üêº) PANDA FACE	[1403 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43C, 0x0062 };
    uint32_t const ces[9] = { 0x1403, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_207)
{
    // 1F43D 0021;	
    // (üêΩ) PIG NOSE	[1404 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43D, 0x0021 };
    uint32_t const ces[9] = { 0x1404, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_208)
{
    // 1F43D 003F;	
    // (üêΩ) PIG NOSE	[1404 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43D, 0x003F };
    uint32_t const ces[9] = { 0x1404, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_209)
{
    // 1F43D 0061;	
    // (üêΩ) PIG NOSE	[1404 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43D, 0x0061 };
    uint32_t const ces[9] = { 0x1404, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_210)
{
    // 1F43D 0041;	
    // (üêΩ) PIG NOSE	[1404 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F43D, 0x0041 };
    uint32_t const ces[9] = { 0x1404, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_211)
{
    // 1F43D 0062;	
    // (üêΩ) PIG NOSE	[1404 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43D, 0x0062 };
    uint32_t const ces[9] = { 0x1404, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_212)
{
    // 1F43E 0021;	
    // (üêæ) PAW PRINTS	[1405 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43E, 0x0021 };
    uint32_t const ces[9] = { 0x1405, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_213)
{
    // 1F43E 003F;	
    // (üêæ) PAW PRINTS	[1405 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43E, 0x003F };
    uint32_t const ces[9] = { 0x1405, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_214)
{
    // 1F43E 0061;	
    // (üêæ) PAW PRINTS	[1405 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43E, 0x0061 };
    uint32_t const ces[9] = { 0x1405, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_215)
{
    // 1F43E 0041;	
    // (üêæ) PAW PRINTS	[1405 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F43E, 0x0041 };
    uint32_t const ces[9] = { 0x1405, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_216)
{
    // 1F43E 0062;	
    // (üêæ) PAW PRINTS	[1405 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43E, 0x0062 };
    uint32_t const ces[9] = { 0x1405, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_217)
{
    // 1F43F 0021;	
    // (üêø) CHIPMUNK	[1406 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43F, 0x0021 };
    uint32_t const ces[9] = { 0x1406, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_218)
{
    // 1F43F 003F;	
    // (üêø) CHIPMUNK	[1406 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43F, 0x003F };
    uint32_t const ces[9] = { 0x1406, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_219)
{
    // 1F43F 0061;	
    // (üêø) CHIPMUNK	[1406 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43F, 0x0061 };
    uint32_t const ces[9] = { 0x1406, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_220)
{
    // 1F43F 0041;	
    // (üêø) CHIPMUNK	[1406 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F43F, 0x0041 };
    uint32_t const ces[9] = { 0x1406, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_221)
{
    // 1F43F 0062;	
    // (üêø) CHIPMUNK	[1406 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F43F, 0x0062 };
    uint32_t const ces[9] = { 0x1406, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_222)
{
    // 1F440 0021;	
    // (üëÄ) EYES	[1407 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F440, 0x0021 };
    uint32_t const ces[9] = { 0x1407, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_223)
{
    // 1F440 003F;	
    // (üëÄ) EYES	[1407 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F440, 0x003F };
    uint32_t const ces[9] = { 0x1407, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_224)
{
    // 1F440 0061;	
    // (üëÄ) EYES	[1407 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F440, 0x0061 };
    uint32_t const ces[9] = { 0x1407, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_225)
{
    // 1F440 0041;	
    // (üëÄ) EYES	[1407 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F440, 0x0041 };
    uint32_t const ces[9] = { 0x1407, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_226)
{
    // 1F440 0062;	
    // (üëÄ) EYES	[1407 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F440, 0x0062 };
    uint32_t const ces[9] = { 0x1407, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_227)
{
    // 1F441 0021;	
    // (üëÅ) EYE	[1408 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F441, 0x0021 };
    uint32_t const ces[9] = { 0x1408, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_228)
{
    // 1F441 003F;	
    // (üëÅ) EYE	[1408 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F441, 0x003F };
    uint32_t const ces[9] = { 0x1408, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_229)
{
    // 1F441 0061;	
    // (üëÅ) EYE	[1408 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F441, 0x0061 };
    uint32_t const ces[9] = { 0x1408, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_230)
{
    // 1F441 0041;	
    // (üëÅ) EYE	[1408 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F441, 0x0041 };
    uint32_t const ces[9] = { 0x1408, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_231)
{
    // 1F441 0062;	
    // (üëÅ) EYE	[1408 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F441, 0x0062 };
    uint32_t const ces[9] = { 0x1408, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_232)
{
    // 1F442 0021;	
    // (üëÇ) EAR	[1409 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F442, 0x0021 };
    uint32_t const ces[9] = { 0x1409, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_233)
{
    // 1F442 003F;	
    // (üëÇ) EAR	[1409 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F442, 0x003F };
    uint32_t const ces[9] = { 0x1409, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_234)
{
    // 1F442 0061;	
    // (üëÇ) EAR	[1409 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F442, 0x0061 };
    uint32_t const ces[9] = { 0x1409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_235)
{
    // 1F442 0041;	
    // (üëÇ) EAR	[1409 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F442, 0x0041 };
    uint32_t const ces[9] = { 0x1409, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_236)
{
    // 1F442 0062;	
    // (üëÇ) EAR	[1409 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F442, 0x0062 };
    uint32_t const ces[9] = { 0x1409, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_237)
{
    // 1F443 0021;	
    // (üëÉ) NOSE	[140A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F443, 0x0021 };
    uint32_t const ces[9] = { 0x140A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_238)
{
    // 1F443 003F;	
    // (üëÉ) NOSE	[140A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F443, 0x003F };
    uint32_t const ces[9] = { 0x140A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_239)
{
    // 1F443 0061;	
    // (üëÉ) NOSE	[140A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F443, 0x0061 };
    uint32_t const ces[9] = { 0x140A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_240)
{
    // 1F443 0041;	
    // (üëÉ) NOSE	[140A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F443, 0x0041 };
    uint32_t const ces[9] = { 0x140A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_241)
{
    // 1F443 0062;	
    // (üëÉ) NOSE	[140A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F443, 0x0062 };
    uint32_t const ces[9] = { 0x140A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_242)
{
    // 1F444 0021;	
    // (üëÑ) MOUTH	[140B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F444, 0x0021 };
    uint32_t const ces[9] = { 0x140B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_243)
{
    // 1F444 003F;	
    // (üëÑ) MOUTH	[140B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F444, 0x003F };
    uint32_t const ces[9] = { 0x140B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_244)
{
    // 1F444 0061;	
    // (üëÑ) MOUTH	[140B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F444, 0x0061 };
    uint32_t const ces[9] = { 0x140B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_245)
{
    // 1F444 0041;	
    // (üëÑ) MOUTH	[140B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F444, 0x0041 };
    uint32_t const ces[9] = { 0x140B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_246)
{
    // 1F444 0062;	
    // (üëÑ) MOUTH	[140B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F444, 0x0062 };
    uint32_t const ces[9] = { 0x140B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_247)
{
    // 1F445 0021;	
    // (üëÖ) TONGUE	[140C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F445, 0x0021 };
    uint32_t const ces[9] = { 0x140C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_248)
{
    // 1F445 003F;	
    // (üëÖ) TONGUE	[140C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F445, 0x003F };
    uint32_t const ces[9] = { 0x140C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_249)
{
    // 1F445 0061;	
    // (üëÖ) TONGUE	[140C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F445, 0x0061 };
    uint32_t const ces[9] = { 0x140C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_250)
{
    // 1F445 0041;	
    // (üëÖ) TONGUE	[140C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F445, 0x0041 };
    uint32_t const ces[9] = { 0x140C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_251)
{
    // 1F445 0062;	
    // (üëÖ) TONGUE	[140C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F445, 0x0062 };
    uint32_t const ces[9] = { 0x140C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_252)
{
    // 1F446 0021;	
    // (üëÜ) WHITE UP POINTING BACKHAND INDEX	[140D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F446, 0x0021 };
    uint32_t const ces[9] = { 0x140D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_253)
{
    // 1F446 003F;	
    // (üëÜ) WHITE UP POINTING BACKHAND INDEX	[140D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F446, 0x003F };
    uint32_t const ces[9] = { 0x140D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_254)
{
    // 1F446 0061;	
    // (üëÜ) WHITE UP POINTING BACKHAND INDEX	[140D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F446, 0x0061 };
    uint32_t const ces[9] = { 0x140D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_255)
{
    // 1F446 0041;	
    // (üëÜ) WHITE UP POINTING BACKHAND INDEX	[140D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F446, 0x0041 };
    uint32_t const ces[9] = { 0x140D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_256)
{
    // 1F446 0062;	
    // (üëÜ) WHITE UP POINTING BACKHAND INDEX	[140D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F446, 0x0062 };
    uint32_t const ces[9] = { 0x140D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_257)
{
    // 1F447 0021;	
    // (üëá) WHITE DOWN POINTING BACKHAND INDEX	[140E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F447, 0x0021 };
    uint32_t const ces[9] = { 0x140E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_258)
{
    // 1F447 003F;	
    // (üëá) WHITE DOWN POINTING BACKHAND INDEX	[140E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F447, 0x003F };
    uint32_t const ces[9] = { 0x140E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_259)
{
    // 1F447 0061;	
    // (üëá) WHITE DOWN POINTING BACKHAND INDEX	[140E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F447, 0x0061 };
    uint32_t const ces[9] = { 0x140E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_260)
{
    // 1F447 0041;	
    // (üëá) WHITE DOWN POINTING BACKHAND INDEX	[140E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F447, 0x0041 };
    uint32_t const ces[9] = { 0x140E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_261)
{
    // 1F447 0062;	
    // (üëá) WHITE DOWN POINTING BACKHAND INDEX	[140E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F447, 0x0062 };
    uint32_t const ces[9] = { 0x140E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_262)
{
    // 1F448 0021;	
    // (üëà) WHITE LEFT POINTING BACKHAND INDEX	[140F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F448, 0x0021 };
    uint32_t const ces[9] = { 0x140F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_263)
{
    // 1F448 003F;	
    // (üëà) WHITE LEFT POINTING BACKHAND INDEX	[140F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F448, 0x003F };
    uint32_t const ces[9] = { 0x140F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_264)
{
    // 1F448 0061;	
    // (üëà) WHITE LEFT POINTING BACKHAND INDEX	[140F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F448, 0x0061 };
    uint32_t const ces[9] = { 0x140F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_265)
{
    // 1F448 0041;	
    // (üëà) WHITE LEFT POINTING BACKHAND INDEX	[140F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F448, 0x0041 };
    uint32_t const ces[9] = { 0x140F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_266)
{
    // 1F448 0062;	
    // (üëà) WHITE LEFT POINTING BACKHAND INDEX	[140F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F448, 0x0062 };
    uint32_t const ces[9] = { 0x140F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_267)
{
    // 1F449 0021;	
    // (üëâ) WHITE RIGHT POINTING BACKHAND INDEX	[1410 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F449, 0x0021 };
    uint32_t const ces[9] = { 0x1410, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_268)
{
    // 1F449 003F;	
    // (üëâ) WHITE RIGHT POINTING BACKHAND INDEX	[1410 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F449, 0x003F };
    uint32_t const ces[9] = { 0x1410, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_269)
{
    // 1F449 0061;	
    // (üëâ) WHITE RIGHT POINTING BACKHAND INDEX	[1410 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F449, 0x0061 };
    uint32_t const ces[9] = { 0x1410, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_270)
{
    // 1F449 0041;	
    // (üëâ) WHITE RIGHT POINTING BACKHAND INDEX	[1410 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F449, 0x0041 };
    uint32_t const ces[9] = { 0x1410, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_271)
{
    // 1F449 0062;	
    // (üëâ) WHITE RIGHT POINTING BACKHAND INDEX	[1410 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F449, 0x0062 };
    uint32_t const ces[9] = { 0x1410, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_272)
{
    // 1F44A 0021;	
    // (üëä) FISTED HAND SIGN	[1411 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44A, 0x0021 };
    uint32_t const ces[9] = { 0x1411, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_273)
{
    // 1F44A 003F;	
    // (üëä) FISTED HAND SIGN	[1411 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44A, 0x003F };
    uint32_t const ces[9] = { 0x1411, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_274)
{
    // 1F44A 0061;	
    // (üëä) FISTED HAND SIGN	[1411 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44A, 0x0061 };
    uint32_t const ces[9] = { 0x1411, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_275)
{
    // 1F44A 0041;	
    // (üëä) FISTED HAND SIGN	[1411 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F44A, 0x0041 };
    uint32_t const ces[9] = { 0x1411, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_276)
{
    // 1F44A 0062;	
    // (üëä) FISTED HAND SIGN	[1411 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44A, 0x0062 };
    uint32_t const ces[9] = { 0x1411, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_277)
{
    // 1F44B 0021;	
    // (üëã) WAVING HAND SIGN	[1412 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44B, 0x0021 };
    uint32_t const ces[9] = { 0x1412, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_278)
{
    // 1F44B 003F;	
    // (üëã) WAVING HAND SIGN	[1412 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44B, 0x003F };
    uint32_t const ces[9] = { 0x1412, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_279)
{
    // 1F44B 0061;	
    // (üëã) WAVING HAND SIGN	[1412 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44B, 0x0061 };
    uint32_t const ces[9] = { 0x1412, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_280)
{
    // 1F44B 0041;	
    // (üëã) WAVING HAND SIGN	[1412 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F44B, 0x0041 };
    uint32_t const ces[9] = { 0x1412, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_281)
{
    // 1F44B 0062;	
    // (üëã) WAVING HAND SIGN	[1412 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44B, 0x0062 };
    uint32_t const ces[9] = { 0x1412, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_282)
{
    // 1F44C 0021;	
    // (üëå) OK HAND SIGN	[1413 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44C, 0x0021 };
    uint32_t const ces[9] = { 0x1413, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_283)
{
    // 1F44C 003F;	
    // (üëå) OK HAND SIGN	[1413 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44C, 0x003F };
    uint32_t const ces[9] = { 0x1413, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_284)
{
    // 1F44C 0061;	
    // (üëå) OK HAND SIGN	[1413 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44C, 0x0061 };
    uint32_t const ces[9] = { 0x1413, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_285)
{
    // 1F44C 0041;	
    // (üëå) OK HAND SIGN	[1413 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F44C, 0x0041 };
    uint32_t const ces[9] = { 0x1413, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_286)
{
    // 1F44C 0062;	
    // (üëå) OK HAND SIGN	[1413 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44C, 0x0062 };
    uint32_t const ces[9] = { 0x1413, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_287)
{
    // 1F44D 0021;	
    // (üëç) THUMBS UP SIGN	[1414 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44D, 0x0021 };
    uint32_t const ces[9] = { 0x1414, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_288)
{
    // 1F44D 003F;	
    // (üëç) THUMBS UP SIGN	[1414 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44D, 0x003F };
    uint32_t const ces[9] = { 0x1414, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_289)
{
    // 1F44D 0061;	
    // (üëç) THUMBS UP SIGN	[1414 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44D, 0x0061 };
    uint32_t const ces[9] = { 0x1414, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_290)
{
    // 1F44D 0041;	
    // (üëç) THUMBS UP SIGN	[1414 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F44D, 0x0041 };
    uint32_t const ces[9] = { 0x1414, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_291)
{
    // 1F44D 0062;	
    // (üëç) THUMBS UP SIGN	[1414 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44D, 0x0062 };
    uint32_t const ces[9] = { 0x1414, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_292)
{
    // 1F44E 0021;	
    // (üëé) THUMBS DOWN SIGN	[1415 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44E, 0x0021 };
    uint32_t const ces[9] = { 0x1415, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_293)
{
    // 1F44E 003F;	
    // (üëé) THUMBS DOWN SIGN	[1415 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44E, 0x003F };
    uint32_t const ces[9] = { 0x1415, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_294)
{
    // 1F44E 0061;	
    // (üëé) THUMBS DOWN SIGN	[1415 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44E, 0x0061 };
    uint32_t const ces[9] = { 0x1415, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_295)
{
    // 1F44E 0041;	
    // (üëé) THUMBS DOWN SIGN	[1415 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F44E, 0x0041 };
    uint32_t const ces[9] = { 0x1415, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_296)
{
    // 1F44E 0062;	
    // (üëé) THUMBS DOWN SIGN	[1415 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44E, 0x0062 };
    uint32_t const ces[9] = { 0x1415, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_297)
{
    // 1F44F 0021;	
    // (üëè) CLAPPING HANDS SIGN	[1416 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44F, 0x0021 };
    uint32_t const ces[9] = { 0x1416, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_298)
{
    // 1F44F 003F;	
    // (üëè) CLAPPING HANDS SIGN	[1416 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44F, 0x003F };
    uint32_t const ces[9] = { 0x1416, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_299)
{
    // 1F44F 0061;	
    // (üëè) CLAPPING HANDS SIGN	[1416 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44F, 0x0061 };
    uint32_t const ces[9] = { 0x1416, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_300)
{
    // 1F44F 0041;	
    // (üëè) CLAPPING HANDS SIGN	[1416 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F44F, 0x0041 };
    uint32_t const ces[9] = { 0x1416, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_301)
{
    // 1F44F 0062;	
    // (üëè) CLAPPING HANDS SIGN	[1416 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F44F, 0x0062 };
    uint32_t const ces[9] = { 0x1416, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_302)
{
    // 1F450 0021;	
    // (üëê) OPEN HANDS SIGN	[1417 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F450, 0x0021 };
    uint32_t const ces[9] = { 0x1417, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_303)
{
    // 1F450 003F;	
    // (üëê) OPEN HANDS SIGN	[1417 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F450, 0x003F };
    uint32_t const ces[9] = { 0x1417, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_304)
{
    // 1F450 0061;	
    // (üëê) OPEN HANDS SIGN	[1417 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F450, 0x0061 };
    uint32_t const ces[9] = { 0x1417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_305)
{
    // 1F450 0041;	
    // (üëê) OPEN HANDS SIGN	[1417 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F450, 0x0041 };
    uint32_t const ces[9] = { 0x1417, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_306)
{
    // 1F450 0062;	
    // (üëê) OPEN HANDS SIGN	[1417 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F450, 0x0062 };
    uint32_t const ces[9] = { 0x1417, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_307)
{
    // 1F451 0021;	
    // (üëë) CROWN	[1418 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F451, 0x0021 };
    uint32_t const ces[9] = { 0x1418, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_308)
{
    // 1F451 003F;	
    // (üëë) CROWN	[1418 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F451, 0x003F };
    uint32_t const ces[9] = { 0x1418, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_309)
{
    // 1F451 0061;	
    // (üëë) CROWN	[1418 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F451, 0x0061 };
    uint32_t const ces[9] = { 0x1418, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_310)
{
    // 1F451 0041;	
    // (üëë) CROWN	[1418 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F451, 0x0041 };
    uint32_t const ces[9] = { 0x1418, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_311)
{
    // 1F451 0062;	
    // (üëë) CROWN	[1418 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F451, 0x0062 };
    uint32_t const ces[9] = { 0x1418, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_312)
{
    // 1F452 0021;	
    // (üëí) WOMANS HAT	[1419 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F452, 0x0021 };
    uint32_t const ces[9] = { 0x1419, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_313)
{
    // 1F452 003F;	
    // (üëí) WOMANS HAT	[1419 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F452, 0x003F };
    uint32_t const ces[9] = { 0x1419, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_314)
{
    // 1F452 0061;	
    // (üëí) WOMANS HAT	[1419 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F452, 0x0061 };
    uint32_t const ces[9] = { 0x1419, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_315)
{
    // 1F452 0041;	
    // (üëí) WOMANS HAT	[1419 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F452, 0x0041 };
    uint32_t const ces[9] = { 0x1419, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_316)
{
    // 1F452 0062;	
    // (üëí) WOMANS HAT	[1419 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F452, 0x0062 };
    uint32_t const ces[9] = { 0x1419, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_317)
{
    // 1F453 0021;	
    // (üëì) EYEGLASSES	[141A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F453, 0x0021 };
    uint32_t const ces[9] = { 0x141A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_318)
{
    // 1F453 003F;	
    // (üëì) EYEGLASSES	[141A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F453, 0x003F };
    uint32_t const ces[9] = { 0x141A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_319)
{
    // 1F453 0061;	
    // (üëì) EYEGLASSES	[141A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F453, 0x0061 };
    uint32_t const ces[9] = { 0x141A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_320)
{
    // 1F453 0041;	
    // (üëì) EYEGLASSES	[141A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F453, 0x0041 };
    uint32_t const ces[9] = { 0x141A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_321)
{
    // 1F453 0062;	
    // (üëì) EYEGLASSES	[141A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F453, 0x0062 };
    uint32_t const ces[9] = { 0x141A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_322)
{
    // 1F454 0021;	
    // (üëî) NECKTIE	[141B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F454, 0x0021 };
    uint32_t const ces[9] = { 0x141B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_323)
{
    // 1F454 003F;	
    // (üëî) NECKTIE	[141B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F454, 0x003F };
    uint32_t const ces[9] = { 0x141B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_324)
{
    // 1F454 0061;	
    // (üëî) NECKTIE	[141B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F454, 0x0061 };
    uint32_t const ces[9] = { 0x141B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_325)
{
    // 1F454 0041;	
    // (üëî) NECKTIE	[141B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F454, 0x0041 };
    uint32_t const ces[9] = { 0x141B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_326)
{
    // 1F454 0062;	
    // (üëî) NECKTIE	[141B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F454, 0x0062 };
    uint32_t const ces[9] = { 0x141B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_327)
{
    // 1F455 0021;	
    // (üëï) T-SHIRT	[141C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F455, 0x0021 };
    uint32_t const ces[9] = { 0x141C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_328)
{
    // 1F455 003F;	
    // (üëï) T-SHIRT	[141C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F455, 0x003F };
    uint32_t const ces[9] = { 0x141C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_329)
{
    // 1F455 0061;	
    // (üëï) T-SHIRT	[141C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F455, 0x0061 };
    uint32_t const ces[9] = { 0x141C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_330)
{
    // 1F455 0041;	
    // (üëï) T-SHIRT	[141C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F455, 0x0041 };
    uint32_t const ces[9] = { 0x141C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_331)
{
    // 1F455 0062;	
    // (üëï) T-SHIRT	[141C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F455, 0x0062 };
    uint32_t const ces[9] = { 0x141C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_332)
{
    // 1F456 0021;	
    // (üëñ) JEANS	[141D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F456, 0x0021 };
    uint32_t const ces[9] = { 0x141D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_333)
{
    // 1F456 003F;	
    // (üëñ) JEANS	[141D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F456, 0x003F };
    uint32_t const ces[9] = { 0x141D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_334)
{
    // 1F456 0061;	
    // (üëñ) JEANS	[141D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F456, 0x0061 };
    uint32_t const ces[9] = { 0x141D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_335)
{
    // 1F456 0041;	
    // (üëñ) JEANS	[141D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F456, 0x0041 };
    uint32_t const ces[9] = { 0x141D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_336)
{
    // 1F456 0062;	
    // (üëñ) JEANS	[141D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F456, 0x0062 };
    uint32_t const ces[9] = { 0x141D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_337)
{
    // 1F457 0021;	
    // (üëó) DRESS	[141E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F457, 0x0021 };
    uint32_t const ces[9] = { 0x141E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_338)
{
    // 1F457 003F;	
    // (üëó) DRESS	[141E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F457, 0x003F };
    uint32_t const ces[9] = { 0x141E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_339)
{
    // 1F457 0061;	
    // (üëó) DRESS	[141E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F457, 0x0061 };
    uint32_t const ces[9] = { 0x141E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_340)
{
    // 1F457 0041;	
    // (üëó) DRESS	[141E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F457, 0x0041 };
    uint32_t const ces[9] = { 0x141E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_341)
{
    // 1F457 0062;	
    // (üëó) DRESS	[141E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F457, 0x0062 };
    uint32_t const ces[9] = { 0x141E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_342)
{
    // 1F458 0021;	
    // (üëò) KIMONO	[141F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F458, 0x0021 };
    uint32_t const ces[9] = { 0x141F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_343)
{
    // 1F458 003F;	
    // (üëò) KIMONO	[141F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F458, 0x003F };
    uint32_t const ces[9] = { 0x141F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_344)
{
    // 1F458 0061;	
    // (üëò) KIMONO	[141F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F458, 0x0061 };
    uint32_t const ces[9] = { 0x141F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_345)
{
    // 1F458 0041;	
    // (üëò) KIMONO	[141F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F458, 0x0041 };
    uint32_t const ces[9] = { 0x141F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_346)
{
    // 1F458 0062;	
    // (üëò) KIMONO	[141F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F458, 0x0062 };
    uint32_t const ces[9] = { 0x141F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_347)
{
    // 1F459 0021;	
    // (üëô) BIKINI	[1420 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F459, 0x0021 };
    uint32_t const ces[9] = { 0x1420, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_348)
{
    // 1F459 003F;	
    // (üëô) BIKINI	[1420 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F459, 0x003F };
    uint32_t const ces[9] = { 0x1420, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_349)
{
    // 1F459 0061;	
    // (üëô) BIKINI	[1420 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F459, 0x0061 };
    uint32_t const ces[9] = { 0x1420, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_350)
{
    // 1F459 0041;	
    // (üëô) BIKINI	[1420 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F459, 0x0041 };
    uint32_t const ces[9] = { 0x1420, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_351)
{
    // 1F459 0062;	
    // (üëô) BIKINI	[1420 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F459, 0x0062 };
    uint32_t const ces[9] = { 0x1420, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_352)
{
    // 1F45A 0021;	
    // (üëö) WOMANS CLOTHES	[1421 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45A, 0x0021 };
    uint32_t const ces[9] = { 0x1421, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_353)
{
    // 1F45A 003F;	
    // (üëö) WOMANS CLOTHES	[1421 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45A, 0x003F };
    uint32_t const ces[9] = { 0x1421, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_354)
{
    // 1F45A 0061;	
    // (üëö) WOMANS CLOTHES	[1421 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45A, 0x0061 };
    uint32_t const ces[9] = { 0x1421, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_355)
{
    // 1F45A 0041;	
    // (üëö) WOMANS CLOTHES	[1421 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F45A, 0x0041 };
    uint32_t const ces[9] = { 0x1421, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_356)
{
    // 1F45A 0062;	
    // (üëö) WOMANS CLOTHES	[1421 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45A, 0x0062 };
    uint32_t const ces[9] = { 0x1421, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_357)
{
    // 1F45B 0021;	
    // (üëõ) PURSE	[1422 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45B, 0x0021 };
    uint32_t const ces[9] = { 0x1422, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_358)
{
    // 1F45B 003F;	
    // (üëõ) PURSE	[1422 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45B, 0x003F };
    uint32_t const ces[9] = { 0x1422, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_359)
{
    // 1F45B 0061;	
    // (üëõ) PURSE	[1422 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45B, 0x0061 };
    uint32_t const ces[9] = { 0x1422, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_360)
{
    // 1F45B 0041;	
    // (üëõ) PURSE	[1422 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F45B, 0x0041 };
    uint32_t const ces[9] = { 0x1422, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_361)
{
    // 1F45B 0062;	
    // (üëõ) PURSE	[1422 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45B, 0x0062 };
    uint32_t const ces[9] = { 0x1422, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_362)
{
    // 1F45C 0021;	
    // (üëú) HANDBAG	[1423 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45C, 0x0021 };
    uint32_t const ces[9] = { 0x1423, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_363)
{
    // 1F45C 003F;	
    // (üëú) HANDBAG	[1423 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45C, 0x003F };
    uint32_t const ces[9] = { 0x1423, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_364)
{
    // 1F45C 0061;	
    // (üëú) HANDBAG	[1423 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45C, 0x0061 };
    uint32_t const ces[9] = { 0x1423, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_365)
{
    // 1F45C 0041;	
    // (üëú) HANDBAG	[1423 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F45C, 0x0041 };
    uint32_t const ces[9] = { 0x1423, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_366)
{
    // 1F45C 0062;	
    // (üëú) HANDBAG	[1423 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45C, 0x0062 };
    uint32_t const ces[9] = { 0x1423, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_367)
{
    // 1F45D 0021;	
    // (üëù) POUCH	[1424 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45D, 0x0021 };
    uint32_t const ces[9] = { 0x1424, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_368)
{
    // 1F45D 003F;	
    // (üëù) POUCH	[1424 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45D, 0x003F };
    uint32_t const ces[9] = { 0x1424, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_369)
{
    // 1F45D 0061;	
    // (üëù) POUCH	[1424 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45D, 0x0061 };
    uint32_t const ces[9] = { 0x1424, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_370)
{
    // 1F45D 0041;	
    // (üëù) POUCH	[1424 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F45D, 0x0041 };
    uint32_t const ces[9] = { 0x1424, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_371)
{
    // 1F45D 0062;	
    // (üëù) POUCH	[1424 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45D, 0x0062 };
    uint32_t const ces[9] = { 0x1424, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_372)
{
    // 1F45E 0021;	
    // (üëû) MANS SHOE	[1425 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45E, 0x0021 };
    uint32_t const ces[9] = { 0x1425, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_373)
{
    // 1F45E 003F;	
    // (üëû) MANS SHOE	[1425 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45E, 0x003F };
    uint32_t const ces[9] = { 0x1425, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_374)
{
    // 1F45E 0061;	
    // (üëû) MANS SHOE	[1425 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45E, 0x0061 };
    uint32_t const ces[9] = { 0x1425, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_375)
{
    // 1F45E 0041;	
    // (üëû) MANS SHOE	[1425 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F45E, 0x0041 };
    uint32_t const ces[9] = { 0x1425, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_376)
{
    // 1F45E 0062;	
    // (üëû) MANS SHOE	[1425 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45E, 0x0062 };
    uint32_t const ces[9] = { 0x1425, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_377)
{
    // 1F45F 0021;	
    // (üëü) ATHLETIC SHOE	[1426 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45F, 0x0021 };
    uint32_t const ces[9] = { 0x1426, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_378)
{
    // 1F45F 003F;	
    // (üëü) ATHLETIC SHOE	[1426 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45F, 0x003F };
    uint32_t const ces[9] = { 0x1426, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_379)
{
    // 1F45F 0061;	
    // (üëü) ATHLETIC SHOE	[1426 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45F, 0x0061 };
    uint32_t const ces[9] = { 0x1426, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_380)
{
    // 1F45F 0041;	
    // (üëü) ATHLETIC SHOE	[1426 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F45F, 0x0041 };
    uint32_t const ces[9] = { 0x1426, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_381)
{
    // 1F45F 0062;	
    // (üëü) ATHLETIC SHOE	[1426 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F45F, 0x0062 };
    uint32_t const ces[9] = { 0x1426, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_382)
{
    // 1F460 0021;	
    // (üë†) HIGH-HEELED SHOE	[1427 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F460, 0x0021 };
    uint32_t const ces[9] = { 0x1427, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_383)
{
    // 1F460 003F;	
    // (üë†) HIGH-HEELED SHOE	[1427 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F460, 0x003F };
    uint32_t const ces[9] = { 0x1427, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_384)
{
    // 1F460 0061;	
    // (üë†) HIGH-HEELED SHOE	[1427 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F460, 0x0061 };
    uint32_t const ces[9] = { 0x1427, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_385)
{
    // 1F460 0041;	
    // (üë†) HIGH-HEELED SHOE	[1427 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F460, 0x0041 };
    uint32_t const ces[9] = { 0x1427, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_386)
{
    // 1F460 0062;	
    // (üë†) HIGH-HEELED SHOE	[1427 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F460, 0x0062 };
    uint32_t const ces[9] = { 0x1427, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_387)
{
    // 1F461 0021;	
    // (üë°) WOMANS SANDAL	[1428 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F461, 0x0021 };
    uint32_t const ces[9] = { 0x1428, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_388)
{
    // 1F461 003F;	
    // (üë°) WOMANS SANDAL	[1428 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F461, 0x003F };
    uint32_t const ces[9] = { 0x1428, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_389)
{
    // 1F461 0061;	
    // (üë°) WOMANS SANDAL	[1428 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F461, 0x0061 };
    uint32_t const ces[9] = { 0x1428, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_390)
{
    // 1F461 0041;	
    // (üë°) WOMANS SANDAL	[1428 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F461, 0x0041 };
    uint32_t const ces[9] = { 0x1428, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_391)
{
    // 1F461 0062;	
    // (üë°) WOMANS SANDAL	[1428 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F461, 0x0062 };
    uint32_t const ces[9] = { 0x1428, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_392)
{
    // 1F462 0021;	
    // (üë¢) WOMANS BOOTS	[1429 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F462, 0x0021 };
    uint32_t const ces[9] = { 0x1429, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_393)
{
    // 1F462 003F;	
    // (üë¢) WOMANS BOOTS	[1429 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F462, 0x003F };
    uint32_t const ces[9] = { 0x1429, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_394)
{
    // 1F462 0061;	
    // (üë¢) WOMANS BOOTS	[1429 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F462, 0x0061 };
    uint32_t const ces[9] = { 0x1429, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_395)
{
    // 1F462 0041;	
    // (üë¢) WOMANS BOOTS	[1429 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F462, 0x0041 };
    uint32_t const ces[9] = { 0x1429, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_396)
{
    // 1F462 0062;	
    // (üë¢) WOMANS BOOTS	[1429 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F462, 0x0062 };
    uint32_t const ces[9] = { 0x1429, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_397)
{
    // 1F463 0021;	
    // (üë£) FOOTPRINTS	[142A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F463, 0x0021 };
    uint32_t const ces[9] = { 0x142A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_398)
{
    // 1F463 003F;	
    // (üë£) FOOTPRINTS	[142A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F463, 0x003F };
    uint32_t const ces[9] = { 0x142A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_399)
{
    // 1F463 0061;	
    // (üë£) FOOTPRINTS	[142A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F463, 0x0061 };
    uint32_t const ces[9] = { 0x142A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_400)
{
    // 1F463 0041;	
    // (üë£) FOOTPRINTS	[142A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F463, 0x0041 };
    uint32_t const ces[9] = { 0x142A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_401)
{
    // 1F463 0062;	
    // (üë£) FOOTPRINTS	[142A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F463, 0x0062 };
    uint32_t const ces[9] = { 0x142A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_402)
{
    // 1F464 0021;	
    // (üë§) BUST IN SILHOUETTE	[142B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F464, 0x0021 };
    uint32_t const ces[9] = { 0x142B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_403)
{
    // 1F464 003F;	
    // (üë§) BUST IN SILHOUETTE	[142B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F464, 0x003F };
    uint32_t const ces[9] = { 0x142B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_404)
{
    // 1F464 0061;	
    // (üë§) BUST IN SILHOUETTE	[142B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F464, 0x0061 };
    uint32_t const ces[9] = { 0x142B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_405)
{
    // 1F464 0041;	
    // (üë§) BUST IN SILHOUETTE	[142B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F464, 0x0041 };
    uint32_t const ces[9] = { 0x142B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_406)
{
    // 1F464 0062;	
    // (üë§) BUST IN SILHOUETTE	[142B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F464, 0x0062 };
    uint32_t const ces[9] = { 0x142B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_407)
{
    // 1F465 0021;	
    // (üë•) BUSTS IN SILHOUETTE	[142C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F465, 0x0021 };
    uint32_t const ces[9] = { 0x142C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_408)
{
    // 1F465 003F;	
    // (üë•) BUSTS IN SILHOUETTE	[142C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F465, 0x003F };
    uint32_t const ces[9] = { 0x142C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_409)
{
    // 1F465 0061;	
    // (üë•) BUSTS IN SILHOUETTE	[142C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F465, 0x0061 };
    uint32_t const ces[9] = { 0x142C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_410)
{
    // 1F465 0041;	
    // (üë•) BUSTS IN SILHOUETTE	[142C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F465, 0x0041 };
    uint32_t const ces[9] = { 0x142C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_411)
{
    // 1F465 0062;	
    // (üë•) BUSTS IN SILHOUETTE	[142C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F465, 0x0062 };
    uint32_t const ces[9] = { 0x142C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_412)
{
    // 1F466 0021;	
    // (üë¶) BOY	[142D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F466, 0x0021 };
    uint32_t const ces[9] = { 0x142D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_413)
{
    // 1F466 003F;	
    // (üë¶) BOY	[142D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F466, 0x003F };
    uint32_t const ces[9] = { 0x142D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_414)
{
    // 1F466 0061;	
    // (üë¶) BOY	[142D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F466, 0x0061 };
    uint32_t const ces[9] = { 0x142D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_415)
{
    // 1F466 0041;	
    // (üë¶) BOY	[142D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F466, 0x0041 };
    uint32_t const ces[9] = { 0x142D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_416)
{
    // 1F466 0062;	
    // (üë¶) BOY	[142D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F466, 0x0062 };
    uint32_t const ces[9] = { 0x142D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_417)
{
    // 1F467 0021;	
    // (üëß) GIRL	[142E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F467, 0x0021 };
    uint32_t const ces[9] = { 0x142E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_418)
{
    // 1F467 003F;	
    // (üëß) GIRL	[142E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F467, 0x003F };
    uint32_t const ces[9] = { 0x142E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_419)
{
    // 1F467 0061;	
    // (üëß) GIRL	[142E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F467, 0x0061 };
    uint32_t const ces[9] = { 0x142E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_420)
{
    // 1F467 0041;	
    // (üëß) GIRL	[142E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F467, 0x0041 };
    uint32_t const ces[9] = { 0x142E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_421)
{
    // 1F467 0062;	
    // (üëß) GIRL	[142E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F467, 0x0062 };
    uint32_t const ces[9] = { 0x142E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_422)
{
    // 1F468 0021;	
    // (üë®) MAN	[142F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F468, 0x0021 };
    uint32_t const ces[9] = { 0x142F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_423)
{
    // 1F468 003F;	
    // (üë®) MAN	[142F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F468, 0x003F };
    uint32_t const ces[9] = { 0x142F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_424)
{
    // 1F468 0061;	
    // (üë®) MAN	[142F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F468, 0x0061 };
    uint32_t const ces[9] = { 0x142F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_425)
{
    // 1F468 0041;	
    // (üë®) MAN	[142F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F468, 0x0041 };
    uint32_t const ces[9] = { 0x142F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_426)
{
    // 1F468 0062;	
    // (üë®) MAN	[142F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F468, 0x0062 };
    uint32_t const ces[9] = { 0x142F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_427)
{
    // 1F469 0021;	
    // (üë©) WOMAN	[1430 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F469, 0x0021 };
    uint32_t const ces[9] = { 0x1430, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_428)
{
    // 1F469 003F;	
    // (üë©) WOMAN	[1430 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F469, 0x003F };
    uint32_t const ces[9] = { 0x1430, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_429)
{
    // 1F469 0061;	
    // (üë©) WOMAN	[1430 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F469, 0x0061 };
    uint32_t const ces[9] = { 0x1430, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_430)
{
    // 1F469 0041;	
    // (üë©) WOMAN	[1430 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F469, 0x0041 };
    uint32_t const ces[9] = { 0x1430, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_431)
{
    // 1F469 0062;	
    // (üë©) WOMAN	[1430 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F469, 0x0062 };
    uint32_t const ces[9] = { 0x1430, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_432)
{
    // 1F46A 0021;	
    // (üë™) FAMILY	[1431 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46A, 0x0021 };
    uint32_t const ces[9] = { 0x1431, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_433)
{
    // 1F46A 003F;	
    // (üë™) FAMILY	[1431 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46A, 0x003F };
    uint32_t const ces[9] = { 0x1431, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_434)
{
    // 1F46A 0061;	
    // (üë™) FAMILY	[1431 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46A, 0x0061 };
    uint32_t const ces[9] = { 0x1431, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_435)
{
    // 1F46A 0041;	
    // (üë™) FAMILY	[1431 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F46A, 0x0041 };
    uint32_t const ces[9] = { 0x1431, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_436)
{
    // 1F46A 0062;	
    // (üë™) FAMILY	[1431 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46A, 0x0062 };
    uint32_t const ces[9] = { 0x1431, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_437)
{
    // 1F46B 0021;	
    // (üë´) MAN AND WOMAN HOLDING HANDS	[1432 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46B, 0x0021 };
    uint32_t const ces[9] = { 0x1432, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_438)
{
    // 1F46B 003F;	
    // (üë´) MAN AND WOMAN HOLDING HANDS	[1432 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46B, 0x003F };
    uint32_t const ces[9] = { 0x1432, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_439)
{
    // 1F46B 0061;	
    // (üë´) MAN AND WOMAN HOLDING HANDS	[1432 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46B, 0x0061 };
    uint32_t const ces[9] = { 0x1432, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_440)
{
    // 1F46B 0041;	
    // (üë´) MAN AND WOMAN HOLDING HANDS	[1432 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F46B, 0x0041 };
    uint32_t const ces[9] = { 0x1432, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_441)
{
    // 1F46B 0062;	
    // (üë´) MAN AND WOMAN HOLDING HANDS	[1432 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46B, 0x0062 };
    uint32_t const ces[9] = { 0x1432, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_442)
{
    // 1F46C 0021;	
    // (üë¨) TWO MEN HOLDING HANDS	[1433 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46C, 0x0021 };
    uint32_t const ces[9] = { 0x1433, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_443)
{
    // 1F46C 003F;	
    // (üë¨) TWO MEN HOLDING HANDS	[1433 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46C, 0x003F };
    uint32_t const ces[9] = { 0x1433, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_444)
{
    // 1F46C 0061;	
    // (üë¨) TWO MEN HOLDING HANDS	[1433 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46C, 0x0061 };
    uint32_t const ces[9] = { 0x1433, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_445)
{
    // 1F46C 0041;	
    // (üë¨) TWO MEN HOLDING HANDS	[1433 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F46C, 0x0041 };
    uint32_t const ces[9] = { 0x1433, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_446)
{
    // 1F46C 0062;	
    // (üë¨) TWO MEN HOLDING HANDS	[1433 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46C, 0x0062 };
    uint32_t const ces[9] = { 0x1433, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_447)
{
    // 1F46D 0021;	
    // (üë≠) TWO WOMEN HOLDING HANDS	[1434 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46D, 0x0021 };
    uint32_t const ces[9] = { 0x1434, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_448)
{
    // 1F46D 003F;	
    // (üë≠) TWO WOMEN HOLDING HANDS	[1434 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46D, 0x003F };
    uint32_t const ces[9] = { 0x1434, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_449)
{
    // 1F46D 0061;	
    // (üë≠) TWO WOMEN HOLDING HANDS	[1434 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46D, 0x0061 };
    uint32_t const ces[9] = { 0x1434, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_450)
{
    // 1F46D 0041;	
    // (üë≠) TWO WOMEN HOLDING HANDS	[1434 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F46D, 0x0041 };
    uint32_t const ces[9] = { 0x1434, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_451)
{
    // 1F46D 0062;	
    // (üë≠) TWO WOMEN HOLDING HANDS	[1434 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46D, 0x0062 };
    uint32_t const ces[9] = { 0x1434, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_452)
{
    // 1F46E 0021;	
    // (üëÆ) POLICE OFFICER	[1435 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46E, 0x0021 };
    uint32_t const ces[9] = { 0x1435, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_453)
{
    // 1F46E 003F;	
    // (üëÆ) POLICE OFFICER	[1435 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46E, 0x003F };
    uint32_t const ces[9] = { 0x1435, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_454)
{
    // 1F46E 0061;	
    // (üëÆ) POLICE OFFICER	[1435 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46E, 0x0061 };
    uint32_t const ces[9] = { 0x1435, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_455)
{
    // 1F46E 0041;	
    // (üëÆ) POLICE OFFICER	[1435 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F46E, 0x0041 };
    uint32_t const ces[9] = { 0x1435, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_456)
{
    // 1F46E 0062;	
    // (üëÆ) POLICE OFFICER	[1435 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46E, 0x0062 };
    uint32_t const ces[9] = { 0x1435, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_457)
{
    // 1F46F 0021;	
    // (üëØ) WOMAN WITH BUNNY EARS	[1436 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46F, 0x0021 };
    uint32_t const ces[9] = { 0x1436, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_458)
{
    // 1F46F 003F;	
    // (üëØ) WOMAN WITH BUNNY EARS	[1436 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46F, 0x003F };
    uint32_t const ces[9] = { 0x1436, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_459)
{
    // 1F46F 0061;	
    // (üëØ) WOMAN WITH BUNNY EARS	[1436 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46F, 0x0061 };
    uint32_t const ces[9] = { 0x1436, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_460)
{
    // 1F46F 0041;	
    // (üëØ) WOMAN WITH BUNNY EARS	[1436 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F46F, 0x0041 };
    uint32_t const ces[9] = { 0x1436, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_461)
{
    // 1F46F 0062;	
    // (üëØ) WOMAN WITH BUNNY EARS	[1436 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F46F, 0x0062 };
    uint32_t const ces[9] = { 0x1436, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_462)
{
    // 1F470 0021;	
    // (üë∞) BRIDE WITH VEIL	[1437 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F470, 0x0021 };
    uint32_t const ces[9] = { 0x1437, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_463)
{
    // 1F470 003F;	
    // (üë∞) BRIDE WITH VEIL	[1437 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F470, 0x003F };
    uint32_t const ces[9] = { 0x1437, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_464)
{
    // 1F470 0061;	
    // (üë∞) BRIDE WITH VEIL	[1437 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F470, 0x0061 };
    uint32_t const ces[9] = { 0x1437, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_465)
{
    // 1F470 0041;	
    // (üë∞) BRIDE WITH VEIL	[1437 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F470, 0x0041 };
    uint32_t const ces[9] = { 0x1437, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_466)
{
    // 1F470 0062;	
    // (üë∞) BRIDE WITH VEIL	[1437 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F470, 0x0062 };
    uint32_t const ces[9] = { 0x1437, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_467)
{
    // 1F471 0021;	
    // (üë±) PERSON WITH BLOND HAIR	[1438 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F471, 0x0021 };
    uint32_t const ces[9] = { 0x1438, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_468)
{
    // 1F471 003F;	
    // (üë±) PERSON WITH BLOND HAIR	[1438 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F471, 0x003F };
    uint32_t const ces[9] = { 0x1438, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_469)
{
    // 1F471 0061;	
    // (üë±) PERSON WITH BLOND HAIR	[1438 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F471, 0x0061 };
    uint32_t const ces[9] = { 0x1438, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_470)
{
    // 1F471 0041;	
    // (üë±) PERSON WITH BLOND HAIR	[1438 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F471, 0x0041 };
    uint32_t const ces[9] = { 0x1438, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_471)
{
    // 1F471 0062;	
    // (üë±) PERSON WITH BLOND HAIR	[1438 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F471, 0x0062 };
    uint32_t const ces[9] = { 0x1438, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_472)
{
    // 1F472 0021;	
    // (üë≤) MAN WITH GUA PI MAO	[1439 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F472, 0x0021 };
    uint32_t const ces[9] = { 0x1439, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_473)
{
    // 1F472 003F;	
    // (üë≤) MAN WITH GUA PI MAO	[1439 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F472, 0x003F };
    uint32_t const ces[9] = { 0x1439, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_474)
{
    // 1F472 0061;	
    // (üë≤) MAN WITH GUA PI MAO	[1439 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F472, 0x0061 };
    uint32_t const ces[9] = { 0x1439, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_475)
{
    // 1F472 0041;	
    // (üë≤) MAN WITH GUA PI MAO	[1439 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F472, 0x0041 };
    uint32_t const ces[9] = { 0x1439, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_476)
{
    // 1F472 0062;	
    // (üë≤) MAN WITH GUA PI MAO	[1439 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F472, 0x0062 };
    uint32_t const ces[9] = { 0x1439, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_477)
{
    // 1F473 0021;	
    // (üë≥) MAN WITH TURBAN	[143A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F473, 0x0021 };
    uint32_t const ces[9] = { 0x143A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_478)
{
    // 1F473 003F;	
    // (üë≥) MAN WITH TURBAN	[143A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F473, 0x003F };
    uint32_t const ces[9] = { 0x143A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_479)
{
    // 1F473 0061;	
    // (üë≥) MAN WITH TURBAN	[143A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F473, 0x0061 };
    uint32_t const ces[9] = { 0x143A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_480)
{
    // 1F473 0041;	
    // (üë≥) MAN WITH TURBAN	[143A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F473, 0x0041 };
    uint32_t const ces[9] = { 0x143A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_481)
{
    // 1F473 0062;	
    // (üë≥) MAN WITH TURBAN	[143A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F473, 0x0062 };
    uint32_t const ces[9] = { 0x143A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_482)
{
    // 1F474 0021;	
    // (üë¥) OLDER MAN	[143B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F474, 0x0021 };
    uint32_t const ces[9] = { 0x143B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_483)
{
    // 1F474 003F;	
    // (üë¥) OLDER MAN	[143B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F474, 0x003F };
    uint32_t const ces[9] = { 0x143B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_484)
{
    // 1F474 0061;	
    // (üë¥) OLDER MAN	[143B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F474, 0x0061 };
    uint32_t const ces[9] = { 0x143B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_485)
{
    // 1F474 0041;	
    // (üë¥) OLDER MAN	[143B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F474, 0x0041 };
    uint32_t const ces[9] = { 0x143B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_486)
{
    // 1F474 0062;	
    // (üë¥) OLDER MAN	[143B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F474, 0x0062 };
    uint32_t const ces[9] = { 0x143B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_487)
{
    // 1F475 0021;	
    // (üëµ) OLDER WOMAN	[143C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F475, 0x0021 };
    uint32_t const ces[9] = { 0x143C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_488)
{
    // 1F475 003F;	
    // (üëµ) OLDER WOMAN	[143C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F475, 0x003F };
    uint32_t const ces[9] = { 0x143C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_489)
{
    // 1F475 0061;	
    // (üëµ) OLDER WOMAN	[143C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F475, 0x0061 };
    uint32_t const ces[9] = { 0x143C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_490)
{
    // 1F475 0041;	
    // (üëµ) OLDER WOMAN	[143C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F475, 0x0041 };
    uint32_t const ces[9] = { 0x143C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_491)
{
    // 1F475 0062;	
    // (üëµ) OLDER WOMAN	[143C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F475, 0x0062 };
    uint32_t const ces[9] = { 0x143C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_492)
{
    // 1F476 0021;	
    // (üë∂) BABY	[143D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F476, 0x0021 };
    uint32_t const ces[9] = { 0x143D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_493)
{
    // 1F476 003F;	
    // (üë∂) BABY	[143D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F476, 0x003F };
    uint32_t const ces[9] = { 0x143D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_494)
{
    // 1F476 0061;	
    // (üë∂) BABY	[143D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F476, 0x0061 };
    uint32_t const ces[9] = { 0x143D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_495)
{
    // 1F476 0041;	
    // (üë∂) BABY	[143D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1F476, 0x0041 };
    uint32_t const ces[9] = { 0x143D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_496)
{
    // 1F476 0062;	
    // (üë∂) BABY	[143D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F476, 0x0062 };
    uint32_t const ces[9] = { 0x143D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_497)
{
    // 1F477 0021;	
    // (üë∑) CONSTRUCTION WORKER	[143E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F477, 0x0021 };
    uint32_t const ces[9] = { 0x143E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_498)
{
    // 1F477 003F;	
    // (üë∑) CONSTRUCTION WORKER	[143E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F477, 0x003F };
    uint32_t const ces[9] = { 0x143E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_058_499)
{
    // 1F477 0061;	
    // (üë∑) CONSTRUCTION WORKER	[143E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1F477, 0x0061 };
    uint32_t const ces[9] = { 0x143E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

