// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_390_000)
{
    // 4C75 003F;	
    // (䱵) CJK UNIFIED IDEOGRAPH-4C75	[FB80 CC75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C75, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_001)
{
    // 4C75 0061;	
    // (䱵) CJK UNIFIED IDEOGRAPH-4C75	[FB80 CC75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C75, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_002)
{
    // 4C75 0041;	
    // (䱵) CJK UNIFIED IDEOGRAPH-4C75	[FB80 CC75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C75, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_003)
{
    // 4C75 0062;	
    // (䱵) CJK UNIFIED IDEOGRAPH-4C75	[FB80 CC75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C75, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_004)
{
    // 4C76 0021;	
    // (䱶) CJK UNIFIED IDEOGRAPH-4C76	[FB80 CC76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C76, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_005)
{
    // 4C76 003F;	
    // (䱶) CJK UNIFIED IDEOGRAPH-4C76	[FB80 CC76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C76, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_006)
{
    // 4C76 0061;	
    // (䱶) CJK UNIFIED IDEOGRAPH-4C76	[FB80 CC76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C76, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_007)
{
    // 4C76 0041;	
    // (䱶) CJK UNIFIED IDEOGRAPH-4C76	[FB80 CC76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C76, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_008)
{
    // 4C76 0062;	
    // (䱶) CJK UNIFIED IDEOGRAPH-4C76	[FB80 CC76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C76, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_009)
{
    // 4C77 0021;	
    // (䱷) CJK UNIFIED IDEOGRAPH-4C77	[FB80 CC77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C77, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_010)
{
    // 4C77 003F;	
    // (䱷) CJK UNIFIED IDEOGRAPH-4C77	[FB80 CC77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C77, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_011)
{
    // 4C77 0061;	
    // (䱷) CJK UNIFIED IDEOGRAPH-4C77	[FB80 CC77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C77, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_012)
{
    // 4C77 0041;	
    // (䱷) CJK UNIFIED IDEOGRAPH-4C77	[FB80 CC77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C77, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_013)
{
    // 4C77 0062;	
    // (䱷) CJK UNIFIED IDEOGRAPH-4C77	[FB80 CC77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C77, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_014)
{
    // 4C78 0021;	
    // (䱸) CJK UNIFIED IDEOGRAPH-4C78	[FB80 CC78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C78, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_015)
{
    // 4C78 003F;	
    // (䱸) CJK UNIFIED IDEOGRAPH-4C78	[FB80 CC78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C78, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_016)
{
    // 4C78 0061;	
    // (䱸) CJK UNIFIED IDEOGRAPH-4C78	[FB80 CC78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C78, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_017)
{
    // 4C78 0041;	
    // (䱸) CJK UNIFIED IDEOGRAPH-4C78	[FB80 CC78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C78, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_018)
{
    // 4C78 0062;	
    // (䱸) CJK UNIFIED IDEOGRAPH-4C78	[FB80 CC78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C78, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_019)
{
    // 4C79 0021;	
    // (䱹) CJK UNIFIED IDEOGRAPH-4C79	[FB80 CC79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C79, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_020)
{
    // 4C79 003F;	
    // (䱹) CJK UNIFIED IDEOGRAPH-4C79	[FB80 CC79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C79, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_021)
{
    // 4C79 0061;	
    // (䱹) CJK UNIFIED IDEOGRAPH-4C79	[FB80 CC79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C79, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_022)
{
    // 4C79 0041;	
    // (䱹) CJK UNIFIED IDEOGRAPH-4C79	[FB80 CC79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C79, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_023)
{
    // 4C79 0062;	
    // (䱹) CJK UNIFIED IDEOGRAPH-4C79	[FB80 CC79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C79, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_024)
{
    // 4C7A 0021;	
    // (䱺) CJK UNIFIED IDEOGRAPH-4C7A	[FB80 CC7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_025)
{
    // 4C7A 003F;	
    // (䱺) CJK UNIFIED IDEOGRAPH-4C7A	[FB80 CC7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_026)
{
    // 4C7A 0061;	
    // (䱺) CJK UNIFIED IDEOGRAPH-4C7A	[FB80 CC7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_027)
{
    // 4C7A 0041;	
    // (䱺) CJK UNIFIED IDEOGRAPH-4C7A	[FB80 CC7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C7A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_028)
{
    // 4C7A 0062;	
    // (䱺) CJK UNIFIED IDEOGRAPH-4C7A	[FB80 CC7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_029)
{
    // 4C7B 0021;	
    // (䱻) CJK UNIFIED IDEOGRAPH-4C7B	[FB80 CC7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_030)
{
    // 4C7B 003F;	
    // (䱻) CJK UNIFIED IDEOGRAPH-4C7B	[FB80 CC7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_031)
{
    // 4C7B 0061;	
    // (䱻) CJK UNIFIED IDEOGRAPH-4C7B	[FB80 CC7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_032)
{
    // 4C7B 0041;	
    // (䱻) CJK UNIFIED IDEOGRAPH-4C7B	[FB80 CC7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C7B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_033)
{
    // 4C7B 0062;	
    // (䱻) CJK UNIFIED IDEOGRAPH-4C7B	[FB80 CC7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_034)
{
    // 4C7C 0021;	
    // (䱼) CJK UNIFIED IDEOGRAPH-4C7C	[FB80 CC7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_035)
{
    // 4C7C 003F;	
    // (䱼) CJK UNIFIED IDEOGRAPH-4C7C	[FB80 CC7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_036)
{
    // 4C7C 0061;	
    // (䱼) CJK UNIFIED IDEOGRAPH-4C7C	[FB80 CC7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_037)
{
    // 4C7C 0041;	
    // (䱼) CJK UNIFIED IDEOGRAPH-4C7C	[FB80 CC7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C7C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_038)
{
    // 4C7C 0062;	
    // (䱼) CJK UNIFIED IDEOGRAPH-4C7C	[FB80 CC7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_039)
{
    // 4C7D 0021;	
    // (䱽) CJK UNIFIED IDEOGRAPH-4C7D	[FB80 CC7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_040)
{
    // 4C7D 003F;	
    // (䱽) CJK UNIFIED IDEOGRAPH-4C7D	[FB80 CC7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_041)
{
    // 4C7D 0061;	
    // (䱽) CJK UNIFIED IDEOGRAPH-4C7D	[FB80 CC7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_042)
{
    // 4C7D 0041;	
    // (䱽) CJK UNIFIED IDEOGRAPH-4C7D	[FB80 CC7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C7D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_043)
{
    // 4C7D 0062;	
    // (䱽) CJK UNIFIED IDEOGRAPH-4C7D	[FB80 CC7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_044)
{
    // 4C7E 0021;	
    // (䱾) CJK UNIFIED IDEOGRAPH-4C7E	[FB80 CC7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_045)
{
    // 4C7E 003F;	
    // (䱾) CJK UNIFIED IDEOGRAPH-4C7E	[FB80 CC7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_046)
{
    // 4C7E 0061;	
    // (䱾) CJK UNIFIED IDEOGRAPH-4C7E	[FB80 CC7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_047)
{
    // 4C7E 0041;	
    // (䱾) CJK UNIFIED IDEOGRAPH-4C7E	[FB80 CC7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C7E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_048)
{
    // 4C7E 0062;	
    // (䱾) CJK UNIFIED IDEOGRAPH-4C7E	[FB80 CC7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_049)
{
    // 4C7F 0021;	
    // (䱿) CJK UNIFIED IDEOGRAPH-4C7F	[FB80 CC7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_050)
{
    // 4C7F 003F;	
    // (䱿) CJK UNIFIED IDEOGRAPH-4C7F	[FB80 CC7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_051)
{
    // 4C7F 0061;	
    // (䱿) CJK UNIFIED IDEOGRAPH-4C7F	[FB80 CC7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_052)
{
    // 4C7F 0041;	
    // (䱿) CJK UNIFIED IDEOGRAPH-4C7F	[FB80 CC7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C7F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_053)
{
    // 4C7F 0062;	
    // (䱿) CJK UNIFIED IDEOGRAPH-4C7F	[FB80 CC7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C7F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_054)
{
    // 4C80 0021;	
    // (䲀) CJK UNIFIED IDEOGRAPH-4C80	[FB80 CC80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C80, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_055)
{
    // 4C80 003F;	
    // (䲀) CJK UNIFIED IDEOGRAPH-4C80	[FB80 CC80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C80, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_056)
{
    // 4C80 0061;	
    // (䲀) CJK UNIFIED IDEOGRAPH-4C80	[FB80 CC80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C80, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_057)
{
    // 4C80 0041;	
    // (䲀) CJK UNIFIED IDEOGRAPH-4C80	[FB80 CC80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C80, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_058)
{
    // 4C80 0062;	
    // (䲀) CJK UNIFIED IDEOGRAPH-4C80	[FB80 CC80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C80, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_059)
{
    // 4C81 0021;	
    // (䲁) CJK UNIFIED IDEOGRAPH-4C81	[FB80 CC81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C81, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_060)
{
    // 4C81 003F;	
    // (䲁) CJK UNIFIED IDEOGRAPH-4C81	[FB80 CC81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C81, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_061)
{
    // 4C81 0061;	
    // (䲁) CJK UNIFIED IDEOGRAPH-4C81	[FB80 CC81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C81, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_062)
{
    // 4C81 0041;	
    // (䲁) CJK UNIFIED IDEOGRAPH-4C81	[FB80 CC81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C81, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_063)
{
    // 4C81 0062;	
    // (䲁) CJK UNIFIED IDEOGRAPH-4C81	[FB80 CC81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C81, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_064)
{
    // 4C82 0021;	
    // (䲂) CJK UNIFIED IDEOGRAPH-4C82	[FB80 CC82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C82, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_065)
{
    // 4C82 003F;	
    // (䲂) CJK UNIFIED IDEOGRAPH-4C82	[FB80 CC82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C82, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_066)
{
    // 4C82 0061;	
    // (䲂) CJK UNIFIED IDEOGRAPH-4C82	[FB80 CC82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C82, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_067)
{
    // 4C82 0041;	
    // (䲂) CJK UNIFIED IDEOGRAPH-4C82	[FB80 CC82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C82, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_068)
{
    // 4C82 0062;	
    // (䲂) CJK UNIFIED IDEOGRAPH-4C82	[FB80 CC82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C82, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_069)
{
    // 4C83 0021;	
    // (䲃) CJK UNIFIED IDEOGRAPH-4C83	[FB80 CC83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C83, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_070)
{
    // 4C83 003F;	
    // (䲃) CJK UNIFIED IDEOGRAPH-4C83	[FB80 CC83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C83, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_071)
{
    // 4C83 0061;	
    // (䲃) CJK UNIFIED IDEOGRAPH-4C83	[FB80 CC83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C83, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_072)
{
    // 4C83 0041;	
    // (䲃) CJK UNIFIED IDEOGRAPH-4C83	[FB80 CC83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C83, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_073)
{
    // 4C83 0062;	
    // (䲃) CJK UNIFIED IDEOGRAPH-4C83	[FB80 CC83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C83, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_074)
{
    // 4C84 0021;	
    // (䲄) CJK UNIFIED IDEOGRAPH-4C84	[FB80 CC84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C84, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_075)
{
    // 4C84 003F;	
    // (䲄) CJK UNIFIED IDEOGRAPH-4C84	[FB80 CC84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C84, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_076)
{
    // 4C84 0061;	
    // (䲄) CJK UNIFIED IDEOGRAPH-4C84	[FB80 CC84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C84, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_077)
{
    // 4C84 0041;	
    // (䲄) CJK UNIFIED IDEOGRAPH-4C84	[FB80 CC84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C84, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_078)
{
    // 4C84 0062;	
    // (䲄) CJK UNIFIED IDEOGRAPH-4C84	[FB80 CC84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C84, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_079)
{
    // 4C85 0021;	
    // (䲅) CJK UNIFIED IDEOGRAPH-4C85	[FB80 CC85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C85, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_080)
{
    // 4C85 003F;	
    // (䲅) CJK UNIFIED IDEOGRAPH-4C85	[FB80 CC85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C85, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_081)
{
    // 4C85 0061;	
    // (䲅) CJK UNIFIED IDEOGRAPH-4C85	[FB80 CC85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C85, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_082)
{
    // 4C85 0041;	
    // (䲅) CJK UNIFIED IDEOGRAPH-4C85	[FB80 CC85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C85, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_083)
{
    // 4C85 0062;	
    // (䲅) CJK UNIFIED IDEOGRAPH-4C85	[FB80 CC85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C85, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_084)
{
    // 4C86 0021;	
    // (䲆) CJK UNIFIED IDEOGRAPH-4C86	[FB80 CC86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C86, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_085)
{
    // 4C86 003F;	
    // (䲆) CJK UNIFIED IDEOGRAPH-4C86	[FB80 CC86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C86, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_086)
{
    // 4C86 0061;	
    // (䲆) CJK UNIFIED IDEOGRAPH-4C86	[FB80 CC86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C86, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_087)
{
    // 4C86 0041;	
    // (䲆) CJK UNIFIED IDEOGRAPH-4C86	[FB80 CC86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C86, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_088)
{
    // 4C86 0062;	
    // (䲆) CJK UNIFIED IDEOGRAPH-4C86	[FB80 CC86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C86, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_089)
{
    // 4C87 0021;	
    // (䲇) CJK UNIFIED IDEOGRAPH-4C87	[FB80 CC87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C87, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_090)
{
    // 4C87 003F;	
    // (䲇) CJK UNIFIED IDEOGRAPH-4C87	[FB80 CC87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C87, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_091)
{
    // 4C87 0061;	
    // (䲇) CJK UNIFIED IDEOGRAPH-4C87	[FB80 CC87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C87, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_092)
{
    // 4C87 0041;	
    // (䲇) CJK UNIFIED IDEOGRAPH-4C87	[FB80 CC87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C87, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_093)
{
    // 4C87 0062;	
    // (䲇) CJK UNIFIED IDEOGRAPH-4C87	[FB80 CC87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C87, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_094)
{
    // 4C88 0021;	
    // (䲈) CJK UNIFIED IDEOGRAPH-4C88	[FB80 CC88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C88, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_095)
{
    // 4C88 003F;	
    // (䲈) CJK UNIFIED IDEOGRAPH-4C88	[FB80 CC88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C88, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_096)
{
    // 4C88 0061;	
    // (䲈) CJK UNIFIED IDEOGRAPH-4C88	[FB80 CC88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C88, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_097)
{
    // 4C88 0041;	
    // (䲈) CJK UNIFIED IDEOGRAPH-4C88	[FB80 CC88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C88, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_098)
{
    // 4C88 0062;	
    // (䲈) CJK UNIFIED IDEOGRAPH-4C88	[FB80 CC88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C88, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_099)
{
    // 4C89 0021;	
    // (䲉) CJK UNIFIED IDEOGRAPH-4C89	[FB80 CC89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C89, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_100)
{
    // 4C89 003F;	
    // (䲉) CJK UNIFIED IDEOGRAPH-4C89	[FB80 CC89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C89, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_101)
{
    // 4C89 0061;	
    // (䲉) CJK UNIFIED IDEOGRAPH-4C89	[FB80 CC89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C89, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_102)
{
    // 4C89 0041;	
    // (䲉) CJK UNIFIED IDEOGRAPH-4C89	[FB80 CC89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C89, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_103)
{
    // 4C89 0062;	
    // (䲉) CJK UNIFIED IDEOGRAPH-4C89	[FB80 CC89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C89, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_104)
{
    // 4C8A 0021;	
    // (䲊) CJK UNIFIED IDEOGRAPH-4C8A	[FB80 CC8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_105)
{
    // 4C8A 003F;	
    // (䲊) CJK UNIFIED IDEOGRAPH-4C8A	[FB80 CC8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_106)
{
    // 4C8A 0061;	
    // (䲊) CJK UNIFIED IDEOGRAPH-4C8A	[FB80 CC8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_107)
{
    // 4C8A 0041;	
    // (䲊) CJK UNIFIED IDEOGRAPH-4C8A	[FB80 CC8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C8A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_108)
{
    // 4C8A 0062;	
    // (䲊) CJK UNIFIED IDEOGRAPH-4C8A	[FB80 CC8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_109)
{
    // 4C8B 0021;	
    // (䲋) CJK UNIFIED IDEOGRAPH-4C8B	[FB80 CC8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_110)
{
    // 4C8B 003F;	
    // (䲋) CJK UNIFIED IDEOGRAPH-4C8B	[FB80 CC8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_111)
{
    // 4C8B 0061;	
    // (䲋) CJK UNIFIED IDEOGRAPH-4C8B	[FB80 CC8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_112)
{
    // 4C8B 0041;	
    // (䲋) CJK UNIFIED IDEOGRAPH-4C8B	[FB80 CC8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C8B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_113)
{
    // 4C8B 0062;	
    // (䲋) CJK UNIFIED IDEOGRAPH-4C8B	[FB80 CC8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_114)
{
    // 4C8C 0021;	
    // (䲌) CJK UNIFIED IDEOGRAPH-4C8C	[FB80 CC8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_115)
{
    // 4C8C 003F;	
    // (䲌) CJK UNIFIED IDEOGRAPH-4C8C	[FB80 CC8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_116)
{
    // 4C8C 0061;	
    // (䲌) CJK UNIFIED IDEOGRAPH-4C8C	[FB80 CC8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_117)
{
    // 4C8C 0041;	
    // (䲌) CJK UNIFIED IDEOGRAPH-4C8C	[FB80 CC8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C8C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_118)
{
    // 4C8C 0062;	
    // (䲌) CJK UNIFIED IDEOGRAPH-4C8C	[FB80 CC8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_119)
{
    // 4C8D 0021;	
    // (䲍) CJK UNIFIED IDEOGRAPH-4C8D	[FB80 CC8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_120)
{
    // 4C8D 003F;	
    // (䲍) CJK UNIFIED IDEOGRAPH-4C8D	[FB80 CC8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_121)
{
    // 4C8D 0061;	
    // (䲍) CJK UNIFIED IDEOGRAPH-4C8D	[FB80 CC8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_122)
{
    // 4C8D 0041;	
    // (䲍) CJK UNIFIED IDEOGRAPH-4C8D	[FB80 CC8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C8D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_123)
{
    // 4C8D 0062;	
    // (䲍) CJK UNIFIED IDEOGRAPH-4C8D	[FB80 CC8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_124)
{
    // 4C8E 0021;	
    // (䲎) CJK UNIFIED IDEOGRAPH-4C8E	[FB80 CC8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_125)
{
    // 4C8E 003F;	
    // (䲎) CJK UNIFIED IDEOGRAPH-4C8E	[FB80 CC8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_126)
{
    // 4C8E 0061;	
    // (䲎) CJK UNIFIED IDEOGRAPH-4C8E	[FB80 CC8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_127)
{
    // 4C8E 0041;	
    // (䲎) CJK UNIFIED IDEOGRAPH-4C8E	[FB80 CC8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C8E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_128)
{
    // 4C8E 0062;	
    // (䲎) CJK UNIFIED IDEOGRAPH-4C8E	[FB80 CC8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_129)
{
    // 4C8F 0021;	
    // (䲏) CJK UNIFIED IDEOGRAPH-4C8F	[FB80 CC8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_130)
{
    // 4C8F 003F;	
    // (䲏) CJK UNIFIED IDEOGRAPH-4C8F	[FB80 CC8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_131)
{
    // 4C8F 0061;	
    // (䲏) CJK UNIFIED IDEOGRAPH-4C8F	[FB80 CC8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_132)
{
    // 4C8F 0041;	
    // (䲏) CJK UNIFIED IDEOGRAPH-4C8F	[FB80 CC8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C8F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_133)
{
    // 4C8F 0062;	
    // (䲏) CJK UNIFIED IDEOGRAPH-4C8F	[FB80 CC8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C8F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_134)
{
    // 4C90 0021;	
    // (䲐) CJK UNIFIED IDEOGRAPH-4C90	[FB80 CC90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C90, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_135)
{
    // 4C90 003F;	
    // (䲐) CJK UNIFIED IDEOGRAPH-4C90	[FB80 CC90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C90, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_136)
{
    // 4C90 0061;	
    // (䲐) CJK UNIFIED IDEOGRAPH-4C90	[FB80 CC90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C90, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_137)
{
    // 4C90 0041;	
    // (䲐) CJK UNIFIED IDEOGRAPH-4C90	[FB80 CC90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C90, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_138)
{
    // 4C90 0062;	
    // (䲐) CJK UNIFIED IDEOGRAPH-4C90	[FB80 CC90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C90, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_139)
{
    // 4C91 0021;	
    // (䲑) CJK UNIFIED IDEOGRAPH-4C91	[FB80 CC91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C91, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_140)
{
    // 4C91 003F;	
    // (䲑) CJK UNIFIED IDEOGRAPH-4C91	[FB80 CC91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C91, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_141)
{
    // 4C91 0061;	
    // (䲑) CJK UNIFIED IDEOGRAPH-4C91	[FB80 CC91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C91, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_142)
{
    // 4C91 0041;	
    // (䲑) CJK UNIFIED IDEOGRAPH-4C91	[FB80 CC91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C91, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_143)
{
    // 4C91 0062;	
    // (䲑) CJK UNIFIED IDEOGRAPH-4C91	[FB80 CC91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C91, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_144)
{
    // 4C92 0021;	
    // (䲒) CJK UNIFIED IDEOGRAPH-4C92	[FB80 CC92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C92, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_145)
{
    // 4C92 003F;	
    // (䲒) CJK UNIFIED IDEOGRAPH-4C92	[FB80 CC92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C92, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_146)
{
    // 4C92 0061;	
    // (䲒) CJK UNIFIED IDEOGRAPH-4C92	[FB80 CC92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C92, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_147)
{
    // 4C92 0041;	
    // (䲒) CJK UNIFIED IDEOGRAPH-4C92	[FB80 CC92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C92, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_148)
{
    // 4C92 0062;	
    // (䲒) CJK UNIFIED IDEOGRAPH-4C92	[FB80 CC92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C92, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_149)
{
    // 4C93 0021;	
    // (䲓) CJK UNIFIED IDEOGRAPH-4C93	[FB80 CC93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C93, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_150)
{
    // 4C93 003F;	
    // (䲓) CJK UNIFIED IDEOGRAPH-4C93	[FB80 CC93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C93, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_151)
{
    // 4C93 0061;	
    // (䲓) CJK UNIFIED IDEOGRAPH-4C93	[FB80 CC93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C93, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_152)
{
    // 4C93 0041;	
    // (䲓) CJK UNIFIED IDEOGRAPH-4C93	[FB80 CC93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C93, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_153)
{
    // 4C93 0062;	
    // (䲓) CJK UNIFIED IDEOGRAPH-4C93	[FB80 CC93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C93, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_154)
{
    // 4C94 0021;	
    // (䲔) CJK UNIFIED IDEOGRAPH-4C94	[FB80 CC94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C94, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_155)
{
    // 4C94 003F;	
    // (䲔) CJK UNIFIED IDEOGRAPH-4C94	[FB80 CC94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C94, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_156)
{
    // 4C94 0061;	
    // (䲔) CJK UNIFIED IDEOGRAPH-4C94	[FB80 CC94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C94, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_157)
{
    // 4C94 0041;	
    // (䲔) CJK UNIFIED IDEOGRAPH-4C94	[FB80 CC94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C94, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_158)
{
    // 4C94 0062;	
    // (䲔) CJK UNIFIED IDEOGRAPH-4C94	[FB80 CC94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C94, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_159)
{
    // 4C95 0021;	
    // (䲕) CJK UNIFIED IDEOGRAPH-4C95	[FB80 CC95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C95, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_160)
{
    // 4C95 003F;	
    // (䲕) CJK UNIFIED IDEOGRAPH-4C95	[FB80 CC95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C95, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_161)
{
    // 4C95 0061;	
    // (䲕) CJK UNIFIED IDEOGRAPH-4C95	[FB80 CC95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C95, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_162)
{
    // 4C95 0041;	
    // (䲕) CJK UNIFIED IDEOGRAPH-4C95	[FB80 CC95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C95, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_163)
{
    // 4C95 0062;	
    // (䲕) CJK UNIFIED IDEOGRAPH-4C95	[FB80 CC95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C95, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_164)
{
    // 4C96 0021;	
    // (䲖) CJK UNIFIED IDEOGRAPH-4C96	[FB80 CC96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C96, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_165)
{
    // 4C96 003F;	
    // (䲖) CJK UNIFIED IDEOGRAPH-4C96	[FB80 CC96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C96, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_166)
{
    // 4C96 0061;	
    // (䲖) CJK UNIFIED IDEOGRAPH-4C96	[FB80 CC96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C96, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_167)
{
    // 4C96 0041;	
    // (䲖) CJK UNIFIED IDEOGRAPH-4C96	[FB80 CC96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C96, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_168)
{
    // 4C96 0062;	
    // (䲖) CJK UNIFIED IDEOGRAPH-4C96	[FB80 CC96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C96, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_169)
{
    // 4C97 0021;	
    // (䲗) CJK UNIFIED IDEOGRAPH-4C97	[FB80 CC97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C97, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_170)
{
    // 4C97 003F;	
    // (䲗) CJK UNIFIED IDEOGRAPH-4C97	[FB80 CC97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C97, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_171)
{
    // 4C97 0061;	
    // (䲗) CJK UNIFIED IDEOGRAPH-4C97	[FB80 CC97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C97, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_172)
{
    // 4C97 0041;	
    // (䲗) CJK UNIFIED IDEOGRAPH-4C97	[FB80 CC97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C97, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_173)
{
    // 4C97 0062;	
    // (䲗) CJK UNIFIED IDEOGRAPH-4C97	[FB80 CC97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C97, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_174)
{
    // 4C98 0021;	
    // (䲘) CJK UNIFIED IDEOGRAPH-4C98	[FB80 CC98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C98, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_175)
{
    // 4C98 003F;	
    // (䲘) CJK UNIFIED IDEOGRAPH-4C98	[FB80 CC98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C98, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_176)
{
    // 4C98 0061;	
    // (䲘) CJK UNIFIED IDEOGRAPH-4C98	[FB80 CC98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C98, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_177)
{
    // 4C98 0041;	
    // (䲘) CJK UNIFIED IDEOGRAPH-4C98	[FB80 CC98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C98, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_178)
{
    // 4C98 0062;	
    // (䲘) CJK UNIFIED IDEOGRAPH-4C98	[FB80 CC98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C98, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_179)
{
    // 4C99 0021;	
    // (䲙) CJK UNIFIED IDEOGRAPH-4C99	[FB80 CC99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C99, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_180)
{
    // 4C99 003F;	
    // (䲙) CJK UNIFIED IDEOGRAPH-4C99	[FB80 CC99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C99, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_181)
{
    // 4C99 0061;	
    // (䲙) CJK UNIFIED IDEOGRAPH-4C99	[FB80 CC99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C99, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_182)
{
    // 4C99 0041;	
    // (䲙) CJK UNIFIED IDEOGRAPH-4C99	[FB80 CC99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C99, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_183)
{
    // 4C99 0062;	
    // (䲙) CJK UNIFIED IDEOGRAPH-4C99	[FB80 CC99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C99, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_184)
{
    // 4C9A 0021;	
    // (䲚) CJK UNIFIED IDEOGRAPH-4C9A	[FB80 CC9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_185)
{
    // 4C9A 003F;	
    // (䲚) CJK UNIFIED IDEOGRAPH-4C9A	[FB80 CC9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_186)
{
    // 4C9A 0061;	
    // (䲚) CJK UNIFIED IDEOGRAPH-4C9A	[FB80 CC9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_187)
{
    // 4C9A 0041;	
    // (䲚) CJK UNIFIED IDEOGRAPH-4C9A	[FB80 CC9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C9A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_188)
{
    // 4C9A 0062;	
    // (䲚) CJK UNIFIED IDEOGRAPH-4C9A	[FB80 CC9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_189)
{
    // 4C9B 0021;	
    // (䲛) CJK UNIFIED IDEOGRAPH-4C9B	[FB80 CC9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_190)
{
    // 4C9B 003F;	
    // (䲛) CJK UNIFIED IDEOGRAPH-4C9B	[FB80 CC9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_191)
{
    // 4C9B 0061;	
    // (䲛) CJK UNIFIED IDEOGRAPH-4C9B	[FB80 CC9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_192)
{
    // 4C9B 0041;	
    // (䲛) CJK UNIFIED IDEOGRAPH-4C9B	[FB80 CC9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C9B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_193)
{
    // 4C9B 0062;	
    // (䲛) CJK UNIFIED IDEOGRAPH-4C9B	[FB80 CC9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_194)
{
    // 4C9C 0021;	
    // (䲜) CJK UNIFIED IDEOGRAPH-4C9C	[FB80 CC9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_195)
{
    // 4C9C 003F;	
    // (䲜) CJK UNIFIED IDEOGRAPH-4C9C	[FB80 CC9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_196)
{
    // 4C9C 0061;	
    // (䲜) CJK UNIFIED IDEOGRAPH-4C9C	[FB80 CC9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_197)
{
    // 4C9C 0041;	
    // (䲜) CJK UNIFIED IDEOGRAPH-4C9C	[FB80 CC9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C9C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_198)
{
    // 4C9C 0062;	
    // (䲜) CJK UNIFIED IDEOGRAPH-4C9C	[FB80 CC9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_199)
{
    // 4C9D 0021;	
    // (䲝) CJK UNIFIED IDEOGRAPH-4C9D	[FB80 CC9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_200)
{
    // 4C9D 003F;	
    // (䲝) CJK UNIFIED IDEOGRAPH-4C9D	[FB80 CC9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_201)
{
    // 4C9D 0061;	
    // (䲝) CJK UNIFIED IDEOGRAPH-4C9D	[FB80 CC9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_202)
{
    // 4C9D 0041;	
    // (䲝) CJK UNIFIED IDEOGRAPH-4C9D	[FB80 CC9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C9D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_203)
{
    // 4C9D 0062;	
    // (䲝) CJK UNIFIED IDEOGRAPH-4C9D	[FB80 CC9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_204)
{
    // 4C9E 0021;	
    // (䲞) CJK UNIFIED IDEOGRAPH-4C9E	[FB80 CC9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_205)
{
    // 4C9E 003F;	
    // (䲞) CJK UNIFIED IDEOGRAPH-4C9E	[FB80 CC9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_206)
{
    // 4C9E 0061;	
    // (䲞) CJK UNIFIED IDEOGRAPH-4C9E	[FB80 CC9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_207)
{
    // 4C9E 0041;	
    // (䲞) CJK UNIFIED IDEOGRAPH-4C9E	[FB80 CC9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C9E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_208)
{
    // 4C9E 0062;	
    // (䲞) CJK UNIFIED IDEOGRAPH-4C9E	[FB80 CC9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_209)
{
    // 4C9F 0021;	
    // (䲟) CJK UNIFIED IDEOGRAPH-4C9F	[FB80 CC9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_210)
{
    // 4C9F 003F;	
    // (䲟) CJK UNIFIED IDEOGRAPH-4C9F	[FB80 CC9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCC9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_211)
{
    // 4C9F 0061;	
    // (䲟) CJK UNIFIED IDEOGRAPH-4C9F	[FB80 CC9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_212)
{
    // 4C9F 0041;	
    // (䲟) CJK UNIFIED IDEOGRAPH-4C9F	[FB80 CC9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4C9F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_213)
{
    // 4C9F 0062;	
    // (䲟) CJK UNIFIED IDEOGRAPH-4C9F	[FB80 CC9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4C9F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCC9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_214)
{
    // 4CA0 0021;	
    // (䲠) CJK UNIFIED IDEOGRAPH-4CA0	[FB80 CCA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_215)
{
    // 4CA0 003F;	
    // (䲠) CJK UNIFIED IDEOGRAPH-4CA0	[FB80 CCA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_216)
{
    // 4CA0 0061;	
    // (䲠) CJK UNIFIED IDEOGRAPH-4CA0	[FB80 CCA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_217)
{
    // 4CA0 0041;	
    // (䲠) CJK UNIFIED IDEOGRAPH-4CA0	[FB80 CCA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CA0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_218)
{
    // 4CA0 0062;	
    // (䲠) CJK UNIFIED IDEOGRAPH-4CA0	[FB80 CCA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_219)
{
    // 4CA1 0021;	
    // (䲡) CJK UNIFIED IDEOGRAPH-4CA1	[FB80 CCA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_220)
{
    // 4CA1 003F;	
    // (䲡) CJK UNIFIED IDEOGRAPH-4CA1	[FB80 CCA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_221)
{
    // 4CA1 0061;	
    // (䲡) CJK UNIFIED IDEOGRAPH-4CA1	[FB80 CCA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_222)
{
    // 4CA1 0041;	
    // (䲡) CJK UNIFIED IDEOGRAPH-4CA1	[FB80 CCA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CA1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_223)
{
    // 4CA1 0062;	
    // (䲡) CJK UNIFIED IDEOGRAPH-4CA1	[FB80 CCA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_224)
{
    // 4CA2 0021;	
    // (䲢) CJK UNIFIED IDEOGRAPH-4CA2	[FB80 CCA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_225)
{
    // 4CA2 003F;	
    // (䲢) CJK UNIFIED IDEOGRAPH-4CA2	[FB80 CCA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_226)
{
    // 4CA2 0061;	
    // (䲢) CJK UNIFIED IDEOGRAPH-4CA2	[FB80 CCA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_227)
{
    // 4CA2 0041;	
    // (䲢) CJK UNIFIED IDEOGRAPH-4CA2	[FB80 CCA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CA2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_228)
{
    // 4CA2 0062;	
    // (䲢) CJK UNIFIED IDEOGRAPH-4CA2	[FB80 CCA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_229)
{
    // 4CA3 0021;	
    // (䲣) CJK UNIFIED IDEOGRAPH-4CA3	[FB80 CCA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_230)
{
    // 4CA3 003F;	
    // (䲣) CJK UNIFIED IDEOGRAPH-4CA3	[FB80 CCA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_231)
{
    // 4CA3 0061;	
    // (䲣) CJK UNIFIED IDEOGRAPH-4CA3	[FB80 CCA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_232)
{
    // 4CA3 0041;	
    // (䲣) CJK UNIFIED IDEOGRAPH-4CA3	[FB80 CCA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CA3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_233)
{
    // 4CA3 0062;	
    // (䲣) CJK UNIFIED IDEOGRAPH-4CA3	[FB80 CCA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_234)
{
    // 4CA4 0021;	
    // (䲤) CJK UNIFIED IDEOGRAPH-4CA4	[FB80 CCA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_235)
{
    // 4CA4 003F;	
    // (䲤) CJK UNIFIED IDEOGRAPH-4CA4	[FB80 CCA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_236)
{
    // 4CA4 0061;	
    // (䲤) CJK UNIFIED IDEOGRAPH-4CA4	[FB80 CCA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_237)
{
    // 4CA4 0041;	
    // (䲤) CJK UNIFIED IDEOGRAPH-4CA4	[FB80 CCA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CA4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_238)
{
    // 4CA4 0062;	
    // (䲤) CJK UNIFIED IDEOGRAPH-4CA4	[FB80 CCA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_239)
{
    // 4CA5 0021;	
    // (䲥) CJK UNIFIED IDEOGRAPH-4CA5	[FB80 CCA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_240)
{
    // 4CA5 003F;	
    // (䲥) CJK UNIFIED IDEOGRAPH-4CA5	[FB80 CCA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_241)
{
    // 4CA5 0061;	
    // (䲥) CJK UNIFIED IDEOGRAPH-4CA5	[FB80 CCA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_242)
{
    // 4CA5 0041;	
    // (䲥) CJK UNIFIED IDEOGRAPH-4CA5	[FB80 CCA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CA5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_243)
{
    // 4CA5 0062;	
    // (䲥) CJK UNIFIED IDEOGRAPH-4CA5	[FB80 CCA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_244)
{
    // 4CA6 0021;	
    // (䲦) CJK UNIFIED IDEOGRAPH-4CA6	[FB80 CCA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_245)
{
    // 4CA6 003F;	
    // (䲦) CJK UNIFIED IDEOGRAPH-4CA6	[FB80 CCA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_246)
{
    // 4CA6 0061;	
    // (䲦) CJK UNIFIED IDEOGRAPH-4CA6	[FB80 CCA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_247)
{
    // 4CA6 0041;	
    // (䲦) CJK UNIFIED IDEOGRAPH-4CA6	[FB80 CCA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CA6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_248)
{
    // 4CA6 0062;	
    // (䲦) CJK UNIFIED IDEOGRAPH-4CA6	[FB80 CCA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_249)
{
    // 4CA7 0021;	
    // (䲧) CJK UNIFIED IDEOGRAPH-4CA7	[FB80 CCA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_250)
{
    // 4CA7 003F;	
    // (䲧) CJK UNIFIED IDEOGRAPH-4CA7	[FB80 CCA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_251)
{
    // 4CA7 0061;	
    // (䲧) CJK UNIFIED IDEOGRAPH-4CA7	[FB80 CCA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_252)
{
    // 4CA7 0041;	
    // (䲧) CJK UNIFIED IDEOGRAPH-4CA7	[FB80 CCA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CA7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_253)
{
    // 4CA7 0062;	
    // (䲧) CJK UNIFIED IDEOGRAPH-4CA7	[FB80 CCA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_254)
{
    // 4CA8 0021;	
    // (䲨) CJK UNIFIED IDEOGRAPH-4CA8	[FB80 CCA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_255)
{
    // 4CA8 003F;	
    // (䲨) CJK UNIFIED IDEOGRAPH-4CA8	[FB80 CCA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_256)
{
    // 4CA8 0061;	
    // (䲨) CJK UNIFIED IDEOGRAPH-4CA8	[FB80 CCA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_257)
{
    // 4CA8 0041;	
    // (䲨) CJK UNIFIED IDEOGRAPH-4CA8	[FB80 CCA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CA8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_258)
{
    // 4CA8 0062;	
    // (䲨) CJK UNIFIED IDEOGRAPH-4CA8	[FB80 CCA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_259)
{
    // 4CA9 0021;	
    // (䲩) CJK UNIFIED IDEOGRAPH-4CA9	[FB80 CCA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_260)
{
    // 4CA9 003F;	
    // (䲩) CJK UNIFIED IDEOGRAPH-4CA9	[FB80 CCA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_261)
{
    // 4CA9 0061;	
    // (䲩) CJK UNIFIED IDEOGRAPH-4CA9	[FB80 CCA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_262)
{
    // 4CA9 0041;	
    // (䲩) CJK UNIFIED IDEOGRAPH-4CA9	[FB80 CCA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CA9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_263)
{
    // 4CA9 0062;	
    // (䲩) CJK UNIFIED IDEOGRAPH-4CA9	[FB80 CCA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CA9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_264)
{
    // 4CAA 0021;	
    // (䲪) CJK UNIFIED IDEOGRAPH-4CAA	[FB80 CCAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_265)
{
    // 4CAA 003F;	
    // (䲪) CJK UNIFIED IDEOGRAPH-4CAA	[FB80 CCAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_266)
{
    // 4CAA 0061;	
    // (䲪) CJK UNIFIED IDEOGRAPH-4CAA	[FB80 CCAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_267)
{
    // 4CAA 0041;	
    // (䲪) CJK UNIFIED IDEOGRAPH-4CAA	[FB80 CCAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CAA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_268)
{
    // 4CAA 0062;	
    // (䲪) CJK UNIFIED IDEOGRAPH-4CAA	[FB80 CCAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_269)
{
    // 4CAB 0021;	
    // (䲫) CJK UNIFIED IDEOGRAPH-4CAB	[FB80 CCAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_270)
{
    // 4CAB 003F;	
    // (䲫) CJK UNIFIED IDEOGRAPH-4CAB	[FB80 CCAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_271)
{
    // 4CAB 0061;	
    // (䲫) CJK UNIFIED IDEOGRAPH-4CAB	[FB80 CCAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_272)
{
    // 4CAB 0041;	
    // (䲫) CJK UNIFIED IDEOGRAPH-4CAB	[FB80 CCAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CAB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_273)
{
    // 4CAB 0062;	
    // (䲫) CJK UNIFIED IDEOGRAPH-4CAB	[FB80 CCAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_274)
{
    // 4CAC 0021;	
    // (䲬) CJK UNIFIED IDEOGRAPH-4CAC	[FB80 CCAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_275)
{
    // 4CAC 003F;	
    // (䲬) CJK UNIFIED IDEOGRAPH-4CAC	[FB80 CCAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_276)
{
    // 4CAC 0061;	
    // (䲬) CJK UNIFIED IDEOGRAPH-4CAC	[FB80 CCAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_277)
{
    // 4CAC 0041;	
    // (䲬) CJK UNIFIED IDEOGRAPH-4CAC	[FB80 CCAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CAC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_278)
{
    // 4CAC 0062;	
    // (䲬) CJK UNIFIED IDEOGRAPH-4CAC	[FB80 CCAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_279)
{
    // 4CAD 0021;	
    // (䲭) CJK UNIFIED IDEOGRAPH-4CAD	[FB80 CCAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_280)
{
    // 4CAD 003F;	
    // (䲭) CJK UNIFIED IDEOGRAPH-4CAD	[FB80 CCAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_281)
{
    // 4CAD 0061;	
    // (䲭) CJK UNIFIED IDEOGRAPH-4CAD	[FB80 CCAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_282)
{
    // 4CAD 0041;	
    // (䲭) CJK UNIFIED IDEOGRAPH-4CAD	[FB80 CCAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CAD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_283)
{
    // 4CAD 0062;	
    // (䲭) CJK UNIFIED IDEOGRAPH-4CAD	[FB80 CCAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_284)
{
    // 4CAE 0021;	
    // (䲮) CJK UNIFIED IDEOGRAPH-4CAE	[FB80 CCAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_285)
{
    // 4CAE 003F;	
    // (䲮) CJK UNIFIED IDEOGRAPH-4CAE	[FB80 CCAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_286)
{
    // 4CAE 0061;	
    // (䲮) CJK UNIFIED IDEOGRAPH-4CAE	[FB80 CCAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_287)
{
    // 4CAE 0041;	
    // (䲮) CJK UNIFIED IDEOGRAPH-4CAE	[FB80 CCAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CAE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_288)
{
    // 4CAE 0062;	
    // (䲮) CJK UNIFIED IDEOGRAPH-4CAE	[FB80 CCAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_289)
{
    // 4CAF 0021;	
    // (䲯) CJK UNIFIED IDEOGRAPH-4CAF	[FB80 CCAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_290)
{
    // 4CAF 003F;	
    // (䲯) CJK UNIFIED IDEOGRAPH-4CAF	[FB80 CCAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_291)
{
    // 4CAF 0061;	
    // (䲯) CJK UNIFIED IDEOGRAPH-4CAF	[FB80 CCAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_292)
{
    // 4CAF 0041;	
    // (䲯) CJK UNIFIED IDEOGRAPH-4CAF	[FB80 CCAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CAF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_293)
{
    // 4CAF 0062;	
    // (䲯) CJK UNIFIED IDEOGRAPH-4CAF	[FB80 CCAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CAF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_294)
{
    // 4CB0 0021;	
    // (䲰) CJK UNIFIED IDEOGRAPH-4CB0	[FB80 CCB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_295)
{
    // 4CB0 003F;	
    // (䲰) CJK UNIFIED IDEOGRAPH-4CB0	[FB80 CCB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_296)
{
    // 4CB0 0061;	
    // (䲰) CJK UNIFIED IDEOGRAPH-4CB0	[FB80 CCB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_297)
{
    // 4CB0 0041;	
    // (䲰) CJK UNIFIED IDEOGRAPH-4CB0	[FB80 CCB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CB0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_298)
{
    // 4CB0 0062;	
    // (䲰) CJK UNIFIED IDEOGRAPH-4CB0	[FB80 CCB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_299)
{
    // 4CB1 0021;	
    // (䲱) CJK UNIFIED IDEOGRAPH-4CB1	[FB80 CCB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_300)
{
    // 4CB1 003F;	
    // (䲱) CJK UNIFIED IDEOGRAPH-4CB1	[FB80 CCB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_301)
{
    // 4CB1 0061;	
    // (䲱) CJK UNIFIED IDEOGRAPH-4CB1	[FB80 CCB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_302)
{
    // 4CB1 0041;	
    // (䲱) CJK UNIFIED IDEOGRAPH-4CB1	[FB80 CCB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CB1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_303)
{
    // 4CB1 0062;	
    // (䲱) CJK UNIFIED IDEOGRAPH-4CB1	[FB80 CCB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_304)
{
    // 4CB2 0021;	
    // (䲲) CJK UNIFIED IDEOGRAPH-4CB2	[FB80 CCB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_305)
{
    // 4CB2 003F;	
    // (䲲) CJK UNIFIED IDEOGRAPH-4CB2	[FB80 CCB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_306)
{
    // 4CB2 0061;	
    // (䲲) CJK UNIFIED IDEOGRAPH-4CB2	[FB80 CCB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_307)
{
    // 4CB2 0041;	
    // (䲲) CJK UNIFIED IDEOGRAPH-4CB2	[FB80 CCB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CB2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_308)
{
    // 4CB2 0062;	
    // (䲲) CJK UNIFIED IDEOGRAPH-4CB2	[FB80 CCB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_309)
{
    // 4CB3 0021;	
    // (䲳) CJK UNIFIED IDEOGRAPH-4CB3	[FB80 CCB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_310)
{
    // 4CB3 003F;	
    // (䲳) CJK UNIFIED IDEOGRAPH-4CB3	[FB80 CCB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_311)
{
    // 4CB3 0061;	
    // (䲳) CJK UNIFIED IDEOGRAPH-4CB3	[FB80 CCB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_312)
{
    // 4CB3 0041;	
    // (䲳) CJK UNIFIED IDEOGRAPH-4CB3	[FB80 CCB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CB3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_313)
{
    // 4CB3 0062;	
    // (䲳) CJK UNIFIED IDEOGRAPH-4CB3	[FB80 CCB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_314)
{
    // 4CB4 0021;	
    // (䲴) CJK UNIFIED IDEOGRAPH-4CB4	[FB80 CCB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_315)
{
    // 4CB4 003F;	
    // (䲴) CJK UNIFIED IDEOGRAPH-4CB4	[FB80 CCB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_316)
{
    // 4CB4 0061;	
    // (䲴) CJK UNIFIED IDEOGRAPH-4CB4	[FB80 CCB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_317)
{
    // 4CB4 0041;	
    // (䲴) CJK UNIFIED IDEOGRAPH-4CB4	[FB80 CCB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CB4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_318)
{
    // 4CB4 0062;	
    // (䲴) CJK UNIFIED IDEOGRAPH-4CB4	[FB80 CCB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_319)
{
    // 4CB5 0021;	
    // (䲵) CJK UNIFIED IDEOGRAPH-4CB5	[FB80 CCB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_320)
{
    // 4CB5 003F;	
    // (䲵) CJK UNIFIED IDEOGRAPH-4CB5	[FB80 CCB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_321)
{
    // 4CB5 0061;	
    // (䲵) CJK UNIFIED IDEOGRAPH-4CB5	[FB80 CCB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_322)
{
    // 4CB5 0041;	
    // (䲵) CJK UNIFIED IDEOGRAPH-4CB5	[FB80 CCB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CB5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_323)
{
    // 4CB5 0062;	
    // (䲵) CJK UNIFIED IDEOGRAPH-4CB5	[FB80 CCB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_324)
{
    // 4CB6 0021;	
    // (䲶) CJK UNIFIED IDEOGRAPH-4CB6	[FB80 CCB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_325)
{
    // 4CB6 003F;	
    // (䲶) CJK UNIFIED IDEOGRAPH-4CB6	[FB80 CCB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_326)
{
    // 4CB6 0061;	
    // (䲶) CJK UNIFIED IDEOGRAPH-4CB6	[FB80 CCB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_327)
{
    // 4CB6 0041;	
    // (䲶) CJK UNIFIED IDEOGRAPH-4CB6	[FB80 CCB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CB6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_328)
{
    // 4CB6 0062;	
    // (䲶) CJK UNIFIED IDEOGRAPH-4CB6	[FB80 CCB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_329)
{
    // 4CB7 0021;	
    // (䲷) CJK UNIFIED IDEOGRAPH-4CB7	[FB80 CCB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_330)
{
    // 4CB7 003F;	
    // (䲷) CJK UNIFIED IDEOGRAPH-4CB7	[FB80 CCB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_331)
{
    // 4CB7 0061;	
    // (䲷) CJK UNIFIED IDEOGRAPH-4CB7	[FB80 CCB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_332)
{
    // 4CB7 0041;	
    // (䲷) CJK UNIFIED IDEOGRAPH-4CB7	[FB80 CCB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CB7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_333)
{
    // 4CB7 0062;	
    // (䲷) CJK UNIFIED IDEOGRAPH-4CB7	[FB80 CCB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_334)
{
    // 4CB8 0021;	
    // (䲸) CJK UNIFIED IDEOGRAPH-4CB8	[FB80 CCB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_335)
{
    // 4CB8 003F;	
    // (䲸) CJK UNIFIED IDEOGRAPH-4CB8	[FB80 CCB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_336)
{
    // 4CB8 0061;	
    // (䲸) CJK UNIFIED IDEOGRAPH-4CB8	[FB80 CCB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_337)
{
    // 4CB8 0041;	
    // (䲸) CJK UNIFIED IDEOGRAPH-4CB8	[FB80 CCB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CB8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_338)
{
    // 4CB8 0062;	
    // (䲸) CJK UNIFIED IDEOGRAPH-4CB8	[FB80 CCB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_339)
{
    // 4CB9 0021;	
    // (䲹) CJK UNIFIED IDEOGRAPH-4CB9	[FB80 CCB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_340)
{
    // 4CB9 003F;	
    // (䲹) CJK UNIFIED IDEOGRAPH-4CB9	[FB80 CCB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_341)
{
    // 4CB9 0061;	
    // (䲹) CJK UNIFIED IDEOGRAPH-4CB9	[FB80 CCB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_342)
{
    // 4CB9 0041;	
    // (䲹) CJK UNIFIED IDEOGRAPH-4CB9	[FB80 CCB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CB9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_343)
{
    // 4CB9 0062;	
    // (䲹) CJK UNIFIED IDEOGRAPH-4CB9	[FB80 CCB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CB9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_344)
{
    // 4CBA 0021;	
    // (䲺) CJK UNIFIED IDEOGRAPH-4CBA	[FB80 CCBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_345)
{
    // 4CBA 003F;	
    // (䲺) CJK UNIFIED IDEOGRAPH-4CBA	[FB80 CCBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_346)
{
    // 4CBA 0061;	
    // (䲺) CJK UNIFIED IDEOGRAPH-4CBA	[FB80 CCBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_347)
{
    // 4CBA 0041;	
    // (䲺) CJK UNIFIED IDEOGRAPH-4CBA	[FB80 CCBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CBA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_348)
{
    // 4CBA 0062;	
    // (䲺) CJK UNIFIED IDEOGRAPH-4CBA	[FB80 CCBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_349)
{
    // 4CBB 0021;	
    // (䲻) CJK UNIFIED IDEOGRAPH-4CBB	[FB80 CCBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_350)
{
    // 4CBB 003F;	
    // (䲻) CJK UNIFIED IDEOGRAPH-4CBB	[FB80 CCBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_351)
{
    // 4CBB 0061;	
    // (䲻) CJK UNIFIED IDEOGRAPH-4CBB	[FB80 CCBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_352)
{
    // 4CBB 0041;	
    // (䲻) CJK UNIFIED IDEOGRAPH-4CBB	[FB80 CCBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CBB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_353)
{
    // 4CBB 0062;	
    // (䲻) CJK UNIFIED IDEOGRAPH-4CBB	[FB80 CCBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_354)
{
    // 4CBC 0021;	
    // (䲼) CJK UNIFIED IDEOGRAPH-4CBC	[FB80 CCBC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_355)
{
    // 4CBC 003F;	
    // (䲼) CJK UNIFIED IDEOGRAPH-4CBC	[FB80 CCBC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_356)
{
    // 4CBC 0061;	
    // (䲼) CJK UNIFIED IDEOGRAPH-4CBC	[FB80 CCBC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_357)
{
    // 4CBC 0041;	
    // (䲼) CJK UNIFIED IDEOGRAPH-4CBC	[FB80 CCBC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CBC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_358)
{
    // 4CBC 0062;	
    // (䲼) CJK UNIFIED IDEOGRAPH-4CBC	[FB80 CCBC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_359)
{
    // 4CBD 0021;	
    // (䲽) CJK UNIFIED IDEOGRAPH-4CBD	[FB80 CCBD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_360)
{
    // 4CBD 003F;	
    // (䲽) CJK UNIFIED IDEOGRAPH-4CBD	[FB80 CCBD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_361)
{
    // 4CBD 0061;	
    // (䲽) CJK UNIFIED IDEOGRAPH-4CBD	[FB80 CCBD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_362)
{
    // 4CBD 0041;	
    // (䲽) CJK UNIFIED IDEOGRAPH-4CBD	[FB80 CCBD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CBD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_363)
{
    // 4CBD 0062;	
    // (䲽) CJK UNIFIED IDEOGRAPH-4CBD	[FB80 CCBD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_364)
{
    // 4CBE 0021;	
    // (䲾) CJK UNIFIED IDEOGRAPH-4CBE	[FB80 CCBE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_365)
{
    // 4CBE 003F;	
    // (䲾) CJK UNIFIED IDEOGRAPH-4CBE	[FB80 CCBE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_366)
{
    // 4CBE 0061;	
    // (䲾) CJK UNIFIED IDEOGRAPH-4CBE	[FB80 CCBE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_367)
{
    // 4CBE 0041;	
    // (䲾) CJK UNIFIED IDEOGRAPH-4CBE	[FB80 CCBE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CBE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_368)
{
    // 4CBE 0062;	
    // (䲾) CJK UNIFIED IDEOGRAPH-4CBE	[FB80 CCBE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_369)
{
    // 4CBF 0021;	
    // (䲿) CJK UNIFIED IDEOGRAPH-4CBF	[FB80 CCBF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_370)
{
    // 4CBF 003F;	
    // (䲿) CJK UNIFIED IDEOGRAPH-4CBF	[FB80 CCBF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_371)
{
    // 4CBF 0061;	
    // (䲿) CJK UNIFIED IDEOGRAPH-4CBF	[FB80 CCBF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_372)
{
    // 4CBF 0041;	
    // (䲿) CJK UNIFIED IDEOGRAPH-4CBF	[FB80 CCBF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CBF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_373)
{
    // 4CBF 0062;	
    // (䲿) CJK UNIFIED IDEOGRAPH-4CBF	[FB80 CCBF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CBF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_374)
{
    // 4CC0 0021;	
    // (䳀) CJK UNIFIED IDEOGRAPH-4CC0	[FB80 CCC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_375)
{
    // 4CC0 003F;	
    // (䳀) CJK UNIFIED IDEOGRAPH-4CC0	[FB80 CCC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_376)
{
    // 4CC0 0061;	
    // (䳀) CJK UNIFIED IDEOGRAPH-4CC0	[FB80 CCC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_377)
{
    // 4CC0 0041;	
    // (䳀) CJK UNIFIED IDEOGRAPH-4CC0	[FB80 CCC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CC0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_378)
{
    // 4CC0 0062;	
    // (䳀) CJK UNIFIED IDEOGRAPH-4CC0	[FB80 CCC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_379)
{
    // 4CC1 0021;	
    // (䳁) CJK UNIFIED IDEOGRAPH-4CC1	[FB80 CCC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_380)
{
    // 4CC1 003F;	
    // (䳁) CJK UNIFIED IDEOGRAPH-4CC1	[FB80 CCC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_381)
{
    // 4CC1 0061;	
    // (䳁) CJK UNIFIED IDEOGRAPH-4CC1	[FB80 CCC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_382)
{
    // 4CC1 0041;	
    // (䳁) CJK UNIFIED IDEOGRAPH-4CC1	[FB80 CCC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CC1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_383)
{
    // 4CC1 0062;	
    // (䳁) CJK UNIFIED IDEOGRAPH-4CC1	[FB80 CCC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_384)
{
    // 4CC2 0021;	
    // (䳂) CJK UNIFIED IDEOGRAPH-4CC2	[FB80 CCC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_385)
{
    // 4CC2 003F;	
    // (䳂) CJK UNIFIED IDEOGRAPH-4CC2	[FB80 CCC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_386)
{
    // 4CC2 0061;	
    // (䳂) CJK UNIFIED IDEOGRAPH-4CC2	[FB80 CCC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_387)
{
    // 4CC2 0041;	
    // (䳂) CJK UNIFIED IDEOGRAPH-4CC2	[FB80 CCC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CC2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_388)
{
    // 4CC2 0062;	
    // (䳂) CJK UNIFIED IDEOGRAPH-4CC2	[FB80 CCC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_389)
{
    // 4CC3 0021;	
    // (䳃) CJK UNIFIED IDEOGRAPH-4CC3	[FB80 CCC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_390)
{
    // 4CC3 003F;	
    // (䳃) CJK UNIFIED IDEOGRAPH-4CC3	[FB80 CCC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_391)
{
    // 4CC3 0061;	
    // (䳃) CJK UNIFIED IDEOGRAPH-4CC3	[FB80 CCC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_392)
{
    // 4CC3 0041;	
    // (䳃) CJK UNIFIED IDEOGRAPH-4CC3	[FB80 CCC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CC3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_393)
{
    // 4CC3 0062;	
    // (䳃) CJK UNIFIED IDEOGRAPH-4CC3	[FB80 CCC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_394)
{
    // 4CC4 0021;	
    // (䳄) CJK UNIFIED IDEOGRAPH-4CC4	[FB80 CCC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_395)
{
    // 4CC4 003F;	
    // (䳄) CJK UNIFIED IDEOGRAPH-4CC4	[FB80 CCC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_396)
{
    // 4CC4 0061;	
    // (䳄) CJK UNIFIED IDEOGRAPH-4CC4	[FB80 CCC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_397)
{
    // 4CC4 0041;	
    // (䳄) CJK UNIFIED IDEOGRAPH-4CC4	[FB80 CCC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CC4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_398)
{
    // 4CC4 0062;	
    // (䳄) CJK UNIFIED IDEOGRAPH-4CC4	[FB80 CCC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_399)
{
    // 4CC5 0021;	
    // (䳅) CJK UNIFIED IDEOGRAPH-4CC5	[FB80 CCC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_400)
{
    // 4CC5 003F;	
    // (䳅) CJK UNIFIED IDEOGRAPH-4CC5	[FB80 CCC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_401)
{
    // 4CC5 0061;	
    // (䳅) CJK UNIFIED IDEOGRAPH-4CC5	[FB80 CCC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_402)
{
    // 4CC5 0041;	
    // (䳅) CJK UNIFIED IDEOGRAPH-4CC5	[FB80 CCC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CC5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_403)
{
    // 4CC5 0062;	
    // (䳅) CJK UNIFIED IDEOGRAPH-4CC5	[FB80 CCC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_404)
{
    // 4CC6 0021;	
    // (䳆) CJK UNIFIED IDEOGRAPH-4CC6	[FB80 CCC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_405)
{
    // 4CC6 003F;	
    // (䳆) CJK UNIFIED IDEOGRAPH-4CC6	[FB80 CCC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_406)
{
    // 4CC6 0061;	
    // (䳆) CJK UNIFIED IDEOGRAPH-4CC6	[FB80 CCC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_407)
{
    // 4CC6 0041;	
    // (䳆) CJK UNIFIED IDEOGRAPH-4CC6	[FB80 CCC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CC6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_408)
{
    // 4CC6 0062;	
    // (䳆) CJK UNIFIED IDEOGRAPH-4CC6	[FB80 CCC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_409)
{
    // 4CC7 0021;	
    // (䳇) CJK UNIFIED IDEOGRAPH-4CC7	[FB80 CCC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_410)
{
    // 4CC7 003F;	
    // (䳇) CJK UNIFIED IDEOGRAPH-4CC7	[FB80 CCC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_411)
{
    // 4CC7 0061;	
    // (䳇) CJK UNIFIED IDEOGRAPH-4CC7	[FB80 CCC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_412)
{
    // 4CC7 0041;	
    // (䳇) CJK UNIFIED IDEOGRAPH-4CC7	[FB80 CCC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CC7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_413)
{
    // 4CC7 0062;	
    // (䳇) CJK UNIFIED IDEOGRAPH-4CC7	[FB80 CCC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_414)
{
    // 4CC8 0021;	
    // (䳈) CJK UNIFIED IDEOGRAPH-4CC8	[FB80 CCC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_415)
{
    // 4CC8 003F;	
    // (䳈) CJK UNIFIED IDEOGRAPH-4CC8	[FB80 CCC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_416)
{
    // 4CC8 0061;	
    // (䳈) CJK UNIFIED IDEOGRAPH-4CC8	[FB80 CCC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_417)
{
    // 4CC8 0041;	
    // (䳈) CJK UNIFIED IDEOGRAPH-4CC8	[FB80 CCC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CC8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_418)
{
    // 4CC8 0062;	
    // (䳈) CJK UNIFIED IDEOGRAPH-4CC8	[FB80 CCC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_419)
{
    // 4CC9 0021;	
    // (䳉) CJK UNIFIED IDEOGRAPH-4CC9	[FB80 CCC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_420)
{
    // 4CC9 003F;	
    // (䳉) CJK UNIFIED IDEOGRAPH-4CC9	[FB80 CCC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_421)
{
    // 4CC9 0061;	
    // (䳉) CJK UNIFIED IDEOGRAPH-4CC9	[FB80 CCC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_422)
{
    // 4CC9 0041;	
    // (䳉) CJK UNIFIED IDEOGRAPH-4CC9	[FB80 CCC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CC9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_423)
{
    // 4CC9 0062;	
    // (䳉) CJK UNIFIED IDEOGRAPH-4CC9	[FB80 CCC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CC9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_424)
{
    // 4CCA 0021;	
    // (䳊) CJK UNIFIED IDEOGRAPH-4CCA	[FB80 CCCA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_425)
{
    // 4CCA 003F;	
    // (䳊) CJK UNIFIED IDEOGRAPH-4CCA	[FB80 CCCA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCCA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_426)
{
    // 4CCA 0061;	
    // (䳊) CJK UNIFIED IDEOGRAPH-4CCA	[FB80 CCCA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_427)
{
    // 4CCA 0041;	
    // (䳊) CJK UNIFIED IDEOGRAPH-4CCA	[FB80 CCCA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CCA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_428)
{
    // 4CCA 0062;	
    // (䳊) CJK UNIFIED IDEOGRAPH-4CCA	[FB80 CCCA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_429)
{
    // 4CCB 0021;	
    // (䳋) CJK UNIFIED IDEOGRAPH-4CCB	[FB80 CCCB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_430)
{
    // 4CCB 003F;	
    // (䳋) CJK UNIFIED IDEOGRAPH-4CCB	[FB80 CCCB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_431)
{
    // 4CCB 0061;	
    // (䳋) CJK UNIFIED IDEOGRAPH-4CCB	[FB80 CCCB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_432)
{
    // 4CCB 0041;	
    // (䳋) CJK UNIFIED IDEOGRAPH-4CCB	[FB80 CCCB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CCB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_433)
{
    // 4CCB 0062;	
    // (䳋) CJK UNIFIED IDEOGRAPH-4CCB	[FB80 CCCB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_434)
{
    // 4CCC 0021;	
    // (䳌) CJK UNIFIED IDEOGRAPH-4CCC	[FB80 CCCC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_435)
{
    // 4CCC 003F;	
    // (䳌) CJK UNIFIED IDEOGRAPH-4CCC	[FB80 CCCC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCCC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_436)
{
    // 4CCC 0061;	
    // (䳌) CJK UNIFIED IDEOGRAPH-4CCC	[FB80 CCCC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_437)
{
    // 4CCC 0041;	
    // (䳌) CJK UNIFIED IDEOGRAPH-4CCC	[FB80 CCCC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CCC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_438)
{
    // 4CCC 0062;	
    // (䳌) CJK UNIFIED IDEOGRAPH-4CCC	[FB80 CCCC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_439)
{
    // 4CCD 0021;	
    // (䳍) CJK UNIFIED IDEOGRAPH-4CCD	[FB80 CCCD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_440)
{
    // 4CCD 003F;	
    // (䳍) CJK UNIFIED IDEOGRAPH-4CCD	[FB80 CCCD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCCD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_441)
{
    // 4CCD 0061;	
    // (䳍) CJK UNIFIED IDEOGRAPH-4CCD	[FB80 CCCD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_442)
{
    // 4CCD 0041;	
    // (䳍) CJK UNIFIED IDEOGRAPH-4CCD	[FB80 CCCD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CCD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_443)
{
    // 4CCD 0062;	
    // (䳍) CJK UNIFIED IDEOGRAPH-4CCD	[FB80 CCCD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_444)
{
    // 4CCE 0021;	
    // (䳎) CJK UNIFIED IDEOGRAPH-4CCE	[FB80 CCCE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_445)
{
    // 2FA0D 0021;	
    // (䳎) CJK COMPATIBILITY IDEOGRAPH-2FA0D	[FB80 CCCE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA0D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_446)
{
    // 4CCE 003F;	
    // (䳎) CJK UNIFIED IDEOGRAPH-4CCE	[FB80 CCCE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCCE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_447)
{
    // 2FA0D 003F;	
    // (䳎) CJK COMPATIBILITY IDEOGRAPH-2FA0D	[FB80 CCCE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA0D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCCE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_448)
{
    // 4CCE 0061;	
    // (䳎) CJK UNIFIED IDEOGRAPH-4CCE	[FB80 CCCE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_449)
{
    // 2FA0D 0061;	
    // (䳎) CJK COMPATIBILITY IDEOGRAPH-2FA0D	[FB80 CCCE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA0D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_450)
{
    // 4CCE 0041;	
    // (䳎) CJK UNIFIED IDEOGRAPH-4CCE	[FB80 CCCE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CCE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_451)
{
    // 2FA0D 0041;	
    // (䳎) CJK COMPATIBILITY IDEOGRAPH-2FA0D	[FB80 CCCE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2FA0D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_452)
{
    // 4CCE 0062;	
    // (䳎) CJK UNIFIED IDEOGRAPH-4CCE	[FB80 CCCE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_453)
{
    // 2FA0D 0062;	
    // (䳎) CJK COMPATIBILITY IDEOGRAPH-2FA0D	[FB80 CCCE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2FA0D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_454)
{
    // 4CCF 0021;	
    // (䳏) CJK UNIFIED IDEOGRAPH-4CCF	[FB80 CCCF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_455)
{
    // 4CCF 003F;	
    // (䳏) CJK UNIFIED IDEOGRAPH-4CCF	[FB80 CCCF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCCF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_456)
{
    // 4CCF 0061;	
    // (䳏) CJK UNIFIED IDEOGRAPH-4CCF	[FB80 CCCF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_457)
{
    // 4CCF 0041;	
    // (䳏) CJK UNIFIED IDEOGRAPH-4CCF	[FB80 CCCF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CCF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_458)
{
    // 4CCF 0062;	
    // (䳏) CJK UNIFIED IDEOGRAPH-4CCF	[FB80 CCCF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CCF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCCF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_459)
{
    // 4CD0 0021;	
    // (䳐) CJK UNIFIED IDEOGRAPH-4CD0	[FB80 CCD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_460)
{
    // 4CD0 003F;	
    // (䳐) CJK UNIFIED IDEOGRAPH-4CD0	[FB80 CCD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_461)
{
    // 4CD0 0061;	
    // (䳐) CJK UNIFIED IDEOGRAPH-4CD0	[FB80 CCD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_462)
{
    // 4CD0 0041;	
    // (䳐) CJK UNIFIED IDEOGRAPH-4CD0	[FB80 CCD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CD0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_463)
{
    // 4CD0 0062;	
    // (䳐) CJK UNIFIED IDEOGRAPH-4CD0	[FB80 CCD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_464)
{
    // 4CD1 0021;	
    // (䳑) CJK UNIFIED IDEOGRAPH-4CD1	[FB80 CCD1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_465)
{
    // 4CD1 003F;	
    // (䳑) CJK UNIFIED IDEOGRAPH-4CD1	[FB80 CCD1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_466)
{
    // 4CD1 0061;	
    // (䳑) CJK UNIFIED IDEOGRAPH-4CD1	[FB80 CCD1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_467)
{
    // 4CD1 0041;	
    // (䳑) CJK UNIFIED IDEOGRAPH-4CD1	[FB80 CCD1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CD1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_468)
{
    // 4CD1 0062;	
    // (䳑) CJK UNIFIED IDEOGRAPH-4CD1	[FB80 CCD1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_469)
{
    // 4CD2 0021;	
    // (䳒) CJK UNIFIED IDEOGRAPH-4CD2	[FB80 CCD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_470)
{
    // 4CD2 003F;	
    // (䳒) CJK UNIFIED IDEOGRAPH-4CD2	[FB80 CCD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_471)
{
    // 4CD2 0061;	
    // (䳒) CJK UNIFIED IDEOGRAPH-4CD2	[FB80 CCD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_472)
{
    // 4CD2 0041;	
    // (䳒) CJK UNIFIED IDEOGRAPH-4CD2	[FB80 CCD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CD2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_473)
{
    // 4CD2 0062;	
    // (䳒) CJK UNIFIED IDEOGRAPH-4CD2	[FB80 CCD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_474)
{
    // 4CD3 0021;	
    // (䳓) CJK UNIFIED IDEOGRAPH-4CD3	[FB80 CCD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_475)
{
    // 4CD3 003F;	
    // (䳓) CJK UNIFIED IDEOGRAPH-4CD3	[FB80 CCD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_476)
{
    // 4CD3 0061;	
    // (䳓) CJK UNIFIED IDEOGRAPH-4CD3	[FB80 CCD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_477)
{
    // 4CD3 0041;	
    // (䳓) CJK UNIFIED IDEOGRAPH-4CD3	[FB80 CCD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CD3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_478)
{
    // 4CD3 0062;	
    // (䳓) CJK UNIFIED IDEOGRAPH-4CD3	[FB80 CCD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_479)
{
    // 4CD4 0021;	
    // (䳔) CJK UNIFIED IDEOGRAPH-4CD4	[FB80 CCD4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_480)
{
    // 4CD4 003F;	
    // (䳔) CJK UNIFIED IDEOGRAPH-4CD4	[FB80 CCD4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_481)
{
    // 4CD4 0061;	
    // (䳔) CJK UNIFIED IDEOGRAPH-4CD4	[FB80 CCD4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_482)
{
    // 4CD4 0041;	
    // (䳔) CJK UNIFIED IDEOGRAPH-4CD4	[FB80 CCD4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CD4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_483)
{
    // 4CD4 0062;	
    // (䳔) CJK UNIFIED IDEOGRAPH-4CD4	[FB80 CCD4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_484)
{
    // 4CD5 0021;	
    // (䳕) CJK UNIFIED IDEOGRAPH-4CD5	[FB80 CCD5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_485)
{
    // 4CD5 003F;	
    // (䳕) CJK UNIFIED IDEOGRAPH-4CD5	[FB80 CCD5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_486)
{
    // 4CD5 0061;	
    // (䳕) CJK UNIFIED IDEOGRAPH-4CD5	[FB80 CCD5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_487)
{
    // 4CD5 0041;	
    // (䳕) CJK UNIFIED IDEOGRAPH-4CD5	[FB80 CCD5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CD5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_488)
{
    // 4CD5 0062;	
    // (䳕) CJK UNIFIED IDEOGRAPH-4CD5	[FB80 CCD5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_489)
{
    // 4CD6 0021;	
    // (䳖) CJK UNIFIED IDEOGRAPH-4CD6	[FB80 CCD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_490)
{
    // 4CD6 003F;	
    // (䳖) CJK UNIFIED IDEOGRAPH-4CD6	[FB80 CCD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_491)
{
    // 4CD6 0061;	
    // (䳖) CJK UNIFIED IDEOGRAPH-4CD6	[FB80 CCD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_492)
{
    // 4CD6 0041;	
    // (䳖) CJK UNIFIED IDEOGRAPH-4CD6	[FB80 CCD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CD6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_493)
{
    // 4CD6 0062;	
    // (䳖) CJK UNIFIED IDEOGRAPH-4CD6	[FB80 CCD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_494)
{
    // 4CD7 0021;	
    // (䳗) CJK UNIFIED IDEOGRAPH-4CD7	[FB80 CCD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_495)
{
    // 4CD7 003F;	
    // (䳗) CJK UNIFIED IDEOGRAPH-4CD7	[FB80 CCD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xCCD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_496)
{
    // 4CD7 0061;	
    // (䳗) CJK UNIFIED IDEOGRAPH-4CD7	[FB80 CCD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_497)
{
    // 4CD7 0041;	
    // (䳗) CJK UNIFIED IDEOGRAPH-4CD7	[FB80 CCD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4CD7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_498)
{
    // 4CD7 0062;	
    // (䳗) CJK UNIFIED IDEOGRAPH-4CD7	[FB80 CCD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_390_499)
{
    // 4CD8 0021;	
    // (䳘) CJK UNIFIED IDEOGRAPH-4CD8	[FB80 CCD8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4CD8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xCCD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

