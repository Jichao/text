// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_351_000)
{
    // 3D61 003F;	
    // (㵡) CJK UNIFIED IDEOGRAPH-3D61	[FB80 BD61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D61, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_001)
{
    // 3D61 0061;	
    // (㵡) CJK UNIFIED IDEOGRAPH-3D61	[FB80 BD61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D61, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_002)
{
    // 3D61 0041;	
    // (㵡) CJK UNIFIED IDEOGRAPH-3D61	[FB80 BD61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D61, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_003)
{
    // 3D61 0062;	
    // (㵡) CJK UNIFIED IDEOGRAPH-3D61	[FB80 BD61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D61, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_004)
{
    // 3D62 0021;	
    // (㵢) CJK UNIFIED IDEOGRAPH-3D62	[FB80 BD62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D62, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_005)
{
    // 3D62 003F;	
    // (㵢) CJK UNIFIED IDEOGRAPH-3D62	[FB80 BD62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D62, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_006)
{
    // 3D62 0061;	
    // (㵢) CJK UNIFIED IDEOGRAPH-3D62	[FB80 BD62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D62, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_007)
{
    // 3D62 0041;	
    // (㵢) CJK UNIFIED IDEOGRAPH-3D62	[FB80 BD62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D62, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_008)
{
    // 3D62 0062;	
    // (㵢) CJK UNIFIED IDEOGRAPH-3D62	[FB80 BD62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D62, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_009)
{
    // 3D63 0021;	
    // (㵣) CJK UNIFIED IDEOGRAPH-3D63	[FB80 BD63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D63, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_010)
{
    // 3D63 003F;	
    // (㵣) CJK UNIFIED IDEOGRAPH-3D63	[FB80 BD63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D63, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_011)
{
    // 3D63 0061;	
    // (㵣) CJK UNIFIED IDEOGRAPH-3D63	[FB80 BD63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D63, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_012)
{
    // 3D63 0041;	
    // (㵣) CJK UNIFIED IDEOGRAPH-3D63	[FB80 BD63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D63, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_013)
{
    // 3D63 0062;	
    // (㵣) CJK UNIFIED IDEOGRAPH-3D63	[FB80 BD63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D63, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_014)
{
    // 3D64 0021;	
    // (㵤) CJK UNIFIED IDEOGRAPH-3D64	[FB80 BD64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D64, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_015)
{
    // 3D64 003F;	
    // (㵤) CJK UNIFIED IDEOGRAPH-3D64	[FB80 BD64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D64, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_016)
{
    // 3D64 0061;	
    // (㵤) CJK UNIFIED IDEOGRAPH-3D64	[FB80 BD64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D64, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_017)
{
    // 3D64 0041;	
    // (㵤) CJK UNIFIED IDEOGRAPH-3D64	[FB80 BD64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D64, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_018)
{
    // 3D64 0062;	
    // (㵤) CJK UNIFIED IDEOGRAPH-3D64	[FB80 BD64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D64, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_019)
{
    // 3D65 0021;	
    // (㵥) CJK UNIFIED IDEOGRAPH-3D65	[FB80 BD65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D65, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_020)
{
    // 3D65 003F;	
    // (㵥) CJK UNIFIED IDEOGRAPH-3D65	[FB80 BD65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D65, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_021)
{
    // 3D65 0061;	
    // (㵥) CJK UNIFIED IDEOGRAPH-3D65	[FB80 BD65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D65, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_022)
{
    // 3D65 0041;	
    // (㵥) CJK UNIFIED IDEOGRAPH-3D65	[FB80 BD65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D65, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_023)
{
    // 3D65 0062;	
    // (㵥) CJK UNIFIED IDEOGRAPH-3D65	[FB80 BD65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D65, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_024)
{
    // 3D66 0021;	
    // (㵦) CJK UNIFIED IDEOGRAPH-3D66	[FB80 BD66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D66, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_025)
{
    // 3D66 003F;	
    // (㵦) CJK UNIFIED IDEOGRAPH-3D66	[FB80 BD66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D66, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_026)
{
    // 3D66 0061;	
    // (㵦) CJK UNIFIED IDEOGRAPH-3D66	[FB80 BD66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D66, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_027)
{
    // 3D66 0041;	
    // (㵦) CJK UNIFIED IDEOGRAPH-3D66	[FB80 BD66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D66, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_028)
{
    // 3D66 0062;	
    // (㵦) CJK UNIFIED IDEOGRAPH-3D66	[FB80 BD66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D66, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_029)
{
    // 3D67 0021;	
    // (㵧) CJK UNIFIED IDEOGRAPH-3D67	[FB80 BD67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D67, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_030)
{
    // 3D67 003F;	
    // (㵧) CJK UNIFIED IDEOGRAPH-3D67	[FB80 BD67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D67, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_031)
{
    // 3D67 0061;	
    // (㵧) CJK UNIFIED IDEOGRAPH-3D67	[FB80 BD67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D67, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_032)
{
    // 3D67 0041;	
    // (㵧) CJK UNIFIED IDEOGRAPH-3D67	[FB80 BD67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D67, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_033)
{
    // 3D67 0062;	
    // (㵧) CJK UNIFIED IDEOGRAPH-3D67	[FB80 BD67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D67, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_034)
{
    // 3D68 0021;	
    // (㵨) CJK UNIFIED IDEOGRAPH-3D68	[FB80 BD68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D68, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_035)
{
    // 3D68 003F;	
    // (㵨) CJK UNIFIED IDEOGRAPH-3D68	[FB80 BD68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D68, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_036)
{
    // 3D68 0061;	
    // (㵨) CJK UNIFIED IDEOGRAPH-3D68	[FB80 BD68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D68, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_037)
{
    // 3D68 0041;	
    // (㵨) CJK UNIFIED IDEOGRAPH-3D68	[FB80 BD68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D68, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_038)
{
    // 3D68 0062;	
    // (㵨) CJK UNIFIED IDEOGRAPH-3D68	[FB80 BD68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D68, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_039)
{
    // 3D69 0021;	
    // (㵩) CJK UNIFIED IDEOGRAPH-3D69	[FB80 BD69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D69, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_040)
{
    // 3D69 003F;	
    // (㵩) CJK UNIFIED IDEOGRAPH-3D69	[FB80 BD69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D69, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_041)
{
    // 3D69 0061;	
    // (㵩) CJK UNIFIED IDEOGRAPH-3D69	[FB80 BD69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D69, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_042)
{
    // 3D69 0041;	
    // (㵩) CJK UNIFIED IDEOGRAPH-3D69	[FB80 BD69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D69, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_043)
{
    // 3D69 0062;	
    // (㵩) CJK UNIFIED IDEOGRAPH-3D69	[FB80 BD69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D69, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_044)
{
    // 3D6A 0021;	
    // (㵪) CJK UNIFIED IDEOGRAPH-3D6A	[FB80 BD6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_045)
{
    // 3D6A 003F;	
    // (㵪) CJK UNIFIED IDEOGRAPH-3D6A	[FB80 BD6A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD6A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_046)
{
    // 3D6A 0061;	
    // (㵪) CJK UNIFIED IDEOGRAPH-3D6A	[FB80 BD6A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_047)
{
    // 3D6A 0041;	
    // (㵪) CJK UNIFIED IDEOGRAPH-3D6A	[FB80 BD6A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D6A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_048)
{
    // 3D6A 0062;	
    // (㵪) CJK UNIFIED IDEOGRAPH-3D6A	[FB80 BD6A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_049)
{
    // 3D6B 0021;	
    // (㵫) CJK UNIFIED IDEOGRAPH-3D6B	[FB80 BD6B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_050)
{
    // 3D6B 003F;	
    // (㵫) CJK UNIFIED IDEOGRAPH-3D6B	[FB80 BD6B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD6B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_051)
{
    // 3D6B 0061;	
    // (㵫) CJK UNIFIED IDEOGRAPH-3D6B	[FB80 BD6B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_052)
{
    // 3D6B 0041;	
    // (㵫) CJK UNIFIED IDEOGRAPH-3D6B	[FB80 BD6B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D6B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_053)
{
    // 3D6B 0062;	
    // (㵫) CJK UNIFIED IDEOGRAPH-3D6B	[FB80 BD6B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_054)
{
    // 3D6C 0021;	
    // (㵬) CJK UNIFIED IDEOGRAPH-3D6C	[FB80 BD6C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_055)
{
    // 3D6C 003F;	
    // (㵬) CJK UNIFIED IDEOGRAPH-3D6C	[FB80 BD6C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD6C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_056)
{
    // 3D6C 0061;	
    // (㵬) CJK UNIFIED IDEOGRAPH-3D6C	[FB80 BD6C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_057)
{
    // 3D6C 0041;	
    // (㵬) CJK UNIFIED IDEOGRAPH-3D6C	[FB80 BD6C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D6C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_058)
{
    // 3D6C 0062;	
    // (㵬) CJK UNIFIED IDEOGRAPH-3D6C	[FB80 BD6C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_059)
{
    // 3D6D 0021;	
    // (㵭) CJK UNIFIED IDEOGRAPH-3D6D	[FB80 BD6D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_060)
{
    // 3D6D 003F;	
    // (㵭) CJK UNIFIED IDEOGRAPH-3D6D	[FB80 BD6D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD6D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_061)
{
    // 3D6D 0061;	
    // (㵭) CJK UNIFIED IDEOGRAPH-3D6D	[FB80 BD6D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_062)
{
    // 3D6D 0041;	
    // (㵭) CJK UNIFIED IDEOGRAPH-3D6D	[FB80 BD6D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D6D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_063)
{
    // 3D6D 0062;	
    // (㵭) CJK UNIFIED IDEOGRAPH-3D6D	[FB80 BD6D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_064)
{
    // 3D6E 0021;	
    // (㵮) CJK UNIFIED IDEOGRAPH-3D6E	[FB80 BD6E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_065)
{
    // 3D6E 003F;	
    // (㵮) CJK UNIFIED IDEOGRAPH-3D6E	[FB80 BD6E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD6E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_066)
{
    // 3D6E 0061;	
    // (㵮) CJK UNIFIED IDEOGRAPH-3D6E	[FB80 BD6E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_067)
{
    // 3D6E 0041;	
    // (㵮) CJK UNIFIED IDEOGRAPH-3D6E	[FB80 BD6E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D6E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_068)
{
    // 3D6E 0062;	
    // (㵮) CJK UNIFIED IDEOGRAPH-3D6E	[FB80 BD6E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_069)
{
    // 3D6F 0021;	
    // (㵯) CJK UNIFIED IDEOGRAPH-3D6F	[FB80 BD6F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_070)
{
    // 3D6F 003F;	
    // (㵯) CJK UNIFIED IDEOGRAPH-3D6F	[FB80 BD6F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD6F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_071)
{
    // 3D6F 0061;	
    // (㵯) CJK UNIFIED IDEOGRAPH-3D6F	[FB80 BD6F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_072)
{
    // 3D6F 0041;	
    // (㵯) CJK UNIFIED IDEOGRAPH-3D6F	[FB80 BD6F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D6F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_073)
{
    // 3D6F 0062;	
    // (㵯) CJK UNIFIED IDEOGRAPH-3D6F	[FB80 BD6F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D6F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD6F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_074)
{
    // 3D70 0021;	
    // (㵰) CJK UNIFIED IDEOGRAPH-3D70	[FB80 BD70 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D70, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD70, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_075)
{
    // 3D70 003F;	
    // (㵰) CJK UNIFIED IDEOGRAPH-3D70	[FB80 BD70 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D70, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD70, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_076)
{
    // 3D70 0061;	
    // (㵰) CJK UNIFIED IDEOGRAPH-3D70	[FB80 BD70 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D70, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_077)
{
    // 3D70 0041;	
    // (㵰) CJK UNIFIED IDEOGRAPH-3D70	[FB80 BD70 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D70, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_078)
{
    // 3D70 0062;	
    // (㵰) CJK UNIFIED IDEOGRAPH-3D70	[FB80 BD70 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D70, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD70, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_079)
{
    // 3D71 0021;	
    // (㵱) CJK UNIFIED IDEOGRAPH-3D71	[FB80 BD71 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D71, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD71, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_080)
{
    // 3D71 003F;	
    // (㵱) CJK UNIFIED IDEOGRAPH-3D71	[FB80 BD71 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D71, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD71, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_081)
{
    // 3D71 0061;	
    // (㵱) CJK UNIFIED IDEOGRAPH-3D71	[FB80 BD71 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D71, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_082)
{
    // 3D71 0041;	
    // (㵱) CJK UNIFIED IDEOGRAPH-3D71	[FB80 BD71 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D71, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_083)
{
    // 3D71 0062;	
    // (㵱) CJK UNIFIED IDEOGRAPH-3D71	[FB80 BD71 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D71, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD71, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_084)
{
    // 3D72 0021;	
    // (㵲) CJK UNIFIED IDEOGRAPH-3D72	[FB80 BD72 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D72, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD72, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_085)
{
    // 3D72 003F;	
    // (㵲) CJK UNIFIED IDEOGRAPH-3D72	[FB80 BD72 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D72, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD72, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_086)
{
    // 3D72 0061;	
    // (㵲) CJK UNIFIED IDEOGRAPH-3D72	[FB80 BD72 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D72, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_087)
{
    // 3D72 0041;	
    // (㵲) CJK UNIFIED IDEOGRAPH-3D72	[FB80 BD72 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D72, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_088)
{
    // 3D72 0062;	
    // (㵲) CJK UNIFIED IDEOGRAPH-3D72	[FB80 BD72 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D72, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD72, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_089)
{
    // 3D73 0021;	
    // (㵳) CJK UNIFIED IDEOGRAPH-3D73	[FB80 BD73 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D73, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD73, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_090)
{
    // 3D73 003F;	
    // (㵳) CJK UNIFIED IDEOGRAPH-3D73	[FB80 BD73 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D73, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD73, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_091)
{
    // 3D73 0061;	
    // (㵳) CJK UNIFIED IDEOGRAPH-3D73	[FB80 BD73 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D73, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_092)
{
    // 3D73 0041;	
    // (㵳) CJK UNIFIED IDEOGRAPH-3D73	[FB80 BD73 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D73, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_093)
{
    // 3D73 0062;	
    // (㵳) CJK UNIFIED IDEOGRAPH-3D73	[FB80 BD73 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D73, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD73, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_094)
{
    // 3D74 0021;	
    // (㵴) CJK UNIFIED IDEOGRAPH-3D74	[FB80 BD74 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D74, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD74, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_095)
{
    // 3D74 003F;	
    // (㵴) CJK UNIFIED IDEOGRAPH-3D74	[FB80 BD74 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D74, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD74, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_096)
{
    // 3D74 0061;	
    // (㵴) CJK UNIFIED IDEOGRAPH-3D74	[FB80 BD74 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D74, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_097)
{
    // 3D74 0041;	
    // (㵴) CJK UNIFIED IDEOGRAPH-3D74	[FB80 BD74 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D74, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_098)
{
    // 3D74 0062;	
    // (㵴) CJK UNIFIED IDEOGRAPH-3D74	[FB80 BD74 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D74, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD74, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_099)
{
    // 3D75 0021;	
    // (㵵) CJK UNIFIED IDEOGRAPH-3D75	[FB80 BD75 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D75, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_100)
{
    // 3D75 003F;	
    // (㵵) CJK UNIFIED IDEOGRAPH-3D75	[FB80 BD75 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D75, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_101)
{
    // 3D75 0061;	
    // (㵵) CJK UNIFIED IDEOGRAPH-3D75	[FB80 BD75 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D75, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_102)
{
    // 3D75 0041;	
    // (㵵) CJK UNIFIED IDEOGRAPH-3D75	[FB80 BD75 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D75, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_103)
{
    // 3D75 0062;	
    // (㵵) CJK UNIFIED IDEOGRAPH-3D75	[FB80 BD75 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D75, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_104)
{
    // 3D76 0021;	
    // (㵶) CJK UNIFIED IDEOGRAPH-3D76	[FB80 BD76 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D76, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD76, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_105)
{
    // 3D76 003F;	
    // (㵶) CJK UNIFIED IDEOGRAPH-3D76	[FB80 BD76 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D76, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD76, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_106)
{
    // 3D76 0061;	
    // (㵶) CJK UNIFIED IDEOGRAPH-3D76	[FB80 BD76 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D76, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_107)
{
    // 3D76 0041;	
    // (㵶) CJK UNIFIED IDEOGRAPH-3D76	[FB80 BD76 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D76, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_108)
{
    // 3D76 0062;	
    // (㵶) CJK UNIFIED IDEOGRAPH-3D76	[FB80 BD76 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D76, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD76, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_109)
{
    // 3D77 0021;	
    // (㵷) CJK UNIFIED IDEOGRAPH-3D77	[FB80 BD77 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D77, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD77, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_110)
{
    // 3D77 003F;	
    // (㵷) CJK UNIFIED IDEOGRAPH-3D77	[FB80 BD77 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D77, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD77, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_111)
{
    // 3D77 0061;	
    // (㵷) CJK UNIFIED IDEOGRAPH-3D77	[FB80 BD77 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D77, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_112)
{
    // 3D77 0041;	
    // (㵷) CJK UNIFIED IDEOGRAPH-3D77	[FB80 BD77 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D77, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_113)
{
    // 3D77 0062;	
    // (㵷) CJK UNIFIED IDEOGRAPH-3D77	[FB80 BD77 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D77, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD77, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_114)
{
    // 3D78 0021;	
    // (㵸) CJK UNIFIED IDEOGRAPH-3D78	[FB80 BD78 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D78, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD78, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_115)
{
    // 3D78 003F;	
    // (㵸) CJK UNIFIED IDEOGRAPH-3D78	[FB80 BD78 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D78, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD78, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_116)
{
    // 3D78 0061;	
    // (㵸) CJK UNIFIED IDEOGRAPH-3D78	[FB80 BD78 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D78, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_117)
{
    // 3D78 0041;	
    // (㵸) CJK UNIFIED IDEOGRAPH-3D78	[FB80 BD78 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D78, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_118)
{
    // 3D78 0062;	
    // (㵸) CJK UNIFIED IDEOGRAPH-3D78	[FB80 BD78 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D78, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD78, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_119)
{
    // 3D79 0021;	
    // (㵹) CJK UNIFIED IDEOGRAPH-3D79	[FB80 BD79 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D79, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD79, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_120)
{
    // 3D79 003F;	
    // (㵹) CJK UNIFIED IDEOGRAPH-3D79	[FB80 BD79 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D79, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD79, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_121)
{
    // 3D79 0061;	
    // (㵹) CJK UNIFIED IDEOGRAPH-3D79	[FB80 BD79 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D79, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_122)
{
    // 3D79 0041;	
    // (㵹) CJK UNIFIED IDEOGRAPH-3D79	[FB80 BD79 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D79, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_123)
{
    // 3D79 0062;	
    // (㵹) CJK UNIFIED IDEOGRAPH-3D79	[FB80 BD79 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D79, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD79, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_124)
{
    // 3D7A 0021;	
    // (㵺) CJK UNIFIED IDEOGRAPH-3D7A	[FB80 BD7A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_125)
{
    // 3D7A 003F;	
    // (㵺) CJK UNIFIED IDEOGRAPH-3D7A	[FB80 BD7A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD7A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_126)
{
    // 3D7A 0061;	
    // (㵺) CJK UNIFIED IDEOGRAPH-3D7A	[FB80 BD7A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_127)
{
    // 3D7A 0041;	
    // (㵺) CJK UNIFIED IDEOGRAPH-3D7A	[FB80 BD7A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D7A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_128)
{
    // 3D7A 0062;	
    // (㵺) CJK UNIFIED IDEOGRAPH-3D7A	[FB80 BD7A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_129)
{
    // 3D7B 0021;	
    // (㵻) CJK UNIFIED IDEOGRAPH-3D7B	[FB80 BD7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_130)
{
    // 3D7B 003F;	
    // (㵻) CJK UNIFIED IDEOGRAPH-3D7B	[FB80 BD7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_131)
{
    // 3D7B 0061;	
    // (㵻) CJK UNIFIED IDEOGRAPH-3D7B	[FB80 BD7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_132)
{
    // 3D7B 0041;	
    // (㵻) CJK UNIFIED IDEOGRAPH-3D7B	[FB80 BD7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D7B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_133)
{
    // 3D7B 0062;	
    // (㵻) CJK UNIFIED IDEOGRAPH-3D7B	[FB80 BD7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_134)
{
    // 3D7C 0021;	
    // (㵼) CJK UNIFIED IDEOGRAPH-3D7C	[FB80 BD7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_135)
{
    // 3D7C 003F;	
    // (㵼) CJK UNIFIED IDEOGRAPH-3D7C	[FB80 BD7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_136)
{
    // 3D7C 0061;	
    // (㵼) CJK UNIFIED IDEOGRAPH-3D7C	[FB80 BD7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_137)
{
    // 3D7C 0041;	
    // (㵼) CJK UNIFIED IDEOGRAPH-3D7C	[FB80 BD7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D7C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_138)
{
    // 3D7C 0062;	
    // (㵼) CJK UNIFIED IDEOGRAPH-3D7C	[FB80 BD7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_139)
{
    // 3D7D 0021;	
    // (㵽) CJK UNIFIED IDEOGRAPH-3D7D	[FB80 BD7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_140)
{
    // 3D7D 003F;	
    // (㵽) CJK UNIFIED IDEOGRAPH-3D7D	[FB80 BD7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_141)
{
    // 3D7D 0061;	
    // (㵽) CJK UNIFIED IDEOGRAPH-3D7D	[FB80 BD7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_142)
{
    // 3D7D 0041;	
    // (㵽) CJK UNIFIED IDEOGRAPH-3D7D	[FB80 BD7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D7D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_143)
{
    // 3D7D 0062;	
    // (㵽) CJK UNIFIED IDEOGRAPH-3D7D	[FB80 BD7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_144)
{
    // 3D7E 0021;	
    // (㵾) CJK UNIFIED IDEOGRAPH-3D7E	[FB80 BD7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_145)
{
    // 3D7E 003F;	
    // (㵾) CJK UNIFIED IDEOGRAPH-3D7E	[FB80 BD7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_146)
{
    // 3D7E 0061;	
    // (㵾) CJK UNIFIED IDEOGRAPH-3D7E	[FB80 BD7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_147)
{
    // 3D7E 0041;	
    // (㵾) CJK UNIFIED IDEOGRAPH-3D7E	[FB80 BD7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D7E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_148)
{
    // 3D7E 0062;	
    // (㵾) CJK UNIFIED IDEOGRAPH-3D7E	[FB80 BD7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_149)
{
    // 3D7F 0021;	
    // (㵿) CJK UNIFIED IDEOGRAPH-3D7F	[FB80 BD7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_150)
{
    // 3D7F 003F;	
    // (㵿) CJK UNIFIED IDEOGRAPH-3D7F	[FB80 BD7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_151)
{
    // 3D7F 0061;	
    // (㵿) CJK UNIFIED IDEOGRAPH-3D7F	[FB80 BD7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_152)
{
    // 3D7F 0041;	
    // (㵿) CJK UNIFIED IDEOGRAPH-3D7F	[FB80 BD7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D7F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_153)
{
    // 3D7F 0062;	
    // (㵿) CJK UNIFIED IDEOGRAPH-3D7F	[FB80 BD7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D7F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_154)
{
    // 3D80 0021;	
    // (㶀) CJK UNIFIED IDEOGRAPH-3D80	[FB80 BD80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D80, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_155)
{
    // 3D80 003F;	
    // (㶀) CJK UNIFIED IDEOGRAPH-3D80	[FB80 BD80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D80, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_156)
{
    // 3D80 0061;	
    // (㶀) CJK UNIFIED IDEOGRAPH-3D80	[FB80 BD80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D80, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_157)
{
    // 3D80 0041;	
    // (㶀) CJK UNIFIED IDEOGRAPH-3D80	[FB80 BD80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D80, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_158)
{
    // 3D80 0062;	
    // (㶀) CJK UNIFIED IDEOGRAPH-3D80	[FB80 BD80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D80, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_159)
{
    // 3D81 0021;	
    // (㶁) CJK UNIFIED IDEOGRAPH-3D81	[FB80 BD81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D81, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_160)
{
    // 3D81 003F;	
    // (㶁) CJK UNIFIED IDEOGRAPH-3D81	[FB80 BD81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D81, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_161)
{
    // 3D81 0061;	
    // (㶁) CJK UNIFIED IDEOGRAPH-3D81	[FB80 BD81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D81, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_162)
{
    // 3D81 0041;	
    // (㶁) CJK UNIFIED IDEOGRAPH-3D81	[FB80 BD81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D81, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_163)
{
    // 3D81 0062;	
    // (㶁) CJK UNIFIED IDEOGRAPH-3D81	[FB80 BD81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D81, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_164)
{
    // 3D82 0021;	
    // (㶂) CJK UNIFIED IDEOGRAPH-3D82	[FB80 BD82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D82, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_165)
{
    // 3D82 003F;	
    // (㶂) CJK UNIFIED IDEOGRAPH-3D82	[FB80 BD82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D82, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_166)
{
    // 3D82 0061;	
    // (㶂) CJK UNIFIED IDEOGRAPH-3D82	[FB80 BD82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D82, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_167)
{
    // 3D82 0041;	
    // (㶂) CJK UNIFIED IDEOGRAPH-3D82	[FB80 BD82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D82, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_168)
{
    // 3D82 0062;	
    // (㶂) CJK UNIFIED IDEOGRAPH-3D82	[FB80 BD82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D82, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_169)
{
    // 3D83 0021;	
    // (㶃) CJK UNIFIED IDEOGRAPH-3D83	[FB80 BD83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D83, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_170)
{
    // 3D83 003F;	
    // (㶃) CJK UNIFIED IDEOGRAPH-3D83	[FB80 BD83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D83, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_171)
{
    // 3D83 0061;	
    // (㶃) CJK UNIFIED IDEOGRAPH-3D83	[FB80 BD83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D83, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_172)
{
    // 3D83 0041;	
    // (㶃) CJK UNIFIED IDEOGRAPH-3D83	[FB80 BD83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D83, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_173)
{
    // 3D83 0062;	
    // (㶃) CJK UNIFIED IDEOGRAPH-3D83	[FB80 BD83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D83, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_174)
{
    // 3D84 0021;	
    // (㶄) CJK UNIFIED IDEOGRAPH-3D84	[FB80 BD84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D84, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_175)
{
    // 3D84 003F;	
    // (㶄) CJK UNIFIED IDEOGRAPH-3D84	[FB80 BD84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D84, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_176)
{
    // 3D84 0061;	
    // (㶄) CJK UNIFIED IDEOGRAPH-3D84	[FB80 BD84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D84, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_177)
{
    // 3D84 0041;	
    // (㶄) CJK UNIFIED IDEOGRAPH-3D84	[FB80 BD84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D84, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_178)
{
    // 3D84 0062;	
    // (㶄) CJK UNIFIED IDEOGRAPH-3D84	[FB80 BD84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D84, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_179)
{
    // 3D85 0021;	
    // (㶅) CJK UNIFIED IDEOGRAPH-3D85	[FB80 BD85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D85, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_180)
{
    // 3D85 003F;	
    // (㶅) CJK UNIFIED IDEOGRAPH-3D85	[FB80 BD85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D85, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_181)
{
    // 3D85 0061;	
    // (㶅) CJK UNIFIED IDEOGRAPH-3D85	[FB80 BD85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D85, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_182)
{
    // 3D85 0041;	
    // (㶅) CJK UNIFIED IDEOGRAPH-3D85	[FB80 BD85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D85, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_183)
{
    // 3D85 0062;	
    // (㶅) CJK UNIFIED IDEOGRAPH-3D85	[FB80 BD85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D85, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_184)
{
    // 3D86 0021;	
    // (㶆) CJK UNIFIED IDEOGRAPH-3D86	[FB80 BD86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D86, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_185)
{
    // 3D86 003F;	
    // (㶆) CJK UNIFIED IDEOGRAPH-3D86	[FB80 BD86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D86, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_186)
{
    // 3D86 0061;	
    // (㶆) CJK UNIFIED IDEOGRAPH-3D86	[FB80 BD86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D86, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_187)
{
    // 3D86 0041;	
    // (㶆) CJK UNIFIED IDEOGRAPH-3D86	[FB80 BD86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D86, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_188)
{
    // 3D86 0062;	
    // (㶆) CJK UNIFIED IDEOGRAPH-3D86	[FB80 BD86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D86, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_189)
{
    // 3D87 0021;	
    // (㶇) CJK UNIFIED IDEOGRAPH-3D87	[FB80 BD87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D87, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_190)
{
    // 3D87 003F;	
    // (㶇) CJK UNIFIED IDEOGRAPH-3D87	[FB80 BD87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D87, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_191)
{
    // 3D87 0061;	
    // (㶇) CJK UNIFIED IDEOGRAPH-3D87	[FB80 BD87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D87, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_192)
{
    // 3D87 0041;	
    // (㶇) CJK UNIFIED IDEOGRAPH-3D87	[FB80 BD87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D87, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_193)
{
    // 3D87 0062;	
    // (㶇) CJK UNIFIED IDEOGRAPH-3D87	[FB80 BD87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D87, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_194)
{
    // 3D88 0021;	
    // (㶈) CJK UNIFIED IDEOGRAPH-3D88	[FB80 BD88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D88, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_195)
{
    // 3D88 003F;	
    // (㶈) CJK UNIFIED IDEOGRAPH-3D88	[FB80 BD88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D88, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_196)
{
    // 3D88 0061;	
    // (㶈) CJK UNIFIED IDEOGRAPH-3D88	[FB80 BD88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D88, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_197)
{
    // 3D88 0041;	
    // (㶈) CJK UNIFIED IDEOGRAPH-3D88	[FB80 BD88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D88, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_198)
{
    // 3D88 0062;	
    // (㶈) CJK UNIFIED IDEOGRAPH-3D88	[FB80 BD88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D88, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_199)
{
    // 3D89 0021;	
    // (㶉) CJK UNIFIED IDEOGRAPH-3D89	[FB80 BD89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D89, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_200)
{
    // 3D89 003F;	
    // (㶉) CJK UNIFIED IDEOGRAPH-3D89	[FB80 BD89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D89, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_201)
{
    // 3D89 0061;	
    // (㶉) CJK UNIFIED IDEOGRAPH-3D89	[FB80 BD89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D89, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_202)
{
    // 3D89 0041;	
    // (㶉) CJK UNIFIED IDEOGRAPH-3D89	[FB80 BD89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D89, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_203)
{
    // 3D89 0062;	
    // (㶉) CJK UNIFIED IDEOGRAPH-3D89	[FB80 BD89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D89, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_204)
{
    // 3D8A 0021;	
    // (㶊) CJK UNIFIED IDEOGRAPH-3D8A	[FB80 BD8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_205)
{
    // 3D8A 003F;	
    // (㶊) CJK UNIFIED IDEOGRAPH-3D8A	[FB80 BD8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_206)
{
    // 3D8A 0061;	
    // (㶊) CJK UNIFIED IDEOGRAPH-3D8A	[FB80 BD8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_207)
{
    // 3D8A 0041;	
    // (㶊) CJK UNIFIED IDEOGRAPH-3D8A	[FB80 BD8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D8A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_208)
{
    // 3D8A 0062;	
    // (㶊) CJK UNIFIED IDEOGRAPH-3D8A	[FB80 BD8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_209)
{
    // 3D8B 0021;	
    // (㶋) CJK UNIFIED IDEOGRAPH-3D8B	[FB80 BD8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_210)
{
    // 3D8B 003F;	
    // (㶋) CJK UNIFIED IDEOGRAPH-3D8B	[FB80 BD8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_211)
{
    // 3D8B 0061;	
    // (㶋) CJK UNIFIED IDEOGRAPH-3D8B	[FB80 BD8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_212)
{
    // 3D8B 0041;	
    // (㶋) CJK UNIFIED IDEOGRAPH-3D8B	[FB80 BD8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D8B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_213)
{
    // 3D8B 0062;	
    // (㶋) CJK UNIFIED IDEOGRAPH-3D8B	[FB80 BD8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_214)
{
    // 3D8C 0021;	
    // (㶌) CJK UNIFIED IDEOGRAPH-3D8C	[FB80 BD8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_215)
{
    // 3D8C 003F;	
    // (㶌) CJK UNIFIED IDEOGRAPH-3D8C	[FB80 BD8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_216)
{
    // 3D8C 0061;	
    // (㶌) CJK UNIFIED IDEOGRAPH-3D8C	[FB80 BD8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_217)
{
    // 3D8C 0041;	
    // (㶌) CJK UNIFIED IDEOGRAPH-3D8C	[FB80 BD8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D8C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_218)
{
    // 3D8C 0062;	
    // (㶌) CJK UNIFIED IDEOGRAPH-3D8C	[FB80 BD8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_219)
{
    // 3D8D 0021;	
    // (㶍) CJK UNIFIED IDEOGRAPH-3D8D	[FB80 BD8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_220)
{
    // 3D8D 003F;	
    // (㶍) CJK UNIFIED IDEOGRAPH-3D8D	[FB80 BD8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_221)
{
    // 3D8D 0061;	
    // (㶍) CJK UNIFIED IDEOGRAPH-3D8D	[FB80 BD8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_222)
{
    // 3D8D 0041;	
    // (㶍) CJK UNIFIED IDEOGRAPH-3D8D	[FB80 BD8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D8D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_223)
{
    // 3D8D 0062;	
    // (㶍) CJK UNIFIED IDEOGRAPH-3D8D	[FB80 BD8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_224)
{
    // 3D8E 0021;	
    // (㶎) CJK UNIFIED IDEOGRAPH-3D8E	[FB80 BD8E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_225)
{
    // 3D8E 003F;	
    // (㶎) CJK UNIFIED IDEOGRAPH-3D8E	[FB80 BD8E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_226)
{
    // 3D8E 0061;	
    // (㶎) CJK UNIFIED IDEOGRAPH-3D8E	[FB80 BD8E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_227)
{
    // 3D8E 0041;	
    // (㶎) CJK UNIFIED IDEOGRAPH-3D8E	[FB80 BD8E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D8E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_228)
{
    // 3D8E 0062;	
    // (㶎) CJK UNIFIED IDEOGRAPH-3D8E	[FB80 BD8E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_229)
{
    // 3D8F 0021;	
    // (㶏) CJK UNIFIED IDEOGRAPH-3D8F	[FB80 BD8F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_230)
{
    // 3D8F 003F;	
    // (㶏) CJK UNIFIED IDEOGRAPH-3D8F	[FB80 BD8F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_231)
{
    // 3D8F 0061;	
    // (㶏) CJK UNIFIED IDEOGRAPH-3D8F	[FB80 BD8F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_232)
{
    // 3D8F 0041;	
    // (㶏) CJK UNIFIED IDEOGRAPH-3D8F	[FB80 BD8F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D8F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_233)
{
    // 3D8F 0062;	
    // (㶏) CJK UNIFIED IDEOGRAPH-3D8F	[FB80 BD8F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D8F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_234)
{
    // 3D90 0021;	
    // (㶐) CJK UNIFIED IDEOGRAPH-3D90	[FB80 BD90 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D90, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD90, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_235)
{
    // 3D90 003F;	
    // (㶐) CJK UNIFIED IDEOGRAPH-3D90	[FB80 BD90 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D90, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD90, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_236)
{
    // 3D90 0061;	
    // (㶐) CJK UNIFIED IDEOGRAPH-3D90	[FB80 BD90 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D90, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_237)
{
    // 3D90 0041;	
    // (㶐) CJK UNIFIED IDEOGRAPH-3D90	[FB80 BD90 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D90, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD90, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_238)
{
    // 3D90 0062;	
    // (㶐) CJK UNIFIED IDEOGRAPH-3D90	[FB80 BD90 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D90, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD90, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_239)
{
    // 3D91 0021;	
    // (㶑) CJK UNIFIED IDEOGRAPH-3D91	[FB80 BD91 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D91, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD91, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_240)
{
    // 3D91 003F;	
    // (㶑) CJK UNIFIED IDEOGRAPH-3D91	[FB80 BD91 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D91, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD91, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_241)
{
    // 3D91 0061;	
    // (㶑) CJK UNIFIED IDEOGRAPH-3D91	[FB80 BD91 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D91, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_242)
{
    // 3D91 0041;	
    // (㶑) CJK UNIFIED IDEOGRAPH-3D91	[FB80 BD91 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D91, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD91, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_243)
{
    // 3D91 0062;	
    // (㶑) CJK UNIFIED IDEOGRAPH-3D91	[FB80 BD91 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D91, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD91, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_244)
{
    // 3D92 0021;	
    // (㶒) CJK UNIFIED IDEOGRAPH-3D92	[FB80 BD92 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D92, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD92, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_245)
{
    // 3D92 003F;	
    // (㶒) CJK UNIFIED IDEOGRAPH-3D92	[FB80 BD92 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D92, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD92, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_246)
{
    // 3D92 0061;	
    // (㶒) CJK UNIFIED IDEOGRAPH-3D92	[FB80 BD92 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D92, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_247)
{
    // 3D92 0041;	
    // (㶒) CJK UNIFIED IDEOGRAPH-3D92	[FB80 BD92 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D92, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD92, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_248)
{
    // 3D92 0062;	
    // (㶒) CJK UNIFIED IDEOGRAPH-3D92	[FB80 BD92 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D92, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD92, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_249)
{
    // 3D93 0021;	
    // (㶓) CJK UNIFIED IDEOGRAPH-3D93	[FB80 BD93 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D93, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD93, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_250)
{
    // 3D93 003F;	
    // (㶓) CJK UNIFIED IDEOGRAPH-3D93	[FB80 BD93 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D93, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD93, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_251)
{
    // 3D93 0061;	
    // (㶓) CJK UNIFIED IDEOGRAPH-3D93	[FB80 BD93 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D93, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_252)
{
    // 3D93 0041;	
    // (㶓) CJK UNIFIED IDEOGRAPH-3D93	[FB80 BD93 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D93, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD93, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_253)
{
    // 3D93 0062;	
    // (㶓) CJK UNIFIED IDEOGRAPH-3D93	[FB80 BD93 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D93, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD93, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_254)
{
    // 3D94 0021;	
    // (㶔) CJK UNIFIED IDEOGRAPH-3D94	[FB80 BD94 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D94, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD94, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_255)
{
    // 3D94 003F;	
    // (㶔) CJK UNIFIED IDEOGRAPH-3D94	[FB80 BD94 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D94, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD94, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_256)
{
    // 3D94 0061;	
    // (㶔) CJK UNIFIED IDEOGRAPH-3D94	[FB80 BD94 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D94, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_257)
{
    // 3D94 0041;	
    // (㶔) CJK UNIFIED IDEOGRAPH-3D94	[FB80 BD94 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D94, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD94, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_258)
{
    // 3D94 0062;	
    // (㶔) CJK UNIFIED IDEOGRAPH-3D94	[FB80 BD94 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D94, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD94, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_259)
{
    // 3D95 0021;	
    // (㶕) CJK UNIFIED IDEOGRAPH-3D95	[FB80 BD95 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D95, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD95, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_260)
{
    // 3D95 003F;	
    // (㶕) CJK UNIFIED IDEOGRAPH-3D95	[FB80 BD95 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D95, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD95, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_261)
{
    // 3D95 0061;	
    // (㶕) CJK UNIFIED IDEOGRAPH-3D95	[FB80 BD95 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D95, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_262)
{
    // 3D95 0041;	
    // (㶕) CJK UNIFIED IDEOGRAPH-3D95	[FB80 BD95 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D95, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD95, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_263)
{
    // 3D95 0062;	
    // (㶕) CJK UNIFIED IDEOGRAPH-3D95	[FB80 BD95 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D95, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD95, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_264)
{
    // 3D96 0021;	
    // (㶖) CJK UNIFIED IDEOGRAPH-3D96	[FB80 BD96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D96, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_265)
{
    // 2F916 0021;	
    // (㶖) CJK COMPATIBILITY IDEOGRAPH-2F916	[FB80 BD96 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F916, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD96, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_266)
{
    // 3D96 003F;	
    // (㶖) CJK UNIFIED IDEOGRAPH-3D96	[FB80 BD96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D96, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_267)
{
    // 2F916 003F;	
    // (㶖) CJK COMPATIBILITY IDEOGRAPH-2F916	[FB80 BD96 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F916, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD96, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_268)
{
    // 3D96 0061;	
    // (㶖) CJK UNIFIED IDEOGRAPH-3D96	[FB80 BD96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D96, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_269)
{
    // 2F916 0061;	
    // (㶖) CJK COMPATIBILITY IDEOGRAPH-2F916	[FB80 BD96 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F916, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_270)
{
    // 3D96 0041;	
    // (㶖) CJK UNIFIED IDEOGRAPH-3D96	[FB80 BD96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D96, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_271)
{
    // 2F916 0041;	
    // (㶖) CJK COMPATIBILITY IDEOGRAPH-2F916	[FB80 BD96 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F916, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD96, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_272)
{
    // 3D96 0062;	
    // (㶖) CJK UNIFIED IDEOGRAPH-3D96	[FB80 BD96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D96, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_273)
{
    // 2F916 0062;	
    // (㶖) CJK COMPATIBILITY IDEOGRAPH-2F916	[FB80 BD96 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F916, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD96, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_274)
{
    // 3D97 0021;	
    // (㶗) CJK UNIFIED IDEOGRAPH-3D97	[FB80 BD97 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D97, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD97, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_275)
{
    // 3D97 003F;	
    // (㶗) CJK UNIFIED IDEOGRAPH-3D97	[FB80 BD97 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D97, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD97, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_276)
{
    // 3D97 0061;	
    // (㶗) CJK UNIFIED IDEOGRAPH-3D97	[FB80 BD97 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D97, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_277)
{
    // 3D97 0041;	
    // (㶗) CJK UNIFIED IDEOGRAPH-3D97	[FB80 BD97 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D97, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD97, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_278)
{
    // 3D97 0062;	
    // (㶗) CJK UNIFIED IDEOGRAPH-3D97	[FB80 BD97 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D97, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD97, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_279)
{
    // 3D98 0021;	
    // (㶘) CJK UNIFIED IDEOGRAPH-3D98	[FB80 BD98 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D98, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD98, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_280)
{
    // 3D98 003F;	
    // (㶘) CJK UNIFIED IDEOGRAPH-3D98	[FB80 BD98 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D98, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD98, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_281)
{
    // 3D98 0061;	
    // (㶘) CJK UNIFIED IDEOGRAPH-3D98	[FB80 BD98 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D98, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_282)
{
    // 3D98 0041;	
    // (㶘) CJK UNIFIED IDEOGRAPH-3D98	[FB80 BD98 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D98, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD98, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_283)
{
    // 3D98 0062;	
    // (㶘) CJK UNIFIED IDEOGRAPH-3D98	[FB80 BD98 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D98, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD98, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_284)
{
    // 3D99 0021;	
    // (㶙) CJK UNIFIED IDEOGRAPH-3D99	[FB80 BD99 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D99, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD99, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_285)
{
    // 3D99 003F;	
    // (㶙) CJK UNIFIED IDEOGRAPH-3D99	[FB80 BD99 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D99, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD99, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_286)
{
    // 3D99 0061;	
    // (㶙) CJK UNIFIED IDEOGRAPH-3D99	[FB80 BD99 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D99, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_287)
{
    // 3D99 0041;	
    // (㶙) CJK UNIFIED IDEOGRAPH-3D99	[FB80 BD99 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D99, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD99, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_288)
{
    // 3D99 0062;	
    // (㶙) CJK UNIFIED IDEOGRAPH-3D99	[FB80 BD99 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D99, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD99, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_289)
{
    // 3D9A 0021;	
    // (㶚) CJK UNIFIED IDEOGRAPH-3D9A	[FB80 BD9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_290)
{
    // 3D9A 003F;	
    // (㶚) CJK UNIFIED IDEOGRAPH-3D9A	[FB80 BD9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_291)
{
    // 3D9A 0061;	
    // (㶚) CJK UNIFIED IDEOGRAPH-3D9A	[FB80 BD9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_292)
{
    // 3D9A 0041;	
    // (㶚) CJK UNIFIED IDEOGRAPH-3D9A	[FB80 BD9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D9A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_293)
{
    // 3D9A 0062;	
    // (㶚) CJK UNIFIED IDEOGRAPH-3D9A	[FB80 BD9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_294)
{
    // 3D9B 0021;	
    // (㶛) CJK UNIFIED IDEOGRAPH-3D9B	[FB80 BD9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_295)
{
    // 3D9B 003F;	
    // (㶛) CJK UNIFIED IDEOGRAPH-3D9B	[FB80 BD9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_296)
{
    // 3D9B 0061;	
    // (㶛) CJK UNIFIED IDEOGRAPH-3D9B	[FB80 BD9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_297)
{
    // 3D9B 0041;	
    // (㶛) CJK UNIFIED IDEOGRAPH-3D9B	[FB80 BD9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D9B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_298)
{
    // 3D9B 0062;	
    // (㶛) CJK UNIFIED IDEOGRAPH-3D9B	[FB80 BD9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_299)
{
    // 3D9C 0021;	
    // (㶜) CJK UNIFIED IDEOGRAPH-3D9C	[FB80 BD9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_300)
{
    // 3D9C 003F;	
    // (㶜) CJK UNIFIED IDEOGRAPH-3D9C	[FB80 BD9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_301)
{
    // 3D9C 0061;	
    // (㶜) CJK UNIFIED IDEOGRAPH-3D9C	[FB80 BD9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_302)
{
    // 3D9C 0041;	
    // (㶜) CJK UNIFIED IDEOGRAPH-3D9C	[FB80 BD9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D9C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_303)
{
    // 3D9C 0062;	
    // (㶜) CJK UNIFIED IDEOGRAPH-3D9C	[FB80 BD9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_304)
{
    // 3D9D 0021;	
    // (㶝) CJK UNIFIED IDEOGRAPH-3D9D	[FB80 BD9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_305)
{
    // 3D9D 003F;	
    // (㶝) CJK UNIFIED IDEOGRAPH-3D9D	[FB80 BD9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_306)
{
    // 3D9D 0061;	
    // (㶝) CJK UNIFIED IDEOGRAPH-3D9D	[FB80 BD9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_307)
{
    // 3D9D 0041;	
    // (㶝) CJK UNIFIED IDEOGRAPH-3D9D	[FB80 BD9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D9D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_308)
{
    // 3D9D 0062;	
    // (㶝) CJK UNIFIED IDEOGRAPH-3D9D	[FB80 BD9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_309)
{
    // 3D9E 0021;	
    // (㶞) CJK UNIFIED IDEOGRAPH-3D9E	[FB80 BD9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_310)
{
    // 3D9E 003F;	
    // (㶞) CJK UNIFIED IDEOGRAPH-3D9E	[FB80 BD9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_311)
{
    // 3D9E 0061;	
    // (㶞) CJK UNIFIED IDEOGRAPH-3D9E	[FB80 BD9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_312)
{
    // 3D9E 0041;	
    // (㶞) CJK UNIFIED IDEOGRAPH-3D9E	[FB80 BD9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D9E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_313)
{
    // 3D9E 0062;	
    // (㶞) CJK UNIFIED IDEOGRAPH-3D9E	[FB80 BD9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_314)
{
    // 3D9F 0021;	
    // (㶟) CJK UNIFIED IDEOGRAPH-3D9F	[FB80 BD9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_315)
{
    // 3D9F 003F;	
    // (㶟) CJK UNIFIED IDEOGRAPH-3D9F	[FB80 BD9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBD9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_316)
{
    // 3D9F 0061;	
    // (㶟) CJK UNIFIED IDEOGRAPH-3D9F	[FB80 BD9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_317)
{
    // 3D9F 0041;	
    // (㶟) CJK UNIFIED IDEOGRAPH-3D9F	[FB80 BD9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3D9F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_318)
{
    // 3D9F 0062;	
    // (㶟) CJK UNIFIED IDEOGRAPH-3D9F	[FB80 BD9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3D9F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBD9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_319)
{
    // 3DA0 0021;	
    // (㶠) CJK UNIFIED IDEOGRAPH-3DA0	[FB80 BDA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_320)
{
    // 3DA0 003F;	
    // (㶠) CJK UNIFIED IDEOGRAPH-3DA0	[FB80 BDA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_321)
{
    // 3DA0 0061;	
    // (㶠) CJK UNIFIED IDEOGRAPH-3DA0	[FB80 BDA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_322)
{
    // 3DA0 0041;	
    // (㶠) CJK UNIFIED IDEOGRAPH-3DA0	[FB80 BDA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DA0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_323)
{
    // 3DA0 0062;	
    // (㶠) CJK UNIFIED IDEOGRAPH-3DA0	[FB80 BDA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_324)
{
    // 3DA1 0021;	
    // (㶡) CJK UNIFIED IDEOGRAPH-3DA1	[FB80 BDA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_325)
{
    // 3DA1 003F;	
    // (㶡) CJK UNIFIED IDEOGRAPH-3DA1	[FB80 BDA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_326)
{
    // 3DA1 0061;	
    // (㶡) CJK UNIFIED IDEOGRAPH-3DA1	[FB80 BDA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_327)
{
    // 3DA1 0041;	
    // (㶡) CJK UNIFIED IDEOGRAPH-3DA1	[FB80 BDA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DA1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_328)
{
    // 3DA1 0062;	
    // (㶡) CJK UNIFIED IDEOGRAPH-3DA1	[FB80 BDA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_329)
{
    // 3DA2 0021;	
    // (㶢) CJK UNIFIED IDEOGRAPH-3DA2	[FB80 BDA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_330)
{
    // 3DA2 003F;	
    // (㶢) CJK UNIFIED IDEOGRAPH-3DA2	[FB80 BDA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_331)
{
    // 3DA2 0061;	
    // (㶢) CJK UNIFIED IDEOGRAPH-3DA2	[FB80 BDA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_332)
{
    // 3DA2 0041;	
    // (㶢) CJK UNIFIED IDEOGRAPH-3DA2	[FB80 BDA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DA2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_333)
{
    // 3DA2 0062;	
    // (㶢) CJK UNIFIED IDEOGRAPH-3DA2	[FB80 BDA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_334)
{
    // 3DA3 0021;	
    // (㶣) CJK UNIFIED IDEOGRAPH-3DA3	[FB80 BDA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_335)
{
    // 3DA3 003F;	
    // (㶣) CJK UNIFIED IDEOGRAPH-3DA3	[FB80 BDA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_336)
{
    // 3DA3 0061;	
    // (㶣) CJK UNIFIED IDEOGRAPH-3DA3	[FB80 BDA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_337)
{
    // 3DA3 0041;	
    // (㶣) CJK UNIFIED IDEOGRAPH-3DA3	[FB80 BDA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DA3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_338)
{
    // 3DA3 0062;	
    // (㶣) CJK UNIFIED IDEOGRAPH-3DA3	[FB80 BDA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_339)
{
    // 3DA4 0021;	
    // (㶤) CJK UNIFIED IDEOGRAPH-3DA4	[FB80 BDA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_340)
{
    // 3DA4 003F;	
    // (㶤) CJK UNIFIED IDEOGRAPH-3DA4	[FB80 BDA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_341)
{
    // 3DA4 0061;	
    // (㶤) CJK UNIFIED IDEOGRAPH-3DA4	[FB80 BDA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_342)
{
    // 3DA4 0041;	
    // (㶤) CJK UNIFIED IDEOGRAPH-3DA4	[FB80 BDA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DA4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_343)
{
    // 3DA4 0062;	
    // (㶤) CJK UNIFIED IDEOGRAPH-3DA4	[FB80 BDA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_344)
{
    // 3DA5 0021;	
    // (㶥) CJK UNIFIED IDEOGRAPH-3DA5	[FB80 BDA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_345)
{
    // 3DA5 003F;	
    // (㶥) CJK UNIFIED IDEOGRAPH-3DA5	[FB80 BDA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_346)
{
    // 3DA5 0061;	
    // (㶥) CJK UNIFIED IDEOGRAPH-3DA5	[FB80 BDA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_347)
{
    // 3DA5 0041;	
    // (㶥) CJK UNIFIED IDEOGRAPH-3DA5	[FB80 BDA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DA5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_348)
{
    // 3DA5 0062;	
    // (㶥) CJK UNIFIED IDEOGRAPH-3DA5	[FB80 BDA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_349)
{
    // 3DA6 0021;	
    // (㶦) CJK UNIFIED IDEOGRAPH-3DA6	[FB80 BDA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_350)
{
    // 3DA6 003F;	
    // (㶦) CJK UNIFIED IDEOGRAPH-3DA6	[FB80 BDA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_351)
{
    // 3DA6 0061;	
    // (㶦) CJK UNIFIED IDEOGRAPH-3DA6	[FB80 BDA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_352)
{
    // 3DA6 0041;	
    // (㶦) CJK UNIFIED IDEOGRAPH-3DA6	[FB80 BDA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DA6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_353)
{
    // 3DA6 0062;	
    // (㶦) CJK UNIFIED IDEOGRAPH-3DA6	[FB80 BDA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_354)
{
    // 3DA7 0021;	
    // (㶧) CJK UNIFIED IDEOGRAPH-3DA7	[FB80 BDA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_355)
{
    // 3DA7 003F;	
    // (㶧) CJK UNIFIED IDEOGRAPH-3DA7	[FB80 BDA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_356)
{
    // 3DA7 0061;	
    // (㶧) CJK UNIFIED IDEOGRAPH-3DA7	[FB80 BDA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_357)
{
    // 3DA7 0041;	
    // (㶧) CJK UNIFIED IDEOGRAPH-3DA7	[FB80 BDA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DA7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_358)
{
    // 3DA7 0062;	
    // (㶧) CJK UNIFIED IDEOGRAPH-3DA7	[FB80 BDA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_359)
{
    // 3DA8 0021;	
    // (㶨) CJK UNIFIED IDEOGRAPH-3DA8	[FB80 BDA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_360)
{
    // 3DA8 003F;	
    // (㶨) CJK UNIFIED IDEOGRAPH-3DA8	[FB80 BDA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_361)
{
    // 3DA8 0061;	
    // (㶨) CJK UNIFIED IDEOGRAPH-3DA8	[FB80 BDA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_362)
{
    // 3DA8 0041;	
    // (㶨) CJK UNIFIED IDEOGRAPH-3DA8	[FB80 BDA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DA8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_363)
{
    // 3DA8 0062;	
    // (㶨) CJK UNIFIED IDEOGRAPH-3DA8	[FB80 BDA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_364)
{
    // 3DA9 0021;	
    // (㶩) CJK UNIFIED IDEOGRAPH-3DA9	[FB80 BDA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_365)
{
    // 3DA9 003F;	
    // (㶩) CJK UNIFIED IDEOGRAPH-3DA9	[FB80 BDA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_366)
{
    // 3DA9 0061;	
    // (㶩) CJK UNIFIED IDEOGRAPH-3DA9	[FB80 BDA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_367)
{
    // 3DA9 0041;	
    // (㶩) CJK UNIFIED IDEOGRAPH-3DA9	[FB80 BDA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DA9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_368)
{
    // 3DA9 0062;	
    // (㶩) CJK UNIFIED IDEOGRAPH-3DA9	[FB80 BDA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DA9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_369)
{
    // 3DAA 0021;	
    // (㶪) CJK UNIFIED IDEOGRAPH-3DAA	[FB80 BDAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_370)
{
    // 3DAA 003F;	
    // (㶪) CJK UNIFIED IDEOGRAPH-3DAA	[FB80 BDAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_371)
{
    // 3DAA 0061;	
    // (㶪) CJK UNIFIED IDEOGRAPH-3DAA	[FB80 BDAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_372)
{
    // 3DAA 0041;	
    // (㶪) CJK UNIFIED IDEOGRAPH-3DAA	[FB80 BDAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DAA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_373)
{
    // 3DAA 0062;	
    // (㶪) CJK UNIFIED IDEOGRAPH-3DAA	[FB80 BDAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_374)
{
    // 3DAB 0021;	
    // (㶫) CJK UNIFIED IDEOGRAPH-3DAB	[FB80 BDAB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_375)
{
    // 3DAB 003F;	
    // (㶫) CJK UNIFIED IDEOGRAPH-3DAB	[FB80 BDAB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDAB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_376)
{
    // 3DAB 0061;	
    // (㶫) CJK UNIFIED IDEOGRAPH-3DAB	[FB80 BDAB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_377)
{
    // 3DAB 0041;	
    // (㶫) CJK UNIFIED IDEOGRAPH-3DAB	[FB80 BDAB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DAB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_378)
{
    // 3DAB 0062;	
    // (㶫) CJK UNIFIED IDEOGRAPH-3DAB	[FB80 BDAB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_379)
{
    // 3DAC 0021;	
    // (㶬) CJK UNIFIED IDEOGRAPH-3DAC	[FB80 BDAC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_380)
{
    // 3DAC 003F;	
    // (㶬) CJK UNIFIED IDEOGRAPH-3DAC	[FB80 BDAC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDAC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_381)
{
    // 3DAC 0061;	
    // (㶬) CJK UNIFIED IDEOGRAPH-3DAC	[FB80 BDAC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_382)
{
    // 3DAC 0041;	
    // (㶬) CJK UNIFIED IDEOGRAPH-3DAC	[FB80 BDAC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DAC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_383)
{
    // 3DAC 0062;	
    // (㶬) CJK UNIFIED IDEOGRAPH-3DAC	[FB80 BDAC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_384)
{
    // 3DAD 0021;	
    // (㶭) CJK UNIFIED IDEOGRAPH-3DAD	[FB80 BDAD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_385)
{
    // 3DAD 003F;	
    // (㶭) CJK UNIFIED IDEOGRAPH-3DAD	[FB80 BDAD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDAD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_386)
{
    // 3DAD 0061;	
    // (㶭) CJK UNIFIED IDEOGRAPH-3DAD	[FB80 BDAD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_387)
{
    // 3DAD 0041;	
    // (㶭) CJK UNIFIED IDEOGRAPH-3DAD	[FB80 BDAD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DAD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_388)
{
    // 3DAD 0062;	
    // (㶭) CJK UNIFIED IDEOGRAPH-3DAD	[FB80 BDAD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_389)
{
    // 3DAE 0021;	
    // (㶮) CJK UNIFIED IDEOGRAPH-3DAE	[FB80 BDAE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_390)
{
    // 3DAE 003F;	
    // (㶮) CJK UNIFIED IDEOGRAPH-3DAE	[FB80 BDAE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDAE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_391)
{
    // 3DAE 0061;	
    // (㶮) CJK UNIFIED IDEOGRAPH-3DAE	[FB80 BDAE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_392)
{
    // 3DAE 0041;	
    // (㶮) CJK UNIFIED IDEOGRAPH-3DAE	[FB80 BDAE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DAE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_393)
{
    // 3DAE 0062;	
    // (㶮) CJK UNIFIED IDEOGRAPH-3DAE	[FB80 BDAE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_394)
{
    // 3DAF 0021;	
    // (㶯) CJK UNIFIED IDEOGRAPH-3DAF	[FB80 BDAF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_395)
{
    // 3DAF 003F;	
    // (㶯) CJK UNIFIED IDEOGRAPH-3DAF	[FB80 BDAF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDAF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_396)
{
    // 3DAF 0061;	
    // (㶯) CJK UNIFIED IDEOGRAPH-3DAF	[FB80 BDAF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_397)
{
    // 3DAF 0041;	
    // (㶯) CJK UNIFIED IDEOGRAPH-3DAF	[FB80 BDAF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DAF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_398)
{
    // 3DAF 0062;	
    // (㶯) CJK UNIFIED IDEOGRAPH-3DAF	[FB80 BDAF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DAF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDAF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_399)
{
    // 3DB0 0021;	
    // (㶰) CJK UNIFIED IDEOGRAPH-3DB0	[FB80 BDB0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_400)
{
    // 3DB0 003F;	
    // (㶰) CJK UNIFIED IDEOGRAPH-3DB0	[FB80 BDB0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDB0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_401)
{
    // 3DB0 0061;	
    // (㶰) CJK UNIFIED IDEOGRAPH-3DB0	[FB80 BDB0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_402)
{
    // 3DB0 0041;	
    // (㶰) CJK UNIFIED IDEOGRAPH-3DB0	[FB80 BDB0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DB0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_403)
{
    // 3DB0 0062;	
    // (㶰) CJK UNIFIED IDEOGRAPH-3DB0	[FB80 BDB0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_404)
{
    // 3DB1 0021;	
    // (㶱) CJK UNIFIED IDEOGRAPH-3DB1	[FB80 BDB1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_405)
{
    // 3DB1 003F;	
    // (㶱) CJK UNIFIED IDEOGRAPH-3DB1	[FB80 BDB1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDB1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_406)
{
    // 3DB1 0061;	
    // (㶱) CJK UNIFIED IDEOGRAPH-3DB1	[FB80 BDB1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_407)
{
    // 3DB1 0041;	
    // (㶱) CJK UNIFIED IDEOGRAPH-3DB1	[FB80 BDB1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DB1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_408)
{
    // 3DB1 0062;	
    // (㶱) CJK UNIFIED IDEOGRAPH-3DB1	[FB80 BDB1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_409)
{
    // 3DB2 0021;	
    // (㶲) CJK UNIFIED IDEOGRAPH-3DB2	[FB80 BDB2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_410)
{
    // 3DB2 003F;	
    // (㶲) CJK UNIFIED IDEOGRAPH-3DB2	[FB80 BDB2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDB2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_411)
{
    // 3DB2 0061;	
    // (㶲) CJK UNIFIED IDEOGRAPH-3DB2	[FB80 BDB2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_412)
{
    // 3DB2 0041;	
    // (㶲) CJK UNIFIED IDEOGRAPH-3DB2	[FB80 BDB2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DB2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_413)
{
    // 3DB2 0062;	
    // (㶲) CJK UNIFIED IDEOGRAPH-3DB2	[FB80 BDB2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_414)
{
    // 3DB3 0021;	
    // (㶳) CJK UNIFIED IDEOGRAPH-3DB3	[FB80 BDB3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_415)
{
    // 3DB3 003F;	
    // (㶳) CJK UNIFIED IDEOGRAPH-3DB3	[FB80 BDB3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDB3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_416)
{
    // 3DB3 0061;	
    // (㶳) CJK UNIFIED IDEOGRAPH-3DB3	[FB80 BDB3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_417)
{
    // 3DB3 0041;	
    // (㶳) CJK UNIFIED IDEOGRAPH-3DB3	[FB80 BDB3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DB3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_418)
{
    // 3DB3 0062;	
    // (㶳) CJK UNIFIED IDEOGRAPH-3DB3	[FB80 BDB3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_419)
{
    // 3DB4 0021;	
    // (㶴) CJK UNIFIED IDEOGRAPH-3DB4	[FB80 BDB4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_420)
{
    // 3DB4 003F;	
    // (㶴) CJK UNIFIED IDEOGRAPH-3DB4	[FB80 BDB4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDB4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_421)
{
    // 3DB4 0061;	
    // (㶴) CJK UNIFIED IDEOGRAPH-3DB4	[FB80 BDB4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_422)
{
    // 3DB4 0041;	
    // (㶴) CJK UNIFIED IDEOGRAPH-3DB4	[FB80 BDB4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DB4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_423)
{
    // 3DB4 0062;	
    // (㶴) CJK UNIFIED IDEOGRAPH-3DB4	[FB80 BDB4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_424)
{
    // 3DB5 0021;	
    // (㶵) CJK UNIFIED IDEOGRAPH-3DB5	[FB80 BDB5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_425)
{
    // 3DB5 003F;	
    // (㶵) CJK UNIFIED IDEOGRAPH-3DB5	[FB80 BDB5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDB5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_426)
{
    // 3DB5 0061;	
    // (㶵) CJK UNIFIED IDEOGRAPH-3DB5	[FB80 BDB5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_427)
{
    // 3DB5 0041;	
    // (㶵) CJK UNIFIED IDEOGRAPH-3DB5	[FB80 BDB5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DB5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_428)
{
    // 3DB5 0062;	
    // (㶵) CJK UNIFIED IDEOGRAPH-3DB5	[FB80 BDB5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_429)
{
    // 3DB6 0021;	
    // (㶶) CJK UNIFIED IDEOGRAPH-3DB6	[FB80 BDB6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_430)
{
    // 3DB6 003F;	
    // (㶶) CJK UNIFIED IDEOGRAPH-3DB6	[FB80 BDB6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDB6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_431)
{
    // 3DB6 0061;	
    // (㶶) CJK UNIFIED IDEOGRAPH-3DB6	[FB80 BDB6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_432)
{
    // 3DB6 0041;	
    // (㶶) CJK UNIFIED IDEOGRAPH-3DB6	[FB80 BDB6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DB6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_433)
{
    // 3DB6 0062;	
    // (㶶) CJK UNIFIED IDEOGRAPH-3DB6	[FB80 BDB6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_434)
{
    // 3DB7 0021;	
    // (㶷) CJK UNIFIED IDEOGRAPH-3DB7	[FB80 BDB7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_435)
{
    // 3DB7 003F;	
    // (㶷) CJK UNIFIED IDEOGRAPH-3DB7	[FB80 BDB7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDB7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_436)
{
    // 3DB7 0061;	
    // (㶷) CJK UNIFIED IDEOGRAPH-3DB7	[FB80 BDB7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_437)
{
    // 3DB7 0041;	
    // (㶷) CJK UNIFIED IDEOGRAPH-3DB7	[FB80 BDB7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DB7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_438)
{
    // 3DB7 0062;	
    // (㶷) CJK UNIFIED IDEOGRAPH-3DB7	[FB80 BDB7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_439)
{
    // 3DB8 0021;	
    // (㶸) CJK UNIFIED IDEOGRAPH-3DB8	[FB80 BDB8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_440)
{
    // 3DB8 003F;	
    // (㶸) CJK UNIFIED IDEOGRAPH-3DB8	[FB80 BDB8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDB8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_441)
{
    // 3DB8 0061;	
    // (㶸) CJK UNIFIED IDEOGRAPH-3DB8	[FB80 BDB8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_442)
{
    // 3DB8 0041;	
    // (㶸) CJK UNIFIED IDEOGRAPH-3DB8	[FB80 BDB8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DB8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_443)
{
    // 3DB8 0062;	
    // (㶸) CJK UNIFIED IDEOGRAPH-3DB8	[FB80 BDB8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_444)
{
    // 3DB9 0021;	
    // (㶹) CJK UNIFIED IDEOGRAPH-3DB9	[FB80 BDB9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_445)
{
    // 3DB9 003F;	
    // (㶹) CJK UNIFIED IDEOGRAPH-3DB9	[FB80 BDB9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDB9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_446)
{
    // 3DB9 0061;	
    // (㶹) CJK UNIFIED IDEOGRAPH-3DB9	[FB80 BDB9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_447)
{
    // 3DB9 0041;	
    // (㶹) CJK UNIFIED IDEOGRAPH-3DB9	[FB80 BDB9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DB9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_448)
{
    // 3DB9 0062;	
    // (㶹) CJK UNIFIED IDEOGRAPH-3DB9	[FB80 BDB9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DB9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDB9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_449)
{
    // 3DBA 0021;	
    // (㶺) CJK UNIFIED IDEOGRAPH-3DBA	[FB80 BDBA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_450)
{
    // 3DBA 003F;	
    // (㶺) CJK UNIFIED IDEOGRAPH-3DBA	[FB80 BDBA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDBA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_451)
{
    // 3DBA 0061;	
    // (㶺) CJK UNIFIED IDEOGRAPH-3DBA	[FB80 BDBA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_452)
{
    // 3DBA 0041;	
    // (㶺) CJK UNIFIED IDEOGRAPH-3DBA	[FB80 BDBA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DBA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_453)
{
    // 3DBA 0062;	
    // (㶺) CJK UNIFIED IDEOGRAPH-3DBA	[FB80 BDBA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_454)
{
    // 3DBB 0021;	
    // (㶻) CJK UNIFIED IDEOGRAPH-3DBB	[FB80 BDBB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_455)
{
    // 3DBB 003F;	
    // (㶻) CJK UNIFIED IDEOGRAPH-3DBB	[FB80 BDBB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDBB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_456)
{
    // 3DBB 0061;	
    // (㶻) CJK UNIFIED IDEOGRAPH-3DBB	[FB80 BDBB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_457)
{
    // 3DBB 0041;	
    // (㶻) CJK UNIFIED IDEOGRAPH-3DBB	[FB80 BDBB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DBB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_458)
{
    // 3DBB 0062;	
    // (㶻) CJK UNIFIED IDEOGRAPH-3DBB	[FB80 BDBB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_459)
{
    // 3DBC 0021;	
    // (㶼) CJK UNIFIED IDEOGRAPH-3DBC	[FB80 BDBC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_460)
{
    // 3DBC 003F;	
    // (㶼) CJK UNIFIED IDEOGRAPH-3DBC	[FB80 BDBC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDBC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_461)
{
    // 3DBC 0061;	
    // (㶼) CJK UNIFIED IDEOGRAPH-3DBC	[FB80 BDBC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_462)
{
    // 3DBC 0041;	
    // (㶼) CJK UNIFIED IDEOGRAPH-3DBC	[FB80 BDBC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DBC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_463)
{
    // 3DBC 0062;	
    // (㶼) CJK UNIFIED IDEOGRAPH-3DBC	[FB80 BDBC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_464)
{
    // 3DBD 0021;	
    // (㶽) CJK UNIFIED IDEOGRAPH-3DBD	[FB80 BDBD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_465)
{
    // 3DBD 003F;	
    // (㶽) CJK UNIFIED IDEOGRAPH-3DBD	[FB80 BDBD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDBD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_466)
{
    // 3DBD 0061;	
    // (㶽) CJK UNIFIED IDEOGRAPH-3DBD	[FB80 BDBD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_467)
{
    // 3DBD 0041;	
    // (㶽) CJK UNIFIED IDEOGRAPH-3DBD	[FB80 BDBD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DBD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_468)
{
    // 3DBD 0062;	
    // (㶽) CJK UNIFIED IDEOGRAPH-3DBD	[FB80 BDBD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_469)
{
    // 3DBE 0021;	
    // (㶾) CJK UNIFIED IDEOGRAPH-3DBE	[FB80 BDBE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_470)
{
    // 3DBE 003F;	
    // (㶾) CJK UNIFIED IDEOGRAPH-3DBE	[FB80 BDBE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDBE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_471)
{
    // 3DBE 0061;	
    // (㶾) CJK UNIFIED IDEOGRAPH-3DBE	[FB80 BDBE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_472)
{
    // 3DBE 0041;	
    // (㶾) CJK UNIFIED IDEOGRAPH-3DBE	[FB80 BDBE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DBE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_473)
{
    // 3DBE 0062;	
    // (㶾) CJK UNIFIED IDEOGRAPH-3DBE	[FB80 BDBE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_474)
{
    // 3DBF 0021;	
    // (㶿) CJK UNIFIED IDEOGRAPH-3DBF	[FB80 BDBF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_475)
{
    // 3DBF 003F;	
    // (㶿) CJK UNIFIED IDEOGRAPH-3DBF	[FB80 BDBF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_476)
{
    // 3DBF 0061;	
    // (㶿) CJK UNIFIED IDEOGRAPH-3DBF	[FB80 BDBF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_477)
{
    // 3DBF 0041;	
    // (㶿) CJK UNIFIED IDEOGRAPH-3DBF	[FB80 BDBF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DBF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_478)
{
    // 3DBF 0062;	
    // (㶿) CJK UNIFIED IDEOGRAPH-3DBF	[FB80 BDBF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DBF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_479)
{
    // 3DC0 0021;	
    // (㷀) CJK UNIFIED IDEOGRAPH-3DC0	[FB80 BDC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_480)
{
    // 3DC0 003F;	
    // (㷀) CJK UNIFIED IDEOGRAPH-3DC0	[FB80 BDC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_481)
{
    // 3DC0 0061;	
    // (㷀) CJK UNIFIED IDEOGRAPH-3DC0	[FB80 BDC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_482)
{
    // 3DC0 0041;	
    // (㷀) CJK UNIFIED IDEOGRAPH-3DC0	[FB80 BDC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DC0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_483)
{
    // 3DC0 0062;	
    // (㷀) CJK UNIFIED IDEOGRAPH-3DC0	[FB80 BDC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_484)
{
    // 3DC1 0021;	
    // (㷁) CJK UNIFIED IDEOGRAPH-3DC1	[FB80 BDC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_485)
{
    // 3DC1 003F;	
    // (㷁) CJK UNIFIED IDEOGRAPH-3DC1	[FB80 BDC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_486)
{
    // 3DC1 0061;	
    // (㷁) CJK UNIFIED IDEOGRAPH-3DC1	[FB80 BDC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_487)
{
    // 3DC1 0041;	
    // (㷁) CJK UNIFIED IDEOGRAPH-3DC1	[FB80 BDC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DC1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_488)
{
    // 3DC1 0062;	
    // (㷁) CJK UNIFIED IDEOGRAPH-3DC1	[FB80 BDC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_489)
{
    // 3DC2 0021;	
    // (㷂) CJK UNIFIED IDEOGRAPH-3DC2	[FB80 BDC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_490)
{
    // 3DC2 003F;	
    // (㷂) CJK UNIFIED IDEOGRAPH-3DC2	[FB80 BDC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_491)
{
    // 3DC2 0061;	
    // (㷂) CJK UNIFIED IDEOGRAPH-3DC2	[FB80 BDC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_492)
{
    // 3DC2 0041;	
    // (㷂) CJK UNIFIED IDEOGRAPH-3DC2	[FB80 BDC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DC2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_493)
{
    // 3DC2 0062;	
    // (㷂) CJK UNIFIED IDEOGRAPH-3DC2	[FB80 BDC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_494)
{
    // 3DC3 0021;	
    // (㷃) CJK UNIFIED IDEOGRAPH-3DC3	[FB80 BDC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_495)
{
    // 3DC3 003F;	
    // (㷃) CJK UNIFIED IDEOGRAPH-3DC3	[FB80 BDC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_496)
{
    // 3DC3 0061;	
    // (㷃) CJK UNIFIED IDEOGRAPH-3DC3	[FB80 BDC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_497)
{
    // 3DC3 0041;	
    // (㷃) CJK UNIFIED IDEOGRAPH-3DC3	[FB80 BDC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DC3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_498)
{
    // 3DC3 0062;	
    // (㷃) CJK UNIFIED IDEOGRAPH-3DC3	[FB80 BDC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_351_499)
{
    // 3DC4 0021;	
    // (㷄) CJK UNIFIED IDEOGRAPH-3DC4	[FB80 BDC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

