// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_113_000)
{
    // FDF7  ; [.23D4.0020.001A][.2402.0020.001A][.242C.0020.001A][.2417.0020.001A] 
    // ARABIC LIGATURE ALAYHE ISOLATED FORM

    uint32_t const cps[1] = { 0xfdf7 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x23d4), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x2402), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x242c), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x2417), uint8_t(0x0), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_113_001)
{
    // FDF8  ; [.241D.0020.001A][.23BF.0020.001A][.2402.0020.001A][.2409.0020.001A] 
    // ARABIC LIGATURE WASALLAM ISOLATED FORM

    uint32_t const cps[1] = { 0xfdf8 };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x241d), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x23bf), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x2402), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x2409), uint8_t(0x0), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_113_002)
{
    // FDF9  ; [.23CA.0020.001A][.2402.0020.001A][.242B.0020.001A] 
    // ARABIC LIGATURE SALLA ISOLATED FORM

    uint32_t const cps[1] = { 0xfdf9 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x23ca), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x2402), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x242b), uint8_t(0x0), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_113_003)
{
    // FDFA  ; [.23CA.0020.001A][.2402.0020.001A][.242B.0020.001A][*0209.0020.001A][.2371.0020.001A][.2402.0020.001A][.2402.0020.001A][.2417.0020.001A][*0209.0020.001A][.23D4.0020.001A][.2402.0020.001A][.242C.0020.001A][.2417.0020.001A][*0209.0020.001A][.241D.0020.001A][.23BF.0020.001A][.2402.0020.001A][.2409.0020.001A] 
    // ARABIC LIGATURE SALLALLAHOU ALAYHE WASALLAM

    uint32_t const cps[1] = { 0xfdfa };
    // biased L2 weight
    boost::text::collation_element const ces[18] = { {uint16_t(0x23ca), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x2402), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x242b), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x209), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x2371), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x2402), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x2402), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x2417), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x209), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x23d4), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x2402), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x242c), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x2417), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x209), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x241d), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x23bf), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x2402), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x2409), uint8_t(0x0), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 18));
}

TEST(collation, table_lookup_113_004)
{
    // FDFB  ; [.238B.0020.001A][.2402.0020.001A][*0209.0020.001A][.238B.0020.001A][.2402.0020.001A][.2371.0020.001A][.2402.0020.001A][.2417.0020.001A] 
    // ARABIC LIGATURE JALLAJALALOUHOU

    uint32_t const cps[1] = { 0xfdfb };
    // biased L2 weight
    boost::text::collation_element const ces[8] = { {uint16_t(0x238b), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x2402), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x209), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x238b), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x2402), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x2371), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x2402), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x2417), uint8_t(0x0), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 8));
}

TEST(collation, table_lookup_113_005)
{
    // FDFC  ; [.23AC.0020.001A][.242D.0020.001A][.2371.0020.001A][.2402.0020.001A] 
    // RIAL SIGN

    uint32_t const cps[1] = { 0xfdfc };
    // biased L2 weight
    boost::text::collation_element const ces[4] = { {uint16_t(0x23ac), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x242d), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x2371), uint8_t(0x0), uint8_t(0x1a)}, {uint16_t(0x2402), uint8_t(0x0), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 4));
}

TEST(collation, table_lookup_113_006)
{
    // FDFD  ; [*0517.0020.0002] 
    // ARABIC LIGATURE BISMILLAH AR-RAHMAN AR-RAHEEM

    uint32_t const cps[1] = { 0xfdfd };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x517), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_007)
{
    // FE00  ; [.0000.0000.0000] 
    // VARIATION SELECTOR-1

    uint32_t const cps[1] = { 0xfe00 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_008)
{
    // FE01  ; [.0000.0000.0000] 
    // VARIATION SELECTOR-2

    uint32_t const cps[1] = { 0xfe01 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_009)
{
    // FE02  ; [.0000.0000.0000] 
    // VARIATION SELECTOR-3

    uint32_t const cps[1] = { 0xfe02 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_010)
{
    // FE03  ; [.0000.0000.0000] 
    // VARIATION SELECTOR-4

    uint32_t const cps[1] = { 0xfe03 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_011)
{
    // FE04  ; [.0000.0000.0000] 
    // VARIATION SELECTOR-5

    uint32_t const cps[1] = { 0xfe04 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_012)
{
    // FE05  ; [.0000.0000.0000] 
    // VARIATION SELECTOR-6

    uint32_t const cps[1] = { 0xfe05 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_013)
{
    // FE06  ; [.0000.0000.0000] 
    // VARIATION SELECTOR-7

    uint32_t const cps[1] = { 0xfe06 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_014)
{
    // FE07  ; [.0000.0000.0000] 
    // VARIATION SELECTOR-8

    uint32_t const cps[1] = { 0xfe07 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_015)
{
    // FE08  ; [.0000.0000.0000] 
    // VARIATION SELECTOR-9

    uint32_t const cps[1] = { 0xfe08 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_016)
{
    // FE09  ; [.0000.0000.0000] 
    // VARIATION SELECTOR-10

    uint32_t const cps[1] = { 0xfe09 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_017)
{
    // FE0A  ; [.0000.0000.0000] 
    // VARIATION SELECTOR-11

    uint32_t const cps[1] = { 0xfe0a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_018)
{
    // FE0B  ; [.0000.0000.0000] 
    // VARIATION SELECTOR-12

    uint32_t const cps[1] = { 0xfe0b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_019)
{
    // FE0C  ; [.0000.0000.0000] 
    // VARIATION SELECTOR-13

    uint32_t const cps[1] = { 0xfe0c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_020)
{
    // FE0D  ; [.0000.0000.0000] 
    // VARIATION SELECTOR-14

    uint32_t const cps[1] = { 0xfe0d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_021)
{
    // FE0E  ; [.0000.0000.0000] 
    // VARIATION SELECTOR-15

    uint32_t const cps[1] = { 0xfe0e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_022)
{
    // FE0F  ; [.0000.0000.0000] 
    // VARIATION SELECTOR-16

    uint32_t const cps[1] = { 0xfe0f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_023)
{
    // FE10  ; [*0222.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL COMMA

    uint32_t const cps[1] = { 0xfe10 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x222), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_024)
{
    // FE11  ; [*0231.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC COMMA

    uint32_t const cps[1] = { 0xfe11 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x231), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_025)
{
    // FE12  ; [*028B.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL IDEOGRAPHIC FULL STOP

    uint32_t const cps[1] = { 0xfe12 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x28b), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_026)
{
    // FE13  ; [*023A.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL COLON

    uint32_t const cps[1] = { 0xfe13 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23a), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_027)
{
    // FE14  ; [*0234.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL SEMICOLON

    uint32_t const cps[1] = { 0xfe14 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x234), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_028)
{
    // FE15  ; [*0261.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL EXCLAMATION MARK

    uint32_t const cps[1] = { 0xfe15 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x261), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_029)
{
    // FE16  ; [*0267.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL QUESTION MARK

    uint32_t const cps[1] = { 0xfe16 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x267), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_030)
{
    // FE17  ; [*037C.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL LEFT WHITE LENTICULAR BRACKET

    uint32_t const cps[1] = { 0xfe17 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37c), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_031)
{
    // FE18  ; [*037D.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL RIGHT WHITE LENTICULAR BRAKCET

    uint32_t const cps[1] = { 0xfe18 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37d), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_032)
{
    // FE19  ; [*0278.0020.0016][*0278.0020.0016][*0278.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL HORIZONTAL ELLIPSIS

    uint32_t const cps[1] = { 0xfe19 };
    // biased L2 weight
    boost::text::collation_element const ces[3] = { {uint16_t(0x278), uint8_t(0x0), uint8_t(0x16)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x16)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_113_033)
{
    // FE20  ; [.0000.004F.0002] 
    // COMBINING LIGATURE LEFT HALF

    uint32_t const cps[1] = { 0xfe20 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x2f), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_034)
{
    // FE21  ; [.0000.0000.0000] 
    // COMBINING LIGATURE RIGHT HALF

    uint32_t const cps[1] = { 0xfe21 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_035)
{
    // FE22  ; [.0000.004E.0002] 
    // COMBINING DOUBLE TILDE LEFT HALF

    uint32_t const cps[1] = { 0xfe22 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x2e), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_036)
{
    // FE23  ; [.0000.0000.0000] 
    // COMBINING DOUBLE TILDE RIGHT HALF

    uint32_t const cps[1] = { 0xfe23 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_037)
{
    // FE24  ; [.0000.0000.0000] 
    // COMBINING MACRON LEFT HALF

    uint32_t const cps[1] = { 0xfe24 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_038)
{
    // FE25  ; [.0000.0000.0000] 
    // COMBINING MACRON RIGHT HALF

    uint32_t const cps[1] = { 0xfe25 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_039)
{
    // FE26  ; [.0000.0000.0000] 
    // COMBINING CONJOINING MACRON

    uint32_t const cps[1] = { 0xfe26 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_040)
{
    // FE27  ; [.0000.0034.0002] 
    // COMBINING LIGATURE LEFT HALF BELOW

    uint32_t const cps[1] = { 0xfe27 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x14), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_041)
{
    // FE28  ; [.0000.0000.0000] 
    // COMBINING LIGATURE RIGHT HALF BELOW

    uint32_t const cps[1] = { 0xfe28 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_042)
{
    // FE29  ; [.0000.004E.0002] 
    // COMBINING TILDE LEFT HALF BELOW

    uint32_t const cps[1] = { 0xfe29 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x2e), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_043)
{
    // FE2A  ; [.0000.0000.0000] 
    // COMBINING TILDE RIGHT HALF BELOW

    uint32_t const cps[1] = { 0xfe2a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_044)
{
    // FE2B  ; [.0000.0000.0000] 
    // COMBINING MACRON LEFT HALF BELOW

    uint32_t const cps[1] = { 0xfe2b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_045)
{
    // FE2C  ; [.0000.0000.0000] 
    // COMBINING MACRON RIGHT HALF BELOW

    uint32_t const cps[1] = { 0xfe2c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_046)
{
    // FE2D  ; [.0000.0000.0000] 
    // COMBINING CONJOINING MACRON BELOW

    uint32_t const cps[1] = { 0xfe2d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_047)
{
    // FE2E  ; [.0000.0050.0002] 
    // COMBINING CYRILLIC TITLO LEFT HALF

    uint32_t const cps[1] = { 0xfe2e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x30), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_048)
{
    // FE2F  ; [.0000.0000.0000] 
    // COMBINING CYRILLIC TITLO RIGHT HALF

    uint32_t const cps[1] = { 0xfe2f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_049)
{
    // FE30  ; [*0278.0020.0016][*0278.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL TWO DOT LEADER

    uint32_t const cps[1] = { 0xfe30 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x278), uint8_t(0x0), uint8_t(0x16)}, {uint16_t(0x278), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_113_050)
{
    // FE31  ; [*0216.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL EM DASH

    uint32_t const cps[1] = { 0xfe31 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x216), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_051)
{
    // FE32  ; [*0215.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL EN DASH

    uint32_t const cps[1] = { 0xfe32 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x215), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_052)
{
    // FE33  ; [*020B.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL LOW LINE

    uint32_t const cps[1] = { 0xfe33 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20b), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_053)
{
    // FE34  ; [*020B.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL WAVY LOW LINE

    uint32_t const cps[1] = { 0xfe34 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20b), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_054)
{
    // FE35  ; [*0318.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL LEFT PARENTHESIS

    uint32_t const cps[1] = { 0xfe35 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_055)
{
    // FE36  ; [*0319.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL RIGHT PARENTHESIS

    uint32_t const cps[1] = { 0xfe36 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x319), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_056)
{
    // FE37  ; [*031C.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL LEFT CURLY BRACKET

    uint32_t const cps[1] = { 0xfe37 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31c), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_057)
{
    // FE38  ; [*031D.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL RIGHT CURLY BRACKET

    uint32_t const cps[1] = { 0xfe38 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31d), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_058)
{
    // FE39  ; [*037A.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL LEFT TORTOISE SHELL BRACKET

    uint32_t const cps[1] = { 0xfe39 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37a), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_059)
{
    // FE3A  ; [*037B.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL RIGHT TORTOISE SHELL BRACKET

    uint32_t const cps[1] = { 0xfe3a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37b), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_060)
{
    // FE3B  ; [*0378.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL LEFT BLACK LENTICULAR BRACKET

    uint32_t const cps[1] = { 0xfe3b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x378), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_061)
{
    // FE3C  ; [*0379.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL RIGHT BLACK LENTICULAR BRACKET

    uint32_t const cps[1] = { 0xfe3c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x379), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_062)
{
    // FE3D  ; [*0372.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL LEFT DOUBLE ANGLE BRACKET

    uint32_t const cps[1] = { 0xfe3d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x372), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_063)
{
    // FE3E  ; [*0373.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL RIGHT DOUBLE ANGLE BRACKET

    uint32_t const cps[1] = { 0xfe3e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x373), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_064)
{
    // FE3F  ; [*0370.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL LEFT ANGLE BRACKET

    uint32_t const cps[1] = { 0xfe3f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x370), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_065)
{
    // FE40  ; [*0371.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL RIGHT ANGLE BRACKET

    uint32_t const cps[1] = { 0xfe40 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x371), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_066)
{
    // FE41  ; [*0374.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL LEFT CORNER BRACKET

    uint32_t const cps[1] = { 0xfe41 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x374), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_067)
{
    // FE42  ; [*0375.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL RIGHT CORNER BRACKET

    uint32_t const cps[1] = { 0xfe42 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x375), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_068)
{
    // FE43  ; [*0376.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL LEFT WHITE CORNER BRACKET

    uint32_t const cps[1] = { 0xfe43 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x376), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_069)
{
    // FE44  ; [*0377.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL RIGHT WHITE CORNER BRACKET

    uint32_t const cps[1] = { 0xfe44 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x377), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_070)
{
    // FE45  ; [*0232.0020.0002] 
    // SESAME DOT

    uint32_t const cps[1] = { 0xfe45 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x232), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_071)
{
    // FE46  ; [*0233.0020.0002] 
    // WHITE SESAME DOT

    uint32_t const cps[1] = { 0xfe46 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x233), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_072)
{
    // FE47  ; [*031A.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL LEFT SQUARE BRACKET

    uint32_t const cps[1] = { 0xfe47 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31a), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_073)
{
    // FE48  ; [*031B.0020.0016] 
    // PRESENTATION FORM FOR VERTICAL RIGHT SQUARE BRACKET

    uint32_t const cps[1] = { 0xfe48 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31b), uint8_t(0x0), uint8_t(0x16)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_074)
{
    // FE49  ; [*020A.0020.0004] 
    // DASHED OVERLINE

    uint32_t const cps[1] = { 0xfe49 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20a), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_075)
{
    // FE4A  ; [*020A.0020.0004] 
    // CENTRELINE OVERLINE

    uint32_t const cps[1] = { 0xfe4a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20a), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_076)
{
    // FE4B  ; [*020A.0020.0004] 
    // WAVY OVERLINE

    uint32_t const cps[1] = { 0xfe4b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20a), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_077)
{
    // FE4C  ; [*020A.0020.0004] 
    // DOUBLE WAVY OVERLINE

    uint32_t const cps[1] = { 0xfe4c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20a), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_078)
{
    // FE4D  ; [*020B.0020.0004] 
    // DASHED LOW LINE

    uint32_t const cps[1] = { 0xfe4d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_079)
{
    // FE4E  ; [*020B.0020.0004] 
    // CENTRELINE LOW LINE

    uint32_t const cps[1] = { 0xfe4e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_080)
{
    // FE4F  ; [*020B.0020.0004] 
    // WAVY LOW LINE

    uint32_t const cps[1] = { 0xfe4f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20b), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_081)
{
    // FE50  ; [*0222.0020.000F] 
    // SMALL COMMA

    uint32_t const cps[1] = { 0xfe50 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x222), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_082)
{
    // FE51  ; [*0231.0020.000F] 
    // SMALL IDEOGRAPHIC COMMA

    uint32_t const cps[1] = { 0xfe51 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x231), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_083)
{
    // FE52  ; [*0278.0020.000F] 
    // SMALL FULL STOP

    uint32_t const cps[1] = { 0xfe52 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x278), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_084)
{
    // FE54  ; [*0234.0020.000F] 
    // SMALL SEMICOLON

    uint32_t const cps[1] = { 0xfe54 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x234), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_085)
{
    // FE55  ; [*023A.0020.000F] 
    // SMALL COLON

    uint32_t const cps[1] = { 0xfe55 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x23a), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_086)
{
    // FE56  ; [*0267.0020.000F] 
    // SMALL QUESTION MARK

    uint32_t const cps[1] = { 0xfe56 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x267), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_087)
{
    // FE57  ; [*0261.0020.000F] 
    // SMALL EXCLAMATION MARK

    uint32_t const cps[1] = { 0xfe57 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x261), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_088)
{
    // FE58  ; [*0216.0020.000F] 
    // SMALL EM DASH

    uint32_t const cps[1] = { 0xfe58 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x216), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_089)
{
    // FE59  ; [*0318.0020.000F] 
    // SMALL LEFT PARENTHESIS

    uint32_t const cps[1] = { 0xfe59 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x318), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_090)
{
    // FE5A  ; [*0319.0020.000F] 
    // SMALL RIGHT PARENTHESIS

    uint32_t const cps[1] = { 0xfe5a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x319), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_091)
{
    // FE5B  ; [*031C.0020.000F] 
    // SMALL LEFT CURLY BRACKET

    uint32_t const cps[1] = { 0xfe5b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31c), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_092)
{
    // FE5C  ; [*031D.0020.000F] 
    // SMALL RIGHT CURLY BRACKET

    uint32_t const cps[1] = { 0xfe5c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x31d), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_093)
{
    // FE5D  ; [*037A.0020.000F] 
    // SMALL LEFT TORTOISE SHELL BRACKET

    uint32_t const cps[1] = { 0xfe5d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37a), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_094)
{
    // FE5E  ; [*037B.0020.000F] 
    // SMALL RIGHT TORTOISE SHELL BRACKET

    uint32_t const cps[1] = { 0xfe5e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x37b), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_095)
{
    // FE5F  ; [*0399.0020.000F] 
    // SMALL NUMBER SIGN

    uint32_t const cps[1] = { 0xfe5f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x399), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_096)
{
    // FE60  ; [*0397.0020.000F] 
    // SMALL AMPERSAND

    uint32_t const cps[1] = { 0xfe60 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x397), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_097)
{
    // FE61  ; [*0390.0020.000F] 
    // SMALL ASTERISK

    uint32_t const cps[1] = { 0xfe61 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x390), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_098)
{
    // FE62  ; [*062C.0020.000F] 
    // SMALL PLUS SIGN

    uint32_t const cps[1] = { 0xfe62 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x62c), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_099)
{
    // FE63  ; [*020D.0020.000F] 
    // SMALL HYPHEN-MINUS

    uint32_t const cps[1] = { 0xfe63 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x20d), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_100)
{
    // FE64  ; [*0630.0020.000F] 
    // SMALL LESS-THAN SIGN

    uint32_t const cps[1] = { 0xfe64 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x630), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_101)
{
    // FE65  ; [*0632.0020.000F] 
    // SMALL GREATER-THAN SIGN

    uint32_t const cps[1] = { 0xfe65 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x632), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_102)
{
    // FE66  ; [*0631.0020.000F] 
    // SMALL EQUALS SIGN

    uint32_t const cps[1] = { 0xfe66 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x631), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_103)
{
    // FE68  ; [*0396.0020.000F] 
    // SMALL REVERSE SOLIDUS

    uint32_t const cps[1] = { 0xfe68 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x396), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_104)
{
    // FE69  ; [.1C77.0020.000F] 
    // SMALL DOLLAR SIGN

    uint32_t const cps[1] = { 0xfe69 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x1c77), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_105)
{
    // FE6A  ; [*039A.0020.000F] 
    // SMALL PERCENT SIGN

    uint32_t const cps[1] = { 0xfe6a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x39a), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_106)
{
    // FE6B  ; [*038F.0020.000F] 
    // SMALL COMMERCIAL AT

    uint32_t const cps[1] = { 0xfe6b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x38f), uint8_t(0x0), uint8_t(0xf)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_107)
{
    // FE70  ; [.0000.006D.001A] 
    // ARABIC FATHATAN ISOLATED FORM

    uint32_t const cps[1] = { 0xfe70 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x4d), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_108)
{
    // FE71  ; [.0000.006D.0018] 
    // ARABIC TATWEEL WITH FATHATAN ABOVE

    uint32_t const cps[1] = { 0xfe71 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x4d), uint8_t(0x18)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_109)
{
    // FE72  ; [.0000.0070.001A] 
    // ARABIC DAMMATAN ISOLATED FORM

    uint32_t const cps[1] = { 0xfe72 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x50), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_110)
{
    // FE73  ; [.0000.0000.0000] 
    // ARABIC TAIL FRAGMENT

    uint32_t const cps[1] = { 0xfe73 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_111)
{
    // FE74  ; [.0000.0073.001A] 
    // ARABIC KASRATAN ISOLATED FORM

    uint32_t const cps[1] = { 0xfe74 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x53), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_112)
{
    // FE76  ; [.0000.0076.001A] 
    // ARABIC FATHA ISOLATED FORM

    uint32_t const cps[1] = { 0xfe76 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x56), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_113)
{
    // FE77  ; [.0000.0076.0018] 
    // ARABIC FATHA MEDIAL FORM

    uint32_t const cps[1] = { 0xfe77 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x56), uint8_t(0x18)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_114)
{
    // FE78  ; [.0000.007A.001A] 
    // ARABIC DAMMA ISOLATED FORM

    uint32_t const cps[1] = { 0xfe78 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x5a), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_115)
{
    // FE79  ; [.0000.007A.0018] 
    // ARABIC DAMMA MEDIAL FORM

    uint32_t const cps[1] = { 0xfe79 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x5a), uint8_t(0x18)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_116)
{
    // FE7A  ; [.0000.007D.001A] 
    // ARABIC KASRA ISOLATED FORM

    uint32_t const cps[1] = { 0xfe7a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x5d), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_117)
{
    // FE7B  ; [.0000.007D.0018] 
    // ARABIC KASRA MEDIAL FORM

    uint32_t const cps[1] = { 0xfe7b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x5d), uint8_t(0x18)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_118)
{
    // FE7C  ; [.0000.0080.001A] 
    // ARABIC SHADDA ISOLATED FORM

    uint32_t const cps[1] = { 0xfe7c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x60), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_119)
{
    // FE7D  ; [.0000.0080.0018] 
    // ARABIC SHADDA MEDIAL FORM

    uint32_t const cps[1] = { 0xfe7d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x60), uint8_t(0x18)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_120)
{
    // FE7E  ; [.0000.0081.001A] 
    // ARABIC SUKUN ISOLATED FORM

    uint32_t const cps[1] = { 0xfe7e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x61), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_121)
{
    // FE7F  ; [.0000.0081.0018] 
    // ARABIC SUKUN MEDIAL FORM

    uint32_t const cps[1] = { 0xfe7f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0x61), uint8_t(0x18)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_122)
{
    // FE80  ; [.2363.0020.001A] 
    // ARABIC LETTER HAMZA ISOLATED FORM

    uint32_t const cps[1] = { 0xfe80 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2363), uint8_t(0x0), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_123)
{
    // FE81  ; [.2364.0020.001A] 
    // ARABIC LETTER ALEF WITH MADDA ABOVE ISOLATED FORM

    uint32_t const cps[1] = { 0xfe81 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2364), uint8_t(0x0), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_124)
{
    // FE82  ; [.2364.0020.0019] 
    // ARABIC LETTER ALEF WITH MADDA ABOVE FINAL FORM

    uint32_t const cps[1] = { 0xfe82 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2364), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_125)
{
    // FE83  ; [.2365.0020.001A] 
    // ARABIC LETTER ALEF WITH HAMZA ABOVE ISOLATED FORM

    uint32_t const cps[1] = { 0xfe83 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2365), uint8_t(0x0), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_126)
{
    // FE84  ; [.2365.0020.0019] 
    // ARABIC LETTER ALEF WITH HAMZA ABOVE FINAL FORM

    uint32_t const cps[1] = { 0xfe84 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2365), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_127)
{
    // FE85  ; [.2368.0020.001A] 
    // ARABIC LETTER WAW WITH HAMZA ABOVE ISOLATED FORM

    uint32_t const cps[1] = { 0xfe85 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2368), uint8_t(0x0), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_128)
{
    // FE86  ; [.2368.0020.0019] 
    // ARABIC LETTER WAW WITH HAMZA ABOVE FINAL FORM

    uint32_t const cps[1] = { 0xfe86 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2368), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_129)
{
    // FE87  ; [.2369.0020.001A] 
    // ARABIC LETTER ALEF WITH HAMZA BELOW ISOLATED FORM

    uint32_t const cps[1] = { 0xfe87 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2369), uint8_t(0x0), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_130)
{
    // FE88  ; [.2369.0020.0019] 
    // ARABIC LETTER ALEF WITH HAMZA BELOW FINAL FORM

    uint32_t const cps[1] = { 0xfe88 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2369), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_131)
{
    // FE89  ; [.236D.0020.001A] 
    // ARABIC LETTER YEH WITH HAMZA ABOVE ISOLATED FORM

    uint32_t const cps[1] = { 0xfe89 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x236d), uint8_t(0x0), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_132)
{
    // FE8A  ; [.236D.0020.0019] 
    // ARABIC LETTER YEH WITH HAMZA ABOVE FINAL FORM

    uint32_t const cps[1] = { 0xfe8a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x236d), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_133)
{
    // FE8B  ; [.236D.0020.0017] 
    // ARABIC LETTER YEH WITH HAMZA ABOVE INITIAL FORM

    uint32_t const cps[1] = { 0xfe8b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x236d), uint8_t(0x0), uint8_t(0x17)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_134)
{
    // FE8C  ; [.236D.0020.0018] 
    // ARABIC LETTER YEH WITH HAMZA ABOVE MEDIAL FORM

    uint32_t const cps[1] = { 0xfe8c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x236d), uint8_t(0x0), uint8_t(0x18)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_135)
{
    // FE8D  ; [.2371.0020.001A] 
    // ARABIC LETTER ALEF ISOLATED FORM

    uint32_t const cps[1] = { 0xfe8d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2371), uint8_t(0x0), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_136)
{
    // FE8E  ; [.2371.0020.0019] 
    // ARABIC LETTER ALEF FINAL FORM

    uint32_t const cps[1] = { 0xfe8e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2371), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_137)
{
    // FE8F  ; [.2373.0020.001A] 
    // ARABIC LETTER BEH ISOLATED FORM

    uint32_t const cps[1] = { 0xfe8f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2373), uint8_t(0x0), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_138)
{
    // FE90  ; [.2373.0020.0019] 
    // ARABIC LETTER BEH FINAL FORM

    uint32_t const cps[1] = { 0xfe90 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2373), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_139)
{
    // FE91  ; [.2373.0020.0017] 
    // ARABIC LETTER BEH INITIAL FORM

    uint32_t const cps[1] = { 0xfe91 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2373), uint8_t(0x0), uint8_t(0x17)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_140)
{
    // FE92  ; [.2373.0020.0018] 
    // ARABIC LETTER BEH MEDIAL FORM

    uint32_t const cps[1] = { 0xfe92 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2373), uint8_t(0x0), uint8_t(0x18)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_141)
{
    // FE93  ; [.2382.0020.001A] 
    // ARABIC LETTER TEH MARBUTA ISOLATED FORM

    uint32_t const cps[1] = { 0xfe93 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2382), uint8_t(0x0), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_142)
{
    // FE94  ; [.2382.0020.0019] 
    // ARABIC LETTER TEH MARBUTA FINAL FORM

    uint32_t const cps[1] = { 0xfe94 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2382), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_143)
{
    // FE95  ; [.2383.0020.001A] 
    // ARABIC LETTER TEH ISOLATED FORM

    uint32_t const cps[1] = { 0xfe95 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2383), uint8_t(0x0), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_144)
{
    // FE96  ; [.2383.0020.0019] 
    // ARABIC LETTER TEH FINAL FORM

    uint32_t const cps[1] = { 0xfe96 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2383), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_145)
{
    // FE97  ; [.2383.0020.0017] 
    // ARABIC LETTER TEH INITIAL FORM

    uint32_t const cps[1] = { 0xfe97 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2383), uint8_t(0x0), uint8_t(0x17)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_146)
{
    // FE98  ; [.2383.0020.0018] 
    // ARABIC LETTER TEH MEDIAL FORM

    uint32_t const cps[1] = { 0xfe98 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2383), uint8_t(0x0), uint8_t(0x18)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_147)
{
    // FE99  ; [.2384.0020.001A] 
    // ARABIC LETTER THEH ISOLATED FORM

    uint32_t const cps[1] = { 0xfe99 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2384), uint8_t(0x0), uint8_t(0x1a)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_148)
{
    // FE9A  ; [.2384.0020.0019] 
    // ARABIC LETTER THEH FINAL FORM

    uint32_t const cps[1] = { 0xfe9a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2384), uint8_t(0x0), uint8_t(0x19)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_113_149)
{
    // FE9B  ; [.2384.0020.0017] 
    // ARABIC LETTER THEH INITIAL FORM

    uint32_t const cps[1] = { 0xfe9b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2384), uint8_t(0x0), uint8_t(0x17)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

