// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_026_000)
{
    // 2378 0041;	
    // (⍸) APL FUNCTIONAL SYMBOL IOTA UNDERBAR	[0775 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2378, 0x0041 };
    uint32_t const ces[9] = { 0x0775, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_001)
{
    // 2378 0062;	
    // (⍸) APL FUNCTIONAL SYMBOL IOTA UNDERBAR	[0775 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2378, 0x0062 };
    uint32_t const ces[9] = { 0x0775, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_002)
{
    // 2379 0021;	
    // (⍹) APL FUNCTIONAL SYMBOL OMEGA UNDERBAR	[0776 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2379, 0x0021 };
    uint32_t const ces[9] = { 0x0776, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_003)
{
    // 2379 003F;	
    // (⍹) APL FUNCTIONAL SYMBOL OMEGA UNDERBAR	[0776 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2379, 0x003F };
    uint32_t const ces[9] = { 0x0776, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_004)
{
    // 2379 0061;	
    // (⍹) APL FUNCTIONAL SYMBOL OMEGA UNDERBAR	[0776 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2379, 0x0061 };
    uint32_t const ces[9] = { 0x0776, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_005)
{
    // 2379 0041;	
    // (⍹) APL FUNCTIONAL SYMBOL OMEGA UNDERBAR	[0776 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2379, 0x0041 };
    uint32_t const ces[9] = { 0x0776, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_006)
{
    // 2379 0062;	
    // (⍹) APL FUNCTIONAL SYMBOL OMEGA UNDERBAR	[0776 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2379, 0x0062 };
    uint32_t const ces[9] = { 0x0776, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_007)
{
    // 237A 0021;	
    // (⍺) APL FUNCTIONAL SYMBOL ALPHA	[0777 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237A, 0x0021 };
    uint32_t const ces[9] = { 0x0777, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_008)
{
    // 237A 003F;	
    // (⍺) APL FUNCTIONAL SYMBOL ALPHA	[0777 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237A, 0x003F };
    uint32_t const ces[9] = { 0x0777, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_009)
{
    // 237A 0061;	
    // (⍺) APL FUNCTIONAL SYMBOL ALPHA	[0777 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237A, 0x0061 };
    uint32_t const ces[9] = { 0x0777, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_010)
{
    // 237A 0041;	
    // (⍺) APL FUNCTIONAL SYMBOL ALPHA	[0777 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x237A, 0x0041 };
    uint32_t const ces[9] = { 0x0777, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_011)
{
    // 237A 0062;	
    // (⍺) APL FUNCTIONAL SYMBOL ALPHA	[0777 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237A, 0x0062 };
    uint32_t const ces[9] = { 0x0777, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_012)
{
    // 237B 0021;	
    // (⍻) NOT CHECK MARK	[0778 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237B, 0x0021 };
    uint32_t const ces[9] = { 0x0778, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_013)
{
    // 237B 003F;	
    // (⍻) NOT CHECK MARK	[0778 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237B, 0x003F };
    uint32_t const ces[9] = { 0x0778, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_014)
{
    // 237B 0061;	
    // (⍻) NOT CHECK MARK	[0778 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237B, 0x0061 };
    uint32_t const ces[9] = { 0x0778, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_015)
{
    // 237B 0041;	
    // (⍻) NOT CHECK MARK	[0778 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x237B, 0x0041 };
    uint32_t const ces[9] = { 0x0778, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_016)
{
    // 237B 0062;	
    // (⍻) NOT CHECK MARK	[0778 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237B, 0x0062 };
    uint32_t const ces[9] = { 0x0778, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_017)
{
    // 237C 0021;	
    // (⍼) RIGHT ANGLE WITH DOWNWARDS ZIGZAG ARROW	[0779 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237C, 0x0021 };
    uint32_t const ces[9] = { 0x0779, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_018)
{
    // 237C 003F;	
    // (⍼) RIGHT ANGLE WITH DOWNWARDS ZIGZAG ARROW	[0779 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237C, 0x003F };
    uint32_t const ces[9] = { 0x0779, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_019)
{
    // 237C 0061;	
    // (⍼) RIGHT ANGLE WITH DOWNWARDS ZIGZAG ARROW	[0779 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237C, 0x0061 };
    uint32_t const ces[9] = { 0x0779, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_020)
{
    // 237C 0041;	
    // (⍼) RIGHT ANGLE WITH DOWNWARDS ZIGZAG ARROW	[0779 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x237C, 0x0041 };
    uint32_t const ces[9] = { 0x0779, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_021)
{
    // 237C 0062;	
    // (⍼) RIGHT ANGLE WITH DOWNWARDS ZIGZAG ARROW	[0779 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237C, 0x0062 };
    uint32_t const ces[9] = { 0x0779, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_022)
{
    // 237D 0021;	
    // (⍽) SHOULDERED OPEN BOX	[077A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237D, 0x0021 };
    uint32_t const ces[9] = { 0x077A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_023)
{
    // 237D 003F;	
    // (⍽) SHOULDERED OPEN BOX	[077A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237D, 0x003F };
    uint32_t const ces[9] = { 0x077A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_024)
{
    // 237D 0061;	
    // (⍽) SHOULDERED OPEN BOX	[077A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237D, 0x0061 };
    uint32_t const ces[9] = { 0x077A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_025)
{
    // 237D 0041;	
    // (⍽) SHOULDERED OPEN BOX	[077A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x237D, 0x0041 };
    uint32_t const ces[9] = { 0x077A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_026)
{
    // 237D 0062;	
    // (⍽) SHOULDERED OPEN BOX	[077A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237D, 0x0062 };
    uint32_t const ces[9] = { 0x077A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_027)
{
    // 237E 0021;	
    // (⍾) BELL SYMBOL	[077B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237E, 0x0021 };
    uint32_t const ces[9] = { 0x077B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_028)
{
    // 237E 003F;	
    // (⍾) BELL SYMBOL	[077B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237E, 0x003F };
    uint32_t const ces[9] = { 0x077B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_029)
{
    // 237E 0061;	
    // (⍾) BELL SYMBOL	[077B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237E, 0x0061 };
    uint32_t const ces[9] = { 0x077B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_030)
{
    // 237E 0041;	
    // (⍾) BELL SYMBOL	[077B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x237E, 0x0041 };
    uint32_t const ces[9] = { 0x077B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_031)
{
    // 237E 0062;	
    // (⍾) BELL SYMBOL	[077B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237E, 0x0062 };
    uint32_t const ces[9] = { 0x077B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_032)
{
    // 237F 0021;	
    // (⍿) VERTICAL LINE WITH MIDDLE DOT	[077C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237F, 0x0021 };
    uint32_t const ces[9] = { 0x077C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_033)
{
    // 237F 003F;	
    // (⍿) VERTICAL LINE WITH MIDDLE DOT	[077C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237F, 0x003F };
    uint32_t const ces[9] = { 0x077C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_034)
{
    // 237F 0061;	
    // (⍿) VERTICAL LINE WITH MIDDLE DOT	[077C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237F, 0x0061 };
    uint32_t const ces[9] = { 0x077C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_035)
{
    // 237F 0041;	
    // (⍿) VERTICAL LINE WITH MIDDLE DOT	[077C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x237F, 0x0041 };
    uint32_t const ces[9] = { 0x077C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_036)
{
    // 237F 0062;	
    // (⍿) VERTICAL LINE WITH MIDDLE DOT	[077C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x237F, 0x0062 };
    uint32_t const ces[9] = { 0x077C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_037)
{
    // 2380 0021;	
    // (⎀) INSERTION SYMBOL	[077D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2380, 0x0021 };
    uint32_t const ces[9] = { 0x077D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_038)
{
    // 2380 003F;	
    // (⎀) INSERTION SYMBOL	[077D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2380, 0x003F };
    uint32_t const ces[9] = { 0x077D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_039)
{
    // 2380 0061;	
    // (⎀) INSERTION SYMBOL	[077D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2380, 0x0061 };
    uint32_t const ces[9] = { 0x077D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_040)
{
    // 2380 0041;	
    // (⎀) INSERTION SYMBOL	[077D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2380, 0x0041 };
    uint32_t const ces[9] = { 0x077D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_041)
{
    // 2380 0062;	
    // (⎀) INSERTION SYMBOL	[077D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2380, 0x0062 };
    uint32_t const ces[9] = { 0x077D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_042)
{
    // 2381 0021;	
    // (⎁) CONTINUOUS UNDERLINE SYMBOL	[077E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2381, 0x0021 };
    uint32_t const ces[9] = { 0x077E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_043)
{
    // 2381 003F;	
    // (⎁) CONTINUOUS UNDERLINE SYMBOL	[077E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2381, 0x003F };
    uint32_t const ces[9] = { 0x077E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_044)
{
    // 2381 0061;	
    // (⎁) CONTINUOUS UNDERLINE SYMBOL	[077E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2381, 0x0061 };
    uint32_t const ces[9] = { 0x077E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_045)
{
    // 2381 0041;	
    // (⎁) CONTINUOUS UNDERLINE SYMBOL	[077E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2381, 0x0041 };
    uint32_t const ces[9] = { 0x077E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_046)
{
    // 2381 0062;	
    // (⎁) CONTINUOUS UNDERLINE SYMBOL	[077E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2381, 0x0062 };
    uint32_t const ces[9] = { 0x077E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_047)
{
    // 2382 0021;	
    // (⎂) DISCONTINUOUS UNDERLINE SYMBOL	[077F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2382, 0x0021 };
    uint32_t const ces[9] = { 0x077F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_048)
{
    // 2382 003F;	
    // (⎂) DISCONTINUOUS UNDERLINE SYMBOL	[077F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2382, 0x003F };
    uint32_t const ces[9] = { 0x077F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_049)
{
    // 2382 0061;	
    // (⎂) DISCONTINUOUS UNDERLINE SYMBOL	[077F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2382, 0x0061 };
    uint32_t const ces[9] = { 0x077F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_050)
{
    // 2382 0041;	
    // (⎂) DISCONTINUOUS UNDERLINE SYMBOL	[077F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2382, 0x0041 };
    uint32_t const ces[9] = { 0x077F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_051)
{
    // 2382 0062;	
    // (⎂) DISCONTINUOUS UNDERLINE SYMBOL	[077F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2382, 0x0062 };
    uint32_t const ces[9] = { 0x077F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_052)
{
    // 2383 0021;	
    // (⎃) EMPHASIS SYMBOL	[0780 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2383, 0x0021 };
    uint32_t const ces[9] = { 0x0780, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_053)
{
    // 2383 003F;	
    // (⎃) EMPHASIS SYMBOL	[0780 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2383, 0x003F };
    uint32_t const ces[9] = { 0x0780, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_054)
{
    // 2383 0061;	
    // (⎃) EMPHASIS SYMBOL	[0780 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2383, 0x0061 };
    uint32_t const ces[9] = { 0x0780, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_055)
{
    // 2383 0041;	
    // (⎃) EMPHASIS SYMBOL	[0780 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2383, 0x0041 };
    uint32_t const ces[9] = { 0x0780, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_056)
{
    // 2383 0062;	
    // (⎃) EMPHASIS SYMBOL	[0780 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2383, 0x0062 };
    uint32_t const ces[9] = { 0x0780, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_057)
{
    // 2384 0021;	
    // (⎄) COMPOSITION SYMBOL	[0781 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2384, 0x0021 };
    uint32_t const ces[9] = { 0x0781, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_058)
{
    // 2384 003F;	
    // (⎄) COMPOSITION SYMBOL	[0781 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2384, 0x003F };
    uint32_t const ces[9] = { 0x0781, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_059)
{
    // 2384 0061;	
    // (⎄) COMPOSITION SYMBOL	[0781 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2384, 0x0061 };
    uint32_t const ces[9] = { 0x0781, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_060)
{
    // 2384 0041;	
    // (⎄) COMPOSITION SYMBOL	[0781 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2384, 0x0041 };
    uint32_t const ces[9] = { 0x0781, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_061)
{
    // 2384 0062;	
    // (⎄) COMPOSITION SYMBOL	[0781 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2384, 0x0062 };
    uint32_t const ces[9] = { 0x0781, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_062)
{
    // 2385 0021;	
    // (⎅) WHITE SQUARE WITH CENTRE VERTICAL LINE	[0782 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2385, 0x0021 };
    uint32_t const ces[9] = { 0x0782, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_063)
{
    // 2385 003F;	
    // (⎅) WHITE SQUARE WITH CENTRE VERTICAL LINE	[0782 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2385, 0x003F };
    uint32_t const ces[9] = { 0x0782, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_064)
{
    // 2385 0061;	
    // (⎅) WHITE SQUARE WITH CENTRE VERTICAL LINE	[0782 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2385, 0x0061 };
    uint32_t const ces[9] = { 0x0782, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_065)
{
    // 2385 0041;	
    // (⎅) WHITE SQUARE WITH CENTRE VERTICAL LINE	[0782 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2385, 0x0041 };
    uint32_t const ces[9] = { 0x0782, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_066)
{
    // 2385 0062;	
    // (⎅) WHITE SQUARE WITH CENTRE VERTICAL LINE	[0782 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2385, 0x0062 };
    uint32_t const ces[9] = { 0x0782, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_067)
{
    // 2386 0021;	
    // (⎆) ENTER SYMBOL	[0783 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2386, 0x0021 };
    uint32_t const ces[9] = { 0x0783, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_068)
{
    // 2386 003F;	
    // (⎆) ENTER SYMBOL	[0783 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2386, 0x003F };
    uint32_t const ces[9] = { 0x0783, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_069)
{
    // 2386 0061;	
    // (⎆) ENTER SYMBOL	[0783 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2386, 0x0061 };
    uint32_t const ces[9] = { 0x0783, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_070)
{
    // 2386 0041;	
    // (⎆) ENTER SYMBOL	[0783 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2386, 0x0041 };
    uint32_t const ces[9] = { 0x0783, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_071)
{
    // 2386 0062;	
    // (⎆) ENTER SYMBOL	[0783 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2386, 0x0062 };
    uint32_t const ces[9] = { 0x0783, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_072)
{
    // 2387 0021;	
    // (⎇) ALTERNATIVE KEY SYMBOL	[0784 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2387, 0x0021 };
    uint32_t const ces[9] = { 0x0784, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_073)
{
    // 2387 003F;	
    // (⎇) ALTERNATIVE KEY SYMBOL	[0784 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2387, 0x003F };
    uint32_t const ces[9] = { 0x0784, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_074)
{
    // 2387 0061;	
    // (⎇) ALTERNATIVE KEY SYMBOL	[0784 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2387, 0x0061 };
    uint32_t const ces[9] = { 0x0784, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_075)
{
    // 2387 0041;	
    // (⎇) ALTERNATIVE KEY SYMBOL	[0784 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2387, 0x0041 };
    uint32_t const ces[9] = { 0x0784, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_076)
{
    // 2387 0062;	
    // (⎇) ALTERNATIVE KEY SYMBOL	[0784 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2387, 0x0062 };
    uint32_t const ces[9] = { 0x0784, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_077)
{
    // 2388 0021;	
    // (⎈) HELM SYMBOL	[0785 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2388, 0x0021 };
    uint32_t const ces[9] = { 0x0785, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_078)
{
    // 2388 003F;	
    // (⎈) HELM SYMBOL	[0785 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2388, 0x003F };
    uint32_t const ces[9] = { 0x0785, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_079)
{
    // 2388 0061;	
    // (⎈) HELM SYMBOL	[0785 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2388, 0x0061 };
    uint32_t const ces[9] = { 0x0785, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_080)
{
    // 2388 0041;	
    // (⎈) HELM SYMBOL	[0785 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2388, 0x0041 };
    uint32_t const ces[9] = { 0x0785, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_081)
{
    // 2388 0062;	
    // (⎈) HELM SYMBOL	[0785 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2388, 0x0062 };
    uint32_t const ces[9] = { 0x0785, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_082)
{
    // 2389 0021;	
    // (⎉) CIRCLED HORIZONTAL BAR WITH NOTCH	[0786 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2389, 0x0021 };
    uint32_t const ces[9] = { 0x0786, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_083)
{
    // 2389 003F;	
    // (⎉) CIRCLED HORIZONTAL BAR WITH NOTCH	[0786 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2389, 0x003F };
    uint32_t const ces[9] = { 0x0786, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_084)
{
    // 2389 0061;	
    // (⎉) CIRCLED HORIZONTAL BAR WITH NOTCH	[0786 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2389, 0x0061 };
    uint32_t const ces[9] = { 0x0786, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_085)
{
    // 2389 0041;	
    // (⎉) CIRCLED HORIZONTAL BAR WITH NOTCH	[0786 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2389, 0x0041 };
    uint32_t const ces[9] = { 0x0786, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_086)
{
    // 2389 0062;	
    // (⎉) CIRCLED HORIZONTAL BAR WITH NOTCH	[0786 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2389, 0x0062 };
    uint32_t const ces[9] = { 0x0786, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_087)
{
    // 238A 0021;	
    // (⎊) CIRCLED TRIANGLE DOWN	[0787 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238A, 0x0021 };
    uint32_t const ces[9] = { 0x0787, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_088)
{
    // 238A 003F;	
    // (⎊) CIRCLED TRIANGLE DOWN	[0787 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238A, 0x003F };
    uint32_t const ces[9] = { 0x0787, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_089)
{
    // 238A 0061;	
    // (⎊) CIRCLED TRIANGLE DOWN	[0787 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238A, 0x0061 };
    uint32_t const ces[9] = { 0x0787, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_090)
{
    // 238A 0041;	
    // (⎊) CIRCLED TRIANGLE DOWN	[0787 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x238A, 0x0041 };
    uint32_t const ces[9] = { 0x0787, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_091)
{
    // 238A 0062;	
    // (⎊) CIRCLED TRIANGLE DOWN	[0787 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238A, 0x0062 };
    uint32_t const ces[9] = { 0x0787, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_092)
{
    // 238B 0021;	
    // (⎋) BROKEN CIRCLE WITH NORTHWEST ARROW	[0788 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238B, 0x0021 };
    uint32_t const ces[9] = { 0x0788, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_093)
{
    // 238B 003F;	
    // (⎋) BROKEN CIRCLE WITH NORTHWEST ARROW	[0788 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238B, 0x003F };
    uint32_t const ces[9] = { 0x0788, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_094)
{
    // 238B 0061;	
    // (⎋) BROKEN CIRCLE WITH NORTHWEST ARROW	[0788 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238B, 0x0061 };
    uint32_t const ces[9] = { 0x0788, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_095)
{
    // 238B 0041;	
    // (⎋) BROKEN CIRCLE WITH NORTHWEST ARROW	[0788 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x238B, 0x0041 };
    uint32_t const ces[9] = { 0x0788, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_096)
{
    // 238B 0062;	
    // (⎋) BROKEN CIRCLE WITH NORTHWEST ARROW	[0788 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238B, 0x0062 };
    uint32_t const ces[9] = { 0x0788, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_097)
{
    // 238C 0021;	
    // (⎌) UNDO SYMBOL	[0789 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238C, 0x0021 };
    uint32_t const ces[9] = { 0x0789, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_098)
{
    // 238C 003F;	
    // (⎌) UNDO SYMBOL	[0789 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238C, 0x003F };
    uint32_t const ces[9] = { 0x0789, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_099)
{
    // 238C 0061;	
    // (⎌) UNDO SYMBOL	[0789 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238C, 0x0061 };
    uint32_t const ces[9] = { 0x0789, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_100)
{
    // 238C 0041;	
    // (⎌) UNDO SYMBOL	[0789 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x238C, 0x0041 };
    uint32_t const ces[9] = { 0x0789, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_101)
{
    // 238C 0062;	
    // (⎌) UNDO SYMBOL	[0789 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238C, 0x0062 };
    uint32_t const ces[9] = { 0x0789, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_102)
{
    // 238D 0021;	
    // (⎍) MONOSTABLE SYMBOL	[078A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238D, 0x0021 };
    uint32_t const ces[9] = { 0x078A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_103)
{
    // 238D 003F;	
    // (⎍) MONOSTABLE SYMBOL	[078A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238D, 0x003F };
    uint32_t const ces[9] = { 0x078A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_104)
{
    // 238D 0061;	
    // (⎍) MONOSTABLE SYMBOL	[078A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238D, 0x0061 };
    uint32_t const ces[9] = { 0x078A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_105)
{
    // 238D 0041;	
    // (⎍) MONOSTABLE SYMBOL	[078A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x238D, 0x0041 };
    uint32_t const ces[9] = { 0x078A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_106)
{
    // 238D 0062;	
    // (⎍) MONOSTABLE SYMBOL	[078A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238D, 0x0062 };
    uint32_t const ces[9] = { 0x078A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_107)
{
    // 238E 0021;	
    // (⎎) HYSTERESIS SYMBOL	[078B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238E, 0x0021 };
    uint32_t const ces[9] = { 0x078B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_108)
{
    // 238E 003F;	
    // (⎎) HYSTERESIS SYMBOL	[078B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238E, 0x003F };
    uint32_t const ces[9] = { 0x078B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_109)
{
    // 238E 0061;	
    // (⎎) HYSTERESIS SYMBOL	[078B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238E, 0x0061 };
    uint32_t const ces[9] = { 0x078B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_110)
{
    // 238E 0041;	
    // (⎎) HYSTERESIS SYMBOL	[078B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x238E, 0x0041 };
    uint32_t const ces[9] = { 0x078B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_111)
{
    // 238E 0062;	
    // (⎎) HYSTERESIS SYMBOL	[078B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238E, 0x0062 };
    uint32_t const ces[9] = { 0x078B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_112)
{
    // 238F 0021;	
    // (⎏) OPEN-CIRCUIT-OUTPUT H-TYPE SYMBOL	[078C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238F, 0x0021 };
    uint32_t const ces[9] = { 0x078C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_113)
{
    // 238F 003F;	
    // (⎏) OPEN-CIRCUIT-OUTPUT H-TYPE SYMBOL	[078C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238F, 0x003F };
    uint32_t const ces[9] = { 0x078C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_114)
{
    // 238F 0061;	
    // (⎏) OPEN-CIRCUIT-OUTPUT H-TYPE SYMBOL	[078C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238F, 0x0061 };
    uint32_t const ces[9] = { 0x078C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_115)
{
    // 238F 0041;	
    // (⎏) OPEN-CIRCUIT-OUTPUT H-TYPE SYMBOL	[078C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x238F, 0x0041 };
    uint32_t const ces[9] = { 0x078C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_116)
{
    // 238F 0062;	
    // (⎏) OPEN-CIRCUIT-OUTPUT H-TYPE SYMBOL	[078C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x238F, 0x0062 };
    uint32_t const ces[9] = { 0x078C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_117)
{
    // 2390 0021;	
    // (⎐) OPEN-CIRCUIT-OUTPUT L-TYPE SYMBOL	[078D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2390, 0x0021 };
    uint32_t const ces[9] = { 0x078D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_118)
{
    // 2390 003F;	
    // (⎐) OPEN-CIRCUIT-OUTPUT L-TYPE SYMBOL	[078D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2390, 0x003F };
    uint32_t const ces[9] = { 0x078D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_119)
{
    // 2390 0061;	
    // (⎐) OPEN-CIRCUIT-OUTPUT L-TYPE SYMBOL	[078D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2390, 0x0061 };
    uint32_t const ces[9] = { 0x078D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_120)
{
    // 2390 0041;	
    // (⎐) OPEN-CIRCUIT-OUTPUT L-TYPE SYMBOL	[078D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2390, 0x0041 };
    uint32_t const ces[9] = { 0x078D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_121)
{
    // 2390 0062;	
    // (⎐) OPEN-CIRCUIT-OUTPUT L-TYPE SYMBOL	[078D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2390, 0x0062 };
    uint32_t const ces[9] = { 0x078D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_122)
{
    // 2391 0021;	
    // (⎑) PASSIVE-PULL-DOWN-OUTPUT SYMBOL	[078E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2391, 0x0021 };
    uint32_t const ces[9] = { 0x078E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_123)
{
    // 2391 003F;	
    // (⎑) PASSIVE-PULL-DOWN-OUTPUT SYMBOL	[078E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2391, 0x003F };
    uint32_t const ces[9] = { 0x078E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_124)
{
    // 2391 0061;	
    // (⎑) PASSIVE-PULL-DOWN-OUTPUT SYMBOL	[078E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2391, 0x0061 };
    uint32_t const ces[9] = { 0x078E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_125)
{
    // 2391 0041;	
    // (⎑) PASSIVE-PULL-DOWN-OUTPUT SYMBOL	[078E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2391, 0x0041 };
    uint32_t const ces[9] = { 0x078E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_126)
{
    // 2391 0062;	
    // (⎑) PASSIVE-PULL-DOWN-OUTPUT SYMBOL	[078E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2391, 0x0062 };
    uint32_t const ces[9] = { 0x078E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_127)
{
    // 2392 0021;	
    // (⎒) PASSIVE-PULL-UP-OUTPUT SYMBOL	[078F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2392, 0x0021 };
    uint32_t const ces[9] = { 0x078F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_128)
{
    // 2392 003F;	
    // (⎒) PASSIVE-PULL-UP-OUTPUT SYMBOL	[078F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2392, 0x003F };
    uint32_t const ces[9] = { 0x078F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_129)
{
    // 2392 0061;	
    // (⎒) PASSIVE-PULL-UP-OUTPUT SYMBOL	[078F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2392, 0x0061 };
    uint32_t const ces[9] = { 0x078F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_130)
{
    // 2392 0041;	
    // (⎒) PASSIVE-PULL-UP-OUTPUT SYMBOL	[078F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2392, 0x0041 };
    uint32_t const ces[9] = { 0x078F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_131)
{
    // 2392 0062;	
    // (⎒) PASSIVE-PULL-UP-OUTPUT SYMBOL	[078F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2392, 0x0062 };
    uint32_t const ces[9] = { 0x078F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_132)
{
    // 2393 0021;	
    // (⎓) DIRECT CURRENT SYMBOL FORM TWO	[0790 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2393, 0x0021 };
    uint32_t const ces[9] = { 0x0790, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_133)
{
    // 2393 003F;	
    // (⎓) DIRECT CURRENT SYMBOL FORM TWO	[0790 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2393, 0x003F };
    uint32_t const ces[9] = { 0x0790, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_134)
{
    // 2393 0061;	
    // (⎓) DIRECT CURRENT SYMBOL FORM TWO	[0790 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2393, 0x0061 };
    uint32_t const ces[9] = { 0x0790, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_135)
{
    // 2393 0041;	
    // (⎓) DIRECT CURRENT SYMBOL FORM TWO	[0790 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2393, 0x0041 };
    uint32_t const ces[9] = { 0x0790, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_136)
{
    // 2393 0062;	
    // (⎓) DIRECT CURRENT SYMBOL FORM TWO	[0790 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2393, 0x0062 };
    uint32_t const ces[9] = { 0x0790, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_137)
{
    // 2394 0021;	
    // (⎔) SOFTWARE-FUNCTION SYMBOL	[0791 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2394, 0x0021 };
    uint32_t const ces[9] = { 0x0791, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_138)
{
    // 2394 003F;	
    // (⎔) SOFTWARE-FUNCTION SYMBOL	[0791 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2394, 0x003F };
    uint32_t const ces[9] = { 0x0791, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_139)
{
    // 2394 0061;	
    // (⎔) SOFTWARE-FUNCTION SYMBOL	[0791 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2394, 0x0061 };
    uint32_t const ces[9] = { 0x0791, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_140)
{
    // 2394 0041;	
    // (⎔) SOFTWARE-FUNCTION SYMBOL	[0791 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2394, 0x0041 };
    uint32_t const ces[9] = { 0x0791, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_141)
{
    // 2394 0062;	
    // (⎔) SOFTWARE-FUNCTION SYMBOL	[0791 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2394, 0x0062 };
    uint32_t const ces[9] = { 0x0791, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_142)
{
    // 2395 0021;	
    // (⎕) APL FUNCTIONAL SYMBOL QUAD	[0792 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2395, 0x0021 };
    uint32_t const ces[9] = { 0x0792, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_143)
{
    // 2395 003F;	
    // (⎕) APL FUNCTIONAL SYMBOL QUAD	[0792 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2395, 0x003F };
    uint32_t const ces[9] = { 0x0792, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_144)
{
    // 2395 0061;	
    // (⎕) APL FUNCTIONAL SYMBOL QUAD	[0792 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2395, 0x0061 };
    uint32_t const ces[9] = { 0x0792, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_145)
{
    // 2395 0041;	
    // (⎕) APL FUNCTIONAL SYMBOL QUAD	[0792 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2395, 0x0041 };
    uint32_t const ces[9] = { 0x0792, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_146)
{
    // 2395 0062;	
    // (⎕) APL FUNCTIONAL SYMBOL QUAD	[0792 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2395, 0x0062 };
    uint32_t const ces[9] = { 0x0792, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_147)
{
    // 2396 0021;	
    // (⎖) DECIMAL SEPARATOR KEY SYMBOL	[0793 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2396, 0x0021 };
    uint32_t const ces[9] = { 0x0793, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_148)
{
    // 2396 003F;	
    // (⎖) DECIMAL SEPARATOR KEY SYMBOL	[0793 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2396, 0x003F };
    uint32_t const ces[9] = { 0x0793, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_149)
{
    // 2396 0061;	
    // (⎖) DECIMAL SEPARATOR KEY SYMBOL	[0793 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2396, 0x0061 };
    uint32_t const ces[9] = { 0x0793, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_150)
{
    // 2396 0041;	
    // (⎖) DECIMAL SEPARATOR KEY SYMBOL	[0793 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2396, 0x0041 };
    uint32_t const ces[9] = { 0x0793, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_151)
{
    // 2396 0062;	
    // (⎖) DECIMAL SEPARATOR KEY SYMBOL	[0793 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2396, 0x0062 };
    uint32_t const ces[9] = { 0x0793, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_152)
{
    // 2397 0021;	
    // (⎗) PREVIOUS PAGE	[0794 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2397, 0x0021 };
    uint32_t const ces[9] = { 0x0794, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_153)
{
    // 2397 003F;	
    // (⎗) PREVIOUS PAGE	[0794 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2397, 0x003F };
    uint32_t const ces[9] = { 0x0794, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_154)
{
    // 2397 0061;	
    // (⎗) PREVIOUS PAGE	[0794 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2397, 0x0061 };
    uint32_t const ces[9] = { 0x0794, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_155)
{
    // 2397 0041;	
    // (⎗) PREVIOUS PAGE	[0794 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2397, 0x0041 };
    uint32_t const ces[9] = { 0x0794, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_156)
{
    // 2397 0062;	
    // (⎗) PREVIOUS PAGE	[0794 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2397, 0x0062 };
    uint32_t const ces[9] = { 0x0794, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_157)
{
    // 2398 0021;	
    // (⎘) NEXT PAGE	[0795 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2398, 0x0021 };
    uint32_t const ces[9] = { 0x0795, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_158)
{
    // 2398 003F;	
    // (⎘) NEXT PAGE	[0795 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2398, 0x003F };
    uint32_t const ces[9] = { 0x0795, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_159)
{
    // 2398 0061;	
    // (⎘) NEXT PAGE	[0795 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2398, 0x0061 };
    uint32_t const ces[9] = { 0x0795, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_160)
{
    // 2398 0041;	
    // (⎘) NEXT PAGE	[0795 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2398, 0x0041 };
    uint32_t const ces[9] = { 0x0795, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_161)
{
    // 2398 0062;	
    // (⎘) NEXT PAGE	[0795 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2398, 0x0062 };
    uint32_t const ces[9] = { 0x0795, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_162)
{
    // 2399 0021;	
    // (⎙) PRINT SCREEN SYMBOL	[0796 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2399, 0x0021 };
    uint32_t const ces[9] = { 0x0796, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_163)
{
    // 2399 003F;	
    // (⎙) PRINT SCREEN SYMBOL	[0796 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2399, 0x003F };
    uint32_t const ces[9] = { 0x0796, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_164)
{
    // 2399 0061;	
    // (⎙) PRINT SCREEN SYMBOL	[0796 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2399, 0x0061 };
    uint32_t const ces[9] = { 0x0796, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_165)
{
    // 2399 0041;	
    // (⎙) PRINT SCREEN SYMBOL	[0796 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2399, 0x0041 };
    uint32_t const ces[9] = { 0x0796, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_166)
{
    // 2399 0062;	
    // (⎙) PRINT SCREEN SYMBOL	[0796 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2399, 0x0062 };
    uint32_t const ces[9] = { 0x0796, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_167)
{
    // 239A 0021;	
    // (⎚) CLEAR SCREEN SYMBOL	[0797 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239A, 0x0021 };
    uint32_t const ces[9] = { 0x0797, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_168)
{
    // 239A 003F;	
    // (⎚) CLEAR SCREEN SYMBOL	[0797 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239A, 0x003F };
    uint32_t const ces[9] = { 0x0797, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_169)
{
    // 239A 0061;	
    // (⎚) CLEAR SCREEN SYMBOL	[0797 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239A, 0x0061 };
    uint32_t const ces[9] = { 0x0797, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_170)
{
    // 239A 0041;	
    // (⎚) CLEAR SCREEN SYMBOL	[0797 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x239A, 0x0041 };
    uint32_t const ces[9] = { 0x0797, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_171)
{
    // 239A 0062;	
    // (⎚) CLEAR SCREEN SYMBOL	[0797 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239A, 0x0062 };
    uint32_t const ces[9] = { 0x0797, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_172)
{
    // 239B 0021;	
    // (⎛) LEFT PARENTHESIS UPPER HOOK	[0798 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239B, 0x0021 };
    uint32_t const ces[9] = { 0x0798, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_173)
{
    // 239B 003F;	
    // (⎛) LEFT PARENTHESIS UPPER HOOK	[0798 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239B, 0x003F };
    uint32_t const ces[9] = { 0x0798, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_174)
{
    // 239B 0061;	
    // (⎛) LEFT PARENTHESIS UPPER HOOK	[0798 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239B, 0x0061 };
    uint32_t const ces[9] = { 0x0798, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_175)
{
    // 239B 0041;	
    // (⎛) LEFT PARENTHESIS UPPER HOOK	[0798 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x239B, 0x0041 };
    uint32_t const ces[9] = { 0x0798, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_176)
{
    // 239B 0062;	
    // (⎛) LEFT PARENTHESIS UPPER HOOK	[0798 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239B, 0x0062 };
    uint32_t const ces[9] = { 0x0798, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_177)
{
    // 239C 0021;	
    // (⎜) LEFT PARENTHESIS EXTENSION	[0799 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239C, 0x0021 };
    uint32_t const ces[9] = { 0x0799, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_178)
{
    // 239C 003F;	
    // (⎜) LEFT PARENTHESIS EXTENSION	[0799 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239C, 0x003F };
    uint32_t const ces[9] = { 0x0799, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_179)
{
    // 239C 0061;	
    // (⎜) LEFT PARENTHESIS EXTENSION	[0799 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239C, 0x0061 };
    uint32_t const ces[9] = { 0x0799, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_180)
{
    // 239C 0041;	
    // (⎜) LEFT PARENTHESIS EXTENSION	[0799 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x239C, 0x0041 };
    uint32_t const ces[9] = { 0x0799, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_181)
{
    // 239C 0062;	
    // (⎜) LEFT PARENTHESIS EXTENSION	[0799 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239C, 0x0062 };
    uint32_t const ces[9] = { 0x0799, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_182)
{
    // 239D 0021;	
    // (⎝) LEFT PARENTHESIS LOWER HOOK	[079A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239D, 0x0021 };
    uint32_t const ces[9] = { 0x079A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_183)
{
    // 239D 003F;	
    // (⎝) LEFT PARENTHESIS LOWER HOOK	[079A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239D, 0x003F };
    uint32_t const ces[9] = { 0x079A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_184)
{
    // 239D 0061;	
    // (⎝) LEFT PARENTHESIS LOWER HOOK	[079A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239D, 0x0061 };
    uint32_t const ces[9] = { 0x079A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_185)
{
    // 239D 0041;	
    // (⎝) LEFT PARENTHESIS LOWER HOOK	[079A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x239D, 0x0041 };
    uint32_t const ces[9] = { 0x079A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_186)
{
    // 239D 0062;	
    // (⎝) LEFT PARENTHESIS LOWER HOOK	[079A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239D, 0x0062 };
    uint32_t const ces[9] = { 0x079A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_187)
{
    // 239E 0021;	
    // (⎞) RIGHT PARENTHESIS UPPER HOOK	[079B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239E, 0x0021 };
    uint32_t const ces[9] = { 0x079B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_188)
{
    // 239E 003F;	
    // (⎞) RIGHT PARENTHESIS UPPER HOOK	[079B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239E, 0x003F };
    uint32_t const ces[9] = { 0x079B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_189)
{
    // 239E 0061;	
    // (⎞) RIGHT PARENTHESIS UPPER HOOK	[079B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239E, 0x0061 };
    uint32_t const ces[9] = { 0x079B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_190)
{
    // 239E 0041;	
    // (⎞) RIGHT PARENTHESIS UPPER HOOK	[079B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x239E, 0x0041 };
    uint32_t const ces[9] = { 0x079B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_191)
{
    // 239E 0062;	
    // (⎞) RIGHT PARENTHESIS UPPER HOOK	[079B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239E, 0x0062 };
    uint32_t const ces[9] = { 0x079B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_192)
{
    // 239F 0021;	
    // (⎟) RIGHT PARENTHESIS EXTENSION	[079C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239F, 0x0021 };
    uint32_t const ces[9] = { 0x079C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_193)
{
    // 239F 003F;	
    // (⎟) RIGHT PARENTHESIS EXTENSION	[079C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239F, 0x003F };
    uint32_t const ces[9] = { 0x079C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_194)
{
    // 239F 0061;	
    // (⎟) RIGHT PARENTHESIS EXTENSION	[079C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239F, 0x0061 };
    uint32_t const ces[9] = { 0x079C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_195)
{
    // 239F 0041;	
    // (⎟) RIGHT PARENTHESIS EXTENSION	[079C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x239F, 0x0041 };
    uint32_t const ces[9] = { 0x079C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_196)
{
    // 239F 0062;	
    // (⎟) RIGHT PARENTHESIS EXTENSION	[079C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x239F, 0x0062 };
    uint32_t const ces[9] = { 0x079C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_197)
{
    // 23A0 0021;	
    // (⎠) RIGHT PARENTHESIS LOWER HOOK	[079D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A0, 0x0021 };
    uint32_t const ces[9] = { 0x079D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_198)
{
    // 23A0 003F;	
    // (⎠) RIGHT PARENTHESIS LOWER HOOK	[079D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A0, 0x003F };
    uint32_t const ces[9] = { 0x079D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_199)
{
    // 23A0 0061;	
    // (⎠) RIGHT PARENTHESIS LOWER HOOK	[079D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A0, 0x0061 };
    uint32_t const ces[9] = { 0x079D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_200)
{
    // 23A0 0041;	
    // (⎠) RIGHT PARENTHESIS LOWER HOOK	[079D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23A0, 0x0041 };
    uint32_t const ces[9] = { 0x079D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_201)
{
    // 23A0 0062;	
    // (⎠) RIGHT PARENTHESIS LOWER HOOK	[079D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A0, 0x0062 };
    uint32_t const ces[9] = { 0x079D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_202)
{
    // 23A1 0021;	
    // (⎡) LEFT SQUARE BRACKET UPPER CORNER	[079E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A1, 0x0021 };
    uint32_t const ces[9] = { 0x079E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_203)
{
    // 23A1 003F;	
    // (⎡) LEFT SQUARE BRACKET UPPER CORNER	[079E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A1, 0x003F };
    uint32_t const ces[9] = { 0x079E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_204)
{
    // 23A1 0061;	
    // (⎡) LEFT SQUARE BRACKET UPPER CORNER	[079E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A1, 0x0061 };
    uint32_t const ces[9] = { 0x079E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_205)
{
    // 23A1 0041;	
    // (⎡) LEFT SQUARE BRACKET UPPER CORNER	[079E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23A1, 0x0041 };
    uint32_t const ces[9] = { 0x079E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_206)
{
    // 23A1 0062;	
    // (⎡) LEFT SQUARE BRACKET UPPER CORNER	[079E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A1, 0x0062 };
    uint32_t const ces[9] = { 0x079E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_207)
{
    // 23A2 0021;	
    // (⎢) LEFT SQUARE BRACKET EXTENSION	[079F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A2, 0x0021 };
    uint32_t const ces[9] = { 0x079F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_208)
{
    // 23A2 003F;	
    // (⎢) LEFT SQUARE BRACKET EXTENSION	[079F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A2, 0x003F };
    uint32_t const ces[9] = { 0x079F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_209)
{
    // 23A2 0061;	
    // (⎢) LEFT SQUARE BRACKET EXTENSION	[079F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A2, 0x0061 };
    uint32_t const ces[9] = { 0x079F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_210)
{
    // 23A2 0041;	
    // (⎢) LEFT SQUARE BRACKET EXTENSION	[079F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23A2, 0x0041 };
    uint32_t const ces[9] = { 0x079F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_211)
{
    // 23A2 0062;	
    // (⎢) LEFT SQUARE BRACKET EXTENSION	[079F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A2, 0x0062 };
    uint32_t const ces[9] = { 0x079F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_212)
{
    // 23A3 0021;	
    // (⎣) LEFT SQUARE BRACKET LOWER CORNER	[07A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A3, 0x0021 };
    uint32_t const ces[9] = { 0x07A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_213)
{
    // 23A3 003F;	
    // (⎣) LEFT SQUARE BRACKET LOWER CORNER	[07A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A3, 0x003F };
    uint32_t const ces[9] = { 0x07A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_214)
{
    // 23A3 0061;	
    // (⎣) LEFT SQUARE BRACKET LOWER CORNER	[07A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A3, 0x0061 };
    uint32_t const ces[9] = { 0x07A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_215)
{
    // 23A3 0041;	
    // (⎣) LEFT SQUARE BRACKET LOWER CORNER	[07A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23A3, 0x0041 };
    uint32_t const ces[9] = { 0x07A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_216)
{
    // 23A3 0062;	
    // (⎣) LEFT SQUARE BRACKET LOWER CORNER	[07A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A3, 0x0062 };
    uint32_t const ces[9] = { 0x07A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_217)
{
    // 23A4 0021;	
    // (⎤) RIGHT SQUARE BRACKET UPPER CORNER	[07A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A4, 0x0021 };
    uint32_t const ces[9] = { 0x07A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_218)
{
    // 23A4 003F;	
    // (⎤) RIGHT SQUARE BRACKET UPPER CORNER	[07A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A4, 0x003F };
    uint32_t const ces[9] = { 0x07A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_219)
{
    // 23A4 0061;	
    // (⎤) RIGHT SQUARE BRACKET UPPER CORNER	[07A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A4, 0x0061 };
    uint32_t const ces[9] = { 0x07A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_220)
{
    // 23A4 0041;	
    // (⎤) RIGHT SQUARE BRACKET UPPER CORNER	[07A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23A4, 0x0041 };
    uint32_t const ces[9] = { 0x07A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_221)
{
    // 23A4 0062;	
    // (⎤) RIGHT SQUARE BRACKET UPPER CORNER	[07A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A4, 0x0062 };
    uint32_t const ces[9] = { 0x07A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_222)
{
    // 23A5 0021;	
    // (⎥) RIGHT SQUARE BRACKET EXTENSION	[07A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A5, 0x0021 };
    uint32_t const ces[9] = { 0x07A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_223)
{
    // 23A5 003F;	
    // (⎥) RIGHT SQUARE BRACKET EXTENSION	[07A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A5, 0x003F };
    uint32_t const ces[9] = { 0x07A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_224)
{
    // 23A5 0061;	
    // (⎥) RIGHT SQUARE BRACKET EXTENSION	[07A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A5, 0x0061 };
    uint32_t const ces[9] = { 0x07A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_225)
{
    // 23A5 0041;	
    // (⎥) RIGHT SQUARE BRACKET EXTENSION	[07A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23A5, 0x0041 };
    uint32_t const ces[9] = { 0x07A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_226)
{
    // 23A5 0062;	
    // (⎥) RIGHT SQUARE BRACKET EXTENSION	[07A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A5, 0x0062 };
    uint32_t const ces[9] = { 0x07A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_227)
{
    // 23A6 0021;	
    // (⎦) RIGHT SQUARE BRACKET LOWER CORNER	[07A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A6, 0x0021 };
    uint32_t const ces[9] = { 0x07A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_228)
{
    // 23A6 003F;	
    // (⎦) RIGHT SQUARE BRACKET LOWER CORNER	[07A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A6, 0x003F };
    uint32_t const ces[9] = { 0x07A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_229)
{
    // 23A6 0061;	
    // (⎦) RIGHT SQUARE BRACKET LOWER CORNER	[07A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A6, 0x0061 };
    uint32_t const ces[9] = { 0x07A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_230)
{
    // 23A6 0041;	
    // (⎦) RIGHT SQUARE BRACKET LOWER CORNER	[07A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23A6, 0x0041 };
    uint32_t const ces[9] = { 0x07A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_231)
{
    // 23A6 0062;	
    // (⎦) RIGHT SQUARE BRACKET LOWER CORNER	[07A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A6, 0x0062 };
    uint32_t const ces[9] = { 0x07A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_232)
{
    // 23A7 0021;	
    // (⎧) LEFT CURLY BRACKET UPPER HOOK	[07A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A7, 0x0021 };
    uint32_t const ces[9] = { 0x07A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_233)
{
    // 23A7 003F;	
    // (⎧) LEFT CURLY BRACKET UPPER HOOK	[07A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A7, 0x003F };
    uint32_t const ces[9] = { 0x07A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_234)
{
    // 23A7 0061;	
    // (⎧) LEFT CURLY BRACKET UPPER HOOK	[07A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A7, 0x0061 };
    uint32_t const ces[9] = { 0x07A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_235)
{
    // 23A7 0041;	
    // (⎧) LEFT CURLY BRACKET UPPER HOOK	[07A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23A7, 0x0041 };
    uint32_t const ces[9] = { 0x07A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_236)
{
    // 23A7 0062;	
    // (⎧) LEFT CURLY BRACKET UPPER HOOK	[07A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A7, 0x0062 };
    uint32_t const ces[9] = { 0x07A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_237)
{
    // 23A8 0021;	
    // (⎨) LEFT CURLY BRACKET MIDDLE PIECE	[07A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A8, 0x0021 };
    uint32_t const ces[9] = { 0x07A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_238)
{
    // 23A8 003F;	
    // (⎨) LEFT CURLY BRACKET MIDDLE PIECE	[07A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A8, 0x003F };
    uint32_t const ces[9] = { 0x07A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_239)
{
    // 23A8 0061;	
    // (⎨) LEFT CURLY BRACKET MIDDLE PIECE	[07A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A8, 0x0061 };
    uint32_t const ces[9] = { 0x07A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_240)
{
    // 23A8 0041;	
    // (⎨) LEFT CURLY BRACKET MIDDLE PIECE	[07A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23A8, 0x0041 };
    uint32_t const ces[9] = { 0x07A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_241)
{
    // 23A8 0062;	
    // (⎨) LEFT CURLY BRACKET MIDDLE PIECE	[07A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A8, 0x0062 };
    uint32_t const ces[9] = { 0x07A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_242)
{
    // 23A9 0021;	
    // (⎩) LEFT CURLY BRACKET LOWER HOOK	[07A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A9, 0x0021 };
    uint32_t const ces[9] = { 0x07A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_243)
{
    // 23A9 003F;	
    // (⎩) LEFT CURLY BRACKET LOWER HOOK	[07A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A9, 0x003F };
    uint32_t const ces[9] = { 0x07A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_244)
{
    // 23A9 0061;	
    // (⎩) LEFT CURLY BRACKET LOWER HOOK	[07A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A9, 0x0061 };
    uint32_t const ces[9] = { 0x07A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_245)
{
    // 23A9 0041;	
    // (⎩) LEFT CURLY BRACKET LOWER HOOK	[07A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23A9, 0x0041 };
    uint32_t const ces[9] = { 0x07A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_246)
{
    // 23A9 0062;	
    // (⎩) LEFT CURLY BRACKET LOWER HOOK	[07A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23A9, 0x0062 };
    uint32_t const ces[9] = { 0x07A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_247)
{
    // 23AA 0021;	
    // (⎪) CURLY BRACKET EXTENSION	[07A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AA, 0x0021 };
    uint32_t const ces[9] = { 0x07A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_248)
{
    // 23AA 003F;	
    // (⎪) CURLY BRACKET EXTENSION	[07A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AA, 0x003F };
    uint32_t const ces[9] = { 0x07A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_249)
{
    // 23AA 0061;	
    // (⎪) CURLY BRACKET EXTENSION	[07A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AA, 0x0061 };
    uint32_t const ces[9] = { 0x07A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_250)
{
    // 23AA 0041;	
    // (⎪) CURLY BRACKET EXTENSION	[07A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23AA, 0x0041 };
    uint32_t const ces[9] = { 0x07A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_251)
{
    // 23AA 0062;	
    // (⎪) CURLY BRACKET EXTENSION	[07A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AA, 0x0062 };
    uint32_t const ces[9] = { 0x07A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_252)
{
    // 23AB 0021;	
    // (⎫) RIGHT CURLY BRACKET UPPER HOOK	[07A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AB, 0x0021 };
    uint32_t const ces[9] = { 0x07A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_253)
{
    // 23AB 003F;	
    // (⎫) RIGHT CURLY BRACKET UPPER HOOK	[07A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AB, 0x003F };
    uint32_t const ces[9] = { 0x07A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_254)
{
    // 23AB 0061;	
    // (⎫) RIGHT CURLY BRACKET UPPER HOOK	[07A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AB, 0x0061 };
    uint32_t const ces[9] = { 0x07A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_255)
{
    // 23AB 0041;	
    // (⎫) RIGHT CURLY BRACKET UPPER HOOK	[07A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23AB, 0x0041 };
    uint32_t const ces[9] = { 0x07A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_256)
{
    // 23AB 0062;	
    // (⎫) RIGHT CURLY BRACKET UPPER HOOK	[07A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AB, 0x0062 };
    uint32_t const ces[9] = { 0x07A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_257)
{
    // 23AC 0021;	
    // (⎬) RIGHT CURLY BRACKET MIDDLE PIECE	[07A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AC, 0x0021 };
    uint32_t const ces[9] = { 0x07A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_258)
{
    // 23AC 003F;	
    // (⎬) RIGHT CURLY BRACKET MIDDLE PIECE	[07A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AC, 0x003F };
    uint32_t const ces[9] = { 0x07A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_259)
{
    // 23AC 0061;	
    // (⎬) RIGHT CURLY BRACKET MIDDLE PIECE	[07A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AC, 0x0061 };
    uint32_t const ces[9] = { 0x07A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_260)
{
    // 23AC 0041;	
    // (⎬) RIGHT CURLY BRACKET MIDDLE PIECE	[07A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23AC, 0x0041 };
    uint32_t const ces[9] = { 0x07A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_261)
{
    // 23AC 0062;	
    // (⎬) RIGHT CURLY BRACKET MIDDLE PIECE	[07A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AC, 0x0062 };
    uint32_t const ces[9] = { 0x07A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_262)
{
    // 23AD 0021;	
    // (⎭) RIGHT CURLY BRACKET LOWER HOOK	[07AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AD, 0x0021 };
    uint32_t const ces[9] = { 0x07AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_263)
{
    // 23AD 003F;	
    // (⎭) RIGHT CURLY BRACKET LOWER HOOK	[07AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AD, 0x003F };
    uint32_t const ces[9] = { 0x07AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_264)
{
    // 23AD 0061;	
    // (⎭) RIGHT CURLY BRACKET LOWER HOOK	[07AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AD, 0x0061 };
    uint32_t const ces[9] = { 0x07AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_265)
{
    // 23AD 0041;	
    // (⎭) RIGHT CURLY BRACKET LOWER HOOK	[07AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23AD, 0x0041 };
    uint32_t const ces[9] = { 0x07AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_266)
{
    // 23AD 0062;	
    // (⎭) RIGHT CURLY BRACKET LOWER HOOK	[07AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AD, 0x0062 };
    uint32_t const ces[9] = { 0x07AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_267)
{
    // 23AE 0021;	
    // (⎮) INTEGRAL EXTENSION	[07AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AE, 0x0021 };
    uint32_t const ces[9] = { 0x07AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_268)
{
    // 23AE 003F;	
    // (⎮) INTEGRAL EXTENSION	[07AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AE, 0x003F };
    uint32_t const ces[9] = { 0x07AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_269)
{
    // 23AE 0061;	
    // (⎮) INTEGRAL EXTENSION	[07AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AE, 0x0061 };
    uint32_t const ces[9] = { 0x07AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_270)
{
    // 23AE 0041;	
    // (⎮) INTEGRAL EXTENSION	[07AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23AE, 0x0041 };
    uint32_t const ces[9] = { 0x07AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_271)
{
    // 23AE 0062;	
    // (⎮) INTEGRAL EXTENSION	[07AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AE, 0x0062 };
    uint32_t const ces[9] = { 0x07AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_272)
{
    // 23AF 0021;	
    // (⎯) HORIZONTAL LINE EXTENSION	[07AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AF, 0x0021 };
    uint32_t const ces[9] = { 0x07AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_273)
{
    // 23AF 003F;	
    // (⎯) HORIZONTAL LINE EXTENSION	[07AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AF, 0x003F };
    uint32_t const ces[9] = { 0x07AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_274)
{
    // 23AF 0061;	
    // (⎯) HORIZONTAL LINE EXTENSION	[07AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AF, 0x0061 };
    uint32_t const ces[9] = { 0x07AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_275)
{
    // 23AF 0041;	
    // (⎯) HORIZONTAL LINE EXTENSION	[07AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23AF, 0x0041 };
    uint32_t const ces[9] = { 0x07AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_276)
{
    // 23AF 0062;	
    // (⎯) HORIZONTAL LINE EXTENSION	[07AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23AF, 0x0062 };
    uint32_t const ces[9] = { 0x07AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_277)
{
    // 23B0 0021;	
    // (⎰) UPPER LEFT OR LOWER RIGHT CURLY BRACKET SECTION	[07AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B0, 0x0021 };
    uint32_t const ces[9] = { 0x07AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_278)
{
    // 23B0 003F;	
    // (⎰) UPPER LEFT OR LOWER RIGHT CURLY BRACKET SECTION	[07AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B0, 0x003F };
    uint32_t const ces[9] = { 0x07AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_279)
{
    // 23B0 0061;	
    // (⎰) UPPER LEFT OR LOWER RIGHT CURLY BRACKET SECTION	[07AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B0, 0x0061 };
    uint32_t const ces[9] = { 0x07AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_280)
{
    // 23B0 0041;	
    // (⎰) UPPER LEFT OR LOWER RIGHT CURLY BRACKET SECTION	[07AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23B0, 0x0041 };
    uint32_t const ces[9] = { 0x07AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_281)
{
    // 23B0 0062;	
    // (⎰) UPPER LEFT OR LOWER RIGHT CURLY BRACKET SECTION	[07AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B0, 0x0062 };
    uint32_t const ces[9] = { 0x07AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_282)
{
    // 23B1 0021;	
    // (⎱) UPPER RIGHT OR LOWER LEFT CURLY BRACKET SECTION	[07AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B1, 0x0021 };
    uint32_t const ces[9] = { 0x07AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_283)
{
    // 23B1 003F;	
    // (⎱) UPPER RIGHT OR LOWER LEFT CURLY BRACKET SECTION	[07AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B1, 0x003F };
    uint32_t const ces[9] = { 0x07AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_284)
{
    // 23B1 0061;	
    // (⎱) UPPER RIGHT OR LOWER LEFT CURLY BRACKET SECTION	[07AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B1, 0x0061 };
    uint32_t const ces[9] = { 0x07AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_285)
{
    // 23B1 0041;	
    // (⎱) UPPER RIGHT OR LOWER LEFT CURLY BRACKET SECTION	[07AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23B1, 0x0041 };
    uint32_t const ces[9] = { 0x07AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_286)
{
    // 23B1 0062;	
    // (⎱) UPPER RIGHT OR LOWER LEFT CURLY BRACKET SECTION	[07AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B1, 0x0062 };
    uint32_t const ces[9] = { 0x07AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_287)
{
    // 23B2 0021;	
    // (⎲) SUMMATION TOP	[07AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B2, 0x0021 };
    uint32_t const ces[9] = { 0x07AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_288)
{
    // 23B2 003F;	
    // (⎲) SUMMATION TOP	[07AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B2, 0x003F };
    uint32_t const ces[9] = { 0x07AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_289)
{
    // 23B2 0061;	
    // (⎲) SUMMATION TOP	[07AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B2, 0x0061 };
    uint32_t const ces[9] = { 0x07AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_290)
{
    // 23B2 0041;	
    // (⎲) SUMMATION TOP	[07AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23B2, 0x0041 };
    uint32_t const ces[9] = { 0x07AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_291)
{
    // 23B2 0062;	
    // (⎲) SUMMATION TOP	[07AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B2, 0x0062 };
    uint32_t const ces[9] = { 0x07AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_292)
{
    // 23B3 0021;	
    // (⎳) SUMMATION BOTTOM	[07B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B3, 0x0021 };
    uint32_t const ces[9] = { 0x07B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_293)
{
    // 23B3 003F;	
    // (⎳) SUMMATION BOTTOM	[07B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B3, 0x003F };
    uint32_t const ces[9] = { 0x07B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_294)
{
    // 23B3 0061;	
    // (⎳) SUMMATION BOTTOM	[07B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B3, 0x0061 };
    uint32_t const ces[9] = { 0x07B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_295)
{
    // 23B3 0041;	
    // (⎳) SUMMATION BOTTOM	[07B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23B3, 0x0041 };
    uint32_t const ces[9] = { 0x07B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_296)
{
    // 23B3 0062;	
    // (⎳) SUMMATION BOTTOM	[07B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B3, 0x0062 };
    uint32_t const ces[9] = { 0x07B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_297)
{
    // 23B4 0021;	
    // (⎴) TOP SQUARE BRACKET	[07B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B4, 0x0021 };
    uint32_t const ces[9] = { 0x07B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_298)
{
    // 23B4 003F;	
    // (⎴) TOP SQUARE BRACKET	[07B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B4, 0x003F };
    uint32_t const ces[9] = { 0x07B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_299)
{
    // 23B4 0061;	
    // (⎴) TOP SQUARE BRACKET	[07B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B4, 0x0061 };
    uint32_t const ces[9] = { 0x07B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_300)
{
    // 23B4 0041;	
    // (⎴) TOP SQUARE BRACKET	[07B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23B4, 0x0041 };
    uint32_t const ces[9] = { 0x07B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_301)
{
    // 23B4 0062;	
    // (⎴) TOP SQUARE BRACKET	[07B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B4, 0x0062 };
    uint32_t const ces[9] = { 0x07B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_302)
{
    // 23B5 0021;	
    // (⎵) BOTTOM SQUARE BRACKET	[07B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B5, 0x0021 };
    uint32_t const ces[9] = { 0x07B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_303)
{
    // 23B5 003F;	
    // (⎵) BOTTOM SQUARE BRACKET	[07B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B5, 0x003F };
    uint32_t const ces[9] = { 0x07B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_304)
{
    // 23B5 0061;	
    // (⎵) BOTTOM SQUARE BRACKET	[07B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B5, 0x0061 };
    uint32_t const ces[9] = { 0x07B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_305)
{
    // 23B5 0041;	
    // (⎵) BOTTOM SQUARE BRACKET	[07B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23B5, 0x0041 };
    uint32_t const ces[9] = { 0x07B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_306)
{
    // 23B5 0062;	
    // (⎵) BOTTOM SQUARE BRACKET	[07B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B5, 0x0062 };
    uint32_t const ces[9] = { 0x07B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_307)
{
    // 23B6 0021;	
    // (⎶) BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET	[07B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B6, 0x0021 };
    uint32_t const ces[9] = { 0x07B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_308)
{
    // 23B6 003F;	
    // (⎶) BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET	[07B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B6, 0x003F };
    uint32_t const ces[9] = { 0x07B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_309)
{
    // 23B6 0061;	
    // (⎶) BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET	[07B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B6, 0x0061 };
    uint32_t const ces[9] = { 0x07B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_310)
{
    // 23B6 0041;	
    // (⎶) BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET	[07B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23B6, 0x0041 };
    uint32_t const ces[9] = { 0x07B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_311)
{
    // 23B6 0062;	
    // (⎶) BOTTOM SQUARE BRACKET OVER TOP SQUARE BRACKET	[07B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B6, 0x0062 };
    uint32_t const ces[9] = { 0x07B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_312)
{
    // 23B7 0021;	
    // (⎷) RADICAL SYMBOL BOTTOM	[07B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B7, 0x0021 };
    uint32_t const ces[9] = { 0x07B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_313)
{
    // 23B7 003F;	
    // (⎷) RADICAL SYMBOL BOTTOM	[07B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B7, 0x003F };
    uint32_t const ces[9] = { 0x07B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_314)
{
    // 23B7 0061;	
    // (⎷) RADICAL SYMBOL BOTTOM	[07B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B7, 0x0061 };
    uint32_t const ces[9] = { 0x07B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_315)
{
    // 23B7 0041;	
    // (⎷) RADICAL SYMBOL BOTTOM	[07B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23B7, 0x0041 };
    uint32_t const ces[9] = { 0x07B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_316)
{
    // 23B7 0062;	
    // (⎷) RADICAL SYMBOL BOTTOM	[07B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B7, 0x0062 };
    uint32_t const ces[9] = { 0x07B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_317)
{
    // 23B8 0021;	
    // (⎸) LEFT VERTICAL BOX LINE	[07B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B8, 0x0021 };
    uint32_t const ces[9] = { 0x07B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_318)
{
    // 23B8 003F;	
    // (⎸) LEFT VERTICAL BOX LINE	[07B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B8, 0x003F };
    uint32_t const ces[9] = { 0x07B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_319)
{
    // 23B8 0061;	
    // (⎸) LEFT VERTICAL BOX LINE	[07B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B8, 0x0061 };
    uint32_t const ces[9] = { 0x07B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_320)
{
    // 23B8 0041;	
    // (⎸) LEFT VERTICAL BOX LINE	[07B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23B8, 0x0041 };
    uint32_t const ces[9] = { 0x07B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_321)
{
    // 23B8 0062;	
    // (⎸) LEFT VERTICAL BOX LINE	[07B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B8, 0x0062 };
    uint32_t const ces[9] = { 0x07B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_322)
{
    // 23B9 0021;	
    // (⎹) RIGHT VERTICAL BOX LINE	[07B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B9, 0x0021 };
    uint32_t const ces[9] = { 0x07B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_323)
{
    // 23B9 003F;	
    // (⎹) RIGHT VERTICAL BOX LINE	[07B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B9, 0x003F };
    uint32_t const ces[9] = { 0x07B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_324)
{
    // 23B9 0061;	
    // (⎹) RIGHT VERTICAL BOX LINE	[07B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B9, 0x0061 };
    uint32_t const ces[9] = { 0x07B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_325)
{
    // 23B9 0041;	
    // (⎹) RIGHT VERTICAL BOX LINE	[07B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23B9, 0x0041 };
    uint32_t const ces[9] = { 0x07B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_326)
{
    // 23B9 0062;	
    // (⎹) RIGHT VERTICAL BOX LINE	[07B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23B9, 0x0062 };
    uint32_t const ces[9] = { 0x07B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_327)
{
    // 23BA 0021;	
    // (⎺) HORIZONTAL SCAN LINE-1	[07B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BA, 0x0021 };
    uint32_t const ces[9] = { 0x07B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_328)
{
    // 23BA 003F;	
    // (⎺) HORIZONTAL SCAN LINE-1	[07B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BA, 0x003F };
    uint32_t const ces[9] = { 0x07B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_329)
{
    // 23BA 0061;	
    // (⎺) HORIZONTAL SCAN LINE-1	[07B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BA, 0x0061 };
    uint32_t const ces[9] = { 0x07B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_330)
{
    // 23BA 0041;	
    // (⎺) HORIZONTAL SCAN LINE-1	[07B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23BA, 0x0041 };
    uint32_t const ces[9] = { 0x07B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_331)
{
    // 23BA 0062;	
    // (⎺) HORIZONTAL SCAN LINE-1	[07B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BA, 0x0062 };
    uint32_t const ces[9] = { 0x07B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_332)
{
    // 23BB 0021;	
    // (⎻) HORIZONTAL SCAN LINE-3	[07B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BB, 0x0021 };
    uint32_t const ces[9] = { 0x07B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_333)
{
    // 23BB 003F;	
    // (⎻) HORIZONTAL SCAN LINE-3	[07B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BB, 0x003F };
    uint32_t const ces[9] = { 0x07B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_334)
{
    // 23BB 0061;	
    // (⎻) HORIZONTAL SCAN LINE-3	[07B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BB, 0x0061 };
    uint32_t const ces[9] = { 0x07B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_335)
{
    // 23BB 0041;	
    // (⎻) HORIZONTAL SCAN LINE-3	[07B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23BB, 0x0041 };
    uint32_t const ces[9] = { 0x07B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_336)
{
    // 23BB 0062;	
    // (⎻) HORIZONTAL SCAN LINE-3	[07B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BB, 0x0062 };
    uint32_t const ces[9] = { 0x07B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_337)
{
    // 23BC 0021;	
    // (⎼) HORIZONTAL SCAN LINE-7	[07B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BC, 0x0021 };
    uint32_t const ces[9] = { 0x07B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_338)
{
    // 23BC 003F;	
    // (⎼) HORIZONTAL SCAN LINE-7	[07B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BC, 0x003F };
    uint32_t const ces[9] = { 0x07B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_339)
{
    // 23BC 0061;	
    // (⎼) HORIZONTAL SCAN LINE-7	[07B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BC, 0x0061 };
    uint32_t const ces[9] = { 0x07B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_340)
{
    // 23BC 0041;	
    // (⎼) HORIZONTAL SCAN LINE-7	[07B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23BC, 0x0041 };
    uint32_t const ces[9] = { 0x07B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_341)
{
    // 23BC 0062;	
    // (⎼) HORIZONTAL SCAN LINE-7	[07B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BC, 0x0062 };
    uint32_t const ces[9] = { 0x07B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_342)
{
    // 23BD 0021;	
    // (⎽) HORIZONTAL SCAN LINE-9	[07BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BD, 0x0021 };
    uint32_t const ces[9] = { 0x07BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_343)
{
    // 23BD 003F;	
    // (⎽) HORIZONTAL SCAN LINE-9	[07BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BD, 0x003F };
    uint32_t const ces[9] = { 0x07BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_344)
{
    // 23BD 0061;	
    // (⎽) HORIZONTAL SCAN LINE-9	[07BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BD, 0x0061 };
    uint32_t const ces[9] = { 0x07BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_345)
{
    // 23BD 0041;	
    // (⎽) HORIZONTAL SCAN LINE-9	[07BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23BD, 0x0041 };
    uint32_t const ces[9] = { 0x07BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_346)
{
    // 23BD 0062;	
    // (⎽) HORIZONTAL SCAN LINE-9	[07BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BD, 0x0062 };
    uint32_t const ces[9] = { 0x07BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_347)
{
    // 23BE 0021;	
    // (⎾) DENTISTRY SYMBOL LIGHT VERTICAL AND TOP RIGHT	[07BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BE, 0x0021 };
    uint32_t const ces[9] = { 0x07BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_348)
{
    // 23BE 003F;	
    // (⎾) DENTISTRY SYMBOL LIGHT VERTICAL AND TOP RIGHT	[07BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BE, 0x003F };
    uint32_t const ces[9] = { 0x07BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_349)
{
    // 23BE 0061;	
    // (⎾) DENTISTRY SYMBOL LIGHT VERTICAL AND TOP RIGHT	[07BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BE, 0x0061 };
    uint32_t const ces[9] = { 0x07BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_350)
{
    // 23BE 0041;	
    // (⎾) DENTISTRY SYMBOL LIGHT VERTICAL AND TOP RIGHT	[07BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23BE, 0x0041 };
    uint32_t const ces[9] = { 0x07BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_351)
{
    // 23BE 0062;	
    // (⎾) DENTISTRY SYMBOL LIGHT VERTICAL AND TOP RIGHT	[07BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BE, 0x0062 };
    uint32_t const ces[9] = { 0x07BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_352)
{
    // 23BF 0021;	
    // (⎿) DENTISTRY SYMBOL LIGHT VERTICAL AND BOTTOM RIGHT	[07BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BF, 0x0021 };
    uint32_t const ces[9] = { 0x07BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_353)
{
    // 23BF 003F;	
    // (⎿) DENTISTRY SYMBOL LIGHT VERTICAL AND BOTTOM RIGHT	[07BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BF, 0x003F };
    uint32_t const ces[9] = { 0x07BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_354)
{
    // 23BF 0061;	
    // (⎿) DENTISTRY SYMBOL LIGHT VERTICAL AND BOTTOM RIGHT	[07BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BF, 0x0061 };
    uint32_t const ces[9] = { 0x07BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_355)
{
    // 23BF 0041;	
    // (⎿) DENTISTRY SYMBOL LIGHT VERTICAL AND BOTTOM RIGHT	[07BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23BF, 0x0041 };
    uint32_t const ces[9] = { 0x07BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_356)
{
    // 23BF 0062;	
    // (⎿) DENTISTRY SYMBOL LIGHT VERTICAL AND BOTTOM RIGHT	[07BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23BF, 0x0062 };
    uint32_t const ces[9] = { 0x07BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_357)
{
    // 23C0 0021;	
    // (⏀) DENTISTRY SYMBOL LIGHT VERTICAL WITH CIRCLE	[07BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C0, 0x0021 };
    uint32_t const ces[9] = { 0x07BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_358)
{
    // 23C0 003F;	
    // (⏀) DENTISTRY SYMBOL LIGHT VERTICAL WITH CIRCLE	[07BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C0, 0x003F };
    uint32_t const ces[9] = { 0x07BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_359)
{
    // 23C0 0061;	
    // (⏀) DENTISTRY SYMBOL LIGHT VERTICAL WITH CIRCLE	[07BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C0, 0x0061 };
    uint32_t const ces[9] = { 0x07BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_360)
{
    // 23C0 0041;	
    // (⏀) DENTISTRY SYMBOL LIGHT VERTICAL WITH CIRCLE	[07BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23C0, 0x0041 };
    uint32_t const ces[9] = { 0x07BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_361)
{
    // 23C0 0062;	
    // (⏀) DENTISTRY SYMBOL LIGHT VERTICAL WITH CIRCLE	[07BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C0, 0x0062 };
    uint32_t const ces[9] = { 0x07BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_362)
{
    // 23C1 0021;	
    // (⏁) DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL WITH CIRCLE	[07BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C1, 0x0021 };
    uint32_t const ces[9] = { 0x07BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_363)
{
    // 23C1 003F;	
    // (⏁) DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL WITH CIRCLE	[07BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C1, 0x003F };
    uint32_t const ces[9] = { 0x07BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_364)
{
    // 23C1 0061;	
    // (⏁) DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL WITH CIRCLE	[07BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C1, 0x0061 };
    uint32_t const ces[9] = { 0x07BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_365)
{
    // 23C1 0041;	
    // (⏁) DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL WITH CIRCLE	[07BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23C1, 0x0041 };
    uint32_t const ces[9] = { 0x07BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_366)
{
    // 23C1 0062;	
    // (⏁) DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL WITH CIRCLE	[07BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C1, 0x0062 };
    uint32_t const ces[9] = { 0x07BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_367)
{
    // 23C2 0021;	
    // (⏂) DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL WITH CIRCLE	[07BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C2, 0x0021 };
    uint32_t const ces[9] = { 0x07BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_368)
{
    // 23C2 003F;	
    // (⏂) DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL WITH CIRCLE	[07BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C2, 0x003F };
    uint32_t const ces[9] = { 0x07BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_369)
{
    // 23C2 0061;	
    // (⏂) DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL WITH CIRCLE	[07BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C2, 0x0061 };
    uint32_t const ces[9] = { 0x07BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_370)
{
    // 23C2 0041;	
    // (⏂) DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL WITH CIRCLE	[07BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23C2, 0x0041 };
    uint32_t const ces[9] = { 0x07BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_371)
{
    // 23C2 0062;	
    // (⏂) DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL WITH CIRCLE	[07BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C2, 0x0062 };
    uint32_t const ces[9] = { 0x07BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_372)
{
    // 23C3 0021;	
    // (⏃) DENTISTRY SYMBOL LIGHT VERTICAL WITH TRIANGLE	[07C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C3, 0x0021 };
    uint32_t const ces[9] = { 0x07C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_373)
{
    // 23C3 003F;	
    // (⏃) DENTISTRY SYMBOL LIGHT VERTICAL WITH TRIANGLE	[07C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C3, 0x003F };
    uint32_t const ces[9] = { 0x07C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_374)
{
    // 23C3 0061;	
    // (⏃) DENTISTRY SYMBOL LIGHT VERTICAL WITH TRIANGLE	[07C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C3, 0x0061 };
    uint32_t const ces[9] = { 0x07C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_375)
{
    // 23C3 0041;	
    // (⏃) DENTISTRY SYMBOL LIGHT VERTICAL WITH TRIANGLE	[07C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23C3, 0x0041 };
    uint32_t const ces[9] = { 0x07C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_376)
{
    // 23C3 0062;	
    // (⏃) DENTISTRY SYMBOL LIGHT VERTICAL WITH TRIANGLE	[07C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C3, 0x0062 };
    uint32_t const ces[9] = { 0x07C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_377)
{
    // 23C4 0021;	
    // (⏄) DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL WITH TRIANGLE	[07C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C4, 0x0021 };
    uint32_t const ces[9] = { 0x07C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_378)
{
    // 23C4 003F;	
    // (⏄) DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL WITH TRIANGLE	[07C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C4, 0x003F };
    uint32_t const ces[9] = { 0x07C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_379)
{
    // 23C4 0061;	
    // (⏄) DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL WITH TRIANGLE	[07C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C4, 0x0061 };
    uint32_t const ces[9] = { 0x07C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_380)
{
    // 23C4 0041;	
    // (⏄) DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL WITH TRIANGLE	[07C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23C4, 0x0041 };
    uint32_t const ces[9] = { 0x07C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_381)
{
    // 23C4 0062;	
    // (⏄) DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL WITH TRIANGLE	[07C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C4, 0x0062 };
    uint32_t const ces[9] = { 0x07C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_382)
{
    // 23C5 0021;	
    // (⏅) DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL WITH TRIANGLE	[07C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C5, 0x0021 };
    uint32_t const ces[9] = { 0x07C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_383)
{
    // 23C5 003F;	
    // (⏅) DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL WITH TRIANGLE	[07C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C5, 0x003F };
    uint32_t const ces[9] = { 0x07C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_384)
{
    // 23C5 0061;	
    // (⏅) DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL WITH TRIANGLE	[07C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C5, 0x0061 };
    uint32_t const ces[9] = { 0x07C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_385)
{
    // 23C5 0041;	
    // (⏅) DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL WITH TRIANGLE	[07C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23C5, 0x0041 };
    uint32_t const ces[9] = { 0x07C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_386)
{
    // 23C5 0062;	
    // (⏅) DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL WITH TRIANGLE	[07C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C5, 0x0062 };
    uint32_t const ces[9] = { 0x07C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_387)
{
    // 23C6 0021;	
    // (⏆) DENTISTRY SYMBOL LIGHT VERTICAL AND WAVE	[07C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C6, 0x0021 };
    uint32_t const ces[9] = { 0x07C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_388)
{
    // 23C6 003F;	
    // (⏆) DENTISTRY SYMBOL LIGHT VERTICAL AND WAVE	[07C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C6, 0x003F };
    uint32_t const ces[9] = { 0x07C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_389)
{
    // 23C6 0061;	
    // (⏆) DENTISTRY SYMBOL LIGHT VERTICAL AND WAVE	[07C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C6, 0x0061 };
    uint32_t const ces[9] = { 0x07C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_390)
{
    // 23C6 0041;	
    // (⏆) DENTISTRY SYMBOL LIGHT VERTICAL AND WAVE	[07C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23C6, 0x0041 };
    uint32_t const ces[9] = { 0x07C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_391)
{
    // 23C6 0062;	
    // (⏆) DENTISTRY SYMBOL LIGHT VERTICAL AND WAVE	[07C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C6, 0x0062 };
    uint32_t const ces[9] = { 0x07C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_392)
{
    // 23C7 0021;	
    // (⏇) DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL WITH WAVE	[07C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C7, 0x0021 };
    uint32_t const ces[9] = { 0x07C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_393)
{
    // 23C7 003F;	
    // (⏇) DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL WITH WAVE	[07C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C7, 0x003F };
    uint32_t const ces[9] = { 0x07C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_394)
{
    // 23C7 0061;	
    // (⏇) DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL WITH WAVE	[07C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C7, 0x0061 };
    uint32_t const ces[9] = { 0x07C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_395)
{
    // 23C7 0041;	
    // (⏇) DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL WITH WAVE	[07C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23C7, 0x0041 };
    uint32_t const ces[9] = { 0x07C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_396)
{
    // 23C7 0062;	
    // (⏇) DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL WITH WAVE	[07C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C7, 0x0062 };
    uint32_t const ces[9] = { 0x07C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_397)
{
    // 23C8 0021;	
    // (⏈) DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL WITH WAVE	[07C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C8, 0x0021 };
    uint32_t const ces[9] = { 0x07C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_398)
{
    // 23C8 003F;	
    // (⏈) DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL WITH WAVE	[07C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C8, 0x003F };
    uint32_t const ces[9] = { 0x07C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_399)
{
    // 23C8 0061;	
    // (⏈) DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL WITH WAVE	[07C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C8, 0x0061 };
    uint32_t const ces[9] = { 0x07C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_400)
{
    // 23C8 0041;	
    // (⏈) DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL WITH WAVE	[07C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23C8, 0x0041 };
    uint32_t const ces[9] = { 0x07C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_401)
{
    // 23C8 0062;	
    // (⏈) DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL WITH WAVE	[07C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C8, 0x0062 };
    uint32_t const ces[9] = { 0x07C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_402)
{
    // 23C9 0021;	
    // (⏉) DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL	[07C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C9, 0x0021 };
    uint32_t const ces[9] = { 0x07C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_403)
{
    // 23C9 003F;	
    // (⏉) DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL	[07C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C9, 0x003F };
    uint32_t const ces[9] = { 0x07C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_404)
{
    // 23C9 0061;	
    // (⏉) DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL	[07C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C9, 0x0061 };
    uint32_t const ces[9] = { 0x07C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_405)
{
    // 23C9 0041;	
    // (⏉) DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL	[07C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23C9, 0x0041 };
    uint32_t const ces[9] = { 0x07C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_406)
{
    // 23C9 0062;	
    // (⏉) DENTISTRY SYMBOL LIGHT DOWN AND HORIZONTAL	[07C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23C9, 0x0062 };
    uint32_t const ces[9] = { 0x07C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_407)
{
    // 23CA 0021;	
    // (⏊) DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL	[07C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CA, 0x0021 };
    uint32_t const ces[9] = { 0x07C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_408)
{
    // 23CA 003F;	
    // (⏊) DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL	[07C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CA, 0x003F };
    uint32_t const ces[9] = { 0x07C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_409)
{
    // 23CA 0061;	
    // (⏊) DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL	[07C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CA, 0x0061 };
    uint32_t const ces[9] = { 0x07C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_410)
{
    // 23CA 0041;	
    // (⏊) DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL	[07C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23CA, 0x0041 };
    uint32_t const ces[9] = { 0x07C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_411)
{
    // 23CA 0062;	
    // (⏊) DENTISTRY SYMBOL LIGHT UP AND HORIZONTAL	[07C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CA, 0x0062 };
    uint32_t const ces[9] = { 0x07C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_412)
{
    // 23CB 0021;	
    // (⏋) DENTISTRY SYMBOL LIGHT VERTICAL AND TOP LEFT	[07C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CB, 0x0021 };
    uint32_t const ces[9] = { 0x07C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_413)
{
    // 23CB 003F;	
    // (⏋) DENTISTRY SYMBOL LIGHT VERTICAL AND TOP LEFT	[07C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CB, 0x003F };
    uint32_t const ces[9] = { 0x07C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_414)
{
    // 23CB 0061;	
    // (⏋) DENTISTRY SYMBOL LIGHT VERTICAL AND TOP LEFT	[07C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CB, 0x0061 };
    uint32_t const ces[9] = { 0x07C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_415)
{
    // 23CB 0041;	
    // (⏋) DENTISTRY SYMBOL LIGHT VERTICAL AND TOP LEFT	[07C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23CB, 0x0041 };
    uint32_t const ces[9] = { 0x07C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_416)
{
    // 23CB 0062;	
    // (⏋) DENTISTRY SYMBOL LIGHT VERTICAL AND TOP LEFT	[07C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CB, 0x0062 };
    uint32_t const ces[9] = { 0x07C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_417)
{
    // 23CC 0021;	
    // (⏌) DENTISTRY SYMBOL LIGHT VERTICAL AND BOTTOM LEFT	[07C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CC, 0x0021 };
    uint32_t const ces[9] = { 0x07C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_418)
{
    // 23CC 003F;	
    // (⏌) DENTISTRY SYMBOL LIGHT VERTICAL AND BOTTOM LEFT	[07C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CC, 0x003F };
    uint32_t const ces[9] = { 0x07C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_419)
{
    // 23CC 0061;	
    // (⏌) DENTISTRY SYMBOL LIGHT VERTICAL AND BOTTOM LEFT	[07C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CC, 0x0061 };
    uint32_t const ces[9] = { 0x07C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_420)
{
    // 23CC 0041;	
    // (⏌) DENTISTRY SYMBOL LIGHT VERTICAL AND BOTTOM LEFT	[07C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23CC, 0x0041 };
    uint32_t const ces[9] = { 0x07C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_421)
{
    // 23CC 0062;	
    // (⏌) DENTISTRY SYMBOL LIGHT VERTICAL AND BOTTOM LEFT	[07C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CC, 0x0062 };
    uint32_t const ces[9] = { 0x07C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_422)
{
    // 23CD 0021;	
    // (⏍) SQUARE FOOT	[07CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CD, 0x0021 };
    uint32_t const ces[9] = { 0x07CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_423)
{
    // 23CD 003F;	
    // (⏍) SQUARE FOOT	[07CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CD, 0x003F };
    uint32_t const ces[9] = { 0x07CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_424)
{
    // 23CD 0061;	
    // (⏍) SQUARE FOOT	[07CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CD, 0x0061 };
    uint32_t const ces[9] = { 0x07CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_425)
{
    // 23CD 0041;	
    // (⏍) SQUARE FOOT	[07CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23CD, 0x0041 };
    uint32_t const ces[9] = { 0x07CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_426)
{
    // 23CD 0062;	
    // (⏍) SQUARE FOOT	[07CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CD, 0x0062 };
    uint32_t const ces[9] = { 0x07CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_427)
{
    // 23CE 0021;	
    // (⏎) RETURN SYMBOL	[07CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CE, 0x0021 };
    uint32_t const ces[9] = { 0x07CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_428)
{
    // 23CE 003F;	
    // (⏎) RETURN SYMBOL	[07CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CE, 0x003F };
    uint32_t const ces[9] = { 0x07CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_429)
{
    // 23CE 0061;	
    // (⏎) RETURN SYMBOL	[07CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CE, 0x0061 };
    uint32_t const ces[9] = { 0x07CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_430)
{
    // 23CE 0041;	
    // (⏎) RETURN SYMBOL	[07CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23CE, 0x0041 };
    uint32_t const ces[9] = { 0x07CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_431)
{
    // 23CE 0062;	
    // (⏎) RETURN SYMBOL	[07CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CE, 0x0062 };
    uint32_t const ces[9] = { 0x07CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_432)
{
    // 23CF 0021;	
    // (⏏) EJECT SYMBOL	[07CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CF, 0x0021 };
    uint32_t const ces[9] = { 0x07CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_433)
{
    // 23CF 003F;	
    // (⏏) EJECT SYMBOL	[07CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CF, 0x003F };
    uint32_t const ces[9] = { 0x07CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_434)
{
    // 23CF 0061;	
    // (⏏) EJECT SYMBOL	[07CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CF, 0x0061 };
    uint32_t const ces[9] = { 0x07CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_435)
{
    // 23CF 0041;	
    // (⏏) EJECT SYMBOL	[07CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23CF, 0x0041 };
    uint32_t const ces[9] = { 0x07CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_436)
{
    // 23CF 0062;	
    // (⏏) EJECT SYMBOL	[07CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23CF, 0x0062 };
    uint32_t const ces[9] = { 0x07CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_437)
{
    // 23D0 0021;	
    // (⏐) VERTICAL LINE EXTENSION	[07CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D0, 0x0021 };
    uint32_t const ces[9] = { 0x07CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_438)
{
    // 23D0 003F;	
    // (⏐) VERTICAL LINE EXTENSION	[07CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D0, 0x003F };
    uint32_t const ces[9] = { 0x07CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_439)
{
    // 23D0 0061;	
    // (⏐) VERTICAL LINE EXTENSION	[07CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D0, 0x0061 };
    uint32_t const ces[9] = { 0x07CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_440)
{
    // 23D0 0041;	
    // (⏐) VERTICAL LINE EXTENSION	[07CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23D0, 0x0041 };
    uint32_t const ces[9] = { 0x07CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_441)
{
    // 23D0 0062;	
    // (⏐) VERTICAL LINE EXTENSION	[07CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D0, 0x0062 };
    uint32_t const ces[9] = { 0x07CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_442)
{
    // 23D1 0021;	
    // (⏑) METRICAL BREVE	[07CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D1, 0x0021 };
    uint32_t const ces[9] = { 0x07CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_443)
{
    // 23D1 003F;	
    // (⏑) METRICAL BREVE	[07CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D1, 0x003F };
    uint32_t const ces[9] = { 0x07CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_444)
{
    // 23D1 0061;	
    // (⏑) METRICAL BREVE	[07CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D1, 0x0061 };
    uint32_t const ces[9] = { 0x07CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_445)
{
    // 23D1 0041;	
    // (⏑) METRICAL BREVE	[07CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23D1, 0x0041 };
    uint32_t const ces[9] = { 0x07CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_446)
{
    // 23D1 0062;	
    // (⏑) METRICAL BREVE	[07CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D1, 0x0062 };
    uint32_t const ces[9] = { 0x07CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_447)
{
    // 23D2 0021;	
    // (⏒) METRICAL LONG OVER SHORT	[07CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D2, 0x0021 };
    uint32_t const ces[9] = { 0x07CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_448)
{
    // 23D2 003F;	
    // (⏒) METRICAL LONG OVER SHORT	[07CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D2, 0x003F };
    uint32_t const ces[9] = { 0x07CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_449)
{
    // 23D2 0061;	
    // (⏒) METRICAL LONG OVER SHORT	[07CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D2, 0x0061 };
    uint32_t const ces[9] = { 0x07CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_450)
{
    // 23D2 0041;	
    // (⏒) METRICAL LONG OVER SHORT	[07CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23D2, 0x0041 };
    uint32_t const ces[9] = { 0x07CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_451)
{
    // 23D2 0062;	
    // (⏒) METRICAL LONG OVER SHORT	[07CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D2, 0x0062 };
    uint32_t const ces[9] = { 0x07CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_452)
{
    // 23D3 0021;	
    // (⏓) METRICAL SHORT OVER LONG	[07D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D3, 0x0021 };
    uint32_t const ces[9] = { 0x07D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_453)
{
    // 23D3 003F;	
    // (⏓) METRICAL SHORT OVER LONG	[07D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D3, 0x003F };
    uint32_t const ces[9] = { 0x07D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_454)
{
    // 23D3 0061;	
    // (⏓) METRICAL SHORT OVER LONG	[07D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D3, 0x0061 };
    uint32_t const ces[9] = { 0x07D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_455)
{
    // 23D3 0041;	
    // (⏓) METRICAL SHORT OVER LONG	[07D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23D3, 0x0041 };
    uint32_t const ces[9] = { 0x07D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_456)
{
    // 23D3 0062;	
    // (⏓) METRICAL SHORT OVER LONG	[07D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D3, 0x0062 };
    uint32_t const ces[9] = { 0x07D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_457)
{
    // 23D4 0021;	
    // (⏔) METRICAL LONG OVER TWO SHORTS	[07D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D4, 0x0021 };
    uint32_t const ces[9] = { 0x07D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_458)
{
    // 23D4 003F;	
    // (⏔) METRICAL LONG OVER TWO SHORTS	[07D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D4, 0x003F };
    uint32_t const ces[9] = { 0x07D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_459)
{
    // 23D4 0061;	
    // (⏔) METRICAL LONG OVER TWO SHORTS	[07D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D4, 0x0061 };
    uint32_t const ces[9] = { 0x07D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_460)
{
    // 23D4 0041;	
    // (⏔) METRICAL LONG OVER TWO SHORTS	[07D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23D4, 0x0041 };
    uint32_t const ces[9] = { 0x07D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_461)
{
    // 23D4 0062;	
    // (⏔) METRICAL LONG OVER TWO SHORTS	[07D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D4, 0x0062 };
    uint32_t const ces[9] = { 0x07D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_462)
{
    // 23D5 0021;	
    // (⏕) METRICAL TWO SHORTS OVER LONG	[07D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D5, 0x0021 };
    uint32_t const ces[9] = { 0x07D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_463)
{
    // 23D5 003F;	
    // (⏕) METRICAL TWO SHORTS OVER LONG	[07D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D5, 0x003F };
    uint32_t const ces[9] = { 0x07D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_464)
{
    // 23D5 0061;	
    // (⏕) METRICAL TWO SHORTS OVER LONG	[07D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D5, 0x0061 };
    uint32_t const ces[9] = { 0x07D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_465)
{
    // 23D5 0041;	
    // (⏕) METRICAL TWO SHORTS OVER LONG	[07D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23D5, 0x0041 };
    uint32_t const ces[9] = { 0x07D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_466)
{
    // 23D5 0062;	
    // (⏕) METRICAL TWO SHORTS OVER LONG	[07D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D5, 0x0062 };
    uint32_t const ces[9] = { 0x07D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_467)
{
    // 23D6 0021;	
    // (⏖) METRICAL TWO SHORTS JOINED	[07D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D6, 0x0021 };
    uint32_t const ces[9] = { 0x07D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_468)
{
    // 23D6 003F;	
    // (⏖) METRICAL TWO SHORTS JOINED	[07D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D6, 0x003F };
    uint32_t const ces[9] = { 0x07D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_469)
{
    // 23D6 0061;	
    // (⏖) METRICAL TWO SHORTS JOINED	[07D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D6, 0x0061 };
    uint32_t const ces[9] = { 0x07D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_470)
{
    // 23D6 0041;	
    // (⏖) METRICAL TWO SHORTS JOINED	[07D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23D6, 0x0041 };
    uint32_t const ces[9] = { 0x07D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_471)
{
    // 23D6 0062;	
    // (⏖) METRICAL TWO SHORTS JOINED	[07D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D6, 0x0062 };
    uint32_t const ces[9] = { 0x07D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_472)
{
    // 23D7 0021;	
    // (⏗) METRICAL TRISEME	[07D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D7, 0x0021 };
    uint32_t const ces[9] = { 0x07D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_473)
{
    // 23D7 003F;	
    // (⏗) METRICAL TRISEME	[07D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D7, 0x003F };
    uint32_t const ces[9] = { 0x07D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_474)
{
    // 23D7 0061;	
    // (⏗) METRICAL TRISEME	[07D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D7, 0x0061 };
    uint32_t const ces[9] = { 0x07D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_475)
{
    // 23D7 0041;	
    // (⏗) METRICAL TRISEME	[07D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23D7, 0x0041 };
    uint32_t const ces[9] = { 0x07D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_476)
{
    // 23D7 0062;	
    // (⏗) METRICAL TRISEME	[07D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D7, 0x0062 };
    uint32_t const ces[9] = { 0x07D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_477)
{
    // 23D8 0021;	
    // (⏘) METRICAL TETRASEME	[07D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D8, 0x0021 };
    uint32_t const ces[9] = { 0x07D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_478)
{
    // 23D8 003F;	
    // (⏘) METRICAL TETRASEME	[07D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D8, 0x003F };
    uint32_t const ces[9] = { 0x07D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_479)
{
    // 23D8 0061;	
    // (⏘) METRICAL TETRASEME	[07D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D8, 0x0061 };
    uint32_t const ces[9] = { 0x07D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_480)
{
    // 23D8 0041;	
    // (⏘) METRICAL TETRASEME	[07D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23D8, 0x0041 };
    uint32_t const ces[9] = { 0x07D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_481)
{
    // 23D8 0062;	
    // (⏘) METRICAL TETRASEME	[07D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D8, 0x0062 };
    uint32_t const ces[9] = { 0x07D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_482)
{
    // 23D9 0021;	
    // (⏙) METRICAL PENTASEME	[07D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D9, 0x0021 };
    uint32_t const ces[9] = { 0x07D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_483)
{
    // 23D9 003F;	
    // (⏙) METRICAL PENTASEME	[07D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D9, 0x003F };
    uint32_t const ces[9] = { 0x07D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_484)
{
    // 23D9 0061;	
    // (⏙) METRICAL PENTASEME	[07D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D9, 0x0061 };
    uint32_t const ces[9] = { 0x07D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_485)
{
    // 23D9 0041;	
    // (⏙) METRICAL PENTASEME	[07D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23D9, 0x0041 };
    uint32_t const ces[9] = { 0x07D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_486)
{
    // 23D9 0062;	
    // (⏙) METRICAL PENTASEME	[07D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23D9, 0x0062 };
    uint32_t const ces[9] = { 0x07D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_487)
{
    // 23DA 0021;	
    // (⏚) EARTH GROUND	[07D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DA, 0x0021 };
    uint32_t const ces[9] = { 0x07D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_488)
{
    // 23DA 003F;	
    // (⏚) EARTH GROUND	[07D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DA, 0x003F };
    uint32_t const ces[9] = { 0x07D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_489)
{
    // 23DA 0061;	
    // (⏚) EARTH GROUND	[07D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DA, 0x0061 };
    uint32_t const ces[9] = { 0x07D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_490)
{
    // 23DA 0041;	
    // (⏚) EARTH GROUND	[07D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23DA, 0x0041 };
    uint32_t const ces[9] = { 0x07D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_491)
{
    // 23DA 0062;	
    // (⏚) EARTH GROUND	[07D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DA, 0x0062 };
    uint32_t const ces[9] = { 0x07D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_492)
{
    // 23DB 0021;	
    // (⏛) FUSE	[07D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DB, 0x0021 };
    uint32_t const ces[9] = { 0x07D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_493)
{
    // 23DB 003F;	
    // (⏛) FUSE	[07D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DB, 0x003F };
    uint32_t const ces[9] = { 0x07D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_494)
{
    // 23DB 0061;	
    // (⏛) FUSE	[07D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DB, 0x0061 };
    uint32_t const ces[9] = { 0x07D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_495)
{
    // 23DB 0041;	
    // (⏛) FUSE	[07D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x23DB, 0x0041 };
    uint32_t const ces[9] = { 0x07D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_496)
{
    // 23DB 0062;	
    // (⏛) FUSE	[07D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DB, 0x0062 };
    uint32_t const ces[9] = { 0x07D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_497)
{
    // 23DC 0021;	
    // (⏜) TOP PARENTHESIS	[07D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DC, 0x0021 };
    uint32_t const ces[9] = { 0x07D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_498)
{
    // 23DC 003F;	
    // (⏜) TOP PARENTHESIS	[07D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DC, 0x003F };
    uint32_t const ces[9] = { 0x07D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_026_499)
{
    // 23DC 0061;	
    // (⏜) TOP PARENTHESIS	[07D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x23DC, 0x0061 };
    uint32_t const ces[9] = { 0x07D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

