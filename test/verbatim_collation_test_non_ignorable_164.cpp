// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_164_000)
{
    // 1348 0041;	
    // (ፈ) ETHIOPIC SYLLABLE FA	[2678 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1348, 0x0041 };
    uint32_t const ces[9] = { 0x2678, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_001)
{
    // 1348 0062;	
    // (ፈ) ETHIOPIC SYLLABLE FA	[2678 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1348, 0x0062 };
    uint32_t const ces[9] = { 0x2678, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_002)
{
    // 1349 0021;	
    // (ፉ) ETHIOPIC SYLLABLE FU	[2679 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1349, 0x0021 };
    uint32_t const ces[9] = { 0x2679, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_003)
{
    // 1349 003F;	
    // (ፉ) ETHIOPIC SYLLABLE FU	[2679 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1349, 0x003F };
    uint32_t const ces[9] = { 0x2679, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_004)
{
    // 1349 0061;	
    // (ፉ) ETHIOPIC SYLLABLE FU	[2679 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1349, 0x0061 };
    uint32_t const ces[9] = { 0x2679, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_005)
{
    // 1349 0041;	
    // (ፉ) ETHIOPIC SYLLABLE FU	[2679 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1349, 0x0041 };
    uint32_t const ces[9] = { 0x2679, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_006)
{
    // 1349 0062;	
    // (ፉ) ETHIOPIC SYLLABLE FU	[2679 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1349, 0x0062 };
    uint32_t const ces[9] = { 0x2679, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_007)
{
    // 134A 0021;	
    // (ፊ) ETHIOPIC SYLLABLE FI	[267A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134A, 0x0021 };
    uint32_t const ces[9] = { 0x267A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_008)
{
    // 134A 003F;	
    // (ፊ) ETHIOPIC SYLLABLE FI	[267A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134A, 0x003F };
    uint32_t const ces[9] = { 0x267A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_009)
{
    // 134A 0061;	
    // (ፊ) ETHIOPIC SYLLABLE FI	[267A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134A, 0x0061 };
    uint32_t const ces[9] = { 0x267A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_010)
{
    // 134A 0041;	
    // (ፊ) ETHIOPIC SYLLABLE FI	[267A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x134A, 0x0041 };
    uint32_t const ces[9] = { 0x267A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_011)
{
    // 134A 0062;	
    // (ፊ) ETHIOPIC SYLLABLE FI	[267A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134A, 0x0062 };
    uint32_t const ces[9] = { 0x267A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_012)
{
    // 134B 0021;	
    // (ፋ) ETHIOPIC SYLLABLE FAA	[267B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134B, 0x0021 };
    uint32_t const ces[9] = { 0x267B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_013)
{
    // 134B 003F;	
    // (ፋ) ETHIOPIC SYLLABLE FAA	[267B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134B, 0x003F };
    uint32_t const ces[9] = { 0x267B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_014)
{
    // 134B 0061;	
    // (ፋ) ETHIOPIC SYLLABLE FAA	[267B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134B, 0x0061 };
    uint32_t const ces[9] = { 0x267B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_015)
{
    // 134B 0041;	
    // (ፋ) ETHIOPIC SYLLABLE FAA	[267B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x134B, 0x0041 };
    uint32_t const ces[9] = { 0x267B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_016)
{
    // 134B 0062;	
    // (ፋ) ETHIOPIC SYLLABLE FAA	[267B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134B, 0x0062 };
    uint32_t const ces[9] = { 0x267B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_017)
{
    // 134C 0021;	
    // (ፌ) ETHIOPIC SYLLABLE FEE	[267C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134C, 0x0021 };
    uint32_t const ces[9] = { 0x267C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_018)
{
    // 134C 003F;	
    // (ፌ) ETHIOPIC SYLLABLE FEE	[267C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134C, 0x003F };
    uint32_t const ces[9] = { 0x267C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_019)
{
    // 134C 0061;	
    // (ፌ) ETHIOPIC SYLLABLE FEE	[267C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134C, 0x0061 };
    uint32_t const ces[9] = { 0x267C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_020)
{
    // 134C 0041;	
    // (ፌ) ETHIOPIC SYLLABLE FEE	[267C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x134C, 0x0041 };
    uint32_t const ces[9] = { 0x267C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_021)
{
    // 134C 0062;	
    // (ፌ) ETHIOPIC SYLLABLE FEE	[267C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134C, 0x0062 };
    uint32_t const ces[9] = { 0x267C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_022)
{
    // 134D 0021;	
    // (ፍ) ETHIOPIC SYLLABLE FE	[267D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134D, 0x0021 };
    uint32_t const ces[9] = { 0x267D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_023)
{
    // 134D 003F;	
    // (ፍ) ETHIOPIC SYLLABLE FE	[267D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134D, 0x003F };
    uint32_t const ces[9] = { 0x267D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_024)
{
    // 134D 0061;	
    // (ፍ) ETHIOPIC SYLLABLE FE	[267D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134D, 0x0061 };
    uint32_t const ces[9] = { 0x267D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_025)
{
    // 134D 0041;	
    // (ፍ) ETHIOPIC SYLLABLE FE	[267D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x134D, 0x0041 };
    uint32_t const ces[9] = { 0x267D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_026)
{
    // 134D 0062;	
    // (ፍ) ETHIOPIC SYLLABLE FE	[267D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134D, 0x0062 };
    uint32_t const ces[9] = { 0x267D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_027)
{
    // 134E 0021;	
    // (ፎ) ETHIOPIC SYLLABLE FO	[267E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134E, 0x0021 };
    uint32_t const ces[9] = { 0x267E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_028)
{
    // 134E 003F;	
    // (ፎ) ETHIOPIC SYLLABLE FO	[267E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134E, 0x003F };
    uint32_t const ces[9] = { 0x267E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_029)
{
    // 134E 0061;	
    // (ፎ) ETHIOPIC SYLLABLE FO	[267E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134E, 0x0061 };
    uint32_t const ces[9] = { 0x267E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_030)
{
    // 134E 0041;	
    // (ፎ) ETHIOPIC SYLLABLE FO	[267E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x134E, 0x0041 };
    uint32_t const ces[9] = { 0x267E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_031)
{
    // 134E 0062;	
    // (ፎ) ETHIOPIC SYLLABLE FO	[267E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134E, 0x0062 };
    uint32_t const ces[9] = { 0x267E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_032)
{
    // 134F 0021;	
    // (ፏ) ETHIOPIC SYLLABLE FWA	[267F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134F, 0x0021 };
    uint32_t const ces[9] = { 0x267F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_033)
{
    // 134F 003F;	
    // (ፏ) ETHIOPIC SYLLABLE FWA	[267F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134F, 0x003F };
    uint32_t const ces[9] = { 0x267F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_034)
{
    // 134F 0061;	
    // (ፏ) ETHIOPIC SYLLABLE FWA	[267F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134F, 0x0061 };
    uint32_t const ces[9] = { 0x267F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_035)
{
    // 134F 0041;	
    // (ፏ) ETHIOPIC SYLLABLE FWA	[267F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x134F, 0x0041 };
    uint32_t const ces[9] = { 0x267F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_036)
{
    // 134F 0062;	
    // (ፏ) ETHIOPIC SYLLABLE FWA	[267F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x134F, 0x0062 };
    uint32_t const ces[9] = { 0x267F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_037)
{
    // 1388 0021;	
    // (ᎈ) ETHIOPIC SYLLABLE SEBATBEIT FWA	[2680 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1388, 0x0021 };
    uint32_t const ces[9] = { 0x2680, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_038)
{
    // 1388 003F;	
    // (ᎈ) ETHIOPIC SYLLABLE SEBATBEIT FWA	[2680 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1388, 0x003F };
    uint32_t const ces[9] = { 0x2680, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_039)
{
    // 1388 0061;	
    // (ᎈ) ETHIOPIC SYLLABLE SEBATBEIT FWA	[2680 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1388, 0x0061 };
    uint32_t const ces[9] = { 0x2680, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_040)
{
    // 1388 0041;	
    // (ᎈ) ETHIOPIC SYLLABLE SEBATBEIT FWA	[2680 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1388, 0x0041 };
    uint32_t const ces[9] = { 0x2680, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_041)
{
    // 1388 0062;	
    // (ᎈ) ETHIOPIC SYLLABLE SEBATBEIT FWA	[2680 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1388, 0x0062 };
    uint32_t const ces[9] = { 0x2680, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_042)
{
    // 1389 0021;	
    // (ᎉ) ETHIOPIC SYLLABLE FWI	[2681 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1389, 0x0021 };
    uint32_t const ces[9] = { 0x2681, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_043)
{
    // 1389 003F;	
    // (ᎉ) ETHIOPIC SYLLABLE FWI	[2681 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1389, 0x003F };
    uint32_t const ces[9] = { 0x2681, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_044)
{
    // 1389 0061;	
    // (ᎉ) ETHIOPIC SYLLABLE FWI	[2681 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1389, 0x0061 };
    uint32_t const ces[9] = { 0x2681, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_045)
{
    // 1389 0041;	
    // (ᎉ) ETHIOPIC SYLLABLE FWI	[2681 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1389, 0x0041 };
    uint32_t const ces[9] = { 0x2681, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_046)
{
    // 1389 0062;	
    // (ᎉ) ETHIOPIC SYLLABLE FWI	[2681 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1389, 0x0062 };
    uint32_t const ces[9] = { 0x2681, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_047)
{
    // 138A 0021;	
    // (ᎊ) ETHIOPIC SYLLABLE FWEE	[2682 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138A, 0x0021 };
    uint32_t const ces[9] = { 0x2682, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_048)
{
    // 138A 003F;	
    // (ᎊ) ETHIOPIC SYLLABLE FWEE	[2682 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138A, 0x003F };
    uint32_t const ces[9] = { 0x2682, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_049)
{
    // 138A 0061;	
    // (ᎊ) ETHIOPIC SYLLABLE FWEE	[2682 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138A, 0x0061 };
    uint32_t const ces[9] = { 0x2682, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_050)
{
    // 138A 0041;	
    // (ᎊ) ETHIOPIC SYLLABLE FWEE	[2682 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x138A, 0x0041 };
    uint32_t const ces[9] = { 0x2682, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_051)
{
    // 138A 0062;	
    // (ᎊ) ETHIOPIC SYLLABLE FWEE	[2682 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138A, 0x0062 };
    uint32_t const ces[9] = { 0x2682, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_052)
{
    // 138B 0021;	
    // (ᎋ) ETHIOPIC SYLLABLE FWE	[2683 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138B, 0x0021 };
    uint32_t const ces[9] = { 0x2683, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_053)
{
    // 138B 003F;	
    // (ᎋ) ETHIOPIC SYLLABLE FWE	[2683 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138B, 0x003F };
    uint32_t const ces[9] = { 0x2683, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_054)
{
    // 138B 0061;	
    // (ᎋ) ETHIOPIC SYLLABLE FWE	[2683 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138B, 0x0061 };
    uint32_t const ces[9] = { 0x2683, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_055)
{
    // 138B 0041;	
    // (ᎋ) ETHIOPIC SYLLABLE FWE	[2683 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x138B, 0x0041 };
    uint32_t const ces[9] = { 0x2683, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_056)
{
    // 138B 0062;	
    // (ᎋ) ETHIOPIC SYLLABLE FWE	[2683 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138B, 0x0062 };
    uint32_t const ces[9] = { 0x2683, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_057)
{
    // 1350 0021;	
    // (ፐ) ETHIOPIC SYLLABLE PA	[2684 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1350, 0x0021 };
    uint32_t const ces[9] = { 0x2684, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_058)
{
    // 1350 003F;	
    // (ፐ) ETHIOPIC SYLLABLE PA	[2684 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1350, 0x003F };
    uint32_t const ces[9] = { 0x2684, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_059)
{
    // 1350 0061;	
    // (ፐ) ETHIOPIC SYLLABLE PA	[2684 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1350, 0x0061 };
    uint32_t const ces[9] = { 0x2684, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_060)
{
    // 1350 0041;	
    // (ፐ) ETHIOPIC SYLLABLE PA	[2684 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1350, 0x0041 };
    uint32_t const ces[9] = { 0x2684, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_061)
{
    // 1350 0062;	
    // (ፐ) ETHIOPIC SYLLABLE PA	[2684 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1350, 0x0062 };
    uint32_t const ces[9] = { 0x2684, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_062)
{
    // 1351 0021;	
    // (ፑ) ETHIOPIC SYLLABLE PU	[2685 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1351, 0x0021 };
    uint32_t const ces[9] = { 0x2685, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_063)
{
    // 1351 003F;	
    // (ፑ) ETHIOPIC SYLLABLE PU	[2685 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1351, 0x003F };
    uint32_t const ces[9] = { 0x2685, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_064)
{
    // 1351 0061;	
    // (ፑ) ETHIOPIC SYLLABLE PU	[2685 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1351, 0x0061 };
    uint32_t const ces[9] = { 0x2685, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_065)
{
    // 1351 0041;	
    // (ፑ) ETHIOPIC SYLLABLE PU	[2685 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1351, 0x0041 };
    uint32_t const ces[9] = { 0x2685, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_066)
{
    // 1351 0062;	
    // (ፑ) ETHIOPIC SYLLABLE PU	[2685 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1351, 0x0062 };
    uint32_t const ces[9] = { 0x2685, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_067)
{
    // 1352 0021;	
    // (ፒ) ETHIOPIC SYLLABLE PI	[2686 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1352, 0x0021 };
    uint32_t const ces[9] = { 0x2686, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_068)
{
    // 1352 003F;	
    // (ፒ) ETHIOPIC SYLLABLE PI	[2686 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1352, 0x003F };
    uint32_t const ces[9] = { 0x2686, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_069)
{
    // 1352 0061;	
    // (ፒ) ETHIOPIC SYLLABLE PI	[2686 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1352, 0x0061 };
    uint32_t const ces[9] = { 0x2686, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_070)
{
    // 1352 0041;	
    // (ፒ) ETHIOPIC SYLLABLE PI	[2686 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1352, 0x0041 };
    uint32_t const ces[9] = { 0x2686, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_071)
{
    // 1352 0062;	
    // (ፒ) ETHIOPIC SYLLABLE PI	[2686 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1352, 0x0062 };
    uint32_t const ces[9] = { 0x2686, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_072)
{
    // 1353 0021;	
    // (ፓ) ETHIOPIC SYLLABLE PAA	[2687 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1353, 0x0021 };
    uint32_t const ces[9] = { 0x2687, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_073)
{
    // 1353 003F;	
    // (ፓ) ETHIOPIC SYLLABLE PAA	[2687 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1353, 0x003F };
    uint32_t const ces[9] = { 0x2687, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_074)
{
    // 1353 0061;	
    // (ፓ) ETHIOPIC SYLLABLE PAA	[2687 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1353, 0x0061 };
    uint32_t const ces[9] = { 0x2687, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_075)
{
    // 1353 0041;	
    // (ፓ) ETHIOPIC SYLLABLE PAA	[2687 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1353, 0x0041 };
    uint32_t const ces[9] = { 0x2687, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_076)
{
    // 1353 0062;	
    // (ፓ) ETHIOPIC SYLLABLE PAA	[2687 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1353, 0x0062 };
    uint32_t const ces[9] = { 0x2687, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_077)
{
    // 1354 0021;	
    // (ፔ) ETHIOPIC SYLLABLE PEE	[2688 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1354, 0x0021 };
    uint32_t const ces[9] = { 0x2688, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_078)
{
    // 1354 003F;	
    // (ፔ) ETHIOPIC SYLLABLE PEE	[2688 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1354, 0x003F };
    uint32_t const ces[9] = { 0x2688, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_079)
{
    // 1354 0061;	
    // (ፔ) ETHIOPIC SYLLABLE PEE	[2688 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1354, 0x0061 };
    uint32_t const ces[9] = { 0x2688, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_080)
{
    // 1354 0041;	
    // (ፔ) ETHIOPIC SYLLABLE PEE	[2688 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1354, 0x0041 };
    uint32_t const ces[9] = { 0x2688, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_081)
{
    // 1354 0062;	
    // (ፔ) ETHIOPIC SYLLABLE PEE	[2688 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1354, 0x0062 };
    uint32_t const ces[9] = { 0x2688, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_082)
{
    // 1355 0021;	
    // (ፕ) ETHIOPIC SYLLABLE PE	[2689 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1355, 0x0021 };
    uint32_t const ces[9] = { 0x2689, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_083)
{
    // 1355 003F;	
    // (ፕ) ETHIOPIC SYLLABLE PE	[2689 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1355, 0x003F };
    uint32_t const ces[9] = { 0x2689, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_084)
{
    // 1355 0061;	
    // (ፕ) ETHIOPIC SYLLABLE PE	[2689 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1355, 0x0061 };
    uint32_t const ces[9] = { 0x2689, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_085)
{
    // 1355 0041;	
    // (ፕ) ETHIOPIC SYLLABLE PE	[2689 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1355, 0x0041 };
    uint32_t const ces[9] = { 0x2689, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_086)
{
    // 1355 0062;	
    // (ፕ) ETHIOPIC SYLLABLE PE	[2689 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1355, 0x0062 };
    uint32_t const ces[9] = { 0x2689, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_087)
{
    // 1356 0021;	
    // (ፖ) ETHIOPIC SYLLABLE PO	[268A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1356, 0x0021 };
    uint32_t const ces[9] = { 0x268A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_088)
{
    // 1356 003F;	
    // (ፖ) ETHIOPIC SYLLABLE PO	[268A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1356, 0x003F };
    uint32_t const ces[9] = { 0x268A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_089)
{
    // 1356 0061;	
    // (ፖ) ETHIOPIC SYLLABLE PO	[268A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1356, 0x0061 };
    uint32_t const ces[9] = { 0x268A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_090)
{
    // 1356 0041;	
    // (ፖ) ETHIOPIC SYLLABLE PO	[268A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1356, 0x0041 };
    uint32_t const ces[9] = { 0x268A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_091)
{
    // 1356 0062;	
    // (ፖ) ETHIOPIC SYLLABLE PO	[268A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1356, 0x0062 };
    uint32_t const ces[9] = { 0x268A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_092)
{
    // 1357 0021;	
    // (ፗ) ETHIOPIC SYLLABLE PWA	[268B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1357, 0x0021 };
    uint32_t const ces[9] = { 0x268B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_093)
{
    // 1357 003F;	
    // (ፗ) ETHIOPIC SYLLABLE PWA	[268B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1357, 0x003F };
    uint32_t const ces[9] = { 0x268B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_094)
{
    // 1357 0061;	
    // (ፗ) ETHIOPIC SYLLABLE PWA	[268B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1357, 0x0061 };
    uint32_t const ces[9] = { 0x268B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_095)
{
    // 1357 0041;	
    // (ፗ) ETHIOPIC SYLLABLE PWA	[268B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1357, 0x0041 };
    uint32_t const ces[9] = { 0x268B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_096)
{
    // 1357 0062;	
    // (ፗ) ETHIOPIC SYLLABLE PWA	[268B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1357, 0x0062 };
    uint32_t const ces[9] = { 0x268B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_097)
{
    // 138C 0021;	
    // (ᎌ) ETHIOPIC SYLLABLE SEBATBEIT PWA	[268C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138C, 0x0021 };
    uint32_t const ces[9] = { 0x268C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_098)
{
    // 138C 003F;	
    // (ᎌ) ETHIOPIC SYLLABLE SEBATBEIT PWA	[268C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138C, 0x003F };
    uint32_t const ces[9] = { 0x268C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_099)
{
    // 138C 0061;	
    // (ᎌ) ETHIOPIC SYLLABLE SEBATBEIT PWA	[268C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138C, 0x0061 };
    uint32_t const ces[9] = { 0x268C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_100)
{
    // 138C 0041;	
    // (ᎌ) ETHIOPIC SYLLABLE SEBATBEIT PWA	[268C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x138C, 0x0041 };
    uint32_t const ces[9] = { 0x268C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_101)
{
    // 138C 0062;	
    // (ᎌ) ETHIOPIC SYLLABLE SEBATBEIT PWA	[268C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138C, 0x0062 };
    uint32_t const ces[9] = { 0x268C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_102)
{
    // 138D 0021;	
    // (ᎍ) ETHIOPIC SYLLABLE PWI	[268D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138D, 0x0021 };
    uint32_t const ces[9] = { 0x268D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_103)
{
    // 138D 003F;	
    // (ᎍ) ETHIOPIC SYLLABLE PWI	[268D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138D, 0x003F };
    uint32_t const ces[9] = { 0x268D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_104)
{
    // 138D 0061;	
    // (ᎍ) ETHIOPIC SYLLABLE PWI	[268D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138D, 0x0061 };
    uint32_t const ces[9] = { 0x268D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_105)
{
    // 138D 0041;	
    // (ᎍ) ETHIOPIC SYLLABLE PWI	[268D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x138D, 0x0041 };
    uint32_t const ces[9] = { 0x268D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_106)
{
    // 138D 0062;	
    // (ᎍ) ETHIOPIC SYLLABLE PWI	[268D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138D, 0x0062 };
    uint32_t const ces[9] = { 0x268D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_107)
{
    // 138E 0021;	
    // (ᎎ) ETHIOPIC SYLLABLE PWEE	[268E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138E, 0x0021 };
    uint32_t const ces[9] = { 0x268E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_108)
{
    // 138E 003F;	
    // (ᎎ) ETHIOPIC SYLLABLE PWEE	[268E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138E, 0x003F };
    uint32_t const ces[9] = { 0x268E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_109)
{
    // 138E 0061;	
    // (ᎎ) ETHIOPIC SYLLABLE PWEE	[268E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138E, 0x0061 };
    uint32_t const ces[9] = { 0x268E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_110)
{
    // 138E 0041;	
    // (ᎎ) ETHIOPIC SYLLABLE PWEE	[268E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x138E, 0x0041 };
    uint32_t const ces[9] = { 0x268E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_111)
{
    // 138E 0062;	
    // (ᎎ) ETHIOPIC SYLLABLE PWEE	[268E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138E, 0x0062 };
    uint32_t const ces[9] = { 0x268E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_112)
{
    // 138F 0021;	
    // (ᎏ) ETHIOPIC SYLLABLE PWE	[268F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138F, 0x0021 };
    uint32_t const ces[9] = { 0x268F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_113)
{
    // 138F 003F;	
    // (ᎏ) ETHIOPIC SYLLABLE PWE	[268F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138F, 0x003F };
    uint32_t const ces[9] = { 0x268F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_114)
{
    // 138F 0061;	
    // (ᎏ) ETHIOPIC SYLLABLE PWE	[268F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138F, 0x0061 };
    uint32_t const ces[9] = { 0x268F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_115)
{
    // 138F 0041;	
    // (ᎏ) ETHIOPIC SYLLABLE PWE	[268F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x138F, 0x0041 };
    uint32_t const ces[9] = { 0x268F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_116)
{
    // 138F 0062;	
    // (ᎏ) ETHIOPIC SYLLABLE PWE	[268F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x138F, 0x0062 };
    uint32_t const ces[9] = { 0x268F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_117)
{
    // 2D92 0021;	
    // (ⶒ) ETHIOPIC SYLLABLE POA	[2690 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D92, 0x0021 };
    uint32_t const ces[9] = { 0x2690, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_118)
{
    // 2D92 003F;	
    // (ⶒ) ETHIOPIC SYLLABLE POA	[2690 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D92, 0x003F };
    uint32_t const ces[9] = { 0x2690, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_119)
{
    // 2D92 0061;	
    // (ⶒ) ETHIOPIC SYLLABLE POA	[2690 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D92, 0x0061 };
    uint32_t const ces[9] = { 0x2690, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_120)
{
    // 2D92 0041;	
    // (ⶒ) ETHIOPIC SYLLABLE POA	[2690 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2D92, 0x0041 };
    uint32_t const ces[9] = { 0x2690, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_121)
{
    // 2D92 0062;	
    // (ⶒ) ETHIOPIC SYLLABLE POA	[2690 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2D92, 0x0062 };
    uint32_t const ces[9] = { 0x2690, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_122)
{
    // 1358 0021;	
    // (ፘ) ETHIOPIC SYLLABLE RYA	[2691 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1358, 0x0021 };
    uint32_t const ces[9] = { 0x2691, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_123)
{
    // 1358 003F;	
    // (ፘ) ETHIOPIC SYLLABLE RYA	[2691 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1358, 0x003F };
    uint32_t const ces[9] = { 0x2691, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_124)
{
    // 1358 0061;	
    // (ፘ) ETHIOPIC SYLLABLE RYA	[2691 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1358, 0x0061 };
    uint32_t const ces[9] = { 0x2691, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_125)
{
    // 1358 0041;	
    // (ፘ) ETHIOPIC SYLLABLE RYA	[2691 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1358, 0x0041 };
    uint32_t const ces[9] = { 0x2691, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_126)
{
    // 1358 0062;	
    // (ፘ) ETHIOPIC SYLLABLE RYA	[2691 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1358, 0x0062 };
    uint32_t const ces[9] = { 0x2691, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_127)
{
    // 1359 0021;	
    // (ፙ) ETHIOPIC SYLLABLE MYA	[2692 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1359, 0x0021 };
    uint32_t const ces[9] = { 0x2692, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_128)
{
    // 1359 003F;	
    // (ፙ) ETHIOPIC SYLLABLE MYA	[2692 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1359, 0x003F };
    uint32_t const ces[9] = { 0x2692, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_129)
{
    // 1359 0061;	
    // (ፙ) ETHIOPIC SYLLABLE MYA	[2692 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1359, 0x0061 };
    uint32_t const ces[9] = { 0x2692, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_130)
{
    // 1359 0041;	
    // (ፙ) ETHIOPIC SYLLABLE MYA	[2692 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1359, 0x0041 };
    uint32_t const ces[9] = { 0x2692, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_131)
{
    // 1359 0062;	
    // (ፙ) ETHIOPIC SYLLABLE MYA	[2692 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1359, 0x0062 };
    uint32_t const ces[9] = { 0x2692, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_132)
{
    // 135A 0021;	
    // (ፚ) ETHIOPIC SYLLABLE FYA	[2693 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x135A, 0x0021 };
    uint32_t const ces[9] = { 0x2693, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_133)
{
    // 135A 003F;	
    // (ፚ) ETHIOPIC SYLLABLE FYA	[2693 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x135A, 0x003F };
    uint32_t const ces[9] = { 0x2693, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_134)
{
    // 135A 0061;	
    // (ፚ) ETHIOPIC SYLLABLE FYA	[2693 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x135A, 0x0061 };
    uint32_t const ces[9] = { 0x2693, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_135)
{
    // 135A 0041;	
    // (ፚ) ETHIOPIC SYLLABLE FYA	[2693 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x135A, 0x0041 };
    uint32_t const ces[9] = { 0x2693, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_136)
{
    // 135A 0062;	
    // (ፚ) ETHIOPIC SYLLABLE FYA	[2693 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x135A, 0x0062 };
    uint32_t const ces[9] = { 0x2693, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_137)
{
    // 2DA0 0021;	
    // (ⶠ) ETHIOPIC SYLLABLE SSA	[2694 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA0, 0x0021 };
    uint32_t const ces[9] = { 0x2694, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_138)
{
    // 2DA0 003F;	
    // (ⶠ) ETHIOPIC SYLLABLE SSA	[2694 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA0, 0x003F };
    uint32_t const ces[9] = { 0x2694, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_139)
{
    // 2DA0 0061;	
    // (ⶠ) ETHIOPIC SYLLABLE SSA	[2694 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA0, 0x0061 };
    uint32_t const ces[9] = { 0x2694, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_140)
{
    // 2DA0 0041;	
    // (ⶠ) ETHIOPIC SYLLABLE SSA	[2694 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DA0, 0x0041 };
    uint32_t const ces[9] = { 0x2694, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_141)
{
    // 2DA0 0062;	
    // (ⶠ) ETHIOPIC SYLLABLE SSA	[2694 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA0, 0x0062 };
    uint32_t const ces[9] = { 0x2694, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_142)
{
    // 2DA1 0021;	
    // (ⶡ) ETHIOPIC SYLLABLE SSU	[2695 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA1, 0x0021 };
    uint32_t const ces[9] = { 0x2695, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_143)
{
    // 2DA1 003F;	
    // (ⶡ) ETHIOPIC SYLLABLE SSU	[2695 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA1, 0x003F };
    uint32_t const ces[9] = { 0x2695, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_144)
{
    // 2DA1 0061;	
    // (ⶡ) ETHIOPIC SYLLABLE SSU	[2695 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA1, 0x0061 };
    uint32_t const ces[9] = { 0x2695, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_145)
{
    // 2DA1 0041;	
    // (ⶡ) ETHIOPIC SYLLABLE SSU	[2695 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DA1, 0x0041 };
    uint32_t const ces[9] = { 0x2695, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_146)
{
    // 2DA1 0062;	
    // (ⶡ) ETHIOPIC SYLLABLE SSU	[2695 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA1, 0x0062 };
    uint32_t const ces[9] = { 0x2695, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_147)
{
    // 2DA2 0021;	
    // (ⶢ) ETHIOPIC SYLLABLE SSI	[2696 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA2, 0x0021 };
    uint32_t const ces[9] = { 0x2696, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_148)
{
    // 2DA2 003F;	
    // (ⶢ) ETHIOPIC SYLLABLE SSI	[2696 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA2, 0x003F };
    uint32_t const ces[9] = { 0x2696, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_149)
{
    // 2DA2 0061;	
    // (ⶢ) ETHIOPIC SYLLABLE SSI	[2696 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA2, 0x0061 };
    uint32_t const ces[9] = { 0x2696, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_150)
{
    // 2DA2 0041;	
    // (ⶢ) ETHIOPIC SYLLABLE SSI	[2696 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DA2, 0x0041 };
    uint32_t const ces[9] = { 0x2696, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_151)
{
    // 2DA2 0062;	
    // (ⶢ) ETHIOPIC SYLLABLE SSI	[2696 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA2, 0x0062 };
    uint32_t const ces[9] = { 0x2696, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_152)
{
    // 2DA3 0021;	
    // (ⶣ) ETHIOPIC SYLLABLE SSAA	[2697 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA3, 0x0021 };
    uint32_t const ces[9] = { 0x2697, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_153)
{
    // 2DA3 003F;	
    // (ⶣ) ETHIOPIC SYLLABLE SSAA	[2697 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA3, 0x003F };
    uint32_t const ces[9] = { 0x2697, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_154)
{
    // 2DA3 0061;	
    // (ⶣ) ETHIOPIC SYLLABLE SSAA	[2697 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA3, 0x0061 };
    uint32_t const ces[9] = { 0x2697, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_155)
{
    // 2DA3 0041;	
    // (ⶣ) ETHIOPIC SYLLABLE SSAA	[2697 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DA3, 0x0041 };
    uint32_t const ces[9] = { 0x2697, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_156)
{
    // 2DA3 0062;	
    // (ⶣ) ETHIOPIC SYLLABLE SSAA	[2697 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA3, 0x0062 };
    uint32_t const ces[9] = { 0x2697, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_157)
{
    // 2DA4 0021;	
    // (ⶤ) ETHIOPIC SYLLABLE SSEE	[2698 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA4, 0x0021 };
    uint32_t const ces[9] = { 0x2698, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_158)
{
    // 2DA4 003F;	
    // (ⶤ) ETHIOPIC SYLLABLE SSEE	[2698 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA4, 0x003F };
    uint32_t const ces[9] = { 0x2698, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_159)
{
    // 2DA4 0061;	
    // (ⶤ) ETHIOPIC SYLLABLE SSEE	[2698 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA4, 0x0061 };
    uint32_t const ces[9] = { 0x2698, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_160)
{
    // 2DA4 0041;	
    // (ⶤ) ETHIOPIC SYLLABLE SSEE	[2698 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DA4, 0x0041 };
    uint32_t const ces[9] = { 0x2698, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_161)
{
    // 2DA4 0062;	
    // (ⶤ) ETHIOPIC SYLLABLE SSEE	[2698 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA4, 0x0062 };
    uint32_t const ces[9] = { 0x2698, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_162)
{
    // 2DA5 0021;	
    // (ⶥ) ETHIOPIC SYLLABLE SSE	[2699 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA5, 0x0021 };
    uint32_t const ces[9] = { 0x2699, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_163)
{
    // 2DA5 003F;	
    // (ⶥ) ETHIOPIC SYLLABLE SSE	[2699 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA5, 0x003F };
    uint32_t const ces[9] = { 0x2699, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_164)
{
    // 2DA5 0061;	
    // (ⶥ) ETHIOPIC SYLLABLE SSE	[2699 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA5, 0x0061 };
    uint32_t const ces[9] = { 0x2699, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_165)
{
    // 2DA5 0041;	
    // (ⶥ) ETHIOPIC SYLLABLE SSE	[2699 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DA5, 0x0041 };
    uint32_t const ces[9] = { 0x2699, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_166)
{
    // 2DA5 0062;	
    // (ⶥ) ETHIOPIC SYLLABLE SSE	[2699 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA5, 0x0062 };
    uint32_t const ces[9] = { 0x2699, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_167)
{
    // 2DA6 0021;	
    // (ⶦ) ETHIOPIC SYLLABLE SSO	[269A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA6, 0x0021 };
    uint32_t const ces[9] = { 0x269A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_168)
{
    // 2DA6 003F;	
    // (ⶦ) ETHIOPIC SYLLABLE SSO	[269A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA6, 0x003F };
    uint32_t const ces[9] = { 0x269A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_169)
{
    // 2DA6 0061;	
    // (ⶦ) ETHIOPIC SYLLABLE SSO	[269A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA6, 0x0061 };
    uint32_t const ces[9] = { 0x269A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_170)
{
    // 2DA6 0041;	
    // (ⶦ) ETHIOPIC SYLLABLE SSO	[269A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DA6, 0x0041 };
    uint32_t const ces[9] = { 0x269A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_171)
{
    // 2DA6 0062;	
    // (ⶦ) ETHIOPIC SYLLABLE SSO	[269A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA6, 0x0062 };
    uint32_t const ces[9] = { 0x269A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_172)
{
    // 2DA8 0021;	
    // (ⶨ) ETHIOPIC SYLLABLE CCA	[269B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA8, 0x0021 };
    uint32_t const ces[9] = { 0x269B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_173)
{
    // 2DA8 003F;	
    // (ⶨ) ETHIOPIC SYLLABLE CCA	[269B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA8, 0x003F };
    uint32_t const ces[9] = { 0x269B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_174)
{
    // 2DA8 0061;	
    // (ⶨ) ETHIOPIC SYLLABLE CCA	[269B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA8, 0x0061 };
    uint32_t const ces[9] = { 0x269B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_175)
{
    // 2DA8 0041;	
    // (ⶨ) ETHIOPIC SYLLABLE CCA	[269B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DA8, 0x0041 };
    uint32_t const ces[9] = { 0x269B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_176)
{
    // 2DA8 0062;	
    // (ⶨ) ETHIOPIC SYLLABLE CCA	[269B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA8, 0x0062 };
    uint32_t const ces[9] = { 0x269B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_177)
{
    // 2DA9 0021;	
    // (ⶩ) ETHIOPIC SYLLABLE CCU	[269C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA9, 0x0021 };
    uint32_t const ces[9] = { 0x269C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_178)
{
    // 2DA9 003F;	
    // (ⶩ) ETHIOPIC SYLLABLE CCU	[269C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA9, 0x003F };
    uint32_t const ces[9] = { 0x269C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_179)
{
    // 2DA9 0061;	
    // (ⶩ) ETHIOPIC SYLLABLE CCU	[269C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA9, 0x0061 };
    uint32_t const ces[9] = { 0x269C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_180)
{
    // 2DA9 0041;	
    // (ⶩ) ETHIOPIC SYLLABLE CCU	[269C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DA9, 0x0041 };
    uint32_t const ces[9] = { 0x269C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_181)
{
    // 2DA9 0062;	
    // (ⶩ) ETHIOPIC SYLLABLE CCU	[269C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DA9, 0x0062 };
    uint32_t const ces[9] = { 0x269C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_182)
{
    // 2DAA 0021;	
    // (ⶪ) ETHIOPIC SYLLABLE CCI	[269D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DAA, 0x0021 };
    uint32_t const ces[9] = { 0x269D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_183)
{
    // 2DAA 003F;	
    // (ⶪ) ETHIOPIC SYLLABLE CCI	[269D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DAA, 0x003F };
    uint32_t const ces[9] = { 0x269D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_184)
{
    // 2DAA 0061;	
    // (ⶪ) ETHIOPIC SYLLABLE CCI	[269D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DAA, 0x0061 };
    uint32_t const ces[9] = { 0x269D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_185)
{
    // 2DAA 0041;	
    // (ⶪ) ETHIOPIC SYLLABLE CCI	[269D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DAA, 0x0041 };
    uint32_t const ces[9] = { 0x269D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_186)
{
    // 2DAA 0062;	
    // (ⶪ) ETHIOPIC SYLLABLE CCI	[269D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DAA, 0x0062 };
    uint32_t const ces[9] = { 0x269D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_187)
{
    // 2DAB 0021;	
    // (ⶫ) ETHIOPIC SYLLABLE CCAA	[269E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DAB, 0x0021 };
    uint32_t const ces[9] = { 0x269E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_188)
{
    // 2DAB 003F;	
    // (ⶫ) ETHIOPIC SYLLABLE CCAA	[269E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DAB, 0x003F };
    uint32_t const ces[9] = { 0x269E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_189)
{
    // 2DAB 0061;	
    // (ⶫ) ETHIOPIC SYLLABLE CCAA	[269E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DAB, 0x0061 };
    uint32_t const ces[9] = { 0x269E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_190)
{
    // 2DAB 0041;	
    // (ⶫ) ETHIOPIC SYLLABLE CCAA	[269E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DAB, 0x0041 };
    uint32_t const ces[9] = { 0x269E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_191)
{
    // 2DAB 0062;	
    // (ⶫ) ETHIOPIC SYLLABLE CCAA	[269E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DAB, 0x0062 };
    uint32_t const ces[9] = { 0x269E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_192)
{
    // 2DAC 0021;	
    // (ⶬ) ETHIOPIC SYLLABLE CCEE	[269F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DAC, 0x0021 };
    uint32_t const ces[9] = { 0x269F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_193)
{
    // 2DAC 003F;	
    // (ⶬ) ETHIOPIC SYLLABLE CCEE	[269F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DAC, 0x003F };
    uint32_t const ces[9] = { 0x269F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_194)
{
    // 2DAC 0061;	
    // (ⶬ) ETHIOPIC SYLLABLE CCEE	[269F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DAC, 0x0061 };
    uint32_t const ces[9] = { 0x269F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_195)
{
    // 2DAC 0041;	
    // (ⶬ) ETHIOPIC SYLLABLE CCEE	[269F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DAC, 0x0041 };
    uint32_t const ces[9] = { 0x269F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_196)
{
    // 2DAC 0062;	
    // (ⶬ) ETHIOPIC SYLLABLE CCEE	[269F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DAC, 0x0062 };
    uint32_t const ces[9] = { 0x269F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_197)
{
    // 2DAD 0021;	
    // (ⶭ) ETHIOPIC SYLLABLE CCE	[26A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DAD, 0x0021 };
    uint32_t const ces[9] = { 0x26A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_198)
{
    // 2DAD 003F;	
    // (ⶭ) ETHIOPIC SYLLABLE CCE	[26A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DAD, 0x003F };
    uint32_t const ces[9] = { 0x26A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_199)
{
    // 2DAD 0061;	
    // (ⶭ) ETHIOPIC SYLLABLE CCE	[26A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DAD, 0x0061 };
    uint32_t const ces[9] = { 0x26A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_200)
{
    // 2DAD 0041;	
    // (ⶭ) ETHIOPIC SYLLABLE CCE	[26A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DAD, 0x0041 };
    uint32_t const ces[9] = { 0x26A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_201)
{
    // 2DAD 0062;	
    // (ⶭ) ETHIOPIC SYLLABLE CCE	[26A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DAD, 0x0062 };
    uint32_t const ces[9] = { 0x26A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_202)
{
    // 2DAE 0021;	
    // (ⶮ) ETHIOPIC SYLLABLE CCO	[26A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DAE, 0x0021 };
    uint32_t const ces[9] = { 0x26A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_203)
{
    // 2DAE 003F;	
    // (ⶮ) ETHIOPIC SYLLABLE CCO	[26A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DAE, 0x003F };
    uint32_t const ces[9] = { 0x26A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_204)
{
    // 2DAE 0061;	
    // (ⶮ) ETHIOPIC SYLLABLE CCO	[26A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DAE, 0x0061 };
    uint32_t const ces[9] = { 0x26A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_205)
{
    // 2DAE 0041;	
    // (ⶮ) ETHIOPIC SYLLABLE CCO	[26A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DAE, 0x0041 };
    uint32_t const ces[9] = { 0x26A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_206)
{
    // 2DAE 0062;	
    // (ⶮ) ETHIOPIC SYLLABLE CCO	[26A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DAE, 0x0062 };
    uint32_t const ces[9] = { 0x26A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_207)
{
    // 2DB0 0021;	
    // (ⶰ) ETHIOPIC SYLLABLE ZZA	[26A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB0, 0x0021 };
    uint32_t const ces[9] = { 0x26A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_208)
{
    // 2DB0 003F;	
    // (ⶰ) ETHIOPIC SYLLABLE ZZA	[26A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB0, 0x003F };
    uint32_t const ces[9] = { 0x26A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_209)
{
    // 2DB0 0061;	
    // (ⶰ) ETHIOPIC SYLLABLE ZZA	[26A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB0, 0x0061 };
    uint32_t const ces[9] = { 0x26A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_210)
{
    // 2DB0 0041;	
    // (ⶰ) ETHIOPIC SYLLABLE ZZA	[26A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DB0, 0x0041 };
    uint32_t const ces[9] = { 0x26A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_211)
{
    // 2DB0 0062;	
    // (ⶰ) ETHIOPIC SYLLABLE ZZA	[26A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB0, 0x0062 };
    uint32_t const ces[9] = { 0x26A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_212)
{
    // 2DB1 0021;	
    // (ⶱ) ETHIOPIC SYLLABLE ZZU	[26A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB1, 0x0021 };
    uint32_t const ces[9] = { 0x26A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_213)
{
    // 2DB1 003F;	
    // (ⶱ) ETHIOPIC SYLLABLE ZZU	[26A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB1, 0x003F };
    uint32_t const ces[9] = { 0x26A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_214)
{
    // 2DB1 0061;	
    // (ⶱ) ETHIOPIC SYLLABLE ZZU	[26A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB1, 0x0061 };
    uint32_t const ces[9] = { 0x26A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_215)
{
    // 2DB1 0041;	
    // (ⶱ) ETHIOPIC SYLLABLE ZZU	[26A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DB1, 0x0041 };
    uint32_t const ces[9] = { 0x26A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_216)
{
    // 2DB1 0062;	
    // (ⶱ) ETHIOPIC SYLLABLE ZZU	[26A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB1, 0x0062 };
    uint32_t const ces[9] = { 0x26A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_217)
{
    // 2DB2 0021;	
    // (ⶲ) ETHIOPIC SYLLABLE ZZI	[26A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB2, 0x0021 };
    uint32_t const ces[9] = { 0x26A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_218)
{
    // 2DB2 003F;	
    // (ⶲ) ETHIOPIC SYLLABLE ZZI	[26A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB2, 0x003F };
    uint32_t const ces[9] = { 0x26A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_219)
{
    // 2DB2 0061;	
    // (ⶲ) ETHIOPIC SYLLABLE ZZI	[26A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB2, 0x0061 };
    uint32_t const ces[9] = { 0x26A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_220)
{
    // 2DB2 0041;	
    // (ⶲ) ETHIOPIC SYLLABLE ZZI	[26A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DB2, 0x0041 };
    uint32_t const ces[9] = { 0x26A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_221)
{
    // 2DB2 0062;	
    // (ⶲ) ETHIOPIC SYLLABLE ZZI	[26A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB2, 0x0062 };
    uint32_t const ces[9] = { 0x26A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_222)
{
    // 2DB3 0021;	
    // (ⶳ) ETHIOPIC SYLLABLE ZZAA	[26A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB3, 0x0021 };
    uint32_t const ces[9] = { 0x26A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_223)
{
    // 2DB3 003F;	
    // (ⶳ) ETHIOPIC SYLLABLE ZZAA	[26A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB3, 0x003F };
    uint32_t const ces[9] = { 0x26A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_224)
{
    // 2DB3 0061;	
    // (ⶳ) ETHIOPIC SYLLABLE ZZAA	[26A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB3, 0x0061 };
    uint32_t const ces[9] = { 0x26A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_225)
{
    // 2DB3 0041;	
    // (ⶳ) ETHIOPIC SYLLABLE ZZAA	[26A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DB3, 0x0041 };
    uint32_t const ces[9] = { 0x26A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_226)
{
    // 2DB3 0062;	
    // (ⶳ) ETHIOPIC SYLLABLE ZZAA	[26A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB3, 0x0062 };
    uint32_t const ces[9] = { 0x26A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_227)
{
    // 2DB4 0021;	
    // (ⶴ) ETHIOPIC SYLLABLE ZZEE	[26A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB4, 0x0021 };
    uint32_t const ces[9] = { 0x26A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_228)
{
    // 2DB4 003F;	
    // (ⶴ) ETHIOPIC SYLLABLE ZZEE	[26A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB4, 0x003F };
    uint32_t const ces[9] = { 0x26A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_229)
{
    // 2DB4 0061;	
    // (ⶴ) ETHIOPIC SYLLABLE ZZEE	[26A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB4, 0x0061 };
    uint32_t const ces[9] = { 0x26A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_230)
{
    // 2DB4 0041;	
    // (ⶴ) ETHIOPIC SYLLABLE ZZEE	[26A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DB4, 0x0041 };
    uint32_t const ces[9] = { 0x26A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_231)
{
    // 2DB4 0062;	
    // (ⶴ) ETHIOPIC SYLLABLE ZZEE	[26A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB4, 0x0062 };
    uint32_t const ces[9] = { 0x26A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_232)
{
    // 2DB5 0021;	
    // (ⶵ) ETHIOPIC SYLLABLE ZZE	[26A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB5, 0x0021 };
    uint32_t const ces[9] = { 0x26A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_233)
{
    // 2DB5 003F;	
    // (ⶵ) ETHIOPIC SYLLABLE ZZE	[26A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB5, 0x003F };
    uint32_t const ces[9] = { 0x26A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_234)
{
    // 2DB5 0061;	
    // (ⶵ) ETHIOPIC SYLLABLE ZZE	[26A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB5, 0x0061 };
    uint32_t const ces[9] = { 0x26A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_235)
{
    // 2DB5 0041;	
    // (ⶵ) ETHIOPIC SYLLABLE ZZE	[26A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DB5, 0x0041 };
    uint32_t const ces[9] = { 0x26A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_236)
{
    // 2DB5 0062;	
    // (ⶵ) ETHIOPIC SYLLABLE ZZE	[26A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB5, 0x0062 };
    uint32_t const ces[9] = { 0x26A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_237)
{
    // 2DB6 0021;	
    // (ⶶ) ETHIOPIC SYLLABLE ZZO	[26A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB6, 0x0021 };
    uint32_t const ces[9] = { 0x26A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_238)
{
    // 2DB6 003F;	
    // (ⶶ) ETHIOPIC SYLLABLE ZZO	[26A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB6, 0x003F };
    uint32_t const ces[9] = { 0x26A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_239)
{
    // 2DB6 0061;	
    // (ⶶ) ETHIOPIC SYLLABLE ZZO	[26A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB6, 0x0061 };
    uint32_t const ces[9] = { 0x26A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_240)
{
    // 2DB6 0041;	
    // (ⶶ) ETHIOPIC SYLLABLE ZZO	[26A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DB6, 0x0041 };
    uint32_t const ces[9] = { 0x26A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_241)
{
    // 2DB6 0062;	
    // (ⶶ) ETHIOPIC SYLLABLE ZZO	[26A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB6, 0x0062 };
    uint32_t const ces[9] = { 0x26A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_242)
{
    // 2DB8 0021;	
    // (ⶸ) ETHIOPIC SYLLABLE CCHA	[26A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB8, 0x0021 };
    uint32_t const ces[9] = { 0x26A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_243)
{
    // 2DB8 003F;	
    // (ⶸ) ETHIOPIC SYLLABLE CCHA	[26A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB8, 0x003F };
    uint32_t const ces[9] = { 0x26A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_244)
{
    // 2DB8 0061;	
    // (ⶸ) ETHIOPIC SYLLABLE CCHA	[26A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB8, 0x0061 };
    uint32_t const ces[9] = { 0x26A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_245)
{
    // 2DB8 0041;	
    // (ⶸ) ETHIOPIC SYLLABLE CCHA	[26A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DB8, 0x0041 };
    uint32_t const ces[9] = { 0x26A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_246)
{
    // 2DB8 0062;	
    // (ⶸ) ETHIOPIC SYLLABLE CCHA	[26A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB8, 0x0062 };
    uint32_t const ces[9] = { 0x26A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_247)
{
    // 2DB9 0021;	
    // (ⶹ) ETHIOPIC SYLLABLE CCHU	[26AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB9, 0x0021 };
    uint32_t const ces[9] = { 0x26AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_248)
{
    // 2DB9 003F;	
    // (ⶹ) ETHIOPIC SYLLABLE CCHU	[26AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB9, 0x003F };
    uint32_t const ces[9] = { 0x26AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_249)
{
    // 2DB9 0061;	
    // (ⶹ) ETHIOPIC SYLLABLE CCHU	[26AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB9, 0x0061 };
    uint32_t const ces[9] = { 0x26AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_250)
{
    // 2DB9 0041;	
    // (ⶹ) ETHIOPIC SYLLABLE CCHU	[26AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DB9, 0x0041 };
    uint32_t const ces[9] = { 0x26AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_251)
{
    // 2DB9 0062;	
    // (ⶹ) ETHIOPIC SYLLABLE CCHU	[26AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DB9, 0x0062 };
    uint32_t const ces[9] = { 0x26AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_252)
{
    // 2DBA 0021;	
    // (ⶺ) ETHIOPIC SYLLABLE CCHI	[26AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DBA, 0x0021 };
    uint32_t const ces[9] = { 0x26AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_253)
{
    // 2DBA 003F;	
    // (ⶺ) ETHIOPIC SYLLABLE CCHI	[26AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DBA, 0x003F };
    uint32_t const ces[9] = { 0x26AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_254)
{
    // 2DBA 0061;	
    // (ⶺ) ETHIOPIC SYLLABLE CCHI	[26AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DBA, 0x0061 };
    uint32_t const ces[9] = { 0x26AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_255)
{
    // 2DBA 0041;	
    // (ⶺ) ETHIOPIC SYLLABLE CCHI	[26AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DBA, 0x0041 };
    uint32_t const ces[9] = { 0x26AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_256)
{
    // 2DBA 0062;	
    // (ⶺ) ETHIOPIC SYLLABLE CCHI	[26AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DBA, 0x0062 };
    uint32_t const ces[9] = { 0x26AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_257)
{
    // 2DBB 0021;	
    // (ⶻ) ETHIOPIC SYLLABLE CCHAA	[26AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DBB, 0x0021 };
    uint32_t const ces[9] = { 0x26AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_258)
{
    // 2DBB 003F;	
    // (ⶻ) ETHIOPIC SYLLABLE CCHAA	[26AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DBB, 0x003F };
    uint32_t const ces[9] = { 0x26AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_259)
{
    // 2DBB 0061;	
    // (ⶻ) ETHIOPIC SYLLABLE CCHAA	[26AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DBB, 0x0061 };
    uint32_t const ces[9] = { 0x26AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_260)
{
    // 2DBB 0041;	
    // (ⶻ) ETHIOPIC SYLLABLE CCHAA	[26AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DBB, 0x0041 };
    uint32_t const ces[9] = { 0x26AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_261)
{
    // 2DBB 0062;	
    // (ⶻ) ETHIOPIC SYLLABLE CCHAA	[26AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DBB, 0x0062 };
    uint32_t const ces[9] = { 0x26AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_262)
{
    // 2DBC 0021;	
    // (ⶼ) ETHIOPIC SYLLABLE CCHEE	[26AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DBC, 0x0021 };
    uint32_t const ces[9] = { 0x26AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_263)
{
    // 2DBC 003F;	
    // (ⶼ) ETHIOPIC SYLLABLE CCHEE	[26AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DBC, 0x003F };
    uint32_t const ces[9] = { 0x26AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_264)
{
    // 2DBC 0061;	
    // (ⶼ) ETHIOPIC SYLLABLE CCHEE	[26AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DBC, 0x0061 };
    uint32_t const ces[9] = { 0x26AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_265)
{
    // 2DBC 0041;	
    // (ⶼ) ETHIOPIC SYLLABLE CCHEE	[26AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DBC, 0x0041 };
    uint32_t const ces[9] = { 0x26AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_266)
{
    // 2DBC 0062;	
    // (ⶼ) ETHIOPIC SYLLABLE CCHEE	[26AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DBC, 0x0062 };
    uint32_t const ces[9] = { 0x26AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_267)
{
    // 2DBD 0021;	
    // (ⶽ) ETHIOPIC SYLLABLE CCHE	[26AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DBD, 0x0021 };
    uint32_t const ces[9] = { 0x26AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_268)
{
    // 2DBD 003F;	
    // (ⶽ) ETHIOPIC SYLLABLE CCHE	[26AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DBD, 0x003F };
    uint32_t const ces[9] = { 0x26AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_269)
{
    // 2DBD 0061;	
    // (ⶽ) ETHIOPIC SYLLABLE CCHE	[26AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DBD, 0x0061 };
    uint32_t const ces[9] = { 0x26AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_270)
{
    // 2DBD 0041;	
    // (ⶽ) ETHIOPIC SYLLABLE CCHE	[26AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DBD, 0x0041 };
    uint32_t const ces[9] = { 0x26AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_271)
{
    // 2DBD 0062;	
    // (ⶽ) ETHIOPIC SYLLABLE CCHE	[26AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DBD, 0x0062 };
    uint32_t const ces[9] = { 0x26AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_272)
{
    // 2DBE 0021;	
    // (ⶾ) ETHIOPIC SYLLABLE CCHO	[26AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DBE, 0x0021 };
    uint32_t const ces[9] = { 0x26AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_273)
{
    // 2DBE 003F;	
    // (ⶾ) ETHIOPIC SYLLABLE CCHO	[26AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DBE, 0x003F };
    uint32_t const ces[9] = { 0x26AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_274)
{
    // 2DBE 0061;	
    // (ⶾ) ETHIOPIC SYLLABLE CCHO	[26AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DBE, 0x0061 };
    uint32_t const ces[9] = { 0x26AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_275)
{
    // 2DBE 0041;	
    // (ⶾ) ETHIOPIC SYLLABLE CCHO	[26AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DBE, 0x0041 };
    uint32_t const ces[9] = { 0x26AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_276)
{
    // 2DBE 0062;	
    // (ⶾ) ETHIOPIC SYLLABLE CCHO	[26AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DBE, 0x0062 };
    uint32_t const ces[9] = { 0x26AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_277)
{
    // 2DC0 0021;	
    // (ⷀ) ETHIOPIC SYLLABLE QYA	[26B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC0, 0x0021 };
    uint32_t const ces[9] = { 0x26B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_278)
{
    // 2DC0 003F;	
    // (ⷀ) ETHIOPIC SYLLABLE QYA	[26B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC0, 0x003F };
    uint32_t const ces[9] = { 0x26B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_279)
{
    // 2DC0 0061;	
    // (ⷀ) ETHIOPIC SYLLABLE QYA	[26B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC0, 0x0061 };
    uint32_t const ces[9] = { 0x26B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_280)
{
    // 2DC0 0041;	
    // (ⷀ) ETHIOPIC SYLLABLE QYA	[26B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DC0, 0x0041 };
    uint32_t const ces[9] = { 0x26B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_281)
{
    // 2DC0 0062;	
    // (ⷀ) ETHIOPIC SYLLABLE QYA	[26B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC0, 0x0062 };
    uint32_t const ces[9] = { 0x26B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_282)
{
    // 2DC1 0021;	
    // (ⷁ) ETHIOPIC SYLLABLE QYU	[26B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC1, 0x0021 };
    uint32_t const ces[9] = { 0x26B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_283)
{
    // 2DC1 003F;	
    // (ⷁ) ETHIOPIC SYLLABLE QYU	[26B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC1, 0x003F };
    uint32_t const ces[9] = { 0x26B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_284)
{
    // 2DC1 0061;	
    // (ⷁ) ETHIOPIC SYLLABLE QYU	[26B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC1, 0x0061 };
    uint32_t const ces[9] = { 0x26B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_285)
{
    // 2DC1 0041;	
    // (ⷁ) ETHIOPIC SYLLABLE QYU	[26B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DC1, 0x0041 };
    uint32_t const ces[9] = { 0x26B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_286)
{
    // 2DC1 0062;	
    // (ⷁ) ETHIOPIC SYLLABLE QYU	[26B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC1, 0x0062 };
    uint32_t const ces[9] = { 0x26B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_287)
{
    // 2DC2 0021;	
    // (ⷂ) ETHIOPIC SYLLABLE QYI	[26B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC2, 0x0021 };
    uint32_t const ces[9] = { 0x26B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_288)
{
    // 2DC2 003F;	
    // (ⷂ) ETHIOPIC SYLLABLE QYI	[26B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC2, 0x003F };
    uint32_t const ces[9] = { 0x26B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_289)
{
    // 2DC2 0061;	
    // (ⷂ) ETHIOPIC SYLLABLE QYI	[26B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC2, 0x0061 };
    uint32_t const ces[9] = { 0x26B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_290)
{
    // 2DC2 0041;	
    // (ⷂ) ETHIOPIC SYLLABLE QYI	[26B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DC2, 0x0041 };
    uint32_t const ces[9] = { 0x26B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_291)
{
    // 2DC2 0062;	
    // (ⷂ) ETHIOPIC SYLLABLE QYI	[26B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC2, 0x0062 };
    uint32_t const ces[9] = { 0x26B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_292)
{
    // 2DC3 0021;	
    // (ⷃ) ETHIOPIC SYLLABLE QYAA	[26B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC3, 0x0021 };
    uint32_t const ces[9] = { 0x26B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_293)
{
    // 2DC3 003F;	
    // (ⷃ) ETHIOPIC SYLLABLE QYAA	[26B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC3, 0x003F };
    uint32_t const ces[9] = { 0x26B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_294)
{
    // 2DC3 0061;	
    // (ⷃ) ETHIOPIC SYLLABLE QYAA	[26B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC3, 0x0061 };
    uint32_t const ces[9] = { 0x26B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_295)
{
    // 2DC3 0041;	
    // (ⷃ) ETHIOPIC SYLLABLE QYAA	[26B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DC3, 0x0041 };
    uint32_t const ces[9] = { 0x26B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_296)
{
    // 2DC3 0062;	
    // (ⷃ) ETHIOPIC SYLLABLE QYAA	[26B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC3, 0x0062 };
    uint32_t const ces[9] = { 0x26B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_297)
{
    // 2DC4 0021;	
    // (ⷄ) ETHIOPIC SYLLABLE QYEE	[26B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC4, 0x0021 };
    uint32_t const ces[9] = { 0x26B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_298)
{
    // 2DC4 003F;	
    // (ⷄ) ETHIOPIC SYLLABLE QYEE	[26B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC4, 0x003F };
    uint32_t const ces[9] = { 0x26B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_299)
{
    // 2DC4 0061;	
    // (ⷄ) ETHIOPIC SYLLABLE QYEE	[26B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC4, 0x0061 };
    uint32_t const ces[9] = { 0x26B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_300)
{
    // 2DC4 0041;	
    // (ⷄ) ETHIOPIC SYLLABLE QYEE	[26B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DC4, 0x0041 };
    uint32_t const ces[9] = { 0x26B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_301)
{
    // 2DC4 0062;	
    // (ⷄ) ETHIOPIC SYLLABLE QYEE	[26B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC4, 0x0062 };
    uint32_t const ces[9] = { 0x26B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_302)
{
    // 2DC5 0021;	
    // (ⷅ) ETHIOPIC SYLLABLE QYE	[26B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC5, 0x0021 };
    uint32_t const ces[9] = { 0x26B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_303)
{
    // 2DC5 003F;	
    // (ⷅ) ETHIOPIC SYLLABLE QYE	[26B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC5, 0x003F };
    uint32_t const ces[9] = { 0x26B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_304)
{
    // 2DC5 0061;	
    // (ⷅ) ETHIOPIC SYLLABLE QYE	[26B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC5, 0x0061 };
    uint32_t const ces[9] = { 0x26B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_305)
{
    // 2DC5 0041;	
    // (ⷅ) ETHIOPIC SYLLABLE QYE	[26B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DC5, 0x0041 };
    uint32_t const ces[9] = { 0x26B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_306)
{
    // 2DC5 0062;	
    // (ⷅ) ETHIOPIC SYLLABLE QYE	[26B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC5, 0x0062 };
    uint32_t const ces[9] = { 0x26B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_307)
{
    // 2DC6 0021;	
    // (ⷆ) ETHIOPIC SYLLABLE QYO	[26B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC6, 0x0021 };
    uint32_t const ces[9] = { 0x26B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_308)
{
    // 2DC6 003F;	
    // (ⷆ) ETHIOPIC SYLLABLE QYO	[26B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC6, 0x003F };
    uint32_t const ces[9] = { 0x26B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_309)
{
    // 2DC6 0061;	
    // (ⷆ) ETHIOPIC SYLLABLE QYO	[26B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC6, 0x0061 };
    uint32_t const ces[9] = { 0x26B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_310)
{
    // 2DC6 0041;	
    // (ⷆ) ETHIOPIC SYLLABLE QYO	[26B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DC6, 0x0041 };
    uint32_t const ces[9] = { 0x26B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_311)
{
    // 2DC6 0062;	
    // (ⷆ) ETHIOPIC SYLLABLE QYO	[26B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC6, 0x0062 };
    uint32_t const ces[9] = { 0x26B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_312)
{
    // 2DC8 0021;	
    // (ⷈ) ETHIOPIC SYLLABLE KYA	[26B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC8, 0x0021 };
    uint32_t const ces[9] = { 0x26B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_313)
{
    // 2DC8 003F;	
    // (ⷈ) ETHIOPIC SYLLABLE KYA	[26B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC8, 0x003F };
    uint32_t const ces[9] = { 0x26B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_314)
{
    // 2DC8 0061;	
    // (ⷈ) ETHIOPIC SYLLABLE KYA	[26B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC8, 0x0061 };
    uint32_t const ces[9] = { 0x26B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_315)
{
    // 2DC8 0041;	
    // (ⷈ) ETHIOPIC SYLLABLE KYA	[26B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DC8, 0x0041 };
    uint32_t const ces[9] = { 0x26B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_316)
{
    // 2DC8 0062;	
    // (ⷈ) ETHIOPIC SYLLABLE KYA	[26B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC8, 0x0062 };
    uint32_t const ces[9] = { 0x26B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_317)
{
    // 2DC9 0021;	
    // (ⷉ) ETHIOPIC SYLLABLE KYU	[26B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC9, 0x0021 };
    uint32_t const ces[9] = { 0x26B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_318)
{
    // 2DC9 003F;	
    // (ⷉ) ETHIOPIC SYLLABLE KYU	[26B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC9, 0x003F };
    uint32_t const ces[9] = { 0x26B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_319)
{
    // 2DC9 0061;	
    // (ⷉ) ETHIOPIC SYLLABLE KYU	[26B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC9, 0x0061 };
    uint32_t const ces[9] = { 0x26B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_320)
{
    // 2DC9 0041;	
    // (ⷉ) ETHIOPIC SYLLABLE KYU	[26B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DC9, 0x0041 };
    uint32_t const ces[9] = { 0x26B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_321)
{
    // 2DC9 0062;	
    // (ⷉ) ETHIOPIC SYLLABLE KYU	[26B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DC9, 0x0062 };
    uint32_t const ces[9] = { 0x26B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_322)
{
    // 2DCA 0021;	
    // (ⷊ) ETHIOPIC SYLLABLE KYI	[26B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DCA, 0x0021 };
    uint32_t const ces[9] = { 0x26B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_323)
{
    // 2DCA 003F;	
    // (ⷊ) ETHIOPIC SYLLABLE KYI	[26B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DCA, 0x003F };
    uint32_t const ces[9] = { 0x26B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_324)
{
    // 2DCA 0061;	
    // (ⷊ) ETHIOPIC SYLLABLE KYI	[26B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DCA, 0x0061 };
    uint32_t const ces[9] = { 0x26B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_325)
{
    // 2DCA 0041;	
    // (ⷊ) ETHIOPIC SYLLABLE KYI	[26B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DCA, 0x0041 };
    uint32_t const ces[9] = { 0x26B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_326)
{
    // 2DCA 0062;	
    // (ⷊ) ETHIOPIC SYLLABLE KYI	[26B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DCA, 0x0062 };
    uint32_t const ces[9] = { 0x26B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_327)
{
    // 2DCB 0021;	
    // (ⷋ) ETHIOPIC SYLLABLE KYAA	[26BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DCB, 0x0021 };
    uint32_t const ces[9] = { 0x26BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_328)
{
    // 2DCB 003F;	
    // (ⷋ) ETHIOPIC SYLLABLE KYAA	[26BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DCB, 0x003F };
    uint32_t const ces[9] = { 0x26BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_329)
{
    // 2DCB 0061;	
    // (ⷋ) ETHIOPIC SYLLABLE KYAA	[26BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DCB, 0x0061 };
    uint32_t const ces[9] = { 0x26BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_330)
{
    // 2DCB 0041;	
    // (ⷋ) ETHIOPIC SYLLABLE KYAA	[26BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DCB, 0x0041 };
    uint32_t const ces[9] = { 0x26BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_331)
{
    // 2DCB 0062;	
    // (ⷋ) ETHIOPIC SYLLABLE KYAA	[26BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DCB, 0x0062 };
    uint32_t const ces[9] = { 0x26BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_332)
{
    // 2DCC 0021;	
    // (ⷌ) ETHIOPIC SYLLABLE KYEE	[26BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DCC, 0x0021 };
    uint32_t const ces[9] = { 0x26BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_333)
{
    // 2DCC 003F;	
    // (ⷌ) ETHIOPIC SYLLABLE KYEE	[26BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DCC, 0x003F };
    uint32_t const ces[9] = { 0x26BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_334)
{
    // 2DCC 0061;	
    // (ⷌ) ETHIOPIC SYLLABLE KYEE	[26BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DCC, 0x0061 };
    uint32_t const ces[9] = { 0x26BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_335)
{
    // 2DCC 0041;	
    // (ⷌ) ETHIOPIC SYLLABLE KYEE	[26BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DCC, 0x0041 };
    uint32_t const ces[9] = { 0x26BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_336)
{
    // 2DCC 0062;	
    // (ⷌ) ETHIOPIC SYLLABLE KYEE	[26BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DCC, 0x0062 };
    uint32_t const ces[9] = { 0x26BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_337)
{
    // 2DCD 0021;	
    // (ⷍ) ETHIOPIC SYLLABLE KYE	[26BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DCD, 0x0021 };
    uint32_t const ces[9] = { 0x26BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_338)
{
    // 2DCD 003F;	
    // (ⷍ) ETHIOPIC SYLLABLE KYE	[26BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DCD, 0x003F };
    uint32_t const ces[9] = { 0x26BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_339)
{
    // 2DCD 0061;	
    // (ⷍ) ETHIOPIC SYLLABLE KYE	[26BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DCD, 0x0061 };
    uint32_t const ces[9] = { 0x26BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_340)
{
    // 2DCD 0041;	
    // (ⷍ) ETHIOPIC SYLLABLE KYE	[26BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DCD, 0x0041 };
    uint32_t const ces[9] = { 0x26BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_341)
{
    // 2DCD 0062;	
    // (ⷍ) ETHIOPIC SYLLABLE KYE	[26BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DCD, 0x0062 };
    uint32_t const ces[9] = { 0x26BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_342)
{
    // 2DCE 0021;	
    // (ⷎ) ETHIOPIC SYLLABLE KYO	[26BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DCE, 0x0021 };
    uint32_t const ces[9] = { 0x26BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_343)
{
    // 2DCE 003F;	
    // (ⷎ) ETHIOPIC SYLLABLE KYO	[26BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DCE, 0x003F };
    uint32_t const ces[9] = { 0x26BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_344)
{
    // 2DCE 0061;	
    // (ⷎ) ETHIOPIC SYLLABLE KYO	[26BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DCE, 0x0061 };
    uint32_t const ces[9] = { 0x26BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_345)
{
    // 2DCE 0041;	
    // (ⷎ) ETHIOPIC SYLLABLE KYO	[26BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DCE, 0x0041 };
    uint32_t const ces[9] = { 0x26BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_346)
{
    // 2DCE 0062;	
    // (ⷎ) ETHIOPIC SYLLABLE KYO	[26BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DCE, 0x0062 };
    uint32_t const ces[9] = { 0x26BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_347)
{
    // 2DD0 0021;	
    // (ⷐ) ETHIOPIC SYLLABLE XYA	[26BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD0, 0x0021 };
    uint32_t const ces[9] = { 0x26BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_348)
{
    // 2DD0 003F;	
    // (ⷐ) ETHIOPIC SYLLABLE XYA	[26BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD0, 0x003F };
    uint32_t const ces[9] = { 0x26BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_349)
{
    // 2DD0 0061;	
    // (ⷐ) ETHIOPIC SYLLABLE XYA	[26BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD0, 0x0061 };
    uint32_t const ces[9] = { 0x26BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_350)
{
    // 2DD0 0041;	
    // (ⷐ) ETHIOPIC SYLLABLE XYA	[26BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DD0, 0x0041 };
    uint32_t const ces[9] = { 0x26BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_351)
{
    // 2DD0 0062;	
    // (ⷐ) ETHIOPIC SYLLABLE XYA	[26BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD0, 0x0062 };
    uint32_t const ces[9] = { 0x26BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_352)
{
    // 2DD1 0021;	
    // (ⷑ) ETHIOPIC SYLLABLE XYU	[26BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD1, 0x0021 };
    uint32_t const ces[9] = { 0x26BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_353)
{
    // 2DD1 003F;	
    // (ⷑ) ETHIOPIC SYLLABLE XYU	[26BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD1, 0x003F };
    uint32_t const ces[9] = { 0x26BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_354)
{
    // 2DD1 0061;	
    // (ⷑ) ETHIOPIC SYLLABLE XYU	[26BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD1, 0x0061 };
    uint32_t const ces[9] = { 0x26BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_355)
{
    // 2DD1 0041;	
    // (ⷑ) ETHIOPIC SYLLABLE XYU	[26BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DD1, 0x0041 };
    uint32_t const ces[9] = { 0x26BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_356)
{
    // 2DD1 0062;	
    // (ⷑ) ETHIOPIC SYLLABLE XYU	[26BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD1, 0x0062 };
    uint32_t const ces[9] = { 0x26BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_357)
{
    // 2DD2 0021;	
    // (ⷒ) ETHIOPIC SYLLABLE XYI	[26C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD2, 0x0021 };
    uint32_t const ces[9] = { 0x26C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_358)
{
    // 2DD2 003F;	
    // (ⷒ) ETHIOPIC SYLLABLE XYI	[26C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD2, 0x003F };
    uint32_t const ces[9] = { 0x26C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_359)
{
    // 2DD2 0061;	
    // (ⷒ) ETHIOPIC SYLLABLE XYI	[26C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD2, 0x0061 };
    uint32_t const ces[9] = { 0x26C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_360)
{
    // 2DD2 0041;	
    // (ⷒ) ETHIOPIC SYLLABLE XYI	[26C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DD2, 0x0041 };
    uint32_t const ces[9] = { 0x26C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_361)
{
    // 2DD2 0062;	
    // (ⷒ) ETHIOPIC SYLLABLE XYI	[26C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD2, 0x0062 };
    uint32_t const ces[9] = { 0x26C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_362)
{
    // 2DD3 0021;	
    // (ⷓ) ETHIOPIC SYLLABLE XYAA	[26C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD3, 0x0021 };
    uint32_t const ces[9] = { 0x26C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_363)
{
    // 2DD3 003F;	
    // (ⷓ) ETHIOPIC SYLLABLE XYAA	[26C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD3, 0x003F };
    uint32_t const ces[9] = { 0x26C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_364)
{
    // 2DD3 0061;	
    // (ⷓ) ETHIOPIC SYLLABLE XYAA	[26C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD3, 0x0061 };
    uint32_t const ces[9] = { 0x26C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_365)
{
    // 2DD3 0041;	
    // (ⷓ) ETHIOPIC SYLLABLE XYAA	[26C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DD3, 0x0041 };
    uint32_t const ces[9] = { 0x26C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_366)
{
    // 2DD3 0062;	
    // (ⷓ) ETHIOPIC SYLLABLE XYAA	[26C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD3, 0x0062 };
    uint32_t const ces[9] = { 0x26C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_367)
{
    // 2DD4 0021;	
    // (ⷔ) ETHIOPIC SYLLABLE XYEE	[26C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD4, 0x0021 };
    uint32_t const ces[9] = { 0x26C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_368)
{
    // 2DD4 003F;	
    // (ⷔ) ETHIOPIC SYLLABLE XYEE	[26C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD4, 0x003F };
    uint32_t const ces[9] = { 0x26C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_369)
{
    // 2DD4 0061;	
    // (ⷔ) ETHIOPIC SYLLABLE XYEE	[26C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD4, 0x0061 };
    uint32_t const ces[9] = { 0x26C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_370)
{
    // 2DD4 0041;	
    // (ⷔ) ETHIOPIC SYLLABLE XYEE	[26C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DD4, 0x0041 };
    uint32_t const ces[9] = { 0x26C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_371)
{
    // 2DD4 0062;	
    // (ⷔ) ETHIOPIC SYLLABLE XYEE	[26C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD4, 0x0062 };
    uint32_t const ces[9] = { 0x26C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_372)
{
    // 2DD5 0021;	
    // (ⷕ) ETHIOPIC SYLLABLE XYE	[26C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD5, 0x0021 };
    uint32_t const ces[9] = { 0x26C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_373)
{
    // 2DD5 003F;	
    // (ⷕ) ETHIOPIC SYLLABLE XYE	[26C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD5, 0x003F };
    uint32_t const ces[9] = { 0x26C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_374)
{
    // 2DD5 0061;	
    // (ⷕ) ETHIOPIC SYLLABLE XYE	[26C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD5, 0x0061 };
    uint32_t const ces[9] = { 0x26C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_375)
{
    // 2DD5 0041;	
    // (ⷕ) ETHIOPIC SYLLABLE XYE	[26C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DD5, 0x0041 };
    uint32_t const ces[9] = { 0x26C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_376)
{
    // 2DD5 0062;	
    // (ⷕ) ETHIOPIC SYLLABLE XYE	[26C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD5, 0x0062 };
    uint32_t const ces[9] = { 0x26C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_377)
{
    // 2DD6 0021;	
    // (ⷖ) ETHIOPIC SYLLABLE XYO	[26C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD6, 0x0021 };
    uint32_t const ces[9] = { 0x26C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_378)
{
    // 2DD6 003F;	
    // (ⷖ) ETHIOPIC SYLLABLE XYO	[26C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD6, 0x003F };
    uint32_t const ces[9] = { 0x26C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_379)
{
    // 2DD6 0061;	
    // (ⷖ) ETHIOPIC SYLLABLE XYO	[26C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD6, 0x0061 };
    uint32_t const ces[9] = { 0x26C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_380)
{
    // 2DD6 0041;	
    // (ⷖ) ETHIOPIC SYLLABLE XYO	[26C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DD6, 0x0041 };
    uint32_t const ces[9] = { 0x26C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_381)
{
    // 2DD6 0062;	
    // (ⷖ) ETHIOPIC SYLLABLE XYO	[26C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD6, 0x0062 };
    uint32_t const ces[9] = { 0x26C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_382)
{
    // 2DD8 0021;	
    // (ⷘ) ETHIOPIC SYLLABLE GYA	[26C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD8, 0x0021 };
    uint32_t const ces[9] = { 0x26C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_383)
{
    // 2DD8 003F;	
    // (ⷘ) ETHIOPIC SYLLABLE GYA	[26C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD8, 0x003F };
    uint32_t const ces[9] = { 0x26C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_384)
{
    // 2DD8 0061;	
    // (ⷘ) ETHIOPIC SYLLABLE GYA	[26C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD8, 0x0061 };
    uint32_t const ces[9] = { 0x26C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_385)
{
    // 2DD8 0041;	
    // (ⷘ) ETHIOPIC SYLLABLE GYA	[26C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DD8, 0x0041 };
    uint32_t const ces[9] = { 0x26C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_386)
{
    // 2DD8 0062;	
    // (ⷘ) ETHIOPIC SYLLABLE GYA	[26C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD8, 0x0062 };
    uint32_t const ces[9] = { 0x26C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_387)
{
    // 2DD9 0021;	
    // (ⷙ) ETHIOPIC SYLLABLE GYU	[26C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD9, 0x0021 };
    uint32_t const ces[9] = { 0x26C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_388)
{
    // 2DD9 003F;	
    // (ⷙ) ETHIOPIC SYLLABLE GYU	[26C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD9, 0x003F };
    uint32_t const ces[9] = { 0x26C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_389)
{
    // 2DD9 0061;	
    // (ⷙ) ETHIOPIC SYLLABLE GYU	[26C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD9, 0x0061 };
    uint32_t const ces[9] = { 0x26C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_390)
{
    // 2DD9 0041;	
    // (ⷙ) ETHIOPIC SYLLABLE GYU	[26C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DD9, 0x0041 };
    uint32_t const ces[9] = { 0x26C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_391)
{
    // 2DD9 0062;	
    // (ⷙ) ETHIOPIC SYLLABLE GYU	[26C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DD9, 0x0062 };
    uint32_t const ces[9] = { 0x26C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_392)
{
    // 2DDA 0021;	
    // (ⷚ) ETHIOPIC SYLLABLE GYI	[26C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DDA, 0x0021 };
    uint32_t const ces[9] = { 0x26C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_393)
{
    // 2DDA 003F;	
    // (ⷚ) ETHIOPIC SYLLABLE GYI	[26C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DDA, 0x003F };
    uint32_t const ces[9] = { 0x26C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_394)
{
    // 2DDA 0061;	
    // (ⷚ) ETHIOPIC SYLLABLE GYI	[26C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DDA, 0x0061 };
    uint32_t const ces[9] = { 0x26C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_395)
{
    // 2DDA 0041;	
    // (ⷚ) ETHIOPIC SYLLABLE GYI	[26C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DDA, 0x0041 };
    uint32_t const ces[9] = { 0x26C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_396)
{
    // 2DDA 0062;	
    // (ⷚ) ETHIOPIC SYLLABLE GYI	[26C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DDA, 0x0062 };
    uint32_t const ces[9] = { 0x26C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_397)
{
    // 2DDB 0021;	
    // (ⷛ) ETHIOPIC SYLLABLE GYAA	[26C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DDB, 0x0021 };
    uint32_t const ces[9] = { 0x26C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_398)
{
    // 2DDB 003F;	
    // (ⷛ) ETHIOPIC SYLLABLE GYAA	[26C8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DDB, 0x003F };
    uint32_t const ces[9] = { 0x26C8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_399)
{
    // 2DDB 0061;	
    // (ⷛ) ETHIOPIC SYLLABLE GYAA	[26C8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DDB, 0x0061 };
    uint32_t const ces[9] = { 0x26C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_400)
{
    // 2DDB 0041;	
    // (ⷛ) ETHIOPIC SYLLABLE GYAA	[26C8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DDB, 0x0041 };
    uint32_t const ces[9] = { 0x26C8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_401)
{
    // 2DDB 0062;	
    // (ⷛ) ETHIOPIC SYLLABLE GYAA	[26C8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DDB, 0x0062 };
    uint32_t const ces[9] = { 0x26C8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_402)
{
    // 2DDC 0021;	
    // (ⷜ) ETHIOPIC SYLLABLE GYEE	[26C9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DDC, 0x0021 };
    uint32_t const ces[9] = { 0x26C9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_403)
{
    // 2DDC 003F;	
    // (ⷜ) ETHIOPIC SYLLABLE GYEE	[26C9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DDC, 0x003F };
    uint32_t const ces[9] = { 0x26C9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_404)
{
    // 2DDC 0061;	
    // (ⷜ) ETHIOPIC SYLLABLE GYEE	[26C9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DDC, 0x0061 };
    uint32_t const ces[9] = { 0x26C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_405)
{
    // 2DDC 0041;	
    // (ⷜ) ETHIOPIC SYLLABLE GYEE	[26C9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DDC, 0x0041 };
    uint32_t const ces[9] = { 0x26C9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_406)
{
    // 2DDC 0062;	
    // (ⷜ) ETHIOPIC SYLLABLE GYEE	[26C9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DDC, 0x0062 };
    uint32_t const ces[9] = { 0x26C9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_407)
{
    // 2DDD 0021;	
    // (ⷝ) ETHIOPIC SYLLABLE GYE	[26CA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DDD, 0x0021 };
    uint32_t const ces[9] = { 0x26CA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_408)
{
    // 2DDD 003F;	
    // (ⷝ) ETHIOPIC SYLLABLE GYE	[26CA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DDD, 0x003F };
    uint32_t const ces[9] = { 0x26CA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_409)
{
    // 2DDD 0061;	
    // (ⷝ) ETHIOPIC SYLLABLE GYE	[26CA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DDD, 0x0061 };
    uint32_t const ces[9] = { 0x26CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_410)
{
    // 2DDD 0041;	
    // (ⷝ) ETHIOPIC SYLLABLE GYE	[26CA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DDD, 0x0041 };
    uint32_t const ces[9] = { 0x26CA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_411)
{
    // 2DDD 0062;	
    // (ⷝ) ETHIOPIC SYLLABLE GYE	[26CA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DDD, 0x0062 };
    uint32_t const ces[9] = { 0x26CA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_412)
{
    // 2DDE 0021;	
    // (ⷞ) ETHIOPIC SYLLABLE GYO	[26CB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DDE, 0x0021 };
    uint32_t const ces[9] = { 0x26CB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_413)
{
    // 2DDE 003F;	
    // (ⷞ) ETHIOPIC SYLLABLE GYO	[26CB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DDE, 0x003F };
    uint32_t const ces[9] = { 0x26CB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_414)
{
    // 2DDE 0061;	
    // (ⷞ) ETHIOPIC SYLLABLE GYO	[26CB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DDE, 0x0061 };
    uint32_t const ces[9] = { 0x26CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_415)
{
    // 2DDE 0041;	
    // (ⷞ) ETHIOPIC SYLLABLE GYO	[26CB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2DDE, 0x0041 };
    uint32_t const ces[9] = { 0x26CB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_416)
{
    // 2DDE 0062;	
    // (ⷞ) ETHIOPIC SYLLABLE GYO	[26CB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2DDE, 0x0062 };
    uint32_t const ces[9] = { 0x26CB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_417)
{
    // 0950 0021;	
    // (ॐ) DEVANAGARI OM	[26CC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0950, 0x0021 };
    uint32_t const ces[9] = { 0x26CC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_418)
{
    // 0950 003F;	
    // (ॐ) DEVANAGARI OM	[26CC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0950, 0x003F };
    uint32_t const ces[9] = { 0x26CC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_419)
{
    // 0950 0061;	
    // (ॐ) DEVANAGARI OM	[26CC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0950, 0x0061 };
    uint32_t const ces[9] = { 0x26CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_420)
{
    // 0950 0041;	
    // (ॐ) DEVANAGARI OM	[26CC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0950, 0x0041 };
    uint32_t const ces[9] = { 0x26CC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_421)
{
    // 0950 0062;	
    // (ॐ) DEVANAGARI OM	[26CC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0950, 0x0062 };
    uint32_t const ces[9] = { 0x26CC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_422)
{
    // A8FD 0021;	
    // (ꣽ) DEVANAGARI JAIN OM	[26CD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8FD, 0x0021 };
    uint32_t const ces[9] = { 0x26CD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_423)
{
    // A8FD 003F;	
    // (ꣽ) DEVANAGARI JAIN OM	[26CD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8FD, 0x003F };
    uint32_t const ces[9] = { 0x26CD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_424)
{
    // A8FD 0061;	
    // (ꣽ) DEVANAGARI JAIN OM	[26CD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8FD, 0x0061 };
    uint32_t const ces[9] = { 0x26CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_425)
{
    // A8FD 0041;	
    // (ꣽ) DEVANAGARI JAIN OM	[26CD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xA8FD, 0x0041 };
    uint32_t const ces[9] = { 0x26CD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_426)
{
    // A8FD 0062;	
    // (ꣽ) DEVANAGARI JAIN OM	[26CD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xA8FD, 0x0062 };
    uint32_t const ces[9] = { 0x26CD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_427)
{
    // 0972 0021;	
    // (ॲ) DEVANAGARI LETTER CANDRA A	[26CE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0972, 0x0021 };
    uint32_t const ces[9] = { 0x26CE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_428)
{
    // 0972 003F;	
    // (ॲ) DEVANAGARI LETTER CANDRA A	[26CE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0972, 0x003F };
    uint32_t const ces[9] = { 0x26CE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_429)
{
    // 0972 0061;	
    // (ॲ) DEVANAGARI LETTER CANDRA A	[26CE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0972, 0x0061 };
    uint32_t const ces[9] = { 0x26CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_430)
{
    // 0972 0041;	
    // (ॲ) DEVANAGARI LETTER CANDRA A	[26CE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0972, 0x0041 };
    uint32_t const ces[9] = { 0x26CE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_431)
{
    // 0972 0062;	
    // (ॲ) DEVANAGARI LETTER CANDRA A	[26CE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0972, 0x0062 };
    uint32_t const ces[9] = { 0x26CE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_432)
{
    // 0904 0021;	
    // (ऄ) DEVANAGARI LETTER SHORT A	[26CF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0904, 0x0021 };
    uint32_t const ces[9] = { 0x26CF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_433)
{
    // 0904 003F;	
    // (ऄ) DEVANAGARI LETTER SHORT A	[26CF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0904, 0x003F };
    uint32_t const ces[9] = { 0x26CF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_434)
{
    // 0904 0061;	
    // (ऄ) DEVANAGARI LETTER SHORT A	[26CF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0904, 0x0061 };
    uint32_t const ces[9] = { 0x26CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_435)
{
    // 0904 0041;	
    // (ऄ) DEVANAGARI LETTER SHORT A	[26CF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0904, 0x0041 };
    uint32_t const ces[9] = { 0x26CF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_436)
{
    // 0904 0062;	
    // (ऄ) DEVANAGARI LETTER SHORT A	[26CF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0904, 0x0062 };
    uint32_t const ces[9] = { 0x26CF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_437)
{
    // 0905 0021;	
    // (अ) DEVANAGARI LETTER A	[26D0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0905, 0x0021 };
    uint32_t const ces[9] = { 0x26D0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_438)
{
    // 0905 003F;	
    // (अ) DEVANAGARI LETTER A	[26D0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0905, 0x003F };
    uint32_t const ces[9] = { 0x26D0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_439)
{
    // 0905 0061;	
    // (अ) DEVANAGARI LETTER A	[26D0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0905, 0x0061 };
    uint32_t const ces[9] = { 0x26D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_440)
{
    // 0905 0041;	
    // (अ) DEVANAGARI LETTER A	[26D0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0905, 0x0041 };
    uint32_t const ces[9] = { 0x26D0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_441)
{
    // 0905 0062;	
    // (अ) DEVANAGARI LETTER A	[26D0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0905, 0x0062 };
    uint32_t const ces[9] = { 0x26D0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_442)
{
    // 0906 0021;	
    // (आ) DEVANAGARI LETTER AA	[26D1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0906, 0x0021 };
    uint32_t const ces[9] = { 0x26D1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_443)
{
    // 0906 003F;	
    // (आ) DEVANAGARI LETTER AA	[26D1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0906, 0x003F };
    uint32_t const ces[9] = { 0x26D1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_444)
{
    // 0906 0061;	
    // (आ) DEVANAGARI LETTER AA	[26D1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0906, 0x0061 };
    uint32_t const ces[9] = { 0x26D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_445)
{
    // 0906 0041;	
    // (आ) DEVANAGARI LETTER AA	[26D1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0906, 0x0041 };
    uint32_t const ces[9] = { 0x26D1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_446)
{
    // 0906 0062;	
    // (आ) DEVANAGARI LETTER AA	[26D1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0906, 0x0062 };
    uint32_t const ces[9] = { 0x26D1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_447)
{
    // 0973 0021;	
    // (ॳ) DEVANAGARI LETTER OE	[26D2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0973, 0x0021 };
    uint32_t const ces[9] = { 0x26D2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_448)
{
    // 0973 003F;	
    // (ॳ) DEVANAGARI LETTER OE	[26D2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0973, 0x003F };
    uint32_t const ces[9] = { 0x26D2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_449)
{
    // 0973 0061;	
    // (ॳ) DEVANAGARI LETTER OE	[26D2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0973, 0x0061 };
    uint32_t const ces[9] = { 0x26D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_450)
{
    // 0973 0041;	
    // (ॳ) DEVANAGARI LETTER OE	[26D2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0973, 0x0041 };
    uint32_t const ces[9] = { 0x26D2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_451)
{
    // 0973 0062;	
    // (ॳ) DEVANAGARI LETTER OE	[26D2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0973, 0x0062 };
    uint32_t const ces[9] = { 0x26D2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_452)
{
    // 0974 0021;	
    // (ॴ) DEVANAGARI LETTER OOE	[26D3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0974, 0x0021 };
    uint32_t const ces[9] = { 0x26D3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_453)
{
    // 0974 003F;	
    // (ॴ) DEVANAGARI LETTER OOE	[26D3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0974, 0x003F };
    uint32_t const ces[9] = { 0x26D3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_454)
{
    // 0974 0061;	
    // (ॴ) DEVANAGARI LETTER OOE	[26D3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0974, 0x0061 };
    uint32_t const ces[9] = { 0x26D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_455)
{
    // 0974 0041;	
    // (ॴ) DEVANAGARI LETTER OOE	[26D3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0974, 0x0041 };
    uint32_t const ces[9] = { 0x26D3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_456)
{
    // 0974 0062;	
    // (ॴ) DEVANAGARI LETTER OOE	[26D3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0974, 0x0062 };
    uint32_t const ces[9] = { 0x26D3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_457)
{
    // 0975 0021;	
    // (ॵ) DEVANAGARI LETTER AW	[26D4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0975, 0x0021 };
    uint32_t const ces[9] = { 0x26D4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_458)
{
    // 0975 003F;	
    // (ॵ) DEVANAGARI LETTER AW	[26D4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0975, 0x003F };
    uint32_t const ces[9] = { 0x26D4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_459)
{
    // 0975 0061;	
    // (ॵ) DEVANAGARI LETTER AW	[26D4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0975, 0x0061 };
    uint32_t const ces[9] = { 0x26D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_460)
{
    // 0975 0041;	
    // (ॵ) DEVANAGARI LETTER AW	[26D4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0975, 0x0041 };
    uint32_t const ces[9] = { 0x26D4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_461)
{
    // 0975 0062;	
    // (ॵ) DEVANAGARI LETTER AW	[26D4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0975, 0x0062 };
    uint32_t const ces[9] = { 0x26D4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_462)
{
    // 0976 0021;	
    // (ॶ) DEVANAGARI LETTER UE	[26D5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0976, 0x0021 };
    uint32_t const ces[9] = { 0x26D5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_463)
{
    // 0976 003F;	
    // (ॶ) DEVANAGARI LETTER UE	[26D5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0976, 0x003F };
    uint32_t const ces[9] = { 0x26D5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_464)
{
    // 0976 0061;	
    // (ॶ) DEVANAGARI LETTER UE	[26D5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0976, 0x0061 };
    uint32_t const ces[9] = { 0x26D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_465)
{
    // 0976 0041;	
    // (ॶ) DEVANAGARI LETTER UE	[26D5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0976, 0x0041 };
    uint32_t const ces[9] = { 0x26D5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_466)
{
    // 0976 0062;	
    // (ॶ) DEVANAGARI LETTER UE	[26D5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0976, 0x0062 };
    uint32_t const ces[9] = { 0x26D5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_467)
{
    // 0977 0021;	
    // (ॷ) DEVANAGARI LETTER UUE	[26D6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0977, 0x0021 };
    uint32_t const ces[9] = { 0x26D6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_468)
{
    // 0977 003F;	
    // (ॷ) DEVANAGARI LETTER UUE	[26D6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0977, 0x003F };
    uint32_t const ces[9] = { 0x26D6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_469)
{
    // 0977 0061;	
    // (ॷ) DEVANAGARI LETTER UUE	[26D6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0977, 0x0061 };
    uint32_t const ces[9] = { 0x26D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_470)
{
    // 0977 0041;	
    // (ॷ) DEVANAGARI LETTER UUE	[26D6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0977, 0x0041 };
    uint32_t const ces[9] = { 0x26D6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_471)
{
    // 0977 0062;	
    // (ॷ) DEVANAGARI LETTER UUE	[26D6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0977, 0x0062 };
    uint32_t const ces[9] = { 0x26D6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_472)
{
    // 0907 0021;	
    // (इ) DEVANAGARI LETTER I	[26D7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0907, 0x0021 };
    uint32_t const ces[9] = { 0x26D7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_473)
{
    // 0907 003F;	
    // (इ) DEVANAGARI LETTER I	[26D7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0907, 0x003F };
    uint32_t const ces[9] = { 0x26D7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_474)
{
    // 0907 0061;	
    // (इ) DEVANAGARI LETTER I	[26D7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0907, 0x0061 };
    uint32_t const ces[9] = { 0x26D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_475)
{
    // 0907 0041;	
    // (इ) DEVANAGARI LETTER I	[26D7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0907, 0x0041 };
    uint32_t const ces[9] = { 0x26D7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_476)
{
    // 0907 0062;	
    // (इ) DEVANAGARI LETTER I	[26D7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0907, 0x0062 };
    uint32_t const ces[9] = { 0x26D7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_477)
{
    // 0908 0021;	
    // (ई) DEVANAGARI LETTER II	[26D8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0908, 0x0021 };
    uint32_t const ces[9] = { 0x26D8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_478)
{
    // 0908 003F;	
    // (ई) DEVANAGARI LETTER II	[26D8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0908, 0x003F };
    uint32_t const ces[9] = { 0x26D8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_479)
{
    // 0908 0061;	
    // (ई) DEVANAGARI LETTER II	[26D8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0908, 0x0061 };
    uint32_t const ces[9] = { 0x26D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_480)
{
    // 0908 0041;	
    // (ई) DEVANAGARI LETTER II	[26D8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0908, 0x0041 };
    uint32_t const ces[9] = { 0x26D8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_481)
{
    // 0908 0062;	
    // (ई) DEVANAGARI LETTER II	[26D8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0908, 0x0062 };
    uint32_t const ces[9] = { 0x26D8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_482)
{
    // 0909 0021;	
    // (उ) DEVANAGARI LETTER U	[26D9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0909, 0x0021 };
    uint32_t const ces[9] = { 0x26D9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_483)
{
    // 0909 003F;	
    // (उ) DEVANAGARI LETTER U	[26D9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0909, 0x003F };
    uint32_t const ces[9] = { 0x26D9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_484)
{
    // 0909 0061;	
    // (उ) DEVANAGARI LETTER U	[26D9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0909, 0x0061 };
    uint32_t const ces[9] = { 0x26D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_485)
{
    // 0909 0041;	
    // (उ) DEVANAGARI LETTER U	[26D9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0909, 0x0041 };
    uint32_t const ces[9] = { 0x26D9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_486)
{
    // 0909 0062;	
    // (उ) DEVANAGARI LETTER U	[26D9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0909, 0x0062 };
    uint32_t const ces[9] = { 0x26D9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_487)
{
    // 090A 0021;	
    // (ऊ) DEVANAGARI LETTER UU	[26DA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090A, 0x0021 };
    uint32_t const ces[9] = { 0x26DA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_488)
{
    // 090A 003F;	
    // (ऊ) DEVANAGARI LETTER UU	[26DA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090A, 0x003F };
    uint32_t const ces[9] = { 0x26DA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_489)
{
    // 090A 0061;	
    // (ऊ) DEVANAGARI LETTER UU	[26DA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090A, 0x0061 };
    uint32_t const ces[9] = { 0x26DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_490)
{
    // 090A 0041;	
    // (ऊ) DEVANAGARI LETTER UU	[26DA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x090A, 0x0041 };
    uint32_t const ces[9] = { 0x26DA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_491)
{
    // 090A 0062;	
    // (ऊ) DEVANAGARI LETTER UU	[26DA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090A, 0x0062 };
    uint32_t const ces[9] = { 0x26DA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_492)
{
    // 090B 0021;	
    // (ऋ) DEVANAGARI LETTER VOCALIC R	[26DB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090B, 0x0021 };
    uint32_t const ces[9] = { 0x26DB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_493)
{
    // 090B 003F;	
    // (ऋ) DEVANAGARI LETTER VOCALIC R	[26DB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090B, 0x003F };
    uint32_t const ces[9] = { 0x26DB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_494)
{
    // 090B 0061;	
    // (ऋ) DEVANAGARI LETTER VOCALIC R	[26DB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090B, 0x0061 };
    uint32_t const ces[9] = { 0x26DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_495)
{
    // 090B 0041;	
    // (ऋ) DEVANAGARI LETTER VOCALIC R	[26DB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x090B, 0x0041 };
    uint32_t const ces[9] = { 0x26DB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_496)
{
    // 090B 0062;	
    // (ऋ) DEVANAGARI LETTER VOCALIC R	[26DB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x090B, 0x0062 };
    uint32_t const ces[9] = { 0x26DB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_497)
{
    // 0960 0021;	
    // (ॠ) DEVANAGARI LETTER VOCALIC RR	[26DC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0960, 0x0021 };
    uint32_t const ces[9] = { 0x26DC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_498)
{
    // 0960 003F;	
    // (ॠ) DEVANAGARI LETTER VOCALIC RR	[26DC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0960, 0x003F };
    uint32_t const ces[9] = { 0x26DC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_164_499)
{
    // 0960 0061;	
    // (ॠ) DEVANAGARI LETTER VOCALIC RR	[26DC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0960, 0x0061 };
    uint32_t const ces[9] = { 0x26DC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

