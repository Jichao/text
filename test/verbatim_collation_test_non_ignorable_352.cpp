// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_352_000)
{
    // 3DC4 003F;	
    // (㷄) CJK UNIFIED IDEOGRAPH-3DC4	[FB80 BDC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_001)
{
    // 3DC4 0061;	
    // (㷄) CJK UNIFIED IDEOGRAPH-3DC4	[FB80 BDC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_002)
{
    // 3DC4 0041;	
    // (㷄) CJK UNIFIED IDEOGRAPH-3DC4	[FB80 BDC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DC4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_003)
{
    // 3DC4 0062;	
    // (㷄) CJK UNIFIED IDEOGRAPH-3DC4	[FB80 BDC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_004)
{
    // 3DC5 0021;	
    // (㷅) CJK UNIFIED IDEOGRAPH-3DC5	[FB80 BDC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_005)
{
    // 3DC5 003F;	
    // (㷅) CJK UNIFIED IDEOGRAPH-3DC5	[FB80 BDC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_006)
{
    // 3DC5 0061;	
    // (㷅) CJK UNIFIED IDEOGRAPH-3DC5	[FB80 BDC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_007)
{
    // 3DC5 0041;	
    // (㷅) CJK UNIFIED IDEOGRAPH-3DC5	[FB80 BDC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DC5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_008)
{
    // 3DC5 0062;	
    // (㷅) CJK UNIFIED IDEOGRAPH-3DC5	[FB80 BDC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_009)
{
    // 3DC6 0021;	
    // (㷆) CJK UNIFIED IDEOGRAPH-3DC6	[FB80 BDC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_010)
{
    // 3DC6 003F;	
    // (㷆) CJK UNIFIED IDEOGRAPH-3DC6	[FB80 BDC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_011)
{
    // 3DC6 0061;	
    // (㷆) CJK UNIFIED IDEOGRAPH-3DC6	[FB80 BDC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_012)
{
    // 3DC6 0041;	
    // (㷆) CJK UNIFIED IDEOGRAPH-3DC6	[FB80 BDC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DC6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_013)
{
    // 3DC6 0062;	
    // (㷆) CJK UNIFIED IDEOGRAPH-3DC6	[FB80 BDC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_014)
{
    // 3DC7 0021;	
    // (㷇) CJK UNIFIED IDEOGRAPH-3DC7	[FB80 BDC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_015)
{
    // 3DC7 003F;	
    // (㷇) CJK UNIFIED IDEOGRAPH-3DC7	[FB80 BDC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_016)
{
    // 3DC7 0061;	
    // (㷇) CJK UNIFIED IDEOGRAPH-3DC7	[FB80 BDC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_017)
{
    // 3DC7 0041;	
    // (㷇) CJK UNIFIED IDEOGRAPH-3DC7	[FB80 BDC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DC7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_018)
{
    // 3DC7 0062;	
    // (㷇) CJK UNIFIED IDEOGRAPH-3DC7	[FB80 BDC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_019)
{
    // 3DC8 0021;	
    // (㷈) CJK UNIFIED IDEOGRAPH-3DC8	[FB80 BDC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_020)
{
    // 3DC8 003F;	
    // (㷈) CJK UNIFIED IDEOGRAPH-3DC8	[FB80 BDC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_021)
{
    // 3DC8 0061;	
    // (㷈) CJK UNIFIED IDEOGRAPH-3DC8	[FB80 BDC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_022)
{
    // 3DC8 0041;	
    // (㷈) CJK UNIFIED IDEOGRAPH-3DC8	[FB80 BDC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DC8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_023)
{
    // 3DC8 0062;	
    // (㷈) CJK UNIFIED IDEOGRAPH-3DC8	[FB80 BDC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_024)
{
    // 3DC9 0021;	
    // (㷉) CJK UNIFIED IDEOGRAPH-3DC9	[FB80 BDC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_025)
{
    // 3DC9 003F;	
    // (㷉) CJK UNIFIED IDEOGRAPH-3DC9	[FB80 BDC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_026)
{
    // 3DC9 0061;	
    // (㷉) CJK UNIFIED IDEOGRAPH-3DC9	[FB80 BDC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_027)
{
    // 3DC9 0041;	
    // (㷉) CJK UNIFIED IDEOGRAPH-3DC9	[FB80 BDC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DC9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_028)
{
    // 3DC9 0062;	
    // (㷉) CJK UNIFIED IDEOGRAPH-3DC9	[FB80 BDC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DC9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_029)
{
    // 3DCA 0021;	
    // (㷊) CJK UNIFIED IDEOGRAPH-3DCA	[FB80 BDCA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_030)
{
    // 3DCA 003F;	
    // (㷊) CJK UNIFIED IDEOGRAPH-3DCA	[FB80 BDCA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDCA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_031)
{
    // 3DCA 0061;	
    // (㷊) CJK UNIFIED IDEOGRAPH-3DCA	[FB80 BDCA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_032)
{
    // 3DCA 0041;	
    // (㷊) CJK UNIFIED IDEOGRAPH-3DCA	[FB80 BDCA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DCA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_033)
{
    // 3DCA 0062;	
    // (㷊) CJK UNIFIED IDEOGRAPH-3DCA	[FB80 BDCA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_034)
{
    // 3DCB 0021;	
    // (㷋) CJK UNIFIED IDEOGRAPH-3DCB	[FB80 BDCB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_035)
{
    // 3DCB 003F;	
    // (㷋) CJK UNIFIED IDEOGRAPH-3DCB	[FB80 BDCB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_036)
{
    // 3DCB 0061;	
    // (㷋) CJK UNIFIED IDEOGRAPH-3DCB	[FB80 BDCB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_037)
{
    // 3DCB 0041;	
    // (㷋) CJK UNIFIED IDEOGRAPH-3DCB	[FB80 BDCB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DCB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_038)
{
    // 3DCB 0062;	
    // (㷋) CJK UNIFIED IDEOGRAPH-3DCB	[FB80 BDCB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_039)
{
    // 3DCC 0021;	
    // (㷌) CJK UNIFIED IDEOGRAPH-3DCC	[FB80 BDCC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_040)
{
    // 3DCC 003F;	
    // (㷌) CJK UNIFIED IDEOGRAPH-3DCC	[FB80 BDCC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDCC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_041)
{
    // 3DCC 0061;	
    // (㷌) CJK UNIFIED IDEOGRAPH-3DCC	[FB80 BDCC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_042)
{
    // 3DCC 0041;	
    // (㷌) CJK UNIFIED IDEOGRAPH-3DCC	[FB80 BDCC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DCC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_043)
{
    // 3DCC 0062;	
    // (㷌) CJK UNIFIED IDEOGRAPH-3DCC	[FB80 BDCC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_044)
{
    // 3DCD 0021;	
    // (㷍) CJK UNIFIED IDEOGRAPH-3DCD	[FB80 BDCD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_045)
{
    // 3DCD 003F;	
    // (㷍) CJK UNIFIED IDEOGRAPH-3DCD	[FB80 BDCD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDCD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_046)
{
    // 3DCD 0061;	
    // (㷍) CJK UNIFIED IDEOGRAPH-3DCD	[FB80 BDCD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_047)
{
    // 3DCD 0041;	
    // (㷍) CJK UNIFIED IDEOGRAPH-3DCD	[FB80 BDCD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DCD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_048)
{
    // 3DCD 0062;	
    // (㷍) CJK UNIFIED IDEOGRAPH-3DCD	[FB80 BDCD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_049)
{
    // 3DCE 0021;	
    // (㷎) CJK UNIFIED IDEOGRAPH-3DCE	[FB80 BDCE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_050)
{
    // 3DCE 003F;	
    // (㷎) CJK UNIFIED IDEOGRAPH-3DCE	[FB80 BDCE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDCE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_051)
{
    // 3DCE 0061;	
    // (㷎) CJK UNIFIED IDEOGRAPH-3DCE	[FB80 BDCE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_052)
{
    // 3DCE 0041;	
    // (㷎) CJK UNIFIED IDEOGRAPH-3DCE	[FB80 BDCE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DCE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_053)
{
    // 3DCE 0062;	
    // (㷎) CJK UNIFIED IDEOGRAPH-3DCE	[FB80 BDCE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_054)
{
    // 3DCF 0021;	
    // (㷏) CJK UNIFIED IDEOGRAPH-3DCF	[FB80 BDCF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_055)
{
    // 3DCF 003F;	
    // (㷏) CJK UNIFIED IDEOGRAPH-3DCF	[FB80 BDCF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDCF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_056)
{
    // 3DCF 0061;	
    // (㷏) CJK UNIFIED IDEOGRAPH-3DCF	[FB80 BDCF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_057)
{
    // 3DCF 0041;	
    // (㷏) CJK UNIFIED IDEOGRAPH-3DCF	[FB80 BDCF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DCF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_058)
{
    // 3DCF 0062;	
    // (㷏) CJK UNIFIED IDEOGRAPH-3DCF	[FB80 BDCF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DCF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDCF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_059)
{
    // 3DD0 0021;	
    // (㷐) CJK UNIFIED IDEOGRAPH-3DD0	[FB80 BDD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_060)
{
    // 3DD0 003F;	
    // (㷐) CJK UNIFIED IDEOGRAPH-3DD0	[FB80 BDD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_061)
{
    // 3DD0 0061;	
    // (㷐) CJK UNIFIED IDEOGRAPH-3DD0	[FB80 BDD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_062)
{
    // 3DD0 0041;	
    // (㷐) CJK UNIFIED IDEOGRAPH-3DD0	[FB80 BDD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DD0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_063)
{
    // 3DD0 0062;	
    // (㷐) CJK UNIFIED IDEOGRAPH-3DD0	[FB80 BDD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_064)
{
    // 3DD1 0021;	
    // (㷑) CJK UNIFIED IDEOGRAPH-3DD1	[FB80 BDD1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_065)
{
    // 3DD1 003F;	
    // (㷑) CJK UNIFIED IDEOGRAPH-3DD1	[FB80 BDD1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_066)
{
    // 3DD1 0061;	
    // (㷑) CJK UNIFIED IDEOGRAPH-3DD1	[FB80 BDD1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_067)
{
    // 3DD1 0041;	
    // (㷑) CJK UNIFIED IDEOGRAPH-3DD1	[FB80 BDD1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DD1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_068)
{
    // 3DD1 0062;	
    // (㷑) CJK UNIFIED IDEOGRAPH-3DD1	[FB80 BDD1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_069)
{
    // 3DD2 0021;	
    // (㷒) CJK UNIFIED IDEOGRAPH-3DD2	[FB80 BDD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_070)
{
    // 3DD2 003F;	
    // (㷒) CJK UNIFIED IDEOGRAPH-3DD2	[FB80 BDD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_071)
{
    // 3DD2 0061;	
    // (㷒) CJK UNIFIED IDEOGRAPH-3DD2	[FB80 BDD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_072)
{
    // 3DD2 0041;	
    // (㷒) CJK UNIFIED IDEOGRAPH-3DD2	[FB80 BDD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DD2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_073)
{
    // 3DD2 0062;	
    // (㷒) CJK UNIFIED IDEOGRAPH-3DD2	[FB80 BDD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_074)
{
    // 3DD3 0021;	
    // (㷓) CJK UNIFIED IDEOGRAPH-3DD3	[FB80 BDD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_075)
{
    // 3DD3 003F;	
    // (㷓) CJK UNIFIED IDEOGRAPH-3DD3	[FB80 BDD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_076)
{
    // 3DD3 0061;	
    // (㷓) CJK UNIFIED IDEOGRAPH-3DD3	[FB80 BDD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_077)
{
    // 3DD3 0041;	
    // (㷓) CJK UNIFIED IDEOGRAPH-3DD3	[FB80 BDD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DD3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_078)
{
    // 3DD3 0062;	
    // (㷓) CJK UNIFIED IDEOGRAPH-3DD3	[FB80 BDD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_079)
{
    // 3DD4 0021;	
    // (㷔) CJK UNIFIED IDEOGRAPH-3DD4	[FB80 BDD4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_080)
{
    // 3DD4 003F;	
    // (㷔) CJK UNIFIED IDEOGRAPH-3DD4	[FB80 BDD4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_081)
{
    // 3DD4 0061;	
    // (㷔) CJK UNIFIED IDEOGRAPH-3DD4	[FB80 BDD4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_082)
{
    // 3DD4 0041;	
    // (㷔) CJK UNIFIED IDEOGRAPH-3DD4	[FB80 BDD4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DD4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_083)
{
    // 3DD4 0062;	
    // (㷔) CJK UNIFIED IDEOGRAPH-3DD4	[FB80 BDD4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_084)
{
    // 3DD5 0021;	
    // (㷕) CJK UNIFIED IDEOGRAPH-3DD5	[FB80 BDD5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_085)
{
    // 3DD5 003F;	
    // (㷕) CJK UNIFIED IDEOGRAPH-3DD5	[FB80 BDD5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_086)
{
    // 3DD5 0061;	
    // (㷕) CJK UNIFIED IDEOGRAPH-3DD5	[FB80 BDD5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_087)
{
    // 3DD5 0041;	
    // (㷕) CJK UNIFIED IDEOGRAPH-3DD5	[FB80 BDD5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DD5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_088)
{
    // 3DD5 0062;	
    // (㷕) CJK UNIFIED IDEOGRAPH-3DD5	[FB80 BDD5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_089)
{
    // 3DD6 0021;	
    // (㷖) CJK UNIFIED IDEOGRAPH-3DD6	[FB80 BDD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_090)
{
    // 3DD6 003F;	
    // (㷖) CJK UNIFIED IDEOGRAPH-3DD6	[FB80 BDD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_091)
{
    // 3DD6 0061;	
    // (㷖) CJK UNIFIED IDEOGRAPH-3DD6	[FB80 BDD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_092)
{
    // 3DD6 0041;	
    // (㷖) CJK UNIFIED IDEOGRAPH-3DD6	[FB80 BDD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DD6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_093)
{
    // 3DD6 0062;	
    // (㷖) CJK UNIFIED IDEOGRAPH-3DD6	[FB80 BDD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_094)
{
    // 3DD7 0021;	
    // (㷗) CJK UNIFIED IDEOGRAPH-3DD7	[FB80 BDD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_095)
{
    // 3DD7 003F;	
    // (㷗) CJK UNIFIED IDEOGRAPH-3DD7	[FB80 BDD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_096)
{
    // 3DD7 0061;	
    // (㷗) CJK UNIFIED IDEOGRAPH-3DD7	[FB80 BDD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_097)
{
    // 3DD7 0041;	
    // (㷗) CJK UNIFIED IDEOGRAPH-3DD7	[FB80 BDD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DD7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_098)
{
    // 3DD7 0062;	
    // (㷗) CJK UNIFIED IDEOGRAPH-3DD7	[FB80 BDD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_099)
{
    // 3DD8 0021;	
    // (㷘) CJK UNIFIED IDEOGRAPH-3DD8	[FB80 BDD8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_100)
{
    // 3DD8 003F;	
    // (㷘) CJK UNIFIED IDEOGRAPH-3DD8	[FB80 BDD8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDD8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_101)
{
    // 3DD8 0061;	
    // (㷘) CJK UNIFIED IDEOGRAPH-3DD8	[FB80 BDD8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_102)
{
    // 3DD8 0041;	
    // (㷘) CJK UNIFIED IDEOGRAPH-3DD8	[FB80 BDD8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DD8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_103)
{
    // 3DD8 0062;	
    // (㷘) CJK UNIFIED IDEOGRAPH-3DD8	[FB80 BDD8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_104)
{
    // 3DD9 0021;	
    // (㷙) CJK UNIFIED IDEOGRAPH-3DD9	[FB80 BDD9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_105)
{
    // 3DD9 003F;	
    // (㷙) CJK UNIFIED IDEOGRAPH-3DD9	[FB80 BDD9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDD9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_106)
{
    // 3DD9 0061;	
    // (㷙) CJK UNIFIED IDEOGRAPH-3DD9	[FB80 BDD9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_107)
{
    // 3DD9 0041;	
    // (㷙) CJK UNIFIED IDEOGRAPH-3DD9	[FB80 BDD9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DD9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_108)
{
    // 3DD9 0062;	
    // (㷙) CJK UNIFIED IDEOGRAPH-3DD9	[FB80 BDD9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DD9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDD9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_109)
{
    // 3DDA 0021;	
    // (㷚) CJK UNIFIED IDEOGRAPH-3DDA	[FB80 BDDA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_110)
{
    // 3DDA 003F;	
    // (㷚) CJK UNIFIED IDEOGRAPH-3DDA	[FB80 BDDA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDDA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_111)
{
    // 3DDA 0061;	
    // (㷚) CJK UNIFIED IDEOGRAPH-3DDA	[FB80 BDDA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_112)
{
    // 3DDA 0041;	
    // (㷚) CJK UNIFIED IDEOGRAPH-3DDA	[FB80 BDDA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DDA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_113)
{
    // 3DDA 0062;	
    // (㷚) CJK UNIFIED IDEOGRAPH-3DDA	[FB80 BDDA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_114)
{
    // 3DDB 0021;	
    // (㷛) CJK UNIFIED IDEOGRAPH-3DDB	[FB80 BDDB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_115)
{
    // 3DDB 003F;	
    // (㷛) CJK UNIFIED IDEOGRAPH-3DDB	[FB80 BDDB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_116)
{
    // 3DDB 0061;	
    // (㷛) CJK UNIFIED IDEOGRAPH-3DDB	[FB80 BDDB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_117)
{
    // 3DDB 0041;	
    // (㷛) CJK UNIFIED IDEOGRAPH-3DDB	[FB80 BDDB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DDB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_118)
{
    // 3DDB 0062;	
    // (㷛) CJK UNIFIED IDEOGRAPH-3DDB	[FB80 BDDB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_119)
{
    // 3DDC 0021;	
    // (㷜) CJK UNIFIED IDEOGRAPH-3DDC	[FB80 BDDC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_120)
{
    // 3DDC 003F;	
    // (㷜) CJK UNIFIED IDEOGRAPH-3DDC	[FB80 BDDC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDDC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_121)
{
    // 3DDC 0061;	
    // (㷜) CJK UNIFIED IDEOGRAPH-3DDC	[FB80 BDDC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_122)
{
    // 3DDC 0041;	
    // (㷜) CJK UNIFIED IDEOGRAPH-3DDC	[FB80 BDDC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DDC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_123)
{
    // 3DDC 0062;	
    // (㷜) CJK UNIFIED IDEOGRAPH-3DDC	[FB80 BDDC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_124)
{
    // 3DDD 0021;	
    // (㷝) CJK UNIFIED IDEOGRAPH-3DDD	[FB80 BDDD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_125)
{
    // 3DDD 003F;	
    // (㷝) CJK UNIFIED IDEOGRAPH-3DDD	[FB80 BDDD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_126)
{
    // 3DDD 0061;	
    // (㷝) CJK UNIFIED IDEOGRAPH-3DDD	[FB80 BDDD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_127)
{
    // 3DDD 0041;	
    // (㷝) CJK UNIFIED IDEOGRAPH-3DDD	[FB80 BDDD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DDD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_128)
{
    // 3DDD 0062;	
    // (㷝) CJK UNIFIED IDEOGRAPH-3DDD	[FB80 BDDD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_129)
{
    // 3DDE 0021;	
    // (㷞) CJK UNIFIED IDEOGRAPH-3DDE	[FB80 BDDE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_130)
{
    // 3DDE 003F;	
    // (㷞) CJK UNIFIED IDEOGRAPH-3DDE	[FB80 BDDE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDDE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_131)
{
    // 3DDE 0061;	
    // (㷞) CJK UNIFIED IDEOGRAPH-3DDE	[FB80 BDDE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_132)
{
    // 3DDE 0041;	
    // (㷞) CJK UNIFIED IDEOGRAPH-3DDE	[FB80 BDDE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DDE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_133)
{
    // 3DDE 0062;	
    // (㷞) CJK UNIFIED IDEOGRAPH-3DDE	[FB80 BDDE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_134)
{
    // 3DDF 0021;	
    // (㷟) CJK UNIFIED IDEOGRAPH-3DDF	[FB80 BDDF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_135)
{
    // 3DDF 003F;	
    // (㷟) CJK UNIFIED IDEOGRAPH-3DDF	[FB80 BDDF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_136)
{
    // 3DDF 0061;	
    // (㷟) CJK UNIFIED IDEOGRAPH-3DDF	[FB80 BDDF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_137)
{
    // 3DDF 0041;	
    // (㷟) CJK UNIFIED IDEOGRAPH-3DDF	[FB80 BDDF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DDF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_138)
{
    // 3DDF 0062;	
    // (㷟) CJK UNIFIED IDEOGRAPH-3DDF	[FB80 BDDF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DDF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_139)
{
    // 3DE0 0021;	
    // (㷠) CJK UNIFIED IDEOGRAPH-3DE0	[FB80 BDE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_140)
{
    // 3DE0 003F;	
    // (㷠) CJK UNIFIED IDEOGRAPH-3DE0	[FB80 BDE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_141)
{
    // 3DE0 0061;	
    // (㷠) CJK UNIFIED IDEOGRAPH-3DE0	[FB80 BDE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_142)
{
    // 3DE0 0041;	
    // (㷠) CJK UNIFIED IDEOGRAPH-3DE0	[FB80 BDE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DE0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_143)
{
    // 3DE0 0062;	
    // (㷠) CJK UNIFIED IDEOGRAPH-3DE0	[FB80 BDE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_144)
{
    // 3DE1 0021;	
    // (㷡) CJK UNIFIED IDEOGRAPH-3DE1	[FB80 BDE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_145)
{
    // 3DE1 003F;	
    // (㷡) CJK UNIFIED IDEOGRAPH-3DE1	[FB80 BDE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_146)
{
    // 3DE1 0061;	
    // (㷡) CJK UNIFIED IDEOGRAPH-3DE1	[FB80 BDE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_147)
{
    // 3DE1 0041;	
    // (㷡) CJK UNIFIED IDEOGRAPH-3DE1	[FB80 BDE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DE1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_148)
{
    // 3DE1 0062;	
    // (㷡) CJK UNIFIED IDEOGRAPH-3DE1	[FB80 BDE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_149)
{
    // 3DE2 0021;	
    // (㷢) CJK UNIFIED IDEOGRAPH-3DE2	[FB80 BDE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_150)
{
    // 3DE2 003F;	
    // (㷢) CJK UNIFIED IDEOGRAPH-3DE2	[FB80 BDE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_151)
{
    // 3DE2 0061;	
    // (㷢) CJK UNIFIED IDEOGRAPH-3DE2	[FB80 BDE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_152)
{
    // 3DE2 0041;	
    // (㷢) CJK UNIFIED IDEOGRAPH-3DE2	[FB80 BDE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DE2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_153)
{
    // 3DE2 0062;	
    // (㷢) CJK UNIFIED IDEOGRAPH-3DE2	[FB80 BDE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_154)
{
    // 3DE3 0021;	
    // (㷣) CJK UNIFIED IDEOGRAPH-3DE3	[FB80 BDE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_155)
{
    // 3DE3 003F;	
    // (㷣) CJK UNIFIED IDEOGRAPH-3DE3	[FB80 BDE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_156)
{
    // 3DE3 0061;	
    // (㷣) CJK UNIFIED IDEOGRAPH-3DE3	[FB80 BDE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_157)
{
    // 3DE3 0041;	
    // (㷣) CJK UNIFIED IDEOGRAPH-3DE3	[FB80 BDE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DE3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_158)
{
    // 3DE3 0062;	
    // (㷣) CJK UNIFIED IDEOGRAPH-3DE3	[FB80 BDE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_159)
{
    // 3DE4 0021;	
    // (㷤) CJK UNIFIED IDEOGRAPH-3DE4	[FB80 BDE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_160)
{
    // 3DE4 003F;	
    // (㷤) CJK UNIFIED IDEOGRAPH-3DE4	[FB80 BDE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_161)
{
    // 3DE4 0061;	
    // (㷤) CJK UNIFIED IDEOGRAPH-3DE4	[FB80 BDE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_162)
{
    // 3DE4 0041;	
    // (㷤) CJK UNIFIED IDEOGRAPH-3DE4	[FB80 BDE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DE4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_163)
{
    // 3DE4 0062;	
    // (㷤) CJK UNIFIED IDEOGRAPH-3DE4	[FB80 BDE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_164)
{
    // 3DE5 0021;	
    // (㷥) CJK UNIFIED IDEOGRAPH-3DE5	[FB80 BDE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_165)
{
    // 3DE5 003F;	
    // (㷥) CJK UNIFIED IDEOGRAPH-3DE5	[FB80 BDE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_166)
{
    // 3DE5 0061;	
    // (㷥) CJK UNIFIED IDEOGRAPH-3DE5	[FB80 BDE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_167)
{
    // 3DE5 0041;	
    // (㷥) CJK UNIFIED IDEOGRAPH-3DE5	[FB80 BDE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DE5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_168)
{
    // 3DE5 0062;	
    // (㷥) CJK UNIFIED IDEOGRAPH-3DE5	[FB80 BDE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_169)
{
    // 3DE6 0021;	
    // (㷦) CJK UNIFIED IDEOGRAPH-3DE6	[FB80 BDE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_170)
{
    // 3DE6 003F;	
    // (㷦) CJK UNIFIED IDEOGRAPH-3DE6	[FB80 BDE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_171)
{
    // 3DE6 0061;	
    // (㷦) CJK UNIFIED IDEOGRAPH-3DE6	[FB80 BDE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_172)
{
    // 3DE6 0041;	
    // (㷦) CJK UNIFIED IDEOGRAPH-3DE6	[FB80 BDE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DE6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_173)
{
    // 3DE6 0062;	
    // (㷦) CJK UNIFIED IDEOGRAPH-3DE6	[FB80 BDE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_174)
{
    // 3DE7 0021;	
    // (㷧) CJK UNIFIED IDEOGRAPH-3DE7	[FB80 BDE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_175)
{
    // 3DE7 003F;	
    // (㷧) CJK UNIFIED IDEOGRAPH-3DE7	[FB80 BDE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_176)
{
    // 3DE7 0061;	
    // (㷧) CJK UNIFIED IDEOGRAPH-3DE7	[FB80 BDE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_177)
{
    // 3DE7 0041;	
    // (㷧) CJK UNIFIED IDEOGRAPH-3DE7	[FB80 BDE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DE7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_178)
{
    // 3DE7 0062;	
    // (㷧) CJK UNIFIED IDEOGRAPH-3DE7	[FB80 BDE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_179)
{
    // 3DE8 0021;	
    // (㷨) CJK UNIFIED IDEOGRAPH-3DE8	[FB80 BDE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_180)
{
    // 3DE8 003F;	
    // (㷨) CJK UNIFIED IDEOGRAPH-3DE8	[FB80 BDE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_181)
{
    // 3DE8 0061;	
    // (㷨) CJK UNIFIED IDEOGRAPH-3DE8	[FB80 BDE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_182)
{
    // 3DE8 0041;	
    // (㷨) CJK UNIFIED IDEOGRAPH-3DE8	[FB80 BDE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DE8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_183)
{
    // 3DE8 0062;	
    // (㷨) CJK UNIFIED IDEOGRAPH-3DE8	[FB80 BDE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_184)
{
    // 3DE9 0021;	
    // (㷩) CJK UNIFIED IDEOGRAPH-3DE9	[FB80 BDE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_185)
{
    // 3DE9 003F;	
    // (㷩) CJK UNIFIED IDEOGRAPH-3DE9	[FB80 BDE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_186)
{
    // 3DE9 0061;	
    // (㷩) CJK UNIFIED IDEOGRAPH-3DE9	[FB80 BDE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_187)
{
    // 3DE9 0041;	
    // (㷩) CJK UNIFIED IDEOGRAPH-3DE9	[FB80 BDE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DE9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_188)
{
    // 3DE9 0062;	
    // (㷩) CJK UNIFIED IDEOGRAPH-3DE9	[FB80 BDE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DE9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_189)
{
    // 3DEA 0021;	
    // (㷪) CJK UNIFIED IDEOGRAPH-3DEA	[FB80 BDEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DEA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_190)
{
    // 3DEA 003F;	
    // (㷪) CJK UNIFIED IDEOGRAPH-3DEA	[FB80 BDEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DEA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_191)
{
    // 3DEA 0061;	
    // (㷪) CJK UNIFIED IDEOGRAPH-3DEA	[FB80 BDEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DEA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_192)
{
    // 3DEA 0041;	
    // (㷪) CJK UNIFIED IDEOGRAPH-3DEA	[FB80 BDEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DEA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_193)
{
    // 3DEA 0062;	
    // (㷪) CJK UNIFIED IDEOGRAPH-3DEA	[FB80 BDEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DEA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_194)
{
    // 3DEB 0021;	
    // (㷫) CJK UNIFIED IDEOGRAPH-3DEB	[FB80 BDEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DEB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_195)
{
    // 3DEB 003F;	
    // (㷫) CJK UNIFIED IDEOGRAPH-3DEB	[FB80 BDEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DEB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_196)
{
    // 3DEB 0061;	
    // (㷫) CJK UNIFIED IDEOGRAPH-3DEB	[FB80 BDEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DEB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_197)
{
    // 3DEB 0041;	
    // (㷫) CJK UNIFIED IDEOGRAPH-3DEB	[FB80 BDEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DEB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_198)
{
    // 3DEB 0062;	
    // (㷫) CJK UNIFIED IDEOGRAPH-3DEB	[FB80 BDEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DEB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_199)
{
    // 3DEC 0021;	
    // (㷬) CJK UNIFIED IDEOGRAPH-3DEC	[FB80 BDEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DEC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_200)
{
    // 3DEC 003F;	
    // (㷬) CJK UNIFIED IDEOGRAPH-3DEC	[FB80 BDEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DEC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_201)
{
    // 3DEC 0061;	
    // (㷬) CJK UNIFIED IDEOGRAPH-3DEC	[FB80 BDEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DEC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_202)
{
    // 3DEC 0041;	
    // (㷬) CJK UNIFIED IDEOGRAPH-3DEC	[FB80 BDEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DEC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_203)
{
    // 3DEC 0062;	
    // (㷬) CJK UNIFIED IDEOGRAPH-3DEC	[FB80 BDEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DEC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_204)
{
    // 3DED 0021;	
    // (㷭) CJK UNIFIED IDEOGRAPH-3DED	[FB80 BDED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DED, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_205)
{
    // 3DED 003F;	
    // (㷭) CJK UNIFIED IDEOGRAPH-3DED	[FB80 BDED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DED, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_206)
{
    // 3DED 0061;	
    // (㷭) CJK UNIFIED IDEOGRAPH-3DED	[FB80 BDED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DED, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_207)
{
    // 3DED 0041;	
    // (㷭) CJK UNIFIED IDEOGRAPH-3DED	[FB80 BDED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DED, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_208)
{
    // 3DED 0062;	
    // (㷭) CJK UNIFIED IDEOGRAPH-3DED	[FB80 BDED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DED, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_209)
{
    // 3DEE 0021;	
    // (㷮) CJK UNIFIED IDEOGRAPH-3DEE	[FB80 BDEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DEE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_210)
{
    // 3DEE 003F;	
    // (㷮) CJK UNIFIED IDEOGRAPH-3DEE	[FB80 BDEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DEE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_211)
{
    // 3DEE 0061;	
    // (㷮) CJK UNIFIED IDEOGRAPH-3DEE	[FB80 BDEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DEE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_212)
{
    // 3DEE 0041;	
    // (㷮) CJK UNIFIED IDEOGRAPH-3DEE	[FB80 BDEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DEE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_213)
{
    // 3DEE 0062;	
    // (㷮) CJK UNIFIED IDEOGRAPH-3DEE	[FB80 BDEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DEE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_214)
{
    // 3DEF 0021;	
    // (㷯) CJK UNIFIED IDEOGRAPH-3DEF	[FB80 BDEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DEF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_215)
{
    // 3DEF 003F;	
    // (㷯) CJK UNIFIED IDEOGRAPH-3DEF	[FB80 BDEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DEF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_216)
{
    // 3DEF 0061;	
    // (㷯) CJK UNIFIED IDEOGRAPH-3DEF	[FB80 BDEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DEF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_217)
{
    // 3DEF 0041;	
    // (㷯) CJK UNIFIED IDEOGRAPH-3DEF	[FB80 BDEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DEF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_218)
{
    // 3DEF 0062;	
    // (㷯) CJK UNIFIED IDEOGRAPH-3DEF	[FB80 BDEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DEF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_219)
{
    // 3DF0 0021;	
    // (㷰) CJK UNIFIED IDEOGRAPH-3DF0	[FB80 BDF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_220)
{
    // 3DF0 003F;	
    // (㷰) CJK UNIFIED IDEOGRAPH-3DF0	[FB80 BDF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_221)
{
    // 3DF0 0061;	
    // (㷰) CJK UNIFIED IDEOGRAPH-3DF0	[FB80 BDF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_222)
{
    // 3DF0 0041;	
    // (㷰) CJK UNIFIED IDEOGRAPH-3DF0	[FB80 BDF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DF0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_223)
{
    // 3DF0 0062;	
    // (㷰) CJK UNIFIED IDEOGRAPH-3DF0	[FB80 BDF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_224)
{
    // 3DF1 0021;	
    // (㷱) CJK UNIFIED IDEOGRAPH-3DF1	[FB80 BDF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_225)
{
    // 3DF1 003F;	
    // (㷱) CJK UNIFIED IDEOGRAPH-3DF1	[FB80 BDF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_226)
{
    // 3DF1 0061;	
    // (㷱) CJK UNIFIED IDEOGRAPH-3DF1	[FB80 BDF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_227)
{
    // 3DF1 0041;	
    // (㷱) CJK UNIFIED IDEOGRAPH-3DF1	[FB80 BDF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DF1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_228)
{
    // 3DF1 0062;	
    // (㷱) CJK UNIFIED IDEOGRAPH-3DF1	[FB80 BDF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_229)
{
    // 3DF2 0021;	
    // (㷲) CJK UNIFIED IDEOGRAPH-3DF2	[FB80 BDF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_230)
{
    // 3DF2 003F;	
    // (㷲) CJK UNIFIED IDEOGRAPH-3DF2	[FB80 BDF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_231)
{
    // 3DF2 0061;	
    // (㷲) CJK UNIFIED IDEOGRAPH-3DF2	[FB80 BDF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_232)
{
    // 3DF2 0041;	
    // (㷲) CJK UNIFIED IDEOGRAPH-3DF2	[FB80 BDF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DF2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_233)
{
    // 3DF2 0062;	
    // (㷲) CJK UNIFIED IDEOGRAPH-3DF2	[FB80 BDF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_234)
{
    // 3DF3 0021;	
    // (㷳) CJK UNIFIED IDEOGRAPH-3DF3	[FB80 BDF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_235)
{
    // 3DF3 003F;	
    // (㷳) CJK UNIFIED IDEOGRAPH-3DF3	[FB80 BDF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_236)
{
    // 3DF3 0061;	
    // (㷳) CJK UNIFIED IDEOGRAPH-3DF3	[FB80 BDF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_237)
{
    // 3DF3 0041;	
    // (㷳) CJK UNIFIED IDEOGRAPH-3DF3	[FB80 BDF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DF3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_238)
{
    // 3DF3 0062;	
    // (㷳) CJK UNIFIED IDEOGRAPH-3DF3	[FB80 BDF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_239)
{
    // 3DF4 0021;	
    // (㷴) CJK UNIFIED IDEOGRAPH-3DF4	[FB80 BDF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_240)
{
    // 3DF4 003F;	
    // (㷴) CJK UNIFIED IDEOGRAPH-3DF4	[FB80 BDF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_241)
{
    // 3DF4 0061;	
    // (㷴) CJK UNIFIED IDEOGRAPH-3DF4	[FB80 BDF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_242)
{
    // 3DF4 0041;	
    // (㷴) CJK UNIFIED IDEOGRAPH-3DF4	[FB80 BDF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DF4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_243)
{
    // 3DF4 0062;	
    // (㷴) CJK UNIFIED IDEOGRAPH-3DF4	[FB80 BDF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_244)
{
    // 3DF5 0021;	
    // (㷵) CJK UNIFIED IDEOGRAPH-3DF5	[FB80 BDF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_245)
{
    // 3DF5 003F;	
    // (㷵) CJK UNIFIED IDEOGRAPH-3DF5	[FB80 BDF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_246)
{
    // 3DF5 0061;	
    // (㷵) CJK UNIFIED IDEOGRAPH-3DF5	[FB80 BDF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_247)
{
    // 3DF5 0041;	
    // (㷵) CJK UNIFIED IDEOGRAPH-3DF5	[FB80 BDF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DF5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_248)
{
    // 3DF5 0062;	
    // (㷵) CJK UNIFIED IDEOGRAPH-3DF5	[FB80 BDF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_249)
{
    // 3DF6 0021;	
    // (㷶) CJK UNIFIED IDEOGRAPH-3DF6	[FB80 BDF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_250)
{
    // 3DF6 003F;	
    // (㷶) CJK UNIFIED IDEOGRAPH-3DF6	[FB80 BDF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_251)
{
    // 3DF6 0061;	
    // (㷶) CJK UNIFIED IDEOGRAPH-3DF6	[FB80 BDF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_252)
{
    // 3DF6 0041;	
    // (㷶) CJK UNIFIED IDEOGRAPH-3DF6	[FB80 BDF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DF6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_253)
{
    // 3DF6 0062;	
    // (㷶) CJK UNIFIED IDEOGRAPH-3DF6	[FB80 BDF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_254)
{
    // 3DF7 0021;	
    // (㷷) CJK UNIFIED IDEOGRAPH-3DF7	[FB80 BDF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_255)
{
    // 3DF7 003F;	
    // (㷷) CJK UNIFIED IDEOGRAPH-3DF7	[FB80 BDF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_256)
{
    // 3DF7 0061;	
    // (㷷) CJK UNIFIED IDEOGRAPH-3DF7	[FB80 BDF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_257)
{
    // 3DF7 0041;	
    // (㷷) CJK UNIFIED IDEOGRAPH-3DF7	[FB80 BDF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DF7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_258)
{
    // 3DF7 0062;	
    // (㷷) CJK UNIFIED IDEOGRAPH-3DF7	[FB80 BDF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_259)
{
    // 3DF8 0021;	
    // (㷸) CJK UNIFIED IDEOGRAPH-3DF8	[FB80 BDF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_260)
{
    // 3DF8 003F;	
    // (㷸) CJK UNIFIED IDEOGRAPH-3DF8	[FB80 BDF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_261)
{
    // 3DF8 0061;	
    // (㷸) CJK UNIFIED IDEOGRAPH-3DF8	[FB80 BDF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_262)
{
    // 3DF8 0041;	
    // (㷸) CJK UNIFIED IDEOGRAPH-3DF8	[FB80 BDF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DF8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_263)
{
    // 3DF8 0062;	
    // (㷸) CJK UNIFIED IDEOGRAPH-3DF8	[FB80 BDF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_264)
{
    // 3DF9 0021;	
    // (㷹) CJK UNIFIED IDEOGRAPH-3DF9	[FB80 BDF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_265)
{
    // 3DF9 003F;	
    // (㷹) CJK UNIFIED IDEOGRAPH-3DF9	[FB80 BDF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_266)
{
    // 3DF9 0061;	
    // (㷹) CJK UNIFIED IDEOGRAPH-3DF9	[FB80 BDF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_267)
{
    // 3DF9 0041;	
    // (㷹) CJK UNIFIED IDEOGRAPH-3DF9	[FB80 BDF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DF9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_268)
{
    // 3DF9 0062;	
    // (㷹) CJK UNIFIED IDEOGRAPH-3DF9	[FB80 BDF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DF9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_269)
{
    // 3DFA 0021;	
    // (㷺) CJK UNIFIED IDEOGRAPH-3DFA	[FB80 BDFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_270)
{
    // 3DFA 003F;	
    // (㷺) CJK UNIFIED IDEOGRAPH-3DFA	[FB80 BDFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_271)
{
    // 3DFA 0061;	
    // (㷺) CJK UNIFIED IDEOGRAPH-3DFA	[FB80 BDFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_272)
{
    // 3DFA 0041;	
    // (㷺) CJK UNIFIED IDEOGRAPH-3DFA	[FB80 BDFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DFA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_273)
{
    // 3DFA 0062;	
    // (㷺) CJK UNIFIED IDEOGRAPH-3DFA	[FB80 BDFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_274)
{
    // 3DFB 0021;	
    // (㷻) CJK UNIFIED IDEOGRAPH-3DFB	[FB80 BDFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_275)
{
    // 3DFB 003F;	
    // (㷻) CJK UNIFIED IDEOGRAPH-3DFB	[FB80 BDFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_276)
{
    // 3DFB 0061;	
    // (㷻) CJK UNIFIED IDEOGRAPH-3DFB	[FB80 BDFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_277)
{
    // 3DFB 0041;	
    // (㷻) CJK UNIFIED IDEOGRAPH-3DFB	[FB80 BDFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DFB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_278)
{
    // 3DFB 0062;	
    // (㷻) CJK UNIFIED IDEOGRAPH-3DFB	[FB80 BDFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_279)
{
    // 3DFC 0021;	
    // (㷼) CJK UNIFIED IDEOGRAPH-3DFC	[FB80 BDFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_280)
{
    // 3DFC 003F;	
    // (㷼) CJK UNIFIED IDEOGRAPH-3DFC	[FB80 BDFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_281)
{
    // 3DFC 0061;	
    // (㷼) CJK UNIFIED IDEOGRAPH-3DFC	[FB80 BDFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_282)
{
    // 3DFC 0041;	
    // (㷼) CJK UNIFIED IDEOGRAPH-3DFC	[FB80 BDFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DFC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_283)
{
    // 3DFC 0062;	
    // (㷼) CJK UNIFIED IDEOGRAPH-3DFC	[FB80 BDFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_284)
{
    // 3DFD 0021;	
    // (㷽) CJK UNIFIED IDEOGRAPH-3DFD	[FB80 BDFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_285)
{
    // 3DFD 003F;	
    // (㷽) CJK UNIFIED IDEOGRAPH-3DFD	[FB80 BDFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_286)
{
    // 3DFD 0061;	
    // (㷽) CJK UNIFIED IDEOGRAPH-3DFD	[FB80 BDFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_287)
{
    // 3DFD 0041;	
    // (㷽) CJK UNIFIED IDEOGRAPH-3DFD	[FB80 BDFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DFD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_288)
{
    // 3DFD 0062;	
    // (㷽) CJK UNIFIED IDEOGRAPH-3DFD	[FB80 BDFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_289)
{
    // 3DFE 0021;	
    // (㷾) CJK UNIFIED IDEOGRAPH-3DFE	[FB80 BDFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_290)
{
    // 3DFE 003F;	
    // (㷾) CJK UNIFIED IDEOGRAPH-3DFE	[FB80 BDFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_291)
{
    // 3DFE 0061;	
    // (㷾) CJK UNIFIED IDEOGRAPH-3DFE	[FB80 BDFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_292)
{
    // 3DFE 0041;	
    // (㷾) CJK UNIFIED IDEOGRAPH-3DFE	[FB80 BDFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DFE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_293)
{
    // 3DFE 0062;	
    // (㷾) CJK UNIFIED IDEOGRAPH-3DFE	[FB80 BDFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_294)
{
    // 3DFF 0021;	
    // (㷿) CJK UNIFIED IDEOGRAPH-3DFF	[FB80 BDFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_295)
{
    // 3DFF 003F;	
    // (㷿) CJK UNIFIED IDEOGRAPH-3DFF	[FB80 BDFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBDFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_296)
{
    // 3DFF 0061;	
    // (㷿) CJK UNIFIED IDEOGRAPH-3DFF	[FB80 BDFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_297)
{
    // 3DFF 0041;	
    // (㷿) CJK UNIFIED IDEOGRAPH-3DFF	[FB80 BDFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3DFF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_298)
{
    // 3DFF 0062;	
    // (㷿) CJK UNIFIED IDEOGRAPH-3DFF	[FB80 BDFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3DFF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBDFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_299)
{
    // 3E00 0021;	
    // (㸀) CJK UNIFIED IDEOGRAPH-3E00	[FB80 BE00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E00, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_300)
{
    // 3E00 003F;	
    // (㸀) CJK UNIFIED IDEOGRAPH-3E00	[FB80 BE00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E00, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_301)
{
    // 3E00 0061;	
    // (㸀) CJK UNIFIED IDEOGRAPH-3E00	[FB80 BE00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E00, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_302)
{
    // 3E00 0041;	
    // (㸀) CJK UNIFIED IDEOGRAPH-3E00	[FB80 BE00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E00, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_303)
{
    // 3E00 0062;	
    // (㸀) CJK UNIFIED IDEOGRAPH-3E00	[FB80 BE00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E00, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_304)
{
    // 3E01 0021;	
    // (㸁) CJK UNIFIED IDEOGRAPH-3E01	[FB80 BE01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E01, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_305)
{
    // 3E01 003F;	
    // (㸁) CJK UNIFIED IDEOGRAPH-3E01	[FB80 BE01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E01, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_306)
{
    // 3E01 0061;	
    // (㸁) CJK UNIFIED IDEOGRAPH-3E01	[FB80 BE01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E01, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_307)
{
    // 3E01 0041;	
    // (㸁) CJK UNIFIED IDEOGRAPH-3E01	[FB80 BE01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E01, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_308)
{
    // 3E01 0062;	
    // (㸁) CJK UNIFIED IDEOGRAPH-3E01	[FB80 BE01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E01, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_309)
{
    // 3E02 0021;	
    // (㸂) CJK UNIFIED IDEOGRAPH-3E02	[FB80 BE02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E02, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_310)
{
    // 3E02 003F;	
    // (㸂) CJK UNIFIED IDEOGRAPH-3E02	[FB80 BE02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E02, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_311)
{
    // 3E02 0061;	
    // (㸂) CJK UNIFIED IDEOGRAPH-3E02	[FB80 BE02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E02, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_312)
{
    // 3E02 0041;	
    // (㸂) CJK UNIFIED IDEOGRAPH-3E02	[FB80 BE02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E02, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_313)
{
    // 3E02 0062;	
    // (㸂) CJK UNIFIED IDEOGRAPH-3E02	[FB80 BE02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E02, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_314)
{
    // 3E03 0021;	
    // (㸃) CJK UNIFIED IDEOGRAPH-3E03	[FB80 BE03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E03, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_315)
{
    // 3E03 003F;	
    // (㸃) CJK UNIFIED IDEOGRAPH-3E03	[FB80 BE03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E03, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_316)
{
    // 3E03 0061;	
    // (㸃) CJK UNIFIED IDEOGRAPH-3E03	[FB80 BE03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E03, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_317)
{
    // 3E03 0041;	
    // (㸃) CJK UNIFIED IDEOGRAPH-3E03	[FB80 BE03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E03, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_318)
{
    // 3E03 0062;	
    // (㸃) CJK UNIFIED IDEOGRAPH-3E03	[FB80 BE03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E03, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_319)
{
    // 3E04 0021;	
    // (㸄) CJK UNIFIED IDEOGRAPH-3E04	[FB80 BE04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E04, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_320)
{
    // 3E04 003F;	
    // (㸄) CJK UNIFIED IDEOGRAPH-3E04	[FB80 BE04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E04, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_321)
{
    // 3E04 0061;	
    // (㸄) CJK UNIFIED IDEOGRAPH-3E04	[FB80 BE04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E04, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_322)
{
    // 3E04 0041;	
    // (㸄) CJK UNIFIED IDEOGRAPH-3E04	[FB80 BE04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E04, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_323)
{
    // 3E04 0062;	
    // (㸄) CJK UNIFIED IDEOGRAPH-3E04	[FB80 BE04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E04, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_324)
{
    // 3E05 0021;	
    // (㸅) CJK UNIFIED IDEOGRAPH-3E05	[FB80 BE05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E05, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_325)
{
    // 3E05 003F;	
    // (㸅) CJK UNIFIED IDEOGRAPH-3E05	[FB80 BE05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E05, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_326)
{
    // 3E05 0061;	
    // (㸅) CJK UNIFIED IDEOGRAPH-3E05	[FB80 BE05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E05, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_327)
{
    // 3E05 0041;	
    // (㸅) CJK UNIFIED IDEOGRAPH-3E05	[FB80 BE05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E05, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_328)
{
    // 3E05 0062;	
    // (㸅) CJK UNIFIED IDEOGRAPH-3E05	[FB80 BE05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E05, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_329)
{
    // 3E06 0021;	
    // (㸆) CJK UNIFIED IDEOGRAPH-3E06	[FB80 BE06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E06, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_330)
{
    // 3E06 003F;	
    // (㸆) CJK UNIFIED IDEOGRAPH-3E06	[FB80 BE06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E06, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_331)
{
    // 3E06 0061;	
    // (㸆) CJK UNIFIED IDEOGRAPH-3E06	[FB80 BE06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E06, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_332)
{
    // 3E06 0041;	
    // (㸆) CJK UNIFIED IDEOGRAPH-3E06	[FB80 BE06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E06, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_333)
{
    // 3E06 0062;	
    // (㸆) CJK UNIFIED IDEOGRAPH-3E06	[FB80 BE06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E06, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_334)
{
    // 3E07 0021;	
    // (㸇) CJK UNIFIED IDEOGRAPH-3E07	[FB80 BE07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E07, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_335)
{
    // 3E07 003F;	
    // (㸇) CJK UNIFIED IDEOGRAPH-3E07	[FB80 BE07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E07, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_336)
{
    // 3E07 0061;	
    // (㸇) CJK UNIFIED IDEOGRAPH-3E07	[FB80 BE07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E07, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_337)
{
    // 3E07 0041;	
    // (㸇) CJK UNIFIED IDEOGRAPH-3E07	[FB80 BE07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E07, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_338)
{
    // 3E07 0062;	
    // (㸇) CJK UNIFIED IDEOGRAPH-3E07	[FB80 BE07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E07, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_339)
{
    // 3E08 0021;	
    // (㸈) CJK UNIFIED IDEOGRAPH-3E08	[FB80 BE08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E08, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_340)
{
    // 3E08 003F;	
    // (㸈) CJK UNIFIED IDEOGRAPH-3E08	[FB80 BE08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E08, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_341)
{
    // 3E08 0061;	
    // (㸈) CJK UNIFIED IDEOGRAPH-3E08	[FB80 BE08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E08, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_342)
{
    // 3E08 0041;	
    // (㸈) CJK UNIFIED IDEOGRAPH-3E08	[FB80 BE08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E08, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_343)
{
    // 3E08 0062;	
    // (㸈) CJK UNIFIED IDEOGRAPH-3E08	[FB80 BE08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E08, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_344)
{
    // 3E09 0021;	
    // (㸉) CJK UNIFIED IDEOGRAPH-3E09	[FB80 BE09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E09, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_345)
{
    // 3E09 003F;	
    // (㸉) CJK UNIFIED IDEOGRAPH-3E09	[FB80 BE09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E09, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_346)
{
    // 3E09 0061;	
    // (㸉) CJK UNIFIED IDEOGRAPH-3E09	[FB80 BE09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E09, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_347)
{
    // 3E09 0041;	
    // (㸉) CJK UNIFIED IDEOGRAPH-3E09	[FB80 BE09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E09, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_348)
{
    // 3E09 0062;	
    // (㸉) CJK UNIFIED IDEOGRAPH-3E09	[FB80 BE09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E09, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_349)
{
    // 3E0A 0021;	
    // (㸊) CJK UNIFIED IDEOGRAPH-3E0A	[FB80 BE0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_350)
{
    // 3E0A 003F;	
    // (㸊) CJK UNIFIED IDEOGRAPH-3E0A	[FB80 BE0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_351)
{
    // 3E0A 0061;	
    // (㸊) CJK UNIFIED IDEOGRAPH-3E0A	[FB80 BE0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_352)
{
    // 3E0A 0041;	
    // (㸊) CJK UNIFIED IDEOGRAPH-3E0A	[FB80 BE0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E0A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_353)
{
    // 3E0A 0062;	
    // (㸊) CJK UNIFIED IDEOGRAPH-3E0A	[FB80 BE0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_354)
{
    // 3E0B 0021;	
    // (㸋) CJK UNIFIED IDEOGRAPH-3E0B	[FB80 BE0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_355)
{
    // 3E0B 003F;	
    // (㸋) CJK UNIFIED IDEOGRAPH-3E0B	[FB80 BE0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_356)
{
    // 3E0B 0061;	
    // (㸋) CJK UNIFIED IDEOGRAPH-3E0B	[FB80 BE0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_357)
{
    // 3E0B 0041;	
    // (㸋) CJK UNIFIED IDEOGRAPH-3E0B	[FB80 BE0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E0B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_358)
{
    // 3E0B 0062;	
    // (㸋) CJK UNIFIED IDEOGRAPH-3E0B	[FB80 BE0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_359)
{
    // 3E0C 0021;	
    // (㸌) CJK UNIFIED IDEOGRAPH-3E0C	[FB80 BE0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_360)
{
    // 3E0C 003F;	
    // (㸌) CJK UNIFIED IDEOGRAPH-3E0C	[FB80 BE0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_361)
{
    // 3E0C 0061;	
    // (㸌) CJK UNIFIED IDEOGRAPH-3E0C	[FB80 BE0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_362)
{
    // 3E0C 0041;	
    // (㸌) CJK UNIFIED IDEOGRAPH-3E0C	[FB80 BE0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E0C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_363)
{
    // 3E0C 0062;	
    // (㸌) CJK UNIFIED IDEOGRAPH-3E0C	[FB80 BE0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_364)
{
    // 3E0D 0021;	
    // (㸍) CJK UNIFIED IDEOGRAPH-3E0D	[FB80 BE0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_365)
{
    // 3E0D 003F;	
    // (㸍) CJK UNIFIED IDEOGRAPH-3E0D	[FB80 BE0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_366)
{
    // 3E0D 0061;	
    // (㸍) CJK UNIFIED IDEOGRAPH-3E0D	[FB80 BE0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_367)
{
    // 3E0D 0041;	
    // (㸍) CJK UNIFIED IDEOGRAPH-3E0D	[FB80 BE0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E0D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_368)
{
    // 3E0D 0062;	
    // (㸍) CJK UNIFIED IDEOGRAPH-3E0D	[FB80 BE0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_369)
{
    // 3E0E 0021;	
    // (㸎) CJK UNIFIED IDEOGRAPH-3E0E	[FB80 BE0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_370)
{
    // 3E0E 003F;	
    // (㸎) CJK UNIFIED IDEOGRAPH-3E0E	[FB80 BE0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_371)
{
    // 3E0E 0061;	
    // (㸎) CJK UNIFIED IDEOGRAPH-3E0E	[FB80 BE0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_372)
{
    // 3E0E 0041;	
    // (㸎) CJK UNIFIED IDEOGRAPH-3E0E	[FB80 BE0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E0E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_373)
{
    // 3E0E 0062;	
    // (㸎) CJK UNIFIED IDEOGRAPH-3E0E	[FB80 BE0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_374)
{
    // 3E0F 0021;	
    // (㸏) CJK UNIFIED IDEOGRAPH-3E0F	[FB80 BE0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_375)
{
    // 3E0F 003F;	
    // (㸏) CJK UNIFIED IDEOGRAPH-3E0F	[FB80 BE0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_376)
{
    // 3E0F 0061;	
    // (㸏) CJK UNIFIED IDEOGRAPH-3E0F	[FB80 BE0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_377)
{
    // 3E0F 0041;	
    // (㸏) CJK UNIFIED IDEOGRAPH-3E0F	[FB80 BE0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E0F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_378)
{
    // 3E0F 0062;	
    // (㸏) CJK UNIFIED IDEOGRAPH-3E0F	[FB80 BE0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E0F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_379)
{
    // 3E10 0021;	
    // (㸐) CJK UNIFIED IDEOGRAPH-3E10	[FB80 BE10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E10, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_380)
{
    // 3E10 003F;	
    // (㸐) CJK UNIFIED IDEOGRAPH-3E10	[FB80 BE10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E10, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_381)
{
    // 3E10 0061;	
    // (㸐) CJK UNIFIED IDEOGRAPH-3E10	[FB80 BE10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E10, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_382)
{
    // 3E10 0041;	
    // (㸐) CJK UNIFIED IDEOGRAPH-3E10	[FB80 BE10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E10, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_383)
{
    // 3E10 0062;	
    // (㸐) CJK UNIFIED IDEOGRAPH-3E10	[FB80 BE10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E10, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_384)
{
    // 3E11 0021;	
    // (㸑) CJK UNIFIED IDEOGRAPH-3E11	[FB80 BE11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E11, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_385)
{
    // 3E11 003F;	
    // (㸑) CJK UNIFIED IDEOGRAPH-3E11	[FB80 BE11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E11, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_386)
{
    // 3E11 0061;	
    // (㸑) CJK UNIFIED IDEOGRAPH-3E11	[FB80 BE11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E11, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_387)
{
    // 3E11 0041;	
    // (㸑) CJK UNIFIED IDEOGRAPH-3E11	[FB80 BE11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E11, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_388)
{
    // 3E11 0062;	
    // (㸑) CJK UNIFIED IDEOGRAPH-3E11	[FB80 BE11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E11, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_389)
{
    // 3E12 0021;	
    // (㸒) CJK UNIFIED IDEOGRAPH-3E12	[FB80 BE12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E12, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_390)
{
    // 3E12 003F;	
    // (㸒) CJK UNIFIED IDEOGRAPH-3E12	[FB80 BE12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E12, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_391)
{
    // 3E12 0061;	
    // (㸒) CJK UNIFIED IDEOGRAPH-3E12	[FB80 BE12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E12, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_392)
{
    // 3E12 0041;	
    // (㸒) CJK UNIFIED IDEOGRAPH-3E12	[FB80 BE12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E12, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_393)
{
    // 3E12 0062;	
    // (㸒) CJK UNIFIED IDEOGRAPH-3E12	[FB80 BE12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E12, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_394)
{
    // 3E13 0021;	
    // (㸓) CJK UNIFIED IDEOGRAPH-3E13	[FB80 BE13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E13, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_395)
{
    // 3E13 003F;	
    // (㸓) CJK UNIFIED IDEOGRAPH-3E13	[FB80 BE13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E13, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_396)
{
    // 3E13 0061;	
    // (㸓) CJK UNIFIED IDEOGRAPH-3E13	[FB80 BE13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E13, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_397)
{
    // 3E13 0041;	
    // (㸓) CJK UNIFIED IDEOGRAPH-3E13	[FB80 BE13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E13, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_398)
{
    // 3E13 0062;	
    // (㸓) CJK UNIFIED IDEOGRAPH-3E13	[FB80 BE13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E13, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_399)
{
    // 3E14 0021;	
    // (㸔) CJK UNIFIED IDEOGRAPH-3E14	[FB80 BE14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E14, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_400)
{
    // 3E14 003F;	
    // (㸔) CJK UNIFIED IDEOGRAPH-3E14	[FB80 BE14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E14, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_401)
{
    // 3E14 0061;	
    // (㸔) CJK UNIFIED IDEOGRAPH-3E14	[FB80 BE14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E14, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_402)
{
    // 3E14 0041;	
    // (㸔) CJK UNIFIED IDEOGRAPH-3E14	[FB80 BE14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E14, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_403)
{
    // 3E14 0062;	
    // (㸔) CJK UNIFIED IDEOGRAPH-3E14	[FB80 BE14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E14, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_404)
{
    // 3E15 0021;	
    // (㸕) CJK UNIFIED IDEOGRAPH-3E15	[FB80 BE15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E15, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_405)
{
    // 3E15 003F;	
    // (㸕) CJK UNIFIED IDEOGRAPH-3E15	[FB80 BE15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E15, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_406)
{
    // 3E15 0061;	
    // (㸕) CJK UNIFIED IDEOGRAPH-3E15	[FB80 BE15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E15, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_407)
{
    // 3E15 0041;	
    // (㸕) CJK UNIFIED IDEOGRAPH-3E15	[FB80 BE15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E15, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_408)
{
    // 3E15 0062;	
    // (㸕) CJK UNIFIED IDEOGRAPH-3E15	[FB80 BE15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E15, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_409)
{
    // 3E16 0021;	
    // (㸖) CJK UNIFIED IDEOGRAPH-3E16	[FB80 BE16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E16, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_410)
{
    // 3E16 003F;	
    // (㸖) CJK UNIFIED IDEOGRAPH-3E16	[FB80 BE16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E16, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_411)
{
    // 3E16 0061;	
    // (㸖) CJK UNIFIED IDEOGRAPH-3E16	[FB80 BE16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E16, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_412)
{
    // 3E16 0041;	
    // (㸖) CJK UNIFIED IDEOGRAPH-3E16	[FB80 BE16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E16, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_413)
{
    // 3E16 0062;	
    // (㸖) CJK UNIFIED IDEOGRAPH-3E16	[FB80 BE16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E16, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_414)
{
    // 3E17 0021;	
    // (㸗) CJK UNIFIED IDEOGRAPH-3E17	[FB80 BE17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E17, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_415)
{
    // 3E17 003F;	
    // (㸗) CJK UNIFIED IDEOGRAPH-3E17	[FB80 BE17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E17, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_416)
{
    // 3E17 0061;	
    // (㸗) CJK UNIFIED IDEOGRAPH-3E17	[FB80 BE17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E17, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_417)
{
    // 3E17 0041;	
    // (㸗) CJK UNIFIED IDEOGRAPH-3E17	[FB80 BE17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E17, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_418)
{
    // 3E17 0062;	
    // (㸗) CJK UNIFIED IDEOGRAPH-3E17	[FB80 BE17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E17, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_419)
{
    // 3E18 0021;	
    // (㸘) CJK UNIFIED IDEOGRAPH-3E18	[FB80 BE18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E18, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_420)
{
    // 3E18 003F;	
    // (㸘) CJK UNIFIED IDEOGRAPH-3E18	[FB80 BE18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E18, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_421)
{
    // 3E18 0061;	
    // (㸘) CJK UNIFIED IDEOGRAPH-3E18	[FB80 BE18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E18, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_422)
{
    // 3E18 0041;	
    // (㸘) CJK UNIFIED IDEOGRAPH-3E18	[FB80 BE18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E18, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_423)
{
    // 3E18 0062;	
    // (㸘) CJK UNIFIED IDEOGRAPH-3E18	[FB80 BE18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E18, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_424)
{
    // 3E19 0021;	
    // (㸙) CJK UNIFIED IDEOGRAPH-3E19	[FB80 BE19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E19, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_425)
{
    // 3E19 003F;	
    // (㸙) CJK UNIFIED IDEOGRAPH-3E19	[FB80 BE19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E19, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_426)
{
    // 3E19 0061;	
    // (㸙) CJK UNIFIED IDEOGRAPH-3E19	[FB80 BE19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E19, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_427)
{
    // 3E19 0041;	
    // (㸙) CJK UNIFIED IDEOGRAPH-3E19	[FB80 BE19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E19, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_428)
{
    // 3E19 0062;	
    // (㸙) CJK UNIFIED IDEOGRAPH-3E19	[FB80 BE19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E19, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_429)
{
    // 3E1A 0021;	
    // (㸚) CJK UNIFIED IDEOGRAPH-3E1A	[FB80 BE1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_430)
{
    // 3E1A 003F;	
    // (㸚) CJK UNIFIED IDEOGRAPH-3E1A	[FB80 BE1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_431)
{
    // 3E1A 0061;	
    // (㸚) CJK UNIFIED IDEOGRAPH-3E1A	[FB80 BE1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_432)
{
    // 3E1A 0041;	
    // (㸚) CJK UNIFIED IDEOGRAPH-3E1A	[FB80 BE1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E1A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_433)
{
    // 3E1A 0062;	
    // (㸚) CJK UNIFIED IDEOGRAPH-3E1A	[FB80 BE1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_434)
{
    // 3E1B 0021;	
    // (㸛) CJK UNIFIED IDEOGRAPH-3E1B	[FB80 BE1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_435)
{
    // 3E1B 003F;	
    // (㸛) CJK UNIFIED IDEOGRAPH-3E1B	[FB80 BE1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_436)
{
    // 3E1B 0061;	
    // (㸛) CJK UNIFIED IDEOGRAPH-3E1B	[FB80 BE1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_437)
{
    // 3E1B 0041;	
    // (㸛) CJK UNIFIED IDEOGRAPH-3E1B	[FB80 BE1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E1B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_438)
{
    // 3E1B 0062;	
    // (㸛) CJK UNIFIED IDEOGRAPH-3E1B	[FB80 BE1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_439)
{
    // 3E1C 0021;	
    // (㸜) CJK UNIFIED IDEOGRAPH-3E1C	[FB80 BE1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_440)
{
    // 3E1C 003F;	
    // (㸜) CJK UNIFIED IDEOGRAPH-3E1C	[FB80 BE1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_441)
{
    // 3E1C 0061;	
    // (㸜) CJK UNIFIED IDEOGRAPH-3E1C	[FB80 BE1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_442)
{
    // 3E1C 0041;	
    // (㸜) CJK UNIFIED IDEOGRAPH-3E1C	[FB80 BE1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E1C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_443)
{
    // 3E1C 0062;	
    // (㸜) CJK UNIFIED IDEOGRAPH-3E1C	[FB80 BE1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_444)
{
    // 3E1D 0021;	
    // (㸝) CJK UNIFIED IDEOGRAPH-3E1D	[FB80 BE1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_445)
{
    // 3E1D 003F;	
    // (㸝) CJK UNIFIED IDEOGRAPH-3E1D	[FB80 BE1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_446)
{
    // 3E1D 0061;	
    // (㸝) CJK UNIFIED IDEOGRAPH-3E1D	[FB80 BE1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_447)
{
    // 3E1D 0041;	
    // (㸝) CJK UNIFIED IDEOGRAPH-3E1D	[FB80 BE1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E1D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_448)
{
    // 3E1D 0062;	
    // (㸝) CJK UNIFIED IDEOGRAPH-3E1D	[FB80 BE1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_449)
{
    // 3E1E 0021;	
    // (㸞) CJK UNIFIED IDEOGRAPH-3E1E	[FB80 BE1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_450)
{
    // 3E1E 003F;	
    // (㸞) CJK UNIFIED IDEOGRAPH-3E1E	[FB80 BE1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_451)
{
    // 3E1E 0061;	
    // (㸞) CJK UNIFIED IDEOGRAPH-3E1E	[FB80 BE1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_452)
{
    // 3E1E 0041;	
    // (㸞) CJK UNIFIED IDEOGRAPH-3E1E	[FB80 BE1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E1E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_453)
{
    // 3E1E 0062;	
    // (㸞) CJK UNIFIED IDEOGRAPH-3E1E	[FB80 BE1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_454)
{
    // 3E1F 0021;	
    // (㸟) CJK UNIFIED IDEOGRAPH-3E1F	[FB80 BE1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_455)
{
    // 3E1F 003F;	
    // (㸟) CJK UNIFIED IDEOGRAPH-3E1F	[FB80 BE1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_456)
{
    // 3E1F 0061;	
    // (㸟) CJK UNIFIED IDEOGRAPH-3E1F	[FB80 BE1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_457)
{
    // 3E1F 0041;	
    // (㸟) CJK UNIFIED IDEOGRAPH-3E1F	[FB80 BE1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E1F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_458)
{
    // 3E1F 0062;	
    // (㸟) CJK UNIFIED IDEOGRAPH-3E1F	[FB80 BE1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E1F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_459)
{
    // 3E20 0021;	
    // (㸠) CJK UNIFIED IDEOGRAPH-3E20	[FB80 BE20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E20, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_460)
{
    // 3E20 003F;	
    // (㸠) CJK UNIFIED IDEOGRAPH-3E20	[FB80 BE20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E20, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_461)
{
    // 3E20 0061;	
    // (㸠) CJK UNIFIED IDEOGRAPH-3E20	[FB80 BE20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E20, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_462)
{
    // 3E20 0041;	
    // (㸠) CJK UNIFIED IDEOGRAPH-3E20	[FB80 BE20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E20, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_463)
{
    // 3E20 0062;	
    // (㸠) CJK UNIFIED IDEOGRAPH-3E20	[FB80 BE20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E20, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_464)
{
    // 3E21 0021;	
    // (㸡) CJK UNIFIED IDEOGRAPH-3E21	[FB80 BE21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E21, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_465)
{
    // 3E21 003F;	
    // (㸡) CJK UNIFIED IDEOGRAPH-3E21	[FB80 BE21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E21, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_466)
{
    // 3E21 0061;	
    // (㸡) CJK UNIFIED IDEOGRAPH-3E21	[FB80 BE21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E21, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_467)
{
    // 3E21 0041;	
    // (㸡) CJK UNIFIED IDEOGRAPH-3E21	[FB80 BE21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E21, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_468)
{
    // 3E21 0062;	
    // (㸡) CJK UNIFIED IDEOGRAPH-3E21	[FB80 BE21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E21, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_469)
{
    // 3E22 0021;	
    // (㸢) CJK UNIFIED IDEOGRAPH-3E22	[FB80 BE22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E22, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_470)
{
    // 3E22 003F;	
    // (㸢) CJK UNIFIED IDEOGRAPH-3E22	[FB80 BE22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E22, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_471)
{
    // 3E22 0061;	
    // (㸢) CJK UNIFIED IDEOGRAPH-3E22	[FB80 BE22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E22, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_472)
{
    // 3E22 0041;	
    // (㸢) CJK UNIFIED IDEOGRAPH-3E22	[FB80 BE22 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E22, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_473)
{
    // 3E22 0062;	
    // (㸢) CJK UNIFIED IDEOGRAPH-3E22	[FB80 BE22 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E22, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE22, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_474)
{
    // 3E23 0021;	
    // (㸣) CJK UNIFIED IDEOGRAPH-3E23	[FB80 BE23 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E23, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE23, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_475)
{
    // 3E23 003F;	
    // (㸣) CJK UNIFIED IDEOGRAPH-3E23	[FB80 BE23 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E23, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE23, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_476)
{
    // 3E23 0061;	
    // (㸣) CJK UNIFIED IDEOGRAPH-3E23	[FB80 BE23 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E23, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_477)
{
    // 3E23 0041;	
    // (㸣) CJK UNIFIED IDEOGRAPH-3E23	[FB80 BE23 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E23, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_478)
{
    // 3E23 0062;	
    // (㸣) CJK UNIFIED IDEOGRAPH-3E23	[FB80 BE23 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E23, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE23, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_479)
{
    // 3E24 0021;	
    // (㸤) CJK UNIFIED IDEOGRAPH-3E24	[FB80 BE24 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E24, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE24, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_480)
{
    // 3E24 003F;	
    // (㸤) CJK UNIFIED IDEOGRAPH-3E24	[FB80 BE24 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E24, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE24, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_481)
{
    // 3E24 0061;	
    // (㸤) CJK UNIFIED IDEOGRAPH-3E24	[FB80 BE24 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E24, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_482)
{
    // 3E24 0041;	
    // (㸤) CJK UNIFIED IDEOGRAPH-3E24	[FB80 BE24 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E24, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_483)
{
    // 3E24 0062;	
    // (㸤) CJK UNIFIED IDEOGRAPH-3E24	[FB80 BE24 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E24, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE24, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_484)
{
    // 3E25 0021;	
    // (㸥) CJK UNIFIED IDEOGRAPH-3E25	[FB80 BE25 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E25, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE25, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_485)
{
    // 3E25 003F;	
    // (㸥) CJK UNIFIED IDEOGRAPH-3E25	[FB80 BE25 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E25, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE25, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_486)
{
    // 3E25 0061;	
    // (㸥) CJK UNIFIED IDEOGRAPH-3E25	[FB80 BE25 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E25, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_487)
{
    // 3E25 0041;	
    // (㸥) CJK UNIFIED IDEOGRAPH-3E25	[FB80 BE25 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E25, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_488)
{
    // 3E25 0062;	
    // (㸥) CJK UNIFIED IDEOGRAPH-3E25	[FB80 BE25 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E25, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE25, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_489)
{
    // 3E26 0021;	
    // (㸦) CJK UNIFIED IDEOGRAPH-3E26	[FB80 BE26 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E26, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE26, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_490)
{
    // 3E26 003F;	
    // (㸦) CJK UNIFIED IDEOGRAPH-3E26	[FB80 BE26 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E26, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE26, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_491)
{
    // 3E26 0061;	
    // (㸦) CJK UNIFIED IDEOGRAPH-3E26	[FB80 BE26 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E26, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_492)
{
    // 3E26 0041;	
    // (㸦) CJK UNIFIED IDEOGRAPH-3E26	[FB80 BE26 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E26, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_493)
{
    // 3E26 0062;	
    // (㸦) CJK UNIFIED IDEOGRAPH-3E26	[FB80 BE26 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E26, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE26, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_494)
{
    // 3E27 0021;	
    // (㸧) CJK UNIFIED IDEOGRAPH-3E27	[FB80 BE27 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E27, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE27, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_495)
{
    // 3E27 003F;	
    // (㸧) CJK UNIFIED IDEOGRAPH-3E27	[FB80 BE27 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E27, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xBE27, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_496)
{
    // 3E27 0061;	
    // (㸧) CJK UNIFIED IDEOGRAPH-3E27	[FB80 BE27 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E27, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xBE27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_497)
{
    // 3E27 0041;	
    // (㸧) CJK UNIFIED IDEOGRAPH-3E27	[FB80 BE27 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3E27, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xBE27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_498)
{
    // 3E27 0062;	
    // (㸧) CJK UNIFIED IDEOGRAPH-3E27	[FB80 BE27 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E27, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xBE27, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_352_499)
{
    // 3E28 0021;	
    // (㸨) CJK UNIFIED IDEOGRAPH-3E28	[FB80 BE28 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3E28, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xBE28, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

