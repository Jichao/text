// Warning! This file is autogenerated.
#include <boost/text/grapheme_iterator.hpp>

#include <gtest/gtest.h>

#include <algorithm>



TEST(grapheme, iterator_14_0_fwd)
{
    // ÷ 2640 ÷ 0378 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_0_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_0_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x2640, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_0_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x2640, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_1_fwd)
{
    // ÷ 2640 × 0308 ÷ 0378 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_1_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_1_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x2640, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_1_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x2640, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_2_fwd)
{
    // ÷ 2640 ÷ D800 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_2_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_2_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x2640, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_2_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x2640, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_3_fwd)
{
    // ÷ 2640 × 0308 ÷ D800 ÷	
    // ÷ [0.2] FEMALE SIGN (Glue_After_Zwj) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x2640, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_3_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x2640, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_3_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x2640, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_3_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x2640, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_4_fwd)
{
    // ÷ 1F466 ÷ 0020 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] SPACE (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_4_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_4_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_4_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_5_fwd)
{
    // ÷ 1F466 × 0308 ÷ 0020 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] SPACE (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_5_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_5_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_5_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_6_fwd)
{
    // ÷ 1F466 ÷ 000D ÷	
    // ÷ [0.2] BOY (EBG) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_6_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_6_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_6_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_7_fwd)
{
    // ÷ 1F466 × 0308 ÷ 000D ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_7_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_7_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_7_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_8_fwd)
{
    // ÷ 1F466 ÷ 000A ÷	
    // ÷ [0.2] BOY (EBG) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_8_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_8_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_8_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_9_fwd)
{
    // ÷ 1F466 × 0308 ÷ 000A ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_9_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_9_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_9_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_10_fwd)
{
    // ÷ 1F466 ÷ 0001 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [5.0] <START OF HEADING> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_10_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_10_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_10_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_11_fwd)
{
    // ÷ 1F466 × 0308 ÷ 0001 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <START OF HEADING> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_11_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_11_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_11_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0001 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_12_fwd)
{
    // ÷ 1F466 × 0300 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING GRAVE ACCENT (Extend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_12_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_12_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_12_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_13_fwd)
{
    // ÷ 1F466 × 0308 × 0300 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) × [9.0] COMBINING GRAVE ACCENT (Extend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_13_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }
}
TEST(grapheme, iterator_14_13_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }
}
TEST(grapheme, iterator_14_13_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0300 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_14_fwd)
{
    // ÷ 1F466 ÷ 0600 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] ARABIC NUMBER SIGN (Prepend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_14_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_14_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_14_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_15_fwd)
{
    // ÷ 1F466 × 0308 ÷ 0600 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] ARABIC NUMBER SIGN (Prepend) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_15_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_15_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_15_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0600 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_16_fwd)
{
    // ÷ 1F466 × 0903 ÷	
    // ÷ [0.2] BOY (EBG) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_16_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_16_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_16_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_17_fwd)
{
    // ÷ 1F466 × 0308 × 0903 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) × [9.1] DEVANAGARI SIGN VISARGA (SpacingMark) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_17_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }
}
TEST(grapheme, iterator_14_17_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }
}
TEST(grapheme, iterator_14_17_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0903 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_18_fwd)
{
    // ÷ 1F466 ÷ 1100 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_18_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_18_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_18_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_19_fwd)
{
    // ÷ 1F466 × 0308 ÷ 1100 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL CHOSEONG KIYEOK (L) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_19_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_19_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_19_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1100 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_20_fwd)
{
    // ÷ 1F466 ÷ 1160 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_20_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_20_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_20_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_21_fwd)
{
    // ÷ 1F466 × 0308 ÷ 1160 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JUNGSEONG FILLER (V) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_21_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_21_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_21_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1160 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_22_fwd)
{
    // ÷ 1F466 ÷ 11A8 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_22_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_22_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_22_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_23_fwd)
{
    // ÷ 1F466 × 0308 ÷ 11A8 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL JONGSEONG KIYEOK (T) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_23_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_23_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_23_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x11A8 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_24_fwd)
{
    // ÷ 1F466 ÷ AC00 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_24_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_24_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_24_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_25_fwd)
{
    // ÷ 1F466 × 0308 ÷ AC00 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GA (LV) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_25_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_25_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_25_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0308, 0xAC00 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_26_fwd)
{
    // ÷ 1F466 ÷ AC01 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_26_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_26_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_26_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_27_fwd)
{
    // ÷ 1F466 × 0308 ÷ AC01 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] HANGUL SYLLABLE GAG (LVT) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_27_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_27_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_27_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0308, 0xAC01 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_28_fwd)
{
    // ÷ 1F466 ÷ 1F1E6 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_28_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_28_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_28_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_29_fwd)
{
    // ÷ 1F466 × 0308 ÷ 1F1E6 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] REGIONAL INDICATOR SYMBOL LETTER A (RI) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_29_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_29_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_29_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1F1E6 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_30_fwd)
{
    // ÷ 1F466 ÷ 261D ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_30_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_30_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_30_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_31_fwd)
{
    // ÷ 1F466 × 0308 ÷ 261D ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] WHITE UP POINTING INDEX (E_Base) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_31_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_31_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_31_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x261D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_32_fwd)
{
    // ÷ 1F466 × 1F3FB ÷	
    // ÷ [0.2] BOY (EBG) × [10.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_32_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_32_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_32_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_33_fwd)
{
    // ÷ 1F466 × 0308 × 1F3FB ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) × [10.0] EMOJI MODIFIER FITZPATRICK TYPE-1-2 (E_Modifier) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_33_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }
}
TEST(grapheme, iterator_14_33_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }
}
TEST(grapheme, iterator_14_33_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1F3FB };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_34_fwd)
{
    // ÷ 1F466 × 200D ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] ZERO WIDTH JOINER (ZWJ) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_34_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_34_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_34_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_35_fwd)
{
    // ÷ 1F466 × 0308 × 200D ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) × [9.0] ZERO WIDTH JOINER (ZWJ) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_35_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }
}
TEST(grapheme, iterator_14_35_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);
    }
}
TEST(grapheme, iterator_14_35_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x200D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_36_fwd)
{
    // ÷ 1F466 ÷ 2640 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_36_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_36_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_36_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_37_fwd)
{
    // ÷ 1F466 × 0308 ÷ 2640 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] FEMALE SIGN (Glue_After_Zwj) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_37_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_37_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_37_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x2640 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_38_fwd)
{
    // ÷ 1F466 ÷ 1F466 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] BOY (EBG) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_38_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_38_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_38_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_39_fwd)
{
    // ÷ 1F466 × 0308 ÷ 1F466 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] BOY (EBG) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_39_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_39_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_39_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x1F466 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_40_fwd)
{
    // ÷ 1F466 ÷ 0378 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_40_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_40_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_40_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_41_fwd)
{
    // ÷ 1F466 × 0308 ÷ 0378 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] <reserved-0378> (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_41_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_41_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_41_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0308, 0x0378 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_42_fwd)
{
    // ÷ 1F466 ÷ D800 ÷	
    // ÷ [0.2] BOY (EBG) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_42_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_42_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_42_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_43_fwd)
{
    // ÷ 1F466 × 0308 ÷ D800 ÷	
    // ÷ [0.2] BOY (EBG) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <surrogate-D800> (Control) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x1F466, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_43_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x1F466, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_43_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x1F466, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_43_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x1F466, 0x0308, 0xD800 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_44_fwd)
{
    // ÷ 0378 ÷ 0020 ÷	
    // ÷ [0.2] <reserved-0378> (Other) ÷ [999.0] SPACE (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_44_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_44_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x0378, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_44_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x0378, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_45_fwd)
{
    // ÷ 0378 × 0308 ÷ 0020 ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [999.0] SPACE (Other) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_45_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_45_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x0378, 0x0308, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_45_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x0378, 0x0308, 0x0020 };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_46_fwd)
{
    // ÷ 0378 ÷ 000D ÷	
    // ÷ [0.2] <reserved-0378> (Other) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_46_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_46_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x0378, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_46_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x0378, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_47_fwd)
{
    // ÷ 0378 × 0308 ÷ 000D ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <CARRIAGE RETURN (CR)> (CR) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_47_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_47_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x0378, 0x0308, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_47_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x0378, 0x0308, 0x000D };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_48_fwd)
{
    // ÷ 0378 ÷ 000A ÷	
    // ÷ [0.2] <reserved-0378> (Other) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_48_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_48_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x0378, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 2);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);
    }
}
TEST(grapheme, iterator_14_48_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x0378, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 2, cps + 2);

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 1);

        ++it;

        EXPECT_EQ(it.base(), cps + 1);
        EXPECT_EQ((*it).begin(), cps + 1);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

TEST(grapheme, iterator_14_49_fwd)
{
    // ÷ 0378 × 0308 ÷ 000A ÷	
    // ÷ [0.2] <reserved-0378> (Other) × [9.0] COMBINING DIAERESIS (Extend) ÷ [5.0] <LINE FEED (LF)> (LF) ÷ [0.3]
    {
        uint32_t const cps[] = { 0x0378, 0x0308, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}
TEST(grapheme, iterator_14_49_rev)
{
    {
        // reverse
        uint32_t const cps[] = { 0x0378, 0x0308, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_49_fab)
{
    {
        // forth and back
        uint32_t const cps[] = { 0x0378, 0x0308, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps, cps + 3);

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);
    }
}
TEST(grapheme, iterator_14_49_baf)
{
    {
        // back and forth
        uint32_t const cps[] = { 0x0378, 0x0308, 0x000A };
        boost::text::grapheme_iterator<uint32_t const *> it(cps, cps + 3, cps + 3);

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());

        --it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        --it;

        EXPECT_EQ(it.base(), cps + 0);
        EXPECT_EQ((*it).begin(), cps + 0);
        EXPECT_EQ((*it).end(), cps + 2);

        ++it;

        EXPECT_EQ(it.base(), cps + 2);
        EXPECT_EQ((*it).begin(), cps + 2);
        EXPECT_EQ((*it).end(), cps + 3);

        ++it;

        EXPECT_EQ(it.base(), cps + 3);
        EXPECT_EQ((*it).begin(), (*it).end());
    }
}

