// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_364_000)
{
    // 4265 003F;	
    // (䉥) CJK UNIFIED IDEOGRAPH-4265	[FB80 C265 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4265, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC265, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_001)
{
    // 4265 0061;	
    // (䉥) CJK UNIFIED IDEOGRAPH-4265	[FB80 C265 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4265, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC265, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_002)
{
    // 4265 0041;	
    // (䉥) CJK UNIFIED IDEOGRAPH-4265	[FB80 C265 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4265, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC265, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_003)
{
    // 4265 0062;	
    // (䉥) CJK UNIFIED IDEOGRAPH-4265	[FB80 C265 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4265, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC265, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_004)
{
    // 4266 0021;	
    // (䉦) CJK UNIFIED IDEOGRAPH-4266	[FB80 C266 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4266, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC266, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_005)
{
    // 4266 003F;	
    // (䉦) CJK UNIFIED IDEOGRAPH-4266	[FB80 C266 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4266, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC266, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_006)
{
    // 4266 0061;	
    // (䉦) CJK UNIFIED IDEOGRAPH-4266	[FB80 C266 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4266, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC266, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_007)
{
    // 4266 0041;	
    // (䉦) CJK UNIFIED IDEOGRAPH-4266	[FB80 C266 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4266, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC266, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_008)
{
    // 4266 0062;	
    // (䉦) CJK UNIFIED IDEOGRAPH-4266	[FB80 C266 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4266, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC266, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_009)
{
    // 4267 0021;	
    // (䉧) CJK UNIFIED IDEOGRAPH-4267	[FB80 C267 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4267, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC267, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_010)
{
    // 4267 003F;	
    // (䉧) CJK UNIFIED IDEOGRAPH-4267	[FB80 C267 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4267, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC267, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_011)
{
    // 4267 0061;	
    // (䉧) CJK UNIFIED IDEOGRAPH-4267	[FB80 C267 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4267, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC267, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_012)
{
    // 4267 0041;	
    // (䉧) CJK UNIFIED IDEOGRAPH-4267	[FB80 C267 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4267, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC267, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_013)
{
    // 4267 0062;	
    // (䉧) CJK UNIFIED IDEOGRAPH-4267	[FB80 C267 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4267, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC267, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_014)
{
    // 4268 0021;	
    // (䉨) CJK UNIFIED IDEOGRAPH-4268	[FB80 C268 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4268, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC268, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_015)
{
    // 4268 003F;	
    // (䉨) CJK UNIFIED IDEOGRAPH-4268	[FB80 C268 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4268, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC268, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_016)
{
    // 4268 0061;	
    // (䉨) CJK UNIFIED IDEOGRAPH-4268	[FB80 C268 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4268, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC268, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_017)
{
    // 4268 0041;	
    // (䉨) CJK UNIFIED IDEOGRAPH-4268	[FB80 C268 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4268, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC268, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_018)
{
    // 4268 0062;	
    // (䉨) CJK UNIFIED IDEOGRAPH-4268	[FB80 C268 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4268, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC268, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_019)
{
    // 4269 0021;	
    // (䉩) CJK UNIFIED IDEOGRAPH-4269	[FB80 C269 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4269, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC269, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_020)
{
    // 4269 003F;	
    // (䉩) CJK UNIFIED IDEOGRAPH-4269	[FB80 C269 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4269, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC269, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_021)
{
    // 4269 0061;	
    // (䉩) CJK UNIFIED IDEOGRAPH-4269	[FB80 C269 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4269, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC269, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_022)
{
    // 4269 0041;	
    // (䉩) CJK UNIFIED IDEOGRAPH-4269	[FB80 C269 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4269, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC269, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_023)
{
    // 4269 0062;	
    // (䉩) CJK UNIFIED IDEOGRAPH-4269	[FB80 C269 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4269, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC269, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_024)
{
    // 426A 0021;	
    // (䉪) CJK UNIFIED IDEOGRAPH-426A	[FB80 C26A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC26A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_025)
{
    // 426A 003F;	
    // (䉪) CJK UNIFIED IDEOGRAPH-426A	[FB80 C26A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC26A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_026)
{
    // 426A 0061;	
    // (䉪) CJK UNIFIED IDEOGRAPH-426A	[FB80 C26A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC26A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_027)
{
    // 426A 0041;	
    // (䉪) CJK UNIFIED IDEOGRAPH-426A	[FB80 C26A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x426A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC26A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_028)
{
    // 426A 0062;	
    // (䉪) CJK UNIFIED IDEOGRAPH-426A	[FB80 C26A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC26A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_029)
{
    // 426B 0021;	
    // (䉫) CJK UNIFIED IDEOGRAPH-426B	[FB80 C26B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC26B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_030)
{
    // 426B 003F;	
    // (䉫) CJK UNIFIED IDEOGRAPH-426B	[FB80 C26B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC26B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_031)
{
    // 426B 0061;	
    // (䉫) CJK UNIFIED IDEOGRAPH-426B	[FB80 C26B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC26B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_032)
{
    // 426B 0041;	
    // (䉫) CJK UNIFIED IDEOGRAPH-426B	[FB80 C26B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x426B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC26B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_033)
{
    // 426B 0062;	
    // (䉫) CJK UNIFIED IDEOGRAPH-426B	[FB80 C26B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC26B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_034)
{
    // 426C 0021;	
    // (䉬) CJK UNIFIED IDEOGRAPH-426C	[FB80 C26C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC26C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_035)
{
    // 426C 003F;	
    // (䉬) CJK UNIFIED IDEOGRAPH-426C	[FB80 C26C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC26C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_036)
{
    // 426C 0061;	
    // (䉬) CJK UNIFIED IDEOGRAPH-426C	[FB80 C26C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC26C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_037)
{
    // 426C 0041;	
    // (䉬) CJK UNIFIED IDEOGRAPH-426C	[FB80 C26C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x426C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC26C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_038)
{
    // 426C 0062;	
    // (䉬) CJK UNIFIED IDEOGRAPH-426C	[FB80 C26C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC26C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_039)
{
    // 426D 0021;	
    // (䉭) CJK UNIFIED IDEOGRAPH-426D	[FB80 C26D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC26D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_040)
{
    // 426D 003F;	
    // (䉭) CJK UNIFIED IDEOGRAPH-426D	[FB80 C26D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC26D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_041)
{
    // 426D 0061;	
    // (䉭) CJK UNIFIED IDEOGRAPH-426D	[FB80 C26D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC26D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_042)
{
    // 426D 0041;	
    // (䉭) CJK UNIFIED IDEOGRAPH-426D	[FB80 C26D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x426D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC26D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_043)
{
    // 426D 0062;	
    // (䉭) CJK UNIFIED IDEOGRAPH-426D	[FB80 C26D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC26D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_044)
{
    // 426E 0021;	
    // (䉮) CJK UNIFIED IDEOGRAPH-426E	[FB80 C26E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC26E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_045)
{
    // 426E 003F;	
    // (䉮) CJK UNIFIED IDEOGRAPH-426E	[FB80 C26E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC26E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_046)
{
    // 426E 0061;	
    // (䉮) CJK UNIFIED IDEOGRAPH-426E	[FB80 C26E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC26E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_047)
{
    // 426E 0041;	
    // (䉮) CJK UNIFIED IDEOGRAPH-426E	[FB80 C26E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x426E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC26E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_048)
{
    // 426E 0062;	
    // (䉮) CJK UNIFIED IDEOGRAPH-426E	[FB80 C26E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC26E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_049)
{
    // 426F 0021;	
    // (䉯) CJK UNIFIED IDEOGRAPH-426F	[FB80 C26F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC26F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_050)
{
    // 426F 003F;	
    // (䉯) CJK UNIFIED IDEOGRAPH-426F	[FB80 C26F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC26F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_051)
{
    // 426F 0061;	
    // (䉯) CJK UNIFIED IDEOGRAPH-426F	[FB80 C26F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC26F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_052)
{
    // 426F 0041;	
    // (䉯) CJK UNIFIED IDEOGRAPH-426F	[FB80 C26F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x426F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC26F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_053)
{
    // 426F 0062;	
    // (䉯) CJK UNIFIED IDEOGRAPH-426F	[FB80 C26F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x426F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC26F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_054)
{
    // 4270 0021;	
    // (䉰) CJK UNIFIED IDEOGRAPH-4270	[FB80 C270 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4270, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC270, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_055)
{
    // 4270 003F;	
    // (䉰) CJK UNIFIED IDEOGRAPH-4270	[FB80 C270 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4270, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC270, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_056)
{
    // 4270 0061;	
    // (䉰) CJK UNIFIED IDEOGRAPH-4270	[FB80 C270 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4270, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC270, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_057)
{
    // 4270 0041;	
    // (䉰) CJK UNIFIED IDEOGRAPH-4270	[FB80 C270 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4270, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC270, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_058)
{
    // 4270 0062;	
    // (䉰) CJK UNIFIED IDEOGRAPH-4270	[FB80 C270 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4270, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC270, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_059)
{
    // 4271 0021;	
    // (䉱) CJK UNIFIED IDEOGRAPH-4271	[FB80 C271 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4271, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC271, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_060)
{
    // 4271 003F;	
    // (䉱) CJK UNIFIED IDEOGRAPH-4271	[FB80 C271 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4271, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC271, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_061)
{
    // 4271 0061;	
    // (䉱) CJK UNIFIED IDEOGRAPH-4271	[FB80 C271 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4271, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC271, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_062)
{
    // 4271 0041;	
    // (䉱) CJK UNIFIED IDEOGRAPH-4271	[FB80 C271 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4271, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC271, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_063)
{
    // 4271 0062;	
    // (䉱) CJK UNIFIED IDEOGRAPH-4271	[FB80 C271 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4271, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC271, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_064)
{
    // 4272 0021;	
    // (䉲) CJK UNIFIED IDEOGRAPH-4272	[FB80 C272 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4272, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC272, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_065)
{
    // 4272 003F;	
    // (䉲) CJK UNIFIED IDEOGRAPH-4272	[FB80 C272 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4272, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC272, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_066)
{
    // 4272 0061;	
    // (䉲) CJK UNIFIED IDEOGRAPH-4272	[FB80 C272 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4272, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC272, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_067)
{
    // 4272 0041;	
    // (䉲) CJK UNIFIED IDEOGRAPH-4272	[FB80 C272 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4272, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC272, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_068)
{
    // 4272 0062;	
    // (䉲) CJK UNIFIED IDEOGRAPH-4272	[FB80 C272 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4272, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC272, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_069)
{
    // 4273 0021;	
    // (䉳) CJK UNIFIED IDEOGRAPH-4273	[FB80 C273 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4273, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC273, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_070)
{
    // 4273 003F;	
    // (䉳) CJK UNIFIED IDEOGRAPH-4273	[FB80 C273 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4273, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC273, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_071)
{
    // 4273 0061;	
    // (䉳) CJK UNIFIED IDEOGRAPH-4273	[FB80 C273 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4273, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC273, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_072)
{
    // 4273 0041;	
    // (䉳) CJK UNIFIED IDEOGRAPH-4273	[FB80 C273 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4273, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC273, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_073)
{
    // 4273 0062;	
    // (䉳) CJK UNIFIED IDEOGRAPH-4273	[FB80 C273 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4273, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC273, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_074)
{
    // 4274 0021;	
    // (䉴) CJK UNIFIED IDEOGRAPH-4274	[FB80 C274 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4274, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC274, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_075)
{
    // 4274 003F;	
    // (䉴) CJK UNIFIED IDEOGRAPH-4274	[FB80 C274 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4274, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC274, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_076)
{
    // 4274 0061;	
    // (䉴) CJK UNIFIED IDEOGRAPH-4274	[FB80 C274 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4274, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC274, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_077)
{
    // 4274 0041;	
    // (䉴) CJK UNIFIED IDEOGRAPH-4274	[FB80 C274 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4274, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC274, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_078)
{
    // 4274 0062;	
    // (䉴) CJK UNIFIED IDEOGRAPH-4274	[FB80 C274 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4274, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC274, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_079)
{
    // 4275 0021;	
    // (䉵) CJK UNIFIED IDEOGRAPH-4275	[FB80 C275 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4275, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC275, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_080)
{
    // 4275 003F;	
    // (䉵) CJK UNIFIED IDEOGRAPH-4275	[FB80 C275 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4275, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC275, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_081)
{
    // 4275 0061;	
    // (䉵) CJK UNIFIED IDEOGRAPH-4275	[FB80 C275 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4275, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC275, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_082)
{
    // 4275 0041;	
    // (䉵) CJK UNIFIED IDEOGRAPH-4275	[FB80 C275 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4275, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC275, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_083)
{
    // 4275 0062;	
    // (䉵) CJK UNIFIED IDEOGRAPH-4275	[FB80 C275 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4275, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC275, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_084)
{
    // 4276 0021;	
    // (䉶) CJK UNIFIED IDEOGRAPH-4276	[FB80 C276 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4276, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC276, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_085)
{
    // 4276 003F;	
    // (䉶) CJK UNIFIED IDEOGRAPH-4276	[FB80 C276 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4276, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC276, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_086)
{
    // 4276 0061;	
    // (䉶) CJK UNIFIED IDEOGRAPH-4276	[FB80 C276 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4276, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC276, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_087)
{
    // 4276 0041;	
    // (䉶) CJK UNIFIED IDEOGRAPH-4276	[FB80 C276 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4276, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC276, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_088)
{
    // 4276 0062;	
    // (䉶) CJK UNIFIED IDEOGRAPH-4276	[FB80 C276 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4276, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC276, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_089)
{
    // 4277 0021;	
    // (䉷) CJK UNIFIED IDEOGRAPH-4277	[FB80 C277 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4277, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC277, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_090)
{
    // 4277 003F;	
    // (䉷) CJK UNIFIED IDEOGRAPH-4277	[FB80 C277 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4277, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC277, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_091)
{
    // 4277 0061;	
    // (䉷) CJK UNIFIED IDEOGRAPH-4277	[FB80 C277 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4277, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC277, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_092)
{
    // 4277 0041;	
    // (䉷) CJK UNIFIED IDEOGRAPH-4277	[FB80 C277 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4277, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC277, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_093)
{
    // 4277 0062;	
    // (䉷) CJK UNIFIED IDEOGRAPH-4277	[FB80 C277 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4277, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC277, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_094)
{
    // 4278 0021;	
    // (䉸) CJK UNIFIED IDEOGRAPH-4278	[FB80 C278 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4278, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC278, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_095)
{
    // 4278 003F;	
    // (䉸) CJK UNIFIED IDEOGRAPH-4278	[FB80 C278 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4278, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC278, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_096)
{
    // 4278 0061;	
    // (䉸) CJK UNIFIED IDEOGRAPH-4278	[FB80 C278 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4278, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_097)
{
    // 4278 0041;	
    // (䉸) CJK UNIFIED IDEOGRAPH-4278	[FB80 C278 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4278, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC278, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_098)
{
    // 4278 0062;	
    // (䉸) CJK UNIFIED IDEOGRAPH-4278	[FB80 C278 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4278, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC278, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_099)
{
    // 4279 0021;	
    // (䉹) CJK UNIFIED IDEOGRAPH-4279	[FB80 C279 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4279, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC279, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_100)
{
    // 4279 003F;	
    // (䉹) CJK UNIFIED IDEOGRAPH-4279	[FB80 C279 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4279, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC279, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_101)
{
    // 4279 0061;	
    // (䉹) CJK UNIFIED IDEOGRAPH-4279	[FB80 C279 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4279, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC279, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_102)
{
    // 4279 0041;	
    // (䉹) CJK UNIFIED IDEOGRAPH-4279	[FB80 C279 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4279, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC279, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_103)
{
    // 4279 0062;	
    // (䉹) CJK UNIFIED IDEOGRAPH-4279	[FB80 C279 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4279, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC279, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_104)
{
    // 427A 0021;	
    // (䉺) CJK UNIFIED IDEOGRAPH-427A	[FB80 C27A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC27A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_105)
{
    // 427A 003F;	
    // (䉺) CJK UNIFIED IDEOGRAPH-427A	[FB80 C27A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC27A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_106)
{
    // 427A 0061;	
    // (䉺) CJK UNIFIED IDEOGRAPH-427A	[FB80 C27A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC27A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_107)
{
    // 427A 0041;	
    // (䉺) CJK UNIFIED IDEOGRAPH-427A	[FB80 C27A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x427A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC27A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_108)
{
    // 427A 0062;	
    // (䉺) CJK UNIFIED IDEOGRAPH-427A	[FB80 C27A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC27A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_109)
{
    // 427B 0021;	
    // (䉻) CJK UNIFIED IDEOGRAPH-427B	[FB80 C27B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC27B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_110)
{
    // 427B 003F;	
    // (䉻) CJK UNIFIED IDEOGRAPH-427B	[FB80 C27B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC27B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_111)
{
    // 427B 0061;	
    // (䉻) CJK UNIFIED IDEOGRAPH-427B	[FB80 C27B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC27B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_112)
{
    // 427B 0041;	
    // (䉻) CJK UNIFIED IDEOGRAPH-427B	[FB80 C27B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x427B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC27B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_113)
{
    // 427B 0062;	
    // (䉻) CJK UNIFIED IDEOGRAPH-427B	[FB80 C27B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC27B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_114)
{
    // 427C 0021;	
    // (䉼) CJK UNIFIED IDEOGRAPH-427C	[FB80 C27C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC27C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_115)
{
    // 427C 003F;	
    // (䉼) CJK UNIFIED IDEOGRAPH-427C	[FB80 C27C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC27C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_116)
{
    // 427C 0061;	
    // (䉼) CJK UNIFIED IDEOGRAPH-427C	[FB80 C27C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC27C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_117)
{
    // 427C 0041;	
    // (䉼) CJK UNIFIED IDEOGRAPH-427C	[FB80 C27C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x427C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC27C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_118)
{
    // 427C 0062;	
    // (䉼) CJK UNIFIED IDEOGRAPH-427C	[FB80 C27C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC27C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_119)
{
    // 427D 0021;	
    // (䉽) CJK UNIFIED IDEOGRAPH-427D	[FB80 C27D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC27D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_120)
{
    // 427D 003F;	
    // (䉽) CJK UNIFIED IDEOGRAPH-427D	[FB80 C27D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC27D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_121)
{
    // 427D 0061;	
    // (䉽) CJK UNIFIED IDEOGRAPH-427D	[FB80 C27D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC27D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_122)
{
    // 427D 0041;	
    // (䉽) CJK UNIFIED IDEOGRAPH-427D	[FB80 C27D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x427D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC27D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_123)
{
    // 427D 0062;	
    // (䉽) CJK UNIFIED IDEOGRAPH-427D	[FB80 C27D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC27D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_124)
{
    // 427E 0021;	
    // (䉾) CJK UNIFIED IDEOGRAPH-427E	[FB80 C27E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC27E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_125)
{
    // 427E 003F;	
    // (䉾) CJK UNIFIED IDEOGRAPH-427E	[FB80 C27E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC27E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_126)
{
    // 427E 0061;	
    // (䉾) CJK UNIFIED IDEOGRAPH-427E	[FB80 C27E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC27E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_127)
{
    // 427E 0041;	
    // (䉾) CJK UNIFIED IDEOGRAPH-427E	[FB80 C27E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x427E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC27E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_128)
{
    // 427E 0062;	
    // (䉾) CJK UNIFIED IDEOGRAPH-427E	[FB80 C27E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC27E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_129)
{
    // 427F 0021;	
    // (䉿) CJK UNIFIED IDEOGRAPH-427F	[FB80 C27F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC27F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_130)
{
    // 427F 003F;	
    // (䉿) CJK UNIFIED IDEOGRAPH-427F	[FB80 C27F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC27F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_131)
{
    // 427F 0061;	
    // (䉿) CJK UNIFIED IDEOGRAPH-427F	[FB80 C27F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC27F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_132)
{
    // 427F 0041;	
    // (䉿) CJK UNIFIED IDEOGRAPH-427F	[FB80 C27F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x427F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC27F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_133)
{
    // 427F 0062;	
    // (䉿) CJK UNIFIED IDEOGRAPH-427F	[FB80 C27F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x427F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC27F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_134)
{
    // 4280 0021;	
    // (䊀) CJK UNIFIED IDEOGRAPH-4280	[FB80 C280 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4280, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC280, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_135)
{
    // 4280 003F;	
    // (䊀) CJK UNIFIED IDEOGRAPH-4280	[FB80 C280 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4280, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC280, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_136)
{
    // 4280 0061;	
    // (䊀) CJK UNIFIED IDEOGRAPH-4280	[FB80 C280 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4280, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC280, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_137)
{
    // 4280 0041;	
    // (䊀) CJK UNIFIED IDEOGRAPH-4280	[FB80 C280 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4280, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC280, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_138)
{
    // 4280 0062;	
    // (䊀) CJK UNIFIED IDEOGRAPH-4280	[FB80 C280 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4280, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC280, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_139)
{
    // 4281 0021;	
    // (䊁) CJK UNIFIED IDEOGRAPH-4281	[FB80 C281 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4281, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC281, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_140)
{
    // 4281 003F;	
    // (䊁) CJK UNIFIED IDEOGRAPH-4281	[FB80 C281 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4281, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC281, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_141)
{
    // 4281 0061;	
    // (䊁) CJK UNIFIED IDEOGRAPH-4281	[FB80 C281 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4281, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC281, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_142)
{
    // 4281 0041;	
    // (䊁) CJK UNIFIED IDEOGRAPH-4281	[FB80 C281 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4281, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC281, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_143)
{
    // 4281 0062;	
    // (䊁) CJK UNIFIED IDEOGRAPH-4281	[FB80 C281 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4281, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC281, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_144)
{
    // 4282 0021;	
    // (䊂) CJK UNIFIED IDEOGRAPH-4282	[FB80 C282 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4282, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC282, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_145)
{
    // 4282 003F;	
    // (䊂) CJK UNIFIED IDEOGRAPH-4282	[FB80 C282 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4282, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC282, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_146)
{
    // 4282 0061;	
    // (䊂) CJK UNIFIED IDEOGRAPH-4282	[FB80 C282 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4282, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC282, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_147)
{
    // 4282 0041;	
    // (䊂) CJK UNIFIED IDEOGRAPH-4282	[FB80 C282 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4282, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC282, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_148)
{
    // 4282 0062;	
    // (䊂) CJK UNIFIED IDEOGRAPH-4282	[FB80 C282 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4282, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC282, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_149)
{
    // 4283 0021;	
    // (䊃) CJK UNIFIED IDEOGRAPH-4283	[FB80 C283 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4283, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC283, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_150)
{
    // 4283 003F;	
    // (䊃) CJK UNIFIED IDEOGRAPH-4283	[FB80 C283 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4283, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC283, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_151)
{
    // 4283 0061;	
    // (䊃) CJK UNIFIED IDEOGRAPH-4283	[FB80 C283 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4283, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC283, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_152)
{
    // 4283 0041;	
    // (䊃) CJK UNIFIED IDEOGRAPH-4283	[FB80 C283 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4283, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC283, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_153)
{
    // 4283 0062;	
    // (䊃) CJK UNIFIED IDEOGRAPH-4283	[FB80 C283 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4283, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC283, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_154)
{
    // 4284 0021;	
    // (䊄) CJK UNIFIED IDEOGRAPH-4284	[FB80 C284 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4284, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC284, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_155)
{
    // 4284 003F;	
    // (䊄) CJK UNIFIED IDEOGRAPH-4284	[FB80 C284 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4284, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC284, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_156)
{
    // 4284 0061;	
    // (䊄) CJK UNIFIED IDEOGRAPH-4284	[FB80 C284 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4284, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC284, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_157)
{
    // 4284 0041;	
    // (䊄) CJK UNIFIED IDEOGRAPH-4284	[FB80 C284 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4284, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC284, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_158)
{
    // 4284 0062;	
    // (䊄) CJK UNIFIED IDEOGRAPH-4284	[FB80 C284 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4284, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC284, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_159)
{
    // 4285 0021;	
    // (䊅) CJK UNIFIED IDEOGRAPH-4285	[FB80 C285 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4285, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC285, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_160)
{
    // 4285 003F;	
    // (䊅) CJK UNIFIED IDEOGRAPH-4285	[FB80 C285 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4285, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC285, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_161)
{
    // 4285 0061;	
    // (䊅) CJK UNIFIED IDEOGRAPH-4285	[FB80 C285 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4285, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC285, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_162)
{
    // 4285 0041;	
    // (䊅) CJK UNIFIED IDEOGRAPH-4285	[FB80 C285 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4285, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC285, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_163)
{
    // 4285 0062;	
    // (䊅) CJK UNIFIED IDEOGRAPH-4285	[FB80 C285 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4285, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC285, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_164)
{
    // 4286 0021;	
    // (䊆) CJK UNIFIED IDEOGRAPH-4286	[FB80 C286 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4286, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC286, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_165)
{
    // 4286 003F;	
    // (䊆) CJK UNIFIED IDEOGRAPH-4286	[FB80 C286 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4286, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC286, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_166)
{
    // 4286 0061;	
    // (䊆) CJK UNIFIED IDEOGRAPH-4286	[FB80 C286 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4286, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC286, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_167)
{
    // 4286 0041;	
    // (䊆) CJK UNIFIED IDEOGRAPH-4286	[FB80 C286 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4286, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC286, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_168)
{
    // 4286 0062;	
    // (䊆) CJK UNIFIED IDEOGRAPH-4286	[FB80 C286 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4286, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC286, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_169)
{
    // 4287 0021;	
    // (䊇) CJK UNIFIED IDEOGRAPH-4287	[FB80 C287 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4287, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC287, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_170)
{
    // 4287 003F;	
    // (䊇) CJK UNIFIED IDEOGRAPH-4287	[FB80 C287 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4287, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC287, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_171)
{
    // 4287 0061;	
    // (䊇) CJK UNIFIED IDEOGRAPH-4287	[FB80 C287 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4287, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC287, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_172)
{
    // 4287 0041;	
    // (䊇) CJK UNIFIED IDEOGRAPH-4287	[FB80 C287 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4287, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC287, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_173)
{
    // 4287 0062;	
    // (䊇) CJK UNIFIED IDEOGRAPH-4287	[FB80 C287 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4287, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC287, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_174)
{
    // 4288 0021;	
    // (䊈) CJK UNIFIED IDEOGRAPH-4288	[FB80 C288 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4288, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC288, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_175)
{
    // 4288 003F;	
    // (䊈) CJK UNIFIED IDEOGRAPH-4288	[FB80 C288 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4288, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC288, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_176)
{
    // 4288 0061;	
    // (䊈) CJK UNIFIED IDEOGRAPH-4288	[FB80 C288 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4288, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC288, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_177)
{
    // 4288 0041;	
    // (䊈) CJK UNIFIED IDEOGRAPH-4288	[FB80 C288 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4288, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC288, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_178)
{
    // 4288 0062;	
    // (䊈) CJK UNIFIED IDEOGRAPH-4288	[FB80 C288 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4288, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC288, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_179)
{
    // 4289 0021;	
    // (䊉) CJK UNIFIED IDEOGRAPH-4289	[FB80 C289 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4289, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC289, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_180)
{
    // 4289 003F;	
    // (䊉) CJK UNIFIED IDEOGRAPH-4289	[FB80 C289 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4289, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC289, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_181)
{
    // 4289 0061;	
    // (䊉) CJK UNIFIED IDEOGRAPH-4289	[FB80 C289 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4289, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC289, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_182)
{
    // 4289 0041;	
    // (䊉) CJK UNIFIED IDEOGRAPH-4289	[FB80 C289 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4289, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC289, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_183)
{
    // 4289 0062;	
    // (䊉) CJK UNIFIED IDEOGRAPH-4289	[FB80 C289 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4289, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC289, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_184)
{
    // 428A 0021;	
    // (䊊) CJK UNIFIED IDEOGRAPH-428A	[FB80 C28A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC28A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_185)
{
    // 428A 003F;	
    // (䊊) CJK UNIFIED IDEOGRAPH-428A	[FB80 C28A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC28A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_186)
{
    // 428A 0061;	
    // (䊊) CJK UNIFIED IDEOGRAPH-428A	[FB80 C28A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC28A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_187)
{
    // 428A 0041;	
    // (䊊) CJK UNIFIED IDEOGRAPH-428A	[FB80 C28A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x428A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC28A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_188)
{
    // 428A 0062;	
    // (䊊) CJK UNIFIED IDEOGRAPH-428A	[FB80 C28A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC28A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_189)
{
    // 428B 0021;	
    // (䊋) CJK UNIFIED IDEOGRAPH-428B	[FB80 C28B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC28B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_190)
{
    // 428B 003F;	
    // (䊋) CJK UNIFIED IDEOGRAPH-428B	[FB80 C28B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC28B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_191)
{
    // 428B 0061;	
    // (䊋) CJK UNIFIED IDEOGRAPH-428B	[FB80 C28B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC28B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_192)
{
    // 428B 0041;	
    // (䊋) CJK UNIFIED IDEOGRAPH-428B	[FB80 C28B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x428B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC28B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_193)
{
    // 428B 0062;	
    // (䊋) CJK UNIFIED IDEOGRAPH-428B	[FB80 C28B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC28B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_194)
{
    // 428C 0021;	
    // (䊌) CJK UNIFIED IDEOGRAPH-428C	[FB80 C28C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC28C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_195)
{
    // 428C 003F;	
    // (䊌) CJK UNIFIED IDEOGRAPH-428C	[FB80 C28C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC28C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_196)
{
    // 428C 0061;	
    // (䊌) CJK UNIFIED IDEOGRAPH-428C	[FB80 C28C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC28C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_197)
{
    // 428C 0041;	
    // (䊌) CJK UNIFIED IDEOGRAPH-428C	[FB80 C28C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x428C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC28C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_198)
{
    // 428C 0062;	
    // (䊌) CJK UNIFIED IDEOGRAPH-428C	[FB80 C28C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC28C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_199)
{
    // 428D 0021;	
    // (䊍) CJK UNIFIED IDEOGRAPH-428D	[FB80 C28D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC28D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_200)
{
    // 428D 003F;	
    // (䊍) CJK UNIFIED IDEOGRAPH-428D	[FB80 C28D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC28D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_201)
{
    // 428D 0061;	
    // (䊍) CJK UNIFIED IDEOGRAPH-428D	[FB80 C28D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC28D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_202)
{
    // 428D 0041;	
    // (䊍) CJK UNIFIED IDEOGRAPH-428D	[FB80 C28D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x428D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC28D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_203)
{
    // 428D 0062;	
    // (䊍) CJK UNIFIED IDEOGRAPH-428D	[FB80 C28D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC28D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_204)
{
    // 428E 0021;	
    // (䊎) CJK UNIFIED IDEOGRAPH-428E	[FB80 C28E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC28E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_205)
{
    // 428E 003F;	
    // (䊎) CJK UNIFIED IDEOGRAPH-428E	[FB80 C28E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC28E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_206)
{
    // 428E 0061;	
    // (䊎) CJK UNIFIED IDEOGRAPH-428E	[FB80 C28E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC28E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_207)
{
    // 428E 0041;	
    // (䊎) CJK UNIFIED IDEOGRAPH-428E	[FB80 C28E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x428E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC28E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_208)
{
    // 428E 0062;	
    // (䊎) CJK UNIFIED IDEOGRAPH-428E	[FB80 C28E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC28E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_209)
{
    // 428F 0021;	
    // (䊏) CJK UNIFIED IDEOGRAPH-428F	[FB80 C28F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC28F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_210)
{
    // 428F 003F;	
    // (䊏) CJK UNIFIED IDEOGRAPH-428F	[FB80 C28F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC28F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_211)
{
    // 428F 0061;	
    // (䊏) CJK UNIFIED IDEOGRAPH-428F	[FB80 C28F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC28F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_212)
{
    // 428F 0041;	
    // (䊏) CJK UNIFIED IDEOGRAPH-428F	[FB80 C28F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x428F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC28F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_213)
{
    // 428F 0062;	
    // (䊏) CJK UNIFIED IDEOGRAPH-428F	[FB80 C28F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x428F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC28F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_214)
{
    // 4290 0021;	
    // (䊐) CJK UNIFIED IDEOGRAPH-4290	[FB80 C290 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4290, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC290, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_215)
{
    // 4290 003F;	
    // (䊐) CJK UNIFIED IDEOGRAPH-4290	[FB80 C290 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4290, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC290, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_216)
{
    // 4290 0061;	
    // (䊐) CJK UNIFIED IDEOGRAPH-4290	[FB80 C290 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4290, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC290, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_217)
{
    // 4290 0041;	
    // (䊐) CJK UNIFIED IDEOGRAPH-4290	[FB80 C290 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4290, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC290, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_218)
{
    // 4290 0062;	
    // (䊐) CJK UNIFIED IDEOGRAPH-4290	[FB80 C290 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4290, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC290, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_219)
{
    // 4291 0021;	
    // (䊑) CJK UNIFIED IDEOGRAPH-4291	[FB80 C291 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4291, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC291, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_220)
{
    // 4291 003F;	
    // (䊑) CJK UNIFIED IDEOGRAPH-4291	[FB80 C291 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4291, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC291, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_221)
{
    // 4291 0061;	
    // (䊑) CJK UNIFIED IDEOGRAPH-4291	[FB80 C291 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4291, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC291, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_222)
{
    // 4291 0041;	
    // (䊑) CJK UNIFIED IDEOGRAPH-4291	[FB80 C291 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4291, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC291, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_223)
{
    // 4291 0062;	
    // (䊑) CJK UNIFIED IDEOGRAPH-4291	[FB80 C291 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4291, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC291, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_224)
{
    // 4292 0021;	
    // (䊒) CJK UNIFIED IDEOGRAPH-4292	[FB80 C292 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4292, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC292, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_225)
{
    // 4292 003F;	
    // (䊒) CJK UNIFIED IDEOGRAPH-4292	[FB80 C292 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4292, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC292, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_226)
{
    // 4292 0061;	
    // (䊒) CJK UNIFIED IDEOGRAPH-4292	[FB80 C292 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4292, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC292, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_227)
{
    // 4292 0041;	
    // (䊒) CJK UNIFIED IDEOGRAPH-4292	[FB80 C292 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4292, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC292, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_228)
{
    // 4292 0062;	
    // (䊒) CJK UNIFIED IDEOGRAPH-4292	[FB80 C292 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4292, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC292, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_229)
{
    // 4293 0021;	
    // (䊓) CJK UNIFIED IDEOGRAPH-4293	[FB80 C293 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4293, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC293, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_230)
{
    // 4293 003F;	
    // (䊓) CJK UNIFIED IDEOGRAPH-4293	[FB80 C293 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4293, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC293, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_231)
{
    // 4293 0061;	
    // (䊓) CJK UNIFIED IDEOGRAPH-4293	[FB80 C293 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4293, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC293, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_232)
{
    // 4293 0041;	
    // (䊓) CJK UNIFIED IDEOGRAPH-4293	[FB80 C293 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4293, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC293, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_233)
{
    // 4293 0062;	
    // (䊓) CJK UNIFIED IDEOGRAPH-4293	[FB80 C293 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4293, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC293, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_234)
{
    // 4294 0021;	
    // (䊔) CJK UNIFIED IDEOGRAPH-4294	[FB80 C294 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4294, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC294, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_235)
{
    // 4294 003F;	
    // (䊔) CJK UNIFIED IDEOGRAPH-4294	[FB80 C294 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4294, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC294, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_236)
{
    // 4294 0061;	
    // (䊔) CJK UNIFIED IDEOGRAPH-4294	[FB80 C294 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4294, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC294, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_237)
{
    // 4294 0041;	
    // (䊔) CJK UNIFIED IDEOGRAPH-4294	[FB80 C294 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4294, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC294, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_238)
{
    // 4294 0062;	
    // (䊔) CJK UNIFIED IDEOGRAPH-4294	[FB80 C294 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4294, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC294, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_239)
{
    // 4295 0021;	
    // (䊕) CJK UNIFIED IDEOGRAPH-4295	[FB80 C295 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4295, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC295, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_240)
{
    // 4295 003F;	
    // (䊕) CJK UNIFIED IDEOGRAPH-4295	[FB80 C295 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4295, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC295, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_241)
{
    // 4295 0061;	
    // (䊕) CJK UNIFIED IDEOGRAPH-4295	[FB80 C295 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4295, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC295, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_242)
{
    // 4295 0041;	
    // (䊕) CJK UNIFIED IDEOGRAPH-4295	[FB80 C295 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4295, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC295, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_243)
{
    // 4295 0062;	
    // (䊕) CJK UNIFIED IDEOGRAPH-4295	[FB80 C295 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4295, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC295, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_244)
{
    // 4296 0021;	
    // (䊖) CJK UNIFIED IDEOGRAPH-4296	[FB80 C296 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4296, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC296, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_245)
{
    // 4296 003F;	
    // (䊖) CJK UNIFIED IDEOGRAPH-4296	[FB80 C296 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4296, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC296, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_246)
{
    // 4296 0061;	
    // (䊖) CJK UNIFIED IDEOGRAPH-4296	[FB80 C296 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4296, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC296, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_247)
{
    // 4296 0041;	
    // (䊖) CJK UNIFIED IDEOGRAPH-4296	[FB80 C296 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4296, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC296, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_248)
{
    // 4296 0062;	
    // (䊖) CJK UNIFIED IDEOGRAPH-4296	[FB80 C296 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4296, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC296, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_249)
{
    // 4297 0021;	
    // (䊗) CJK UNIFIED IDEOGRAPH-4297	[FB80 C297 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4297, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC297, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_250)
{
    // 4297 003F;	
    // (䊗) CJK UNIFIED IDEOGRAPH-4297	[FB80 C297 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4297, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC297, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_251)
{
    // 4297 0061;	
    // (䊗) CJK UNIFIED IDEOGRAPH-4297	[FB80 C297 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4297, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC297, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_252)
{
    // 4297 0041;	
    // (䊗) CJK UNIFIED IDEOGRAPH-4297	[FB80 C297 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4297, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC297, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_253)
{
    // 4297 0062;	
    // (䊗) CJK UNIFIED IDEOGRAPH-4297	[FB80 C297 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4297, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC297, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_254)
{
    // 4298 0021;	
    // (䊘) CJK UNIFIED IDEOGRAPH-4298	[FB80 C298 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4298, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC298, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_255)
{
    // 4298 003F;	
    // (䊘) CJK UNIFIED IDEOGRAPH-4298	[FB80 C298 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4298, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC298, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_256)
{
    // 4298 0061;	
    // (䊘) CJK UNIFIED IDEOGRAPH-4298	[FB80 C298 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4298, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC298, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_257)
{
    // 4298 0041;	
    // (䊘) CJK UNIFIED IDEOGRAPH-4298	[FB80 C298 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4298, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC298, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_258)
{
    // 4298 0062;	
    // (䊘) CJK UNIFIED IDEOGRAPH-4298	[FB80 C298 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4298, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC298, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_259)
{
    // 4299 0021;	
    // (䊙) CJK UNIFIED IDEOGRAPH-4299	[FB80 C299 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4299, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC299, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_260)
{
    // 4299 003F;	
    // (䊙) CJK UNIFIED IDEOGRAPH-4299	[FB80 C299 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4299, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC299, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_261)
{
    // 4299 0061;	
    // (䊙) CJK UNIFIED IDEOGRAPH-4299	[FB80 C299 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4299, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC299, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_262)
{
    // 4299 0041;	
    // (䊙) CJK UNIFIED IDEOGRAPH-4299	[FB80 C299 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4299, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC299, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_263)
{
    // 4299 0062;	
    // (䊙) CJK UNIFIED IDEOGRAPH-4299	[FB80 C299 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4299, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC299, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_264)
{
    // 429A 0021;	
    // (䊚) CJK UNIFIED IDEOGRAPH-429A	[FB80 C29A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC29A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_265)
{
    // 429A 003F;	
    // (䊚) CJK UNIFIED IDEOGRAPH-429A	[FB80 C29A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC29A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_266)
{
    // 429A 0061;	
    // (䊚) CJK UNIFIED IDEOGRAPH-429A	[FB80 C29A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC29A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_267)
{
    // 429A 0041;	
    // (䊚) CJK UNIFIED IDEOGRAPH-429A	[FB80 C29A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x429A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC29A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_268)
{
    // 429A 0062;	
    // (䊚) CJK UNIFIED IDEOGRAPH-429A	[FB80 C29A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC29A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_269)
{
    // 429B 0021;	
    // (䊛) CJK UNIFIED IDEOGRAPH-429B	[FB80 C29B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC29B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_270)
{
    // 429B 003F;	
    // (䊛) CJK UNIFIED IDEOGRAPH-429B	[FB80 C29B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC29B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_271)
{
    // 429B 0061;	
    // (䊛) CJK UNIFIED IDEOGRAPH-429B	[FB80 C29B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC29B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_272)
{
    // 429B 0041;	
    // (䊛) CJK UNIFIED IDEOGRAPH-429B	[FB80 C29B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x429B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC29B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_273)
{
    // 429B 0062;	
    // (䊛) CJK UNIFIED IDEOGRAPH-429B	[FB80 C29B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC29B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_274)
{
    // 429C 0021;	
    // (䊜) CJK UNIFIED IDEOGRAPH-429C	[FB80 C29C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC29C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_275)
{
    // 429C 003F;	
    // (䊜) CJK UNIFIED IDEOGRAPH-429C	[FB80 C29C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC29C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_276)
{
    // 429C 0061;	
    // (䊜) CJK UNIFIED IDEOGRAPH-429C	[FB80 C29C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC29C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_277)
{
    // 429C 0041;	
    // (䊜) CJK UNIFIED IDEOGRAPH-429C	[FB80 C29C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x429C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC29C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_278)
{
    // 429C 0062;	
    // (䊜) CJK UNIFIED IDEOGRAPH-429C	[FB80 C29C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC29C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_279)
{
    // 429D 0021;	
    // (䊝) CJK UNIFIED IDEOGRAPH-429D	[FB80 C29D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC29D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_280)
{
    // 429D 003F;	
    // (䊝) CJK UNIFIED IDEOGRAPH-429D	[FB80 C29D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC29D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_281)
{
    // 429D 0061;	
    // (䊝) CJK UNIFIED IDEOGRAPH-429D	[FB80 C29D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC29D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_282)
{
    // 429D 0041;	
    // (䊝) CJK UNIFIED IDEOGRAPH-429D	[FB80 C29D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x429D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC29D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_283)
{
    // 429D 0062;	
    // (䊝) CJK UNIFIED IDEOGRAPH-429D	[FB80 C29D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC29D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_284)
{
    // 429E 0021;	
    // (䊞) CJK UNIFIED IDEOGRAPH-429E	[FB80 C29E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC29E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_285)
{
    // 429E 003F;	
    // (䊞) CJK UNIFIED IDEOGRAPH-429E	[FB80 C29E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC29E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_286)
{
    // 429E 0061;	
    // (䊞) CJK UNIFIED IDEOGRAPH-429E	[FB80 C29E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC29E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_287)
{
    // 429E 0041;	
    // (䊞) CJK UNIFIED IDEOGRAPH-429E	[FB80 C29E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x429E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC29E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_288)
{
    // 429E 0062;	
    // (䊞) CJK UNIFIED IDEOGRAPH-429E	[FB80 C29E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC29E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_289)
{
    // 429F 0021;	
    // (䊟) CJK UNIFIED IDEOGRAPH-429F	[FB80 C29F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC29F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_290)
{
    // 429F 003F;	
    // (䊟) CJK UNIFIED IDEOGRAPH-429F	[FB80 C29F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC29F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_291)
{
    // 429F 0061;	
    // (䊟) CJK UNIFIED IDEOGRAPH-429F	[FB80 C29F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC29F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_292)
{
    // 429F 0041;	
    // (䊟) CJK UNIFIED IDEOGRAPH-429F	[FB80 C29F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x429F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC29F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_293)
{
    // 429F 0062;	
    // (䊟) CJK UNIFIED IDEOGRAPH-429F	[FB80 C29F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x429F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC29F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_294)
{
    // 42A0 0021;	
    // (䊠) CJK UNIFIED IDEOGRAPH-42A0	[FB80 C2A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_295)
{
    // 2F967 0021;	
    // (䊠) CJK COMPATIBILITY IDEOGRAPH-2F967	[FB80 C2A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F967, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_296)
{
    // 42A0 003F;	
    // (䊠) CJK UNIFIED IDEOGRAPH-42A0	[FB80 C2A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_297)
{
    // 2F967 003F;	
    // (䊠) CJK COMPATIBILITY IDEOGRAPH-2F967	[FB80 C2A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F967, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_298)
{
    // 42A0 0061;	
    // (䊠) CJK UNIFIED IDEOGRAPH-42A0	[FB80 C2A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_299)
{
    // 2F967 0061;	
    // (䊠) CJK COMPATIBILITY IDEOGRAPH-2F967	[FB80 C2A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F967, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_300)
{
    // 42A0 0041;	
    // (䊠) CJK UNIFIED IDEOGRAPH-42A0	[FB80 C2A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42A0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_301)
{
    // 2F967 0041;	
    // (䊠) CJK COMPATIBILITY IDEOGRAPH-2F967	[FB80 C2A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F967, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_302)
{
    // 42A0 0062;	
    // (䊠) CJK UNIFIED IDEOGRAPH-42A0	[FB80 C2A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_303)
{
    // 2F967 0062;	
    // (䊠) CJK COMPATIBILITY IDEOGRAPH-2F967	[FB80 C2A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F967, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_304)
{
    // 42A1 0021;	
    // (䊡) CJK UNIFIED IDEOGRAPH-42A1	[FB80 C2A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_305)
{
    // 42A1 003F;	
    // (䊡) CJK UNIFIED IDEOGRAPH-42A1	[FB80 C2A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_306)
{
    // 42A1 0061;	
    // (䊡) CJK UNIFIED IDEOGRAPH-42A1	[FB80 C2A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_307)
{
    // 42A1 0041;	
    // (䊡) CJK UNIFIED IDEOGRAPH-42A1	[FB80 C2A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42A1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_308)
{
    // 42A1 0062;	
    // (䊡) CJK UNIFIED IDEOGRAPH-42A1	[FB80 C2A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_309)
{
    // 42A2 0021;	
    // (䊢) CJK UNIFIED IDEOGRAPH-42A2	[FB80 C2A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_310)
{
    // 42A2 003F;	
    // (䊢) CJK UNIFIED IDEOGRAPH-42A2	[FB80 C2A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_311)
{
    // 42A2 0061;	
    // (䊢) CJK UNIFIED IDEOGRAPH-42A2	[FB80 C2A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_312)
{
    // 42A2 0041;	
    // (䊢) CJK UNIFIED IDEOGRAPH-42A2	[FB80 C2A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42A2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_313)
{
    // 42A2 0062;	
    // (䊢) CJK UNIFIED IDEOGRAPH-42A2	[FB80 C2A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_314)
{
    // 42A3 0021;	
    // (䊣) CJK UNIFIED IDEOGRAPH-42A3	[FB80 C2A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_315)
{
    // 42A3 003F;	
    // (䊣) CJK UNIFIED IDEOGRAPH-42A3	[FB80 C2A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_316)
{
    // 42A3 0061;	
    // (䊣) CJK UNIFIED IDEOGRAPH-42A3	[FB80 C2A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_317)
{
    // 42A3 0041;	
    // (䊣) CJK UNIFIED IDEOGRAPH-42A3	[FB80 C2A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42A3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_318)
{
    // 42A3 0062;	
    // (䊣) CJK UNIFIED IDEOGRAPH-42A3	[FB80 C2A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_319)
{
    // 42A4 0021;	
    // (䊤) CJK UNIFIED IDEOGRAPH-42A4	[FB80 C2A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_320)
{
    // 42A4 003F;	
    // (䊤) CJK UNIFIED IDEOGRAPH-42A4	[FB80 C2A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_321)
{
    // 42A4 0061;	
    // (䊤) CJK UNIFIED IDEOGRAPH-42A4	[FB80 C2A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_322)
{
    // 42A4 0041;	
    // (䊤) CJK UNIFIED IDEOGRAPH-42A4	[FB80 C2A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42A4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_323)
{
    // 42A4 0062;	
    // (䊤) CJK UNIFIED IDEOGRAPH-42A4	[FB80 C2A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_324)
{
    // 42A5 0021;	
    // (䊥) CJK UNIFIED IDEOGRAPH-42A5	[FB80 C2A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_325)
{
    // 42A5 003F;	
    // (䊥) CJK UNIFIED IDEOGRAPH-42A5	[FB80 C2A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_326)
{
    // 42A5 0061;	
    // (䊥) CJK UNIFIED IDEOGRAPH-42A5	[FB80 C2A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_327)
{
    // 42A5 0041;	
    // (䊥) CJK UNIFIED IDEOGRAPH-42A5	[FB80 C2A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42A5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_328)
{
    // 42A5 0062;	
    // (䊥) CJK UNIFIED IDEOGRAPH-42A5	[FB80 C2A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_329)
{
    // 42A6 0021;	
    // (䊦) CJK UNIFIED IDEOGRAPH-42A6	[FB80 C2A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_330)
{
    // 42A6 003F;	
    // (䊦) CJK UNIFIED IDEOGRAPH-42A6	[FB80 C2A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_331)
{
    // 42A6 0061;	
    // (䊦) CJK UNIFIED IDEOGRAPH-42A6	[FB80 C2A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_332)
{
    // 42A6 0041;	
    // (䊦) CJK UNIFIED IDEOGRAPH-42A6	[FB80 C2A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42A6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_333)
{
    // 42A6 0062;	
    // (䊦) CJK UNIFIED IDEOGRAPH-42A6	[FB80 C2A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_334)
{
    // 42A7 0021;	
    // (䊧) CJK UNIFIED IDEOGRAPH-42A7	[FB80 C2A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_335)
{
    // 42A7 003F;	
    // (䊧) CJK UNIFIED IDEOGRAPH-42A7	[FB80 C2A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_336)
{
    // 42A7 0061;	
    // (䊧) CJK UNIFIED IDEOGRAPH-42A7	[FB80 C2A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_337)
{
    // 42A7 0041;	
    // (䊧) CJK UNIFIED IDEOGRAPH-42A7	[FB80 C2A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42A7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_338)
{
    // 42A7 0062;	
    // (䊧) CJK UNIFIED IDEOGRAPH-42A7	[FB80 C2A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_339)
{
    // 42A8 0021;	
    // (䊨) CJK UNIFIED IDEOGRAPH-42A8	[FB80 C2A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_340)
{
    // 42A8 003F;	
    // (䊨) CJK UNIFIED IDEOGRAPH-42A8	[FB80 C2A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_341)
{
    // 42A8 0061;	
    // (䊨) CJK UNIFIED IDEOGRAPH-42A8	[FB80 C2A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_342)
{
    // 42A8 0041;	
    // (䊨) CJK UNIFIED IDEOGRAPH-42A8	[FB80 C2A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42A8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_343)
{
    // 42A8 0062;	
    // (䊨) CJK UNIFIED IDEOGRAPH-42A8	[FB80 C2A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_344)
{
    // 42A9 0021;	
    // (䊩) CJK UNIFIED IDEOGRAPH-42A9	[FB80 C2A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_345)
{
    // 42A9 003F;	
    // (䊩) CJK UNIFIED IDEOGRAPH-42A9	[FB80 C2A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_346)
{
    // 42A9 0061;	
    // (䊩) CJK UNIFIED IDEOGRAPH-42A9	[FB80 C2A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_347)
{
    // 42A9 0041;	
    // (䊩) CJK UNIFIED IDEOGRAPH-42A9	[FB80 C2A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42A9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_348)
{
    // 42A9 0062;	
    // (䊩) CJK UNIFIED IDEOGRAPH-42A9	[FB80 C2A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42A9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_349)
{
    // 42AA 0021;	
    // (䊪) CJK UNIFIED IDEOGRAPH-42AA	[FB80 C2AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_350)
{
    // 42AA 003F;	
    // (䊪) CJK UNIFIED IDEOGRAPH-42AA	[FB80 C2AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_351)
{
    // 42AA 0061;	
    // (䊪) CJK UNIFIED IDEOGRAPH-42AA	[FB80 C2AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_352)
{
    // 42AA 0041;	
    // (䊪) CJK UNIFIED IDEOGRAPH-42AA	[FB80 C2AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42AA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_353)
{
    // 42AA 0062;	
    // (䊪) CJK UNIFIED IDEOGRAPH-42AA	[FB80 C2AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_354)
{
    // 42AB 0021;	
    // (䊫) CJK UNIFIED IDEOGRAPH-42AB	[FB80 C2AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_355)
{
    // 42AB 003F;	
    // (䊫) CJK UNIFIED IDEOGRAPH-42AB	[FB80 C2AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_356)
{
    // 42AB 0061;	
    // (䊫) CJK UNIFIED IDEOGRAPH-42AB	[FB80 C2AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_357)
{
    // 42AB 0041;	
    // (䊫) CJK UNIFIED IDEOGRAPH-42AB	[FB80 C2AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42AB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_358)
{
    // 42AB 0062;	
    // (䊫) CJK UNIFIED IDEOGRAPH-42AB	[FB80 C2AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_359)
{
    // 42AC 0021;	
    // (䊬) CJK UNIFIED IDEOGRAPH-42AC	[FB80 C2AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_360)
{
    // 42AC 003F;	
    // (䊬) CJK UNIFIED IDEOGRAPH-42AC	[FB80 C2AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_361)
{
    // 42AC 0061;	
    // (䊬) CJK UNIFIED IDEOGRAPH-42AC	[FB80 C2AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_362)
{
    // 42AC 0041;	
    // (䊬) CJK UNIFIED IDEOGRAPH-42AC	[FB80 C2AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42AC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_363)
{
    // 42AC 0062;	
    // (䊬) CJK UNIFIED IDEOGRAPH-42AC	[FB80 C2AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_364)
{
    // 42AD 0021;	
    // (䊭) CJK UNIFIED IDEOGRAPH-42AD	[FB80 C2AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_365)
{
    // 42AD 003F;	
    // (䊭) CJK UNIFIED IDEOGRAPH-42AD	[FB80 C2AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_366)
{
    // 42AD 0061;	
    // (䊭) CJK UNIFIED IDEOGRAPH-42AD	[FB80 C2AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_367)
{
    // 42AD 0041;	
    // (䊭) CJK UNIFIED IDEOGRAPH-42AD	[FB80 C2AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42AD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_368)
{
    // 42AD 0062;	
    // (䊭) CJK UNIFIED IDEOGRAPH-42AD	[FB80 C2AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_369)
{
    // 42AE 0021;	
    // (䊮) CJK UNIFIED IDEOGRAPH-42AE	[FB80 C2AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_370)
{
    // 42AE 003F;	
    // (䊮) CJK UNIFIED IDEOGRAPH-42AE	[FB80 C2AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_371)
{
    // 42AE 0061;	
    // (䊮) CJK UNIFIED IDEOGRAPH-42AE	[FB80 C2AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_372)
{
    // 42AE 0041;	
    // (䊮) CJK UNIFIED IDEOGRAPH-42AE	[FB80 C2AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42AE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_373)
{
    // 42AE 0062;	
    // (䊮) CJK UNIFIED IDEOGRAPH-42AE	[FB80 C2AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_374)
{
    // 42AF 0021;	
    // (䊯) CJK UNIFIED IDEOGRAPH-42AF	[FB80 C2AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_375)
{
    // 42AF 003F;	
    // (䊯) CJK UNIFIED IDEOGRAPH-42AF	[FB80 C2AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_376)
{
    // 42AF 0061;	
    // (䊯) CJK UNIFIED IDEOGRAPH-42AF	[FB80 C2AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_377)
{
    // 42AF 0041;	
    // (䊯) CJK UNIFIED IDEOGRAPH-42AF	[FB80 C2AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42AF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_378)
{
    // 42AF 0062;	
    // (䊯) CJK UNIFIED IDEOGRAPH-42AF	[FB80 C2AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42AF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_379)
{
    // 42B0 0021;	
    // (䊰) CJK UNIFIED IDEOGRAPH-42B0	[FB80 C2B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_380)
{
    // 42B0 003F;	
    // (䊰) CJK UNIFIED IDEOGRAPH-42B0	[FB80 C2B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_381)
{
    // 42B0 0061;	
    // (䊰) CJK UNIFIED IDEOGRAPH-42B0	[FB80 C2B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_382)
{
    // 42B0 0041;	
    // (䊰) CJK UNIFIED IDEOGRAPH-42B0	[FB80 C2B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42B0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_383)
{
    // 42B0 0062;	
    // (䊰) CJK UNIFIED IDEOGRAPH-42B0	[FB80 C2B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_384)
{
    // 42B1 0021;	
    // (䊱) CJK UNIFIED IDEOGRAPH-42B1	[FB80 C2B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_385)
{
    // 42B1 003F;	
    // (䊱) CJK UNIFIED IDEOGRAPH-42B1	[FB80 C2B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_386)
{
    // 42B1 0061;	
    // (䊱) CJK UNIFIED IDEOGRAPH-42B1	[FB80 C2B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_387)
{
    // 42B1 0041;	
    // (䊱) CJK UNIFIED IDEOGRAPH-42B1	[FB80 C2B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42B1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_388)
{
    // 42B1 0062;	
    // (䊱) CJK UNIFIED IDEOGRAPH-42B1	[FB80 C2B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_389)
{
    // 42B2 0021;	
    // (䊲) CJK UNIFIED IDEOGRAPH-42B2	[FB80 C2B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_390)
{
    // 42B2 003F;	
    // (䊲) CJK UNIFIED IDEOGRAPH-42B2	[FB80 C2B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_391)
{
    // 42B2 0061;	
    // (䊲) CJK UNIFIED IDEOGRAPH-42B2	[FB80 C2B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_392)
{
    // 42B2 0041;	
    // (䊲) CJK UNIFIED IDEOGRAPH-42B2	[FB80 C2B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42B2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_393)
{
    // 42B2 0062;	
    // (䊲) CJK UNIFIED IDEOGRAPH-42B2	[FB80 C2B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_394)
{
    // 42B3 0021;	
    // (䊳) CJK UNIFIED IDEOGRAPH-42B3	[FB80 C2B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_395)
{
    // 42B3 003F;	
    // (䊳) CJK UNIFIED IDEOGRAPH-42B3	[FB80 C2B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_396)
{
    // 42B3 0061;	
    // (䊳) CJK UNIFIED IDEOGRAPH-42B3	[FB80 C2B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_397)
{
    // 42B3 0041;	
    // (䊳) CJK UNIFIED IDEOGRAPH-42B3	[FB80 C2B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42B3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_398)
{
    // 42B3 0062;	
    // (䊳) CJK UNIFIED IDEOGRAPH-42B3	[FB80 C2B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_399)
{
    // 42B4 0021;	
    // (䊴) CJK UNIFIED IDEOGRAPH-42B4	[FB80 C2B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_400)
{
    // 42B4 003F;	
    // (䊴) CJK UNIFIED IDEOGRAPH-42B4	[FB80 C2B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_401)
{
    // 42B4 0061;	
    // (䊴) CJK UNIFIED IDEOGRAPH-42B4	[FB80 C2B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_402)
{
    // 42B4 0041;	
    // (䊴) CJK UNIFIED IDEOGRAPH-42B4	[FB80 C2B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42B4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_403)
{
    // 42B4 0062;	
    // (䊴) CJK UNIFIED IDEOGRAPH-42B4	[FB80 C2B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_404)
{
    // 42B5 0021;	
    // (䊵) CJK UNIFIED IDEOGRAPH-42B5	[FB80 C2B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_405)
{
    // 42B5 003F;	
    // (䊵) CJK UNIFIED IDEOGRAPH-42B5	[FB80 C2B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_406)
{
    // 42B5 0061;	
    // (䊵) CJK UNIFIED IDEOGRAPH-42B5	[FB80 C2B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_407)
{
    // 42B5 0041;	
    // (䊵) CJK UNIFIED IDEOGRAPH-42B5	[FB80 C2B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42B5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_408)
{
    // 42B5 0062;	
    // (䊵) CJK UNIFIED IDEOGRAPH-42B5	[FB80 C2B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_409)
{
    // 42B6 0021;	
    // (䊶) CJK UNIFIED IDEOGRAPH-42B6	[FB80 C2B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_410)
{
    // 42B6 003F;	
    // (䊶) CJK UNIFIED IDEOGRAPH-42B6	[FB80 C2B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_411)
{
    // 42B6 0061;	
    // (䊶) CJK UNIFIED IDEOGRAPH-42B6	[FB80 C2B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_412)
{
    // 42B6 0041;	
    // (䊶) CJK UNIFIED IDEOGRAPH-42B6	[FB80 C2B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42B6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_413)
{
    // 42B6 0062;	
    // (䊶) CJK UNIFIED IDEOGRAPH-42B6	[FB80 C2B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_414)
{
    // 42B7 0021;	
    // (䊷) CJK UNIFIED IDEOGRAPH-42B7	[FB80 C2B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_415)
{
    // 42B7 003F;	
    // (䊷) CJK UNIFIED IDEOGRAPH-42B7	[FB80 C2B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_416)
{
    // 42B7 0061;	
    // (䊷) CJK UNIFIED IDEOGRAPH-42B7	[FB80 C2B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_417)
{
    // 42B7 0041;	
    // (䊷) CJK UNIFIED IDEOGRAPH-42B7	[FB80 C2B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42B7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_418)
{
    // 42B7 0062;	
    // (䊷) CJK UNIFIED IDEOGRAPH-42B7	[FB80 C2B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_419)
{
    // 42B8 0021;	
    // (䊸) CJK UNIFIED IDEOGRAPH-42B8	[FB80 C2B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_420)
{
    // 42B8 003F;	
    // (䊸) CJK UNIFIED IDEOGRAPH-42B8	[FB80 C2B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_421)
{
    // 42B8 0061;	
    // (䊸) CJK UNIFIED IDEOGRAPH-42B8	[FB80 C2B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_422)
{
    // 42B8 0041;	
    // (䊸) CJK UNIFIED IDEOGRAPH-42B8	[FB80 C2B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42B8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_423)
{
    // 42B8 0062;	
    // (䊸) CJK UNIFIED IDEOGRAPH-42B8	[FB80 C2B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_424)
{
    // 42B9 0021;	
    // (䊹) CJK UNIFIED IDEOGRAPH-42B9	[FB80 C2B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_425)
{
    // 42B9 003F;	
    // (䊹) CJK UNIFIED IDEOGRAPH-42B9	[FB80 C2B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_426)
{
    // 42B9 0061;	
    // (䊹) CJK UNIFIED IDEOGRAPH-42B9	[FB80 C2B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_427)
{
    // 42B9 0041;	
    // (䊹) CJK UNIFIED IDEOGRAPH-42B9	[FB80 C2B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42B9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_428)
{
    // 42B9 0062;	
    // (䊹) CJK UNIFIED IDEOGRAPH-42B9	[FB80 C2B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42B9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_429)
{
    // 42BA 0021;	
    // (䊺) CJK UNIFIED IDEOGRAPH-42BA	[FB80 C2BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_430)
{
    // 42BA 003F;	
    // (䊺) CJK UNIFIED IDEOGRAPH-42BA	[FB80 C2BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_431)
{
    // 42BA 0061;	
    // (䊺) CJK UNIFIED IDEOGRAPH-42BA	[FB80 C2BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_432)
{
    // 42BA 0041;	
    // (䊺) CJK UNIFIED IDEOGRAPH-42BA	[FB80 C2BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42BA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_433)
{
    // 42BA 0062;	
    // (䊺) CJK UNIFIED IDEOGRAPH-42BA	[FB80 C2BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_434)
{
    // 42BB 0021;	
    // (䊻) CJK UNIFIED IDEOGRAPH-42BB	[FB80 C2BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_435)
{
    // 42BB 003F;	
    // (䊻) CJK UNIFIED IDEOGRAPH-42BB	[FB80 C2BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_436)
{
    // 42BB 0061;	
    // (䊻) CJK UNIFIED IDEOGRAPH-42BB	[FB80 C2BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_437)
{
    // 42BB 0041;	
    // (䊻) CJK UNIFIED IDEOGRAPH-42BB	[FB80 C2BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42BB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_438)
{
    // 42BB 0062;	
    // (䊻) CJK UNIFIED IDEOGRAPH-42BB	[FB80 C2BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_439)
{
    // 42BC 0021;	
    // (䊼) CJK UNIFIED IDEOGRAPH-42BC	[FB80 C2BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_440)
{
    // 42BC 003F;	
    // (䊼) CJK UNIFIED IDEOGRAPH-42BC	[FB80 C2BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_441)
{
    // 42BC 0061;	
    // (䊼) CJK UNIFIED IDEOGRAPH-42BC	[FB80 C2BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_442)
{
    // 42BC 0041;	
    // (䊼) CJK UNIFIED IDEOGRAPH-42BC	[FB80 C2BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42BC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_443)
{
    // 42BC 0062;	
    // (䊼) CJK UNIFIED IDEOGRAPH-42BC	[FB80 C2BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_444)
{
    // 42BD 0021;	
    // (䊽) CJK UNIFIED IDEOGRAPH-42BD	[FB80 C2BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_445)
{
    // 42BD 003F;	
    // (䊽) CJK UNIFIED IDEOGRAPH-42BD	[FB80 C2BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_446)
{
    // 42BD 0061;	
    // (䊽) CJK UNIFIED IDEOGRAPH-42BD	[FB80 C2BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_447)
{
    // 42BD 0041;	
    // (䊽) CJK UNIFIED IDEOGRAPH-42BD	[FB80 C2BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42BD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_448)
{
    // 42BD 0062;	
    // (䊽) CJK UNIFIED IDEOGRAPH-42BD	[FB80 C2BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_449)
{
    // 42BE 0021;	
    // (䊾) CJK UNIFIED IDEOGRAPH-42BE	[FB80 C2BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_450)
{
    // 42BE 003F;	
    // (䊾) CJK UNIFIED IDEOGRAPH-42BE	[FB80 C2BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_451)
{
    // 42BE 0061;	
    // (䊾) CJK UNIFIED IDEOGRAPH-42BE	[FB80 C2BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_452)
{
    // 42BE 0041;	
    // (䊾) CJK UNIFIED IDEOGRAPH-42BE	[FB80 C2BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42BE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_453)
{
    // 42BE 0062;	
    // (䊾) CJK UNIFIED IDEOGRAPH-42BE	[FB80 C2BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_454)
{
    // 42BF 0021;	
    // (䊿) CJK UNIFIED IDEOGRAPH-42BF	[FB80 C2BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_455)
{
    // 42BF 003F;	
    // (䊿) CJK UNIFIED IDEOGRAPH-42BF	[FB80 C2BF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2BF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_456)
{
    // 42BF 0061;	
    // (䊿) CJK UNIFIED IDEOGRAPH-42BF	[FB80 C2BF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_457)
{
    // 42BF 0041;	
    // (䊿) CJK UNIFIED IDEOGRAPH-42BF	[FB80 C2BF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42BF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_458)
{
    // 42BF 0062;	
    // (䊿) CJK UNIFIED IDEOGRAPH-42BF	[FB80 C2BF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42BF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2BF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_459)
{
    // 42C0 0021;	
    // (䋀) CJK UNIFIED IDEOGRAPH-42C0	[FB80 C2C0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_460)
{
    // 42C0 003F;	
    // (䋀) CJK UNIFIED IDEOGRAPH-42C0	[FB80 C2C0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2C0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_461)
{
    // 42C0 0061;	
    // (䋀) CJK UNIFIED IDEOGRAPH-42C0	[FB80 C2C0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_462)
{
    // 42C0 0041;	
    // (䋀) CJK UNIFIED IDEOGRAPH-42C0	[FB80 C2C0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42C0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_463)
{
    // 42C0 0062;	
    // (䋀) CJK UNIFIED IDEOGRAPH-42C0	[FB80 C2C0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_464)
{
    // 42C1 0021;	
    // (䋁) CJK UNIFIED IDEOGRAPH-42C1	[FB80 C2C1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_465)
{
    // 42C1 003F;	
    // (䋁) CJK UNIFIED IDEOGRAPH-42C1	[FB80 C2C1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2C1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_466)
{
    // 42C1 0061;	
    // (䋁) CJK UNIFIED IDEOGRAPH-42C1	[FB80 C2C1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_467)
{
    // 42C1 0041;	
    // (䋁) CJK UNIFIED IDEOGRAPH-42C1	[FB80 C2C1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42C1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_468)
{
    // 42C1 0062;	
    // (䋁) CJK UNIFIED IDEOGRAPH-42C1	[FB80 C2C1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_469)
{
    // 42C2 0021;	
    // (䋂) CJK UNIFIED IDEOGRAPH-42C2	[FB80 C2C2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_470)
{
    // 42C2 003F;	
    // (䋂) CJK UNIFIED IDEOGRAPH-42C2	[FB80 C2C2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2C2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_471)
{
    // 42C2 0061;	
    // (䋂) CJK UNIFIED IDEOGRAPH-42C2	[FB80 C2C2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_472)
{
    // 42C2 0041;	
    // (䋂) CJK UNIFIED IDEOGRAPH-42C2	[FB80 C2C2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42C2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_473)
{
    // 42C2 0062;	
    // (䋂) CJK UNIFIED IDEOGRAPH-42C2	[FB80 C2C2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_474)
{
    // 42C3 0021;	
    // (䋃) CJK UNIFIED IDEOGRAPH-42C3	[FB80 C2C3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_475)
{
    // 42C3 003F;	
    // (䋃) CJK UNIFIED IDEOGRAPH-42C3	[FB80 C2C3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2C3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_476)
{
    // 42C3 0061;	
    // (䋃) CJK UNIFIED IDEOGRAPH-42C3	[FB80 C2C3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_477)
{
    // 42C3 0041;	
    // (䋃) CJK UNIFIED IDEOGRAPH-42C3	[FB80 C2C3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42C3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_478)
{
    // 42C3 0062;	
    // (䋃) CJK UNIFIED IDEOGRAPH-42C3	[FB80 C2C3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_479)
{
    // 42C4 0021;	
    // (䋄) CJK UNIFIED IDEOGRAPH-42C4	[FB80 C2C4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_480)
{
    // 42C4 003F;	
    // (䋄) CJK UNIFIED IDEOGRAPH-42C4	[FB80 C2C4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2C4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_481)
{
    // 42C4 0061;	
    // (䋄) CJK UNIFIED IDEOGRAPH-42C4	[FB80 C2C4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_482)
{
    // 42C4 0041;	
    // (䋄) CJK UNIFIED IDEOGRAPH-42C4	[FB80 C2C4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42C4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_483)
{
    // 42C4 0062;	
    // (䋄) CJK UNIFIED IDEOGRAPH-42C4	[FB80 C2C4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_484)
{
    // 42C5 0021;	
    // (䋅) CJK UNIFIED IDEOGRAPH-42C5	[FB80 C2C5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_485)
{
    // 42C5 003F;	
    // (䋅) CJK UNIFIED IDEOGRAPH-42C5	[FB80 C2C5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2C5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_486)
{
    // 42C5 0061;	
    // (䋅) CJK UNIFIED IDEOGRAPH-42C5	[FB80 C2C5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_487)
{
    // 42C5 0041;	
    // (䋅) CJK UNIFIED IDEOGRAPH-42C5	[FB80 C2C5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42C5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_488)
{
    // 42C5 0062;	
    // (䋅) CJK UNIFIED IDEOGRAPH-42C5	[FB80 C2C5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_489)
{
    // 42C6 0021;	
    // (䋆) CJK UNIFIED IDEOGRAPH-42C6	[FB80 C2C6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_490)
{
    // 42C6 003F;	
    // (䋆) CJK UNIFIED IDEOGRAPH-42C6	[FB80 C2C6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2C6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_491)
{
    // 42C6 0061;	
    // (䋆) CJK UNIFIED IDEOGRAPH-42C6	[FB80 C2C6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_492)
{
    // 42C6 0041;	
    // (䋆) CJK UNIFIED IDEOGRAPH-42C6	[FB80 C2C6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42C6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_493)
{
    // 42C6 0062;	
    // (䋆) CJK UNIFIED IDEOGRAPH-42C6	[FB80 C2C6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_494)
{
    // 42C7 0021;	
    // (䋇) CJK UNIFIED IDEOGRAPH-42C7	[FB80 C2C7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_495)
{
    // 42C7 003F;	
    // (䋇) CJK UNIFIED IDEOGRAPH-42C7	[FB80 C2C7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC2C7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_496)
{
    // 42C7 0061;	
    // (䋇) CJK UNIFIED IDEOGRAPH-42C7	[FB80 C2C7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_497)
{
    // 42C7 0041;	
    // (䋇) CJK UNIFIED IDEOGRAPH-42C7	[FB80 C2C7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x42C7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_498)
{
    // 42C7 0062;	
    // (䋇) CJK UNIFIED IDEOGRAPH-42C7	[FB80 C2C7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_364_499)
{
    // 42C8 0021;	
    // (䋈) CJK UNIFIED IDEOGRAPH-42C8	[FB80 C2C8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x42C8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC2C8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

