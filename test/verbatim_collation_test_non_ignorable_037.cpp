// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_037_000)
{
    // 29D4 0041;	
    // (⧔) TIMES WITH LEFT HALF BLACK	[0BBE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29D4, 0x0041 };
    uint32_t const ces[9] = { 0x0BBE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_001)
{
    // 29D4 0062;	
    // (⧔) TIMES WITH LEFT HALF BLACK	[0BBE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D4, 0x0062 };
    uint32_t const ces[9] = { 0x0BBE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_002)
{
    // 29D5 0021;	
    // (⧕) TIMES WITH RIGHT HALF BLACK	[0BBF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D5, 0x0021 };
    uint32_t const ces[9] = { 0x0BBF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_003)
{
    // 29D5 003F;	
    // (⧕) TIMES WITH RIGHT HALF BLACK	[0BBF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D5, 0x003F };
    uint32_t const ces[9] = { 0x0BBF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_004)
{
    // 29D5 0061;	
    // (⧕) TIMES WITH RIGHT HALF BLACK	[0BBF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D5, 0x0061 };
    uint32_t const ces[9] = { 0x0BBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_005)
{
    // 29D5 0041;	
    // (⧕) TIMES WITH RIGHT HALF BLACK	[0BBF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29D5, 0x0041 };
    uint32_t const ces[9] = { 0x0BBF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_006)
{
    // 29D5 0062;	
    // (⧕) TIMES WITH RIGHT HALF BLACK	[0BBF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D5, 0x0062 };
    uint32_t const ces[9] = { 0x0BBF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_007)
{
    // 29D6 0021;	
    // (⧖) WHITE HOURGLASS	[0BC0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D6, 0x0021 };
    uint32_t const ces[9] = { 0x0BC0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_008)
{
    // 29D6 003F;	
    // (⧖) WHITE HOURGLASS	[0BC0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D6, 0x003F };
    uint32_t const ces[9] = { 0x0BC0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_009)
{
    // 29D6 0061;	
    // (⧖) WHITE HOURGLASS	[0BC0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D6, 0x0061 };
    uint32_t const ces[9] = { 0x0BC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_010)
{
    // 29D6 0041;	
    // (⧖) WHITE HOURGLASS	[0BC0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29D6, 0x0041 };
    uint32_t const ces[9] = { 0x0BC0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_011)
{
    // 29D6 0062;	
    // (⧖) WHITE HOURGLASS	[0BC0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D6, 0x0062 };
    uint32_t const ces[9] = { 0x0BC0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_012)
{
    // 29D7 0021;	
    // (⧗) BLACK HOURGLASS	[0BC1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D7, 0x0021 };
    uint32_t const ces[9] = { 0x0BC1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_013)
{
    // 29D7 003F;	
    // (⧗) BLACK HOURGLASS	[0BC1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D7, 0x003F };
    uint32_t const ces[9] = { 0x0BC1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_014)
{
    // 29D7 0061;	
    // (⧗) BLACK HOURGLASS	[0BC1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D7, 0x0061 };
    uint32_t const ces[9] = { 0x0BC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_015)
{
    // 29D7 0041;	
    // (⧗) BLACK HOURGLASS	[0BC1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29D7, 0x0041 };
    uint32_t const ces[9] = { 0x0BC1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_016)
{
    // 29D7 0062;	
    // (⧗) BLACK HOURGLASS	[0BC1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29D7, 0x0062 };
    uint32_t const ces[9] = { 0x0BC1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_017)
{
    // 29DC 0021;	
    // (⧜) INCOMPLETE INFINITY	[0BC2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DC, 0x0021 };
    uint32_t const ces[9] = { 0x0BC2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_018)
{
    // 29DC 003F;	
    // (⧜) INCOMPLETE INFINITY	[0BC2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DC, 0x003F };
    uint32_t const ces[9] = { 0x0BC2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_019)
{
    // 29DC 0061;	
    // (⧜) INCOMPLETE INFINITY	[0BC2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DC, 0x0061 };
    uint32_t const ces[9] = { 0x0BC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_020)
{
    // 29DC 0041;	
    // (⧜) INCOMPLETE INFINITY	[0BC2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29DC, 0x0041 };
    uint32_t const ces[9] = { 0x0BC2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_021)
{
    // 29DC 0062;	
    // (⧜) INCOMPLETE INFINITY	[0BC2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DC, 0x0062 };
    uint32_t const ces[9] = { 0x0BC2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_022)
{
    // 29DD 0021;	
    // (⧝) TIE OVER INFINITY	[0BC3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DD, 0x0021 };
    uint32_t const ces[9] = { 0x0BC3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_023)
{
    // 29DD 003F;	
    // (⧝) TIE OVER INFINITY	[0BC3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DD, 0x003F };
    uint32_t const ces[9] = { 0x0BC3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_024)
{
    // 29DD 0061;	
    // (⧝) TIE OVER INFINITY	[0BC3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DD, 0x0061 };
    uint32_t const ces[9] = { 0x0BC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_025)
{
    // 29DD 0041;	
    // (⧝) TIE OVER INFINITY	[0BC3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29DD, 0x0041 };
    uint32_t const ces[9] = { 0x0BC3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_026)
{
    // 29DD 0062;	
    // (⧝) TIE OVER INFINITY	[0BC3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DD, 0x0062 };
    uint32_t const ces[9] = { 0x0BC3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_027)
{
    // 29DE 0021;	
    // (⧞) INFINITY NEGATED WITH VERTICAL BAR	[0BC4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DE, 0x0021 };
    uint32_t const ces[9] = { 0x0BC4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_028)
{
    // 29DE 003F;	
    // (⧞) INFINITY NEGATED WITH VERTICAL BAR	[0BC4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DE, 0x003F };
    uint32_t const ces[9] = { 0x0BC4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_029)
{
    // 29DE 0061;	
    // (⧞) INFINITY NEGATED WITH VERTICAL BAR	[0BC4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DE, 0x0061 };
    uint32_t const ces[9] = { 0x0BC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_030)
{
    // 29DE 0041;	
    // (⧞) INFINITY NEGATED WITH VERTICAL BAR	[0BC4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29DE, 0x0041 };
    uint32_t const ces[9] = { 0x0BC4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_031)
{
    // 29DE 0062;	
    // (⧞) INFINITY NEGATED WITH VERTICAL BAR	[0BC4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DE, 0x0062 };
    uint32_t const ces[9] = { 0x0BC4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_032)
{
    // 29DF 0021;	
    // (⧟) DOUBLE-ENDED MULTIMAP	[0BC5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DF, 0x0021 };
    uint32_t const ces[9] = { 0x0BC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_033)
{
    // 29DF 003F;	
    // (⧟) DOUBLE-ENDED MULTIMAP	[0BC5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DF, 0x003F };
    uint32_t const ces[9] = { 0x0BC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_034)
{
    // 29DF 0061;	
    // (⧟) DOUBLE-ENDED MULTIMAP	[0BC5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DF, 0x0061 };
    uint32_t const ces[9] = { 0x0BC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_035)
{
    // 29DF 0041;	
    // (⧟) DOUBLE-ENDED MULTIMAP	[0BC5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29DF, 0x0041 };
    uint32_t const ces[9] = { 0x0BC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_036)
{
    // 29DF 0062;	
    // (⧟) DOUBLE-ENDED MULTIMAP	[0BC5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29DF, 0x0062 };
    uint32_t const ces[9] = { 0x0BC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_037)
{
    // 29E0 0021;	
    // (⧠) SQUARE WITH CONTOURED OUTLINE	[0BC6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E0, 0x0021 };
    uint32_t const ces[9] = { 0x0BC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_038)
{
    // 29E0 003F;	
    // (⧠) SQUARE WITH CONTOURED OUTLINE	[0BC6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E0, 0x003F };
    uint32_t const ces[9] = { 0x0BC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_039)
{
    // 29E0 0061;	
    // (⧠) SQUARE WITH CONTOURED OUTLINE	[0BC6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E0, 0x0061 };
    uint32_t const ces[9] = { 0x0BC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_040)
{
    // 29E0 0041;	
    // (⧠) SQUARE WITH CONTOURED OUTLINE	[0BC6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29E0, 0x0041 };
    uint32_t const ces[9] = { 0x0BC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_041)
{
    // 29E0 0062;	
    // (⧠) SQUARE WITH CONTOURED OUTLINE	[0BC6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E0, 0x0062 };
    uint32_t const ces[9] = { 0x0BC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_042)
{
    // 29E1 0021;	
    // (⧡) INCREASES AS	[0BC7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E1, 0x0021 };
    uint32_t const ces[9] = { 0x0BC7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_043)
{
    // 29E1 003F;	
    // (⧡) INCREASES AS	[0BC7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E1, 0x003F };
    uint32_t const ces[9] = { 0x0BC7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_044)
{
    // 29E1 0061;	
    // (⧡) INCREASES AS	[0BC7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E1, 0x0061 };
    uint32_t const ces[9] = { 0x0BC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_045)
{
    // 29E1 0041;	
    // (⧡) INCREASES AS	[0BC7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29E1, 0x0041 };
    uint32_t const ces[9] = { 0x0BC7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_046)
{
    // 29E1 0062;	
    // (⧡) INCREASES AS	[0BC7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E1, 0x0062 };
    uint32_t const ces[9] = { 0x0BC7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_047)
{
    // 29E2 0021;	
    // (⧢) SHUFFLE PRODUCT	[0BC8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E2, 0x0021 };
    uint32_t const ces[9] = { 0x0BC8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_048)
{
    // 29E2 003F;	
    // (⧢) SHUFFLE PRODUCT	[0BC8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E2, 0x003F };
    uint32_t const ces[9] = { 0x0BC8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_049)
{
    // 29E2 0061;	
    // (⧢) SHUFFLE PRODUCT	[0BC8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E2, 0x0061 };
    uint32_t const ces[9] = { 0x0BC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_050)
{
    // 29E2 0041;	
    // (⧢) SHUFFLE PRODUCT	[0BC8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29E2, 0x0041 };
    uint32_t const ces[9] = { 0x0BC8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_051)
{
    // 29E2 0062;	
    // (⧢) SHUFFLE PRODUCT	[0BC8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E2, 0x0062 };
    uint32_t const ces[9] = { 0x0BC8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_052)
{
    // 29E3 0021;	
    // (⧣) EQUALS SIGN AND SLANTED PARALLEL	[0BC9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E3, 0x0021 };
    uint32_t const ces[9] = { 0x0BC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_053)
{
    // 29E3 003F;	
    // (⧣) EQUALS SIGN AND SLANTED PARALLEL	[0BC9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E3, 0x003F };
    uint32_t const ces[9] = { 0x0BC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_054)
{
    // 29E3 0061;	
    // (⧣) EQUALS SIGN AND SLANTED PARALLEL	[0BC9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E3, 0x0061 };
    uint32_t const ces[9] = { 0x0BC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_055)
{
    // 29E3 0041;	
    // (⧣) EQUALS SIGN AND SLANTED PARALLEL	[0BC9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29E3, 0x0041 };
    uint32_t const ces[9] = { 0x0BC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_056)
{
    // 29E3 0062;	
    // (⧣) EQUALS SIGN AND SLANTED PARALLEL	[0BC9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E3, 0x0062 };
    uint32_t const ces[9] = { 0x0BC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_057)
{
    // 29E4 0021;	
    // (⧤) EQUALS SIGN AND SLANTED PARALLEL WITH TILDE ABOVE	[0BCA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E4, 0x0021 };
    uint32_t const ces[9] = { 0x0BCA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_058)
{
    // 29E4 003F;	
    // (⧤) EQUALS SIGN AND SLANTED PARALLEL WITH TILDE ABOVE	[0BCA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E4, 0x003F };
    uint32_t const ces[9] = { 0x0BCA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_059)
{
    // 29E4 0061;	
    // (⧤) EQUALS SIGN AND SLANTED PARALLEL WITH TILDE ABOVE	[0BCA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E4, 0x0061 };
    uint32_t const ces[9] = { 0x0BCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_060)
{
    // 29E4 0041;	
    // (⧤) EQUALS SIGN AND SLANTED PARALLEL WITH TILDE ABOVE	[0BCA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29E4, 0x0041 };
    uint32_t const ces[9] = { 0x0BCA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_061)
{
    // 29E4 0062;	
    // (⧤) EQUALS SIGN AND SLANTED PARALLEL WITH TILDE ABOVE	[0BCA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E4, 0x0062 };
    uint32_t const ces[9] = { 0x0BCA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_062)
{
    // 29E5 0021;	
    // (⧥) IDENTICAL TO AND SLANTED PARALLEL	[0BCB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E5, 0x0021 };
    uint32_t const ces[9] = { 0x0BCB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_063)
{
    // 29E5 003F;	
    // (⧥) IDENTICAL TO AND SLANTED PARALLEL	[0BCB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E5, 0x003F };
    uint32_t const ces[9] = { 0x0BCB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_064)
{
    // 29E5 0061;	
    // (⧥) IDENTICAL TO AND SLANTED PARALLEL	[0BCB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E5, 0x0061 };
    uint32_t const ces[9] = { 0x0BCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_065)
{
    // 29E5 0041;	
    // (⧥) IDENTICAL TO AND SLANTED PARALLEL	[0BCB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29E5, 0x0041 };
    uint32_t const ces[9] = { 0x0BCB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_066)
{
    // 29E5 0062;	
    // (⧥) IDENTICAL TO AND SLANTED PARALLEL	[0BCB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E5, 0x0062 };
    uint32_t const ces[9] = { 0x0BCB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_067)
{
    // 29E6 0021;	
    // (⧦) GLEICH STARK	[0BCC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E6, 0x0021 };
    uint32_t const ces[9] = { 0x0BCC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_068)
{
    // 29E6 003F;	
    // (⧦) GLEICH STARK	[0BCC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E6, 0x003F };
    uint32_t const ces[9] = { 0x0BCC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_069)
{
    // 29E6 0061;	
    // (⧦) GLEICH STARK	[0BCC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E6, 0x0061 };
    uint32_t const ces[9] = { 0x0BCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_070)
{
    // 29E6 0041;	
    // (⧦) GLEICH STARK	[0BCC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29E6, 0x0041 };
    uint32_t const ces[9] = { 0x0BCC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_071)
{
    // 29E6 0062;	
    // (⧦) GLEICH STARK	[0BCC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E6, 0x0062 };
    uint32_t const ces[9] = { 0x0BCC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_072)
{
    // 29E7 0021;	
    // (⧧) THERMODYNAMIC	[0BCD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E7, 0x0021 };
    uint32_t const ces[9] = { 0x0BCD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_073)
{
    // 29E7 003F;	
    // (⧧) THERMODYNAMIC	[0BCD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E7, 0x003F };
    uint32_t const ces[9] = { 0x0BCD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_074)
{
    // 29E7 0061;	
    // (⧧) THERMODYNAMIC	[0BCD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E7, 0x0061 };
    uint32_t const ces[9] = { 0x0BCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_075)
{
    // 29E7 0041;	
    // (⧧) THERMODYNAMIC	[0BCD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29E7, 0x0041 };
    uint32_t const ces[9] = { 0x0BCD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_076)
{
    // 29E7 0062;	
    // (⧧) THERMODYNAMIC	[0BCD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E7, 0x0062 };
    uint32_t const ces[9] = { 0x0BCD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_077)
{
    // 29E8 0021;	
    // (⧨) DOWN-POINTING TRIANGLE WITH LEFT HALF BLACK	[0BCE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E8, 0x0021 };
    uint32_t const ces[9] = { 0x0BCE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_078)
{
    // 29E8 003F;	
    // (⧨) DOWN-POINTING TRIANGLE WITH LEFT HALF BLACK	[0BCE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E8, 0x003F };
    uint32_t const ces[9] = { 0x0BCE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_079)
{
    // 29E8 0061;	
    // (⧨) DOWN-POINTING TRIANGLE WITH LEFT HALF BLACK	[0BCE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E8, 0x0061 };
    uint32_t const ces[9] = { 0x0BCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_080)
{
    // 29E8 0041;	
    // (⧨) DOWN-POINTING TRIANGLE WITH LEFT HALF BLACK	[0BCE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29E8, 0x0041 };
    uint32_t const ces[9] = { 0x0BCE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_081)
{
    // 29E8 0062;	
    // (⧨) DOWN-POINTING TRIANGLE WITH LEFT HALF BLACK	[0BCE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E8, 0x0062 };
    uint32_t const ces[9] = { 0x0BCE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_082)
{
    // 29E9 0021;	
    // (⧩) DOWN-POINTING TRIANGLE WITH RIGHT HALF BLACK	[0BCF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E9, 0x0021 };
    uint32_t const ces[9] = { 0x0BCF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_083)
{
    // 29E9 003F;	
    // (⧩) DOWN-POINTING TRIANGLE WITH RIGHT HALF BLACK	[0BCF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E9, 0x003F };
    uint32_t const ces[9] = { 0x0BCF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_084)
{
    // 29E9 0061;	
    // (⧩) DOWN-POINTING TRIANGLE WITH RIGHT HALF BLACK	[0BCF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E9, 0x0061 };
    uint32_t const ces[9] = { 0x0BCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_085)
{
    // 29E9 0041;	
    // (⧩) DOWN-POINTING TRIANGLE WITH RIGHT HALF BLACK	[0BCF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29E9, 0x0041 };
    uint32_t const ces[9] = { 0x0BCF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_086)
{
    // 29E9 0062;	
    // (⧩) DOWN-POINTING TRIANGLE WITH RIGHT HALF BLACK	[0BCF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29E9, 0x0062 };
    uint32_t const ces[9] = { 0x0BCF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_087)
{
    // 29EA 0021;	
    // (⧪) BLACK DIAMOND WITH DOWN ARROW	[0BD0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29EA, 0x0021 };
    uint32_t const ces[9] = { 0x0BD0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_088)
{
    // 29EA 003F;	
    // (⧪) BLACK DIAMOND WITH DOWN ARROW	[0BD0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29EA, 0x003F };
    uint32_t const ces[9] = { 0x0BD0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_089)
{
    // 29EA 0061;	
    // (⧪) BLACK DIAMOND WITH DOWN ARROW	[0BD0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29EA, 0x0061 };
    uint32_t const ces[9] = { 0x0BD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_090)
{
    // 29EA 0041;	
    // (⧪) BLACK DIAMOND WITH DOWN ARROW	[0BD0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29EA, 0x0041 };
    uint32_t const ces[9] = { 0x0BD0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_091)
{
    // 29EA 0062;	
    // (⧪) BLACK DIAMOND WITH DOWN ARROW	[0BD0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29EA, 0x0062 };
    uint32_t const ces[9] = { 0x0BD0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_092)
{
    // 29EB 0021;	
    // (⧫) BLACK LOZENGE	[0BD1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29EB, 0x0021 };
    uint32_t const ces[9] = { 0x0BD1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_093)
{
    // 29EB 003F;	
    // (⧫) BLACK LOZENGE	[0BD1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29EB, 0x003F };
    uint32_t const ces[9] = { 0x0BD1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_094)
{
    // 29EB 0061;	
    // (⧫) BLACK LOZENGE	[0BD1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29EB, 0x0061 };
    uint32_t const ces[9] = { 0x0BD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_095)
{
    // 29EB 0041;	
    // (⧫) BLACK LOZENGE	[0BD1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29EB, 0x0041 };
    uint32_t const ces[9] = { 0x0BD1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_096)
{
    // 29EB 0062;	
    // (⧫) BLACK LOZENGE	[0BD1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29EB, 0x0062 };
    uint32_t const ces[9] = { 0x0BD1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_097)
{
    // 29EC 0021;	
    // (⧬) WHITE CIRCLE WITH DOWN ARROW	[0BD2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29EC, 0x0021 };
    uint32_t const ces[9] = { 0x0BD2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_098)
{
    // 29EC 003F;	
    // (⧬) WHITE CIRCLE WITH DOWN ARROW	[0BD2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29EC, 0x003F };
    uint32_t const ces[9] = { 0x0BD2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_099)
{
    // 29EC 0061;	
    // (⧬) WHITE CIRCLE WITH DOWN ARROW	[0BD2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29EC, 0x0061 };
    uint32_t const ces[9] = { 0x0BD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_100)
{
    // 29EC 0041;	
    // (⧬) WHITE CIRCLE WITH DOWN ARROW	[0BD2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29EC, 0x0041 };
    uint32_t const ces[9] = { 0x0BD2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_101)
{
    // 29EC 0062;	
    // (⧬) WHITE CIRCLE WITH DOWN ARROW	[0BD2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29EC, 0x0062 };
    uint32_t const ces[9] = { 0x0BD2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_102)
{
    // 29ED 0021;	
    // (⧭) BLACK CIRCLE WITH DOWN ARROW	[0BD3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29ED, 0x0021 };
    uint32_t const ces[9] = { 0x0BD3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_103)
{
    // 29ED 003F;	
    // (⧭) BLACK CIRCLE WITH DOWN ARROW	[0BD3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29ED, 0x003F };
    uint32_t const ces[9] = { 0x0BD3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_104)
{
    // 29ED 0061;	
    // (⧭) BLACK CIRCLE WITH DOWN ARROW	[0BD3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29ED, 0x0061 };
    uint32_t const ces[9] = { 0x0BD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_105)
{
    // 29ED 0041;	
    // (⧭) BLACK CIRCLE WITH DOWN ARROW	[0BD3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29ED, 0x0041 };
    uint32_t const ces[9] = { 0x0BD3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_106)
{
    // 29ED 0062;	
    // (⧭) BLACK CIRCLE WITH DOWN ARROW	[0BD3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29ED, 0x0062 };
    uint32_t const ces[9] = { 0x0BD3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_107)
{
    // 29EE 0021;	
    // (⧮) ERROR-BARRED WHITE SQUARE	[0BD4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29EE, 0x0021 };
    uint32_t const ces[9] = { 0x0BD4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_108)
{
    // 29EE 003F;	
    // (⧮) ERROR-BARRED WHITE SQUARE	[0BD4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29EE, 0x003F };
    uint32_t const ces[9] = { 0x0BD4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_109)
{
    // 29EE 0061;	
    // (⧮) ERROR-BARRED WHITE SQUARE	[0BD4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29EE, 0x0061 };
    uint32_t const ces[9] = { 0x0BD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_110)
{
    // 29EE 0041;	
    // (⧮) ERROR-BARRED WHITE SQUARE	[0BD4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29EE, 0x0041 };
    uint32_t const ces[9] = { 0x0BD4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_111)
{
    // 29EE 0062;	
    // (⧮) ERROR-BARRED WHITE SQUARE	[0BD4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29EE, 0x0062 };
    uint32_t const ces[9] = { 0x0BD4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_112)
{
    // 29EF 0021;	
    // (⧯) ERROR-BARRED BLACK SQUARE	[0BD5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29EF, 0x0021 };
    uint32_t const ces[9] = { 0x0BD5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_113)
{
    // 29EF 003F;	
    // (⧯) ERROR-BARRED BLACK SQUARE	[0BD5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29EF, 0x003F };
    uint32_t const ces[9] = { 0x0BD5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_114)
{
    // 29EF 0061;	
    // (⧯) ERROR-BARRED BLACK SQUARE	[0BD5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29EF, 0x0061 };
    uint32_t const ces[9] = { 0x0BD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_115)
{
    // 29EF 0041;	
    // (⧯) ERROR-BARRED BLACK SQUARE	[0BD5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29EF, 0x0041 };
    uint32_t const ces[9] = { 0x0BD5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_116)
{
    // 29EF 0062;	
    // (⧯) ERROR-BARRED BLACK SQUARE	[0BD5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29EF, 0x0062 };
    uint32_t const ces[9] = { 0x0BD5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_117)
{
    // 29F0 0021;	
    // (⧰) ERROR-BARRED WHITE DIAMOND	[0BD6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F0, 0x0021 };
    uint32_t const ces[9] = { 0x0BD6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_118)
{
    // 29F0 003F;	
    // (⧰) ERROR-BARRED WHITE DIAMOND	[0BD6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F0, 0x003F };
    uint32_t const ces[9] = { 0x0BD6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_119)
{
    // 29F0 0061;	
    // (⧰) ERROR-BARRED WHITE DIAMOND	[0BD6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F0, 0x0061 };
    uint32_t const ces[9] = { 0x0BD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_120)
{
    // 29F0 0041;	
    // (⧰) ERROR-BARRED WHITE DIAMOND	[0BD6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29F0, 0x0041 };
    uint32_t const ces[9] = { 0x0BD6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_121)
{
    // 29F0 0062;	
    // (⧰) ERROR-BARRED WHITE DIAMOND	[0BD6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F0, 0x0062 };
    uint32_t const ces[9] = { 0x0BD6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_122)
{
    // 29F1 0021;	
    // (⧱) ERROR-BARRED BLACK DIAMOND	[0BD7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F1, 0x0021 };
    uint32_t const ces[9] = { 0x0BD7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_123)
{
    // 29F1 003F;	
    // (⧱) ERROR-BARRED BLACK DIAMOND	[0BD7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F1, 0x003F };
    uint32_t const ces[9] = { 0x0BD7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_124)
{
    // 29F1 0061;	
    // (⧱) ERROR-BARRED BLACK DIAMOND	[0BD7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F1, 0x0061 };
    uint32_t const ces[9] = { 0x0BD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_125)
{
    // 29F1 0041;	
    // (⧱) ERROR-BARRED BLACK DIAMOND	[0BD7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29F1, 0x0041 };
    uint32_t const ces[9] = { 0x0BD7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_126)
{
    // 29F1 0062;	
    // (⧱) ERROR-BARRED BLACK DIAMOND	[0BD7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F1, 0x0062 };
    uint32_t const ces[9] = { 0x0BD7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_127)
{
    // 29F2 0021;	
    // (⧲) ERROR-BARRED WHITE CIRCLE	[0BD8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F2, 0x0021 };
    uint32_t const ces[9] = { 0x0BD8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_128)
{
    // 29F2 003F;	
    // (⧲) ERROR-BARRED WHITE CIRCLE	[0BD8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F2, 0x003F };
    uint32_t const ces[9] = { 0x0BD8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_129)
{
    // 29F2 0061;	
    // (⧲) ERROR-BARRED WHITE CIRCLE	[0BD8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F2, 0x0061 };
    uint32_t const ces[9] = { 0x0BD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_130)
{
    // 29F2 0041;	
    // (⧲) ERROR-BARRED WHITE CIRCLE	[0BD8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29F2, 0x0041 };
    uint32_t const ces[9] = { 0x0BD8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_131)
{
    // 29F2 0062;	
    // (⧲) ERROR-BARRED WHITE CIRCLE	[0BD8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F2, 0x0062 };
    uint32_t const ces[9] = { 0x0BD8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_132)
{
    // 29F3 0021;	
    // (⧳) ERROR-BARRED BLACK CIRCLE	[0BD9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F3, 0x0021 };
    uint32_t const ces[9] = { 0x0BD9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_133)
{
    // 29F3 003F;	
    // (⧳) ERROR-BARRED BLACK CIRCLE	[0BD9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F3, 0x003F };
    uint32_t const ces[9] = { 0x0BD9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_134)
{
    // 29F3 0061;	
    // (⧳) ERROR-BARRED BLACK CIRCLE	[0BD9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F3, 0x0061 };
    uint32_t const ces[9] = { 0x0BD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_135)
{
    // 29F3 0041;	
    // (⧳) ERROR-BARRED BLACK CIRCLE	[0BD9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29F3, 0x0041 };
    uint32_t const ces[9] = { 0x0BD9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_136)
{
    // 29F3 0062;	
    // (⧳) ERROR-BARRED BLACK CIRCLE	[0BD9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F3, 0x0062 };
    uint32_t const ces[9] = { 0x0BD9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_137)
{
    // 29F4 0021;	
    // (⧴) RULE-DELAYED	[0BDA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F4, 0x0021 };
    uint32_t const ces[9] = { 0x0BDA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_138)
{
    // 29F4 003F;	
    // (⧴) RULE-DELAYED	[0BDA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F4, 0x003F };
    uint32_t const ces[9] = { 0x0BDA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_139)
{
    // 29F4 0061;	
    // (⧴) RULE-DELAYED	[0BDA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F4, 0x0061 };
    uint32_t const ces[9] = { 0x0BDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_140)
{
    // 29F4 0041;	
    // (⧴) RULE-DELAYED	[0BDA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29F4, 0x0041 };
    uint32_t const ces[9] = { 0x0BDA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_141)
{
    // 29F4 0062;	
    // (⧴) RULE-DELAYED	[0BDA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F4, 0x0062 };
    uint32_t const ces[9] = { 0x0BDA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_142)
{
    // 29F5 0021;	
    // (⧵) REVERSE SOLIDUS OPERATOR	[0BDB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F5, 0x0021 };
    uint32_t const ces[9] = { 0x0BDB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_143)
{
    // 29F5 003F;	
    // (⧵) REVERSE SOLIDUS OPERATOR	[0BDB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F5, 0x003F };
    uint32_t const ces[9] = { 0x0BDB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_144)
{
    // 29F5 0061;	
    // (⧵) REVERSE SOLIDUS OPERATOR	[0BDB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F5, 0x0061 };
    uint32_t const ces[9] = { 0x0BDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_145)
{
    // 29F5 0041;	
    // (⧵) REVERSE SOLIDUS OPERATOR	[0BDB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29F5, 0x0041 };
    uint32_t const ces[9] = { 0x0BDB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_146)
{
    // 29F5 0062;	
    // (⧵) REVERSE SOLIDUS OPERATOR	[0BDB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F5, 0x0062 };
    uint32_t const ces[9] = { 0x0BDB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_147)
{
    // 29F6 0021;	
    // (⧶) SOLIDUS WITH OVERBAR	[0BDC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F6, 0x0021 };
    uint32_t const ces[9] = { 0x0BDC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_148)
{
    // 29F6 003F;	
    // (⧶) SOLIDUS WITH OVERBAR	[0BDC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F6, 0x003F };
    uint32_t const ces[9] = { 0x0BDC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_149)
{
    // 29F6 0061;	
    // (⧶) SOLIDUS WITH OVERBAR	[0BDC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F6, 0x0061 };
    uint32_t const ces[9] = { 0x0BDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_150)
{
    // 29F6 0041;	
    // (⧶) SOLIDUS WITH OVERBAR	[0BDC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29F6, 0x0041 };
    uint32_t const ces[9] = { 0x0BDC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_151)
{
    // 29F6 0062;	
    // (⧶) SOLIDUS WITH OVERBAR	[0BDC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F6, 0x0062 };
    uint32_t const ces[9] = { 0x0BDC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_152)
{
    // 29F7 0021;	
    // (⧷) REVERSE SOLIDUS WITH HORIZONTAL STROKE	[0BDD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F7, 0x0021 };
    uint32_t const ces[9] = { 0x0BDD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_153)
{
    // 29F7 003F;	
    // (⧷) REVERSE SOLIDUS WITH HORIZONTAL STROKE	[0BDD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F7, 0x003F };
    uint32_t const ces[9] = { 0x0BDD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_154)
{
    // 29F7 0061;	
    // (⧷) REVERSE SOLIDUS WITH HORIZONTAL STROKE	[0BDD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F7, 0x0061 };
    uint32_t const ces[9] = { 0x0BDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_155)
{
    // 29F7 0041;	
    // (⧷) REVERSE SOLIDUS WITH HORIZONTAL STROKE	[0BDD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29F7, 0x0041 };
    uint32_t const ces[9] = { 0x0BDD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_156)
{
    // 29F7 0062;	
    // (⧷) REVERSE SOLIDUS WITH HORIZONTAL STROKE	[0BDD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F7, 0x0062 };
    uint32_t const ces[9] = { 0x0BDD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_157)
{
    // 29F8 0021;	
    // (⧸) BIG SOLIDUS	[0BDE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F8, 0x0021 };
    uint32_t const ces[9] = { 0x0BDE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_158)
{
    // 29F8 003F;	
    // (⧸) BIG SOLIDUS	[0BDE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F8, 0x003F };
    uint32_t const ces[9] = { 0x0BDE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_159)
{
    // 29F8 0061;	
    // (⧸) BIG SOLIDUS	[0BDE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F8, 0x0061 };
    uint32_t const ces[9] = { 0x0BDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_160)
{
    // 29F8 0041;	
    // (⧸) BIG SOLIDUS	[0BDE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29F8, 0x0041 };
    uint32_t const ces[9] = { 0x0BDE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_161)
{
    // 29F8 0062;	
    // (⧸) BIG SOLIDUS	[0BDE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F8, 0x0062 };
    uint32_t const ces[9] = { 0x0BDE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_162)
{
    // 29F9 0021;	
    // (⧹) BIG REVERSE SOLIDUS	[0BDF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F9, 0x0021 };
    uint32_t const ces[9] = { 0x0BDF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_163)
{
    // 29F9 003F;	
    // (⧹) BIG REVERSE SOLIDUS	[0BDF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F9, 0x003F };
    uint32_t const ces[9] = { 0x0BDF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_164)
{
    // 29F9 0061;	
    // (⧹) BIG REVERSE SOLIDUS	[0BDF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F9, 0x0061 };
    uint32_t const ces[9] = { 0x0BDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_165)
{
    // 29F9 0041;	
    // (⧹) BIG REVERSE SOLIDUS	[0BDF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29F9, 0x0041 };
    uint32_t const ces[9] = { 0x0BDF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_166)
{
    // 29F9 0062;	
    // (⧹) BIG REVERSE SOLIDUS	[0BDF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29F9, 0x0062 };
    uint32_t const ces[9] = { 0x0BDF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_167)
{
    // 29FA 0021;	
    // (⧺) DOUBLE PLUS	[0BE0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FA, 0x0021 };
    uint32_t const ces[9] = { 0x0BE0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_168)
{
    // 29FA 003F;	
    // (⧺) DOUBLE PLUS	[0BE0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FA, 0x003F };
    uint32_t const ces[9] = { 0x0BE0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_169)
{
    // 29FA 0061;	
    // (⧺) DOUBLE PLUS	[0BE0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FA, 0x0061 };
    uint32_t const ces[9] = { 0x0BE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_170)
{
    // 29FA 0041;	
    // (⧺) DOUBLE PLUS	[0BE0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29FA, 0x0041 };
    uint32_t const ces[9] = { 0x0BE0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_171)
{
    // 29FA 0062;	
    // (⧺) DOUBLE PLUS	[0BE0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FA, 0x0062 };
    uint32_t const ces[9] = { 0x0BE0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_172)
{
    // 29FB 0021;	
    // (⧻) TRIPLE PLUS	[0BE1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FB, 0x0021 };
    uint32_t const ces[9] = { 0x0BE1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_173)
{
    // 29FB 003F;	
    // (⧻) TRIPLE PLUS	[0BE1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FB, 0x003F };
    uint32_t const ces[9] = { 0x0BE1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_174)
{
    // 29FB 0061;	
    // (⧻) TRIPLE PLUS	[0BE1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FB, 0x0061 };
    uint32_t const ces[9] = { 0x0BE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_175)
{
    // 29FB 0041;	
    // (⧻) TRIPLE PLUS	[0BE1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29FB, 0x0041 };
    uint32_t const ces[9] = { 0x0BE1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_176)
{
    // 29FB 0062;	
    // (⧻) TRIPLE PLUS	[0BE1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FB, 0x0062 };
    uint32_t const ces[9] = { 0x0BE1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_177)
{
    // 29FE 0021;	
    // (⧾) TINY	[0BE2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FE, 0x0021 };
    uint32_t const ces[9] = { 0x0BE2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_178)
{
    // 29FE 003F;	
    // (⧾) TINY	[0BE2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FE, 0x003F };
    uint32_t const ces[9] = { 0x0BE2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_179)
{
    // 29FE 0061;	
    // (⧾) TINY	[0BE2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FE, 0x0061 };
    uint32_t const ces[9] = { 0x0BE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_180)
{
    // 29FE 0041;	
    // (⧾) TINY	[0BE2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29FE, 0x0041 };
    uint32_t const ces[9] = { 0x0BE2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_181)
{
    // 29FE 0062;	
    // (⧾) TINY	[0BE2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FE, 0x0062 };
    uint32_t const ces[9] = { 0x0BE2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_182)
{
    // 29FF 0021;	
    // (⧿) MINY	[0BE3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FF, 0x0021 };
    uint32_t const ces[9] = { 0x0BE3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_183)
{
    // 29FF 003F;	
    // (⧿) MINY	[0BE3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FF, 0x003F };
    uint32_t const ces[9] = { 0x0BE3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_184)
{
    // 29FF 0061;	
    // (⧿) MINY	[0BE3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FF, 0x0061 };
    uint32_t const ces[9] = { 0x0BE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_185)
{
    // 29FF 0041;	
    // (⧿) MINY	[0BE3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29FF, 0x0041 };
    uint32_t const ces[9] = { 0x0BE3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_186)
{
    // 29FF 0062;	
    // (⧿) MINY	[0BE3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FF, 0x0062 };
    uint32_t const ces[9] = { 0x0BE3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_187)
{
    // 2A00 0021;	
    // (⨀) N-ARY CIRCLED DOT OPERATOR	[0BE4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A00, 0x0021 };
    uint32_t const ces[9] = { 0x0BE4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_188)
{
    // 2A00 003F;	
    // (⨀) N-ARY CIRCLED DOT OPERATOR	[0BE4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A00, 0x003F };
    uint32_t const ces[9] = { 0x0BE4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_189)
{
    // 2A00 0061;	
    // (⨀) N-ARY CIRCLED DOT OPERATOR	[0BE4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A00, 0x0061 };
    uint32_t const ces[9] = { 0x0BE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_190)
{
    // 2A00 0041;	
    // (⨀) N-ARY CIRCLED DOT OPERATOR	[0BE4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A00, 0x0041 };
    uint32_t const ces[9] = { 0x0BE4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_191)
{
    // 2A00 0062;	
    // (⨀) N-ARY CIRCLED DOT OPERATOR	[0BE4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A00, 0x0062 };
    uint32_t const ces[9] = { 0x0BE4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_192)
{
    // 2A01 0021;	
    // (⨁) N-ARY CIRCLED PLUS OPERATOR	[0BE5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A01, 0x0021 };
    uint32_t const ces[9] = { 0x0BE5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_193)
{
    // 2A01 003F;	
    // (⨁) N-ARY CIRCLED PLUS OPERATOR	[0BE5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A01, 0x003F };
    uint32_t const ces[9] = { 0x0BE5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_194)
{
    // 2A01 0061;	
    // (⨁) N-ARY CIRCLED PLUS OPERATOR	[0BE5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A01, 0x0061 };
    uint32_t const ces[9] = { 0x0BE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_195)
{
    // 2A01 0041;	
    // (⨁) N-ARY CIRCLED PLUS OPERATOR	[0BE5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A01, 0x0041 };
    uint32_t const ces[9] = { 0x0BE5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_196)
{
    // 2A01 0062;	
    // (⨁) N-ARY CIRCLED PLUS OPERATOR	[0BE5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A01, 0x0062 };
    uint32_t const ces[9] = { 0x0BE5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_197)
{
    // 2A02 0021;	
    // (⨂) N-ARY CIRCLED TIMES OPERATOR	[0BE6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A02, 0x0021 };
    uint32_t const ces[9] = { 0x0BE6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_198)
{
    // 2A02 003F;	
    // (⨂) N-ARY CIRCLED TIMES OPERATOR	[0BE6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A02, 0x003F };
    uint32_t const ces[9] = { 0x0BE6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_199)
{
    // 2A02 0061;	
    // (⨂) N-ARY CIRCLED TIMES OPERATOR	[0BE6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A02, 0x0061 };
    uint32_t const ces[9] = { 0x0BE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_200)
{
    // 2A02 0041;	
    // (⨂) N-ARY CIRCLED TIMES OPERATOR	[0BE6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A02, 0x0041 };
    uint32_t const ces[9] = { 0x0BE6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_201)
{
    // 2A02 0062;	
    // (⨂) N-ARY CIRCLED TIMES OPERATOR	[0BE6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A02, 0x0062 };
    uint32_t const ces[9] = { 0x0BE6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_202)
{
    // 2A03 0021;	
    // (⨃) N-ARY UNION OPERATOR WITH DOT	[0BE7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A03, 0x0021 };
    uint32_t const ces[9] = { 0x0BE7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_203)
{
    // 2A03 003F;	
    // (⨃) N-ARY UNION OPERATOR WITH DOT	[0BE7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A03, 0x003F };
    uint32_t const ces[9] = { 0x0BE7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_204)
{
    // 2A03 0061;	
    // (⨃) N-ARY UNION OPERATOR WITH DOT	[0BE7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A03, 0x0061 };
    uint32_t const ces[9] = { 0x0BE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_205)
{
    // 2A03 0041;	
    // (⨃) N-ARY UNION OPERATOR WITH DOT	[0BE7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A03, 0x0041 };
    uint32_t const ces[9] = { 0x0BE7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_206)
{
    // 2A03 0062;	
    // (⨃) N-ARY UNION OPERATOR WITH DOT	[0BE7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A03, 0x0062 };
    uint32_t const ces[9] = { 0x0BE7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_207)
{
    // 2A04 0021;	
    // (⨄) N-ARY UNION OPERATOR WITH PLUS	[0BE8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A04, 0x0021 };
    uint32_t const ces[9] = { 0x0BE8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_208)
{
    // 2A04 003F;	
    // (⨄) N-ARY UNION OPERATOR WITH PLUS	[0BE8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A04, 0x003F };
    uint32_t const ces[9] = { 0x0BE8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_209)
{
    // 2A04 0061;	
    // (⨄) N-ARY UNION OPERATOR WITH PLUS	[0BE8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A04, 0x0061 };
    uint32_t const ces[9] = { 0x0BE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_210)
{
    // 2A04 0041;	
    // (⨄) N-ARY UNION OPERATOR WITH PLUS	[0BE8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A04, 0x0041 };
    uint32_t const ces[9] = { 0x0BE8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_211)
{
    // 2A04 0062;	
    // (⨄) N-ARY UNION OPERATOR WITH PLUS	[0BE8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A04, 0x0062 };
    uint32_t const ces[9] = { 0x0BE8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_212)
{
    // 2A05 0021;	
    // (⨅) N-ARY SQUARE INTERSECTION OPERATOR	[0BE9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A05, 0x0021 };
    uint32_t const ces[9] = { 0x0BE9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_213)
{
    // 2A05 003F;	
    // (⨅) N-ARY SQUARE INTERSECTION OPERATOR	[0BE9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A05, 0x003F };
    uint32_t const ces[9] = { 0x0BE9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_214)
{
    // 2A05 0061;	
    // (⨅) N-ARY SQUARE INTERSECTION OPERATOR	[0BE9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A05, 0x0061 };
    uint32_t const ces[9] = { 0x0BE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_215)
{
    // 2A05 0041;	
    // (⨅) N-ARY SQUARE INTERSECTION OPERATOR	[0BE9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A05, 0x0041 };
    uint32_t const ces[9] = { 0x0BE9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_216)
{
    // 2A05 0062;	
    // (⨅) N-ARY SQUARE INTERSECTION OPERATOR	[0BE9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A05, 0x0062 };
    uint32_t const ces[9] = { 0x0BE9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_217)
{
    // 2A06 0021;	
    // (⨆) N-ARY SQUARE UNION OPERATOR	[0BEA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A06, 0x0021 };
    uint32_t const ces[9] = { 0x0BEA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_218)
{
    // 2A06 003F;	
    // (⨆) N-ARY SQUARE UNION OPERATOR	[0BEA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A06, 0x003F };
    uint32_t const ces[9] = { 0x0BEA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_219)
{
    // 2A06 0061;	
    // (⨆) N-ARY SQUARE UNION OPERATOR	[0BEA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A06, 0x0061 };
    uint32_t const ces[9] = { 0x0BEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_220)
{
    // 2A06 0041;	
    // (⨆) N-ARY SQUARE UNION OPERATOR	[0BEA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A06, 0x0041 };
    uint32_t const ces[9] = { 0x0BEA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_221)
{
    // 2A06 0062;	
    // (⨆) N-ARY SQUARE UNION OPERATOR	[0BEA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A06, 0x0062 };
    uint32_t const ces[9] = { 0x0BEA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_222)
{
    // 2A07 0021;	
    // (⨇) TWO LOGICAL AND OPERATOR	[0BEB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A07, 0x0021 };
    uint32_t const ces[9] = { 0x0BEB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_223)
{
    // 2A07 003F;	
    // (⨇) TWO LOGICAL AND OPERATOR	[0BEB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A07, 0x003F };
    uint32_t const ces[9] = { 0x0BEB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_224)
{
    // 2A07 0061;	
    // (⨇) TWO LOGICAL AND OPERATOR	[0BEB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A07, 0x0061 };
    uint32_t const ces[9] = { 0x0BEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_225)
{
    // 2A07 0041;	
    // (⨇) TWO LOGICAL AND OPERATOR	[0BEB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A07, 0x0041 };
    uint32_t const ces[9] = { 0x0BEB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_226)
{
    // 2A07 0062;	
    // (⨇) TWO LOGICAL AND OPERATOR	[0BEB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A07, 0x0062 };
    uint32_t const ces[9] = { 0x0BEB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_227)
{
    // 2A08 0021;	
    // (⨈) TWO LOGICAL OR OPERATOR	[0BEC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A08, 0x0021 };
    uint32_t const ces[9] = { 0x0BEC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_228)
{
    // 2A08 003F;	
    // (⨈) TWO LOGICAL OR OPERATOR	[0BEC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A08, 0x003F };
    uint32_t const ces[9] = { 0x0BEC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_229)
{
    // 2A08 0061;	
    // (⨈) TWO LOGICAL OR OPERATOR	[0BEC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A08, 0x0061 };
    uint32_t const ces[9] = { 0x0BEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_230)
{
    // 2A08 0041;	
    // (⨈) TWO LOGICAL OR OPERATOR	[0BEC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A08, 0x0041 };
    uint32_t const ces[9] = { 0x0BEC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_231)
{
    // 2A08 0062;	
    // (⨈) TWO LOGICAL OR OPERATOR	[0BEC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A08, 0x0062 };
    uint32_t const ces[9] = { 0x0BEC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_232)
{
    // 2A09 0021;	
    // (⨉) N-ARY TIMES OPERATOR	[0BED 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A09, 0x0021 };
    uint32_t const ces[9] = { 0x0BED, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_233)
{
    // 2A09 003F;	
    // (⨉) N-ARY TIMES OPERATOR	[0BED 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A09, 0x003F };
    uint32_t const ces[9] = { 0x0BED, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_234)
{
    // 2A09 0061;	
    // (⨉) N-ARY TIMES OPERATOR	[0BED 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A09, 0x0061 };
    uint32_t const ces[9] = { 0x0BED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_235)
{
    // 2A09 0041;	
    // (⨉) N-ARY TIMES OPERATOR	[0BED 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A09, 0x0041 };
    uint32_t const ces[9] = { 0x0BED, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_236)
{
    // 2A09 0062;	
    // (⨉) N-ARY TIMES OPERATOR	[0BED 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A09, 0x0062 };
    uint32_t const ces[9] = { 0x0BED, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_237)
{
    // 2A0A 0021;	
    // (⨊) MODULO TWO SUM	[0BEE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A0A, 0x0021 };
    uint32_t const ces[9] = { 0x0BEE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_238)
{
    // 2A0A 003F;	
    // (⨊) MODULO TWO SUM	[0BEE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A0A, 0x003F };
    uint32_t const ces[9] = { 0x0BEE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_239)
{
    // 2A0A 0061;	
    // (⨊) MODULO TWO SUM	[0BEE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A0A, 0x0061 };
    uint32_t const ces[9] = { 0x0BEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_240)
{
    // 2A0A 0041;	
    // (⨊) MODULO TWO SUM	[0BEE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A0A, 0x0041 };
    uint32_t const ces[9] = { 0x0BEE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_241)
{
    // 2A0A 0062;	
    // (⨊) MODULO TWO SUM	[0BEE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A0A, 0x0062 };
    uint32_t const ces[9] = { 0x0BEE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_242)
{
    // 2A0B 0021;	
    // (⨋) SUMMATION WITH INTEGRAL	[0BEF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A0B, 0x0021 };
    uint32_t const ces[9] = { 0x0BEF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_243)
{
    // 2A0B 003F;	
    // (⨋) SUMMATION WITH INTEGRAL	[0BEF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A0B, 0x003F };
    uint32_t const ces[9] = { 0x0BEF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_244)
{
    // 2A0B 0061;	
    // (⨋) SUMMATION WITH INTEGRAL	[0BEF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A0B, 0x0061 };
    uint32_t const ces[9] = { 0x0BEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_245)
{
    // 2A0B 0041;	
    // (⨋) SUMMATION WITH INTEGRAL	[0BEF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A0B, 0x0041 };
    uint32_t const ces[9] = { 0x0BEF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_246)
{
    // 2A0B 0062;	
    // (⨋) SUMMATION WITH INTEGRAL	[0BEF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A0B, 0x0062 };
    uint32_t const ces[9] = { 0x0BEF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_247)
{
    // 2A0D 0021;	
    // (⨍) FINITE PART INTEGRAL	[0BF0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A0D, 0x0021 };
    uint32_t const ces[9] = { 0x0BF0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_248)
{
    // 2A0D 003F;	
    // (⨍) FINITE PART INTEGRAL	[0BF0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A0D, 0x003F };
    uint32_t const ces[9] = { 0x0BF0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_249)
{
    // 2A0D 0061;	
    // (⨍) FINITE PART INTEGRAL	[0BF0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A0D, 0x0061 };
    uint32_t const ces[9] = { 0x0BF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_250)
{
    // 2A0D 0041;	
    // (⨍) FINITE PART INTEGRAL	[0BF0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A0D, 0x0041 };
    uint32_t const ces[9] = { 0x0BF0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_251)
{
    // 2A0D 0062;	
    // (⨍) FINITE PART INTEGRAL	[0BF0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A0D, 0x0062 };
    uint32_t const ces[9] = { 0x0BF0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_252)
{
    // 2A0E 0021;	
    // (⨎) INTEGRAL WITH DOUBLE STROKE	[0BF1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A0E, 0x0021 };
    uint32_t const ces[9] = { 0x0BF1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_253)
{
    // 2A0E 003F;	
    // (⨎) INTEGRAL WITH DOUBLE STROKE	[0BF1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A0E, 0x003F };
    uint32_t const ces[9] = { 0x0BF1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_254)
{
    // 2A0E 0061;	
    // (⨎) INTEGRAL WITH DOUBLE STROKE	[0BF1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A0E, 0x0061 };
    uint32_t const ces[9] = { 0x0BF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_255)
{
    // 2A0E 0041;	
    // (⨎) INTEGRAL WITH DOUBLE STROKE	[0BF1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A0E, 0x0041 };
    uint32_t const ces[9] = { 0x0BF1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_256)
{
    // 2A0E 0062;	
    // (⨎) INTEGRAL WITH DOUBLE STROKE	[0BF1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A0E, 0x0062 };
    uint32_t const ces[9] = { 0x0BF1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_257)
{
    // 2A0F 0021;	
    // (⨏) INTEGRAL AVERAGE WITH SLASH	[0BF2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A0F, 0x0021 };
    uint32_t const ces[9] = { 0x0BF2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_258)
{
    // 2A0F 003F;	
    // (⨏) INTEGRAL AVERAGE WITH SLASH	[0BF2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A0F, 0x003F };
    uint32_t const ces[9] = { 0x0BF2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_259)
{
    // 2A0F 0061;	
    // (⨏) INTEGRAL AVERAGE WITH SLASH	[0BF2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A0F, 0x0061 };
    uint32_t const ces[9] = { 0x0BF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_260)
{
    // 2A0F 0041;	
    // (⨏) INTEGRAL AVERAGE WITH SLASH	[0BF2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A0F, 0x0041 };
    uint32_t const ces[9] = { 0x0BF2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_261)
{
    // 2A0F 0062;	
    // (⨏) INTEGRAL AVERAGE WITH SLASH	[0BF2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A0F, 0x0062 };
    uint32_t const ces[9] = { 0x0BF2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_262)
{
    // 2A10 0021;	
    // (⨐) CIRCULATION FUNCTION	[0BF3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A10, 0x0021 };
    uint32_t const ces[9] = { 0x0BF3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_263)
{
    // 2A10 003F;	
    // (⨐) CIRCULATION FUNCTION	[0BF3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A10, 0x003F };
    uint32_t const ces[9] = { 0x0BF3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_264)
{
    // 2A10 0061;	
    // (⨐) CIRCULATION FUNCTION	[0BF3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A10, 0x0061 };
    uint32_t const ces[9] = { 0x0BF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_265)
{
    // 2A10 0041;	
    // (⨐) CIRCULATION FUNCTION	[0BF3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A10, 0x0041 };
    uint32_t const ces[9] = { 0x0BF3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_266)
{
    // 2A10 0062;	
    // (⨐) CIRCULATION FUNCTION	[0BF3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A10, 0x0062 };
    uint32_t const ces[9] = { 0x0BF3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_267)
{
    // 2A11 0021;	
    // (⨑) ANTICLOCKWISE INTEGRATION	[0BF4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A11, 0x0021 };
    uint32_t const ces[9] = { 0x0BF4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_268)
{
    // 2A11 003F;	
    // (⨑) ANTICLOCKWISE INTEGRATION	[0BF4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A11, 0x003F };
    uint32_t const ces[9] = { 0x0BF4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_269)
{
    // 2A11 0061;	
    // (⨑) ANTICLOCKWISE INTEGRATION	[0BF4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A11, 0x0061 };
    uint32_t const ces[9] = { 0x0BF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_270)
{
    // 2A11 0041;	
    // (⨑) ANTICLOCKWISE INTEGRATION	[0BF4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A11, 0x0041 };
    uint32_t const ces[9] = { 0x0BF4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_271)
{
    // 2A11 0062;	
    // (⨑) ANTICLOCKWISE INTEGRATION	[0BF4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A11, 0x0062 };
    uint32_t const ces[9] = { 0x0BF4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_272)
{
    // 2A12 0021;	
    // (⨒) LINE INTEGRATION WITH RECTANGULAR PATH AROUND POLE	[0BF5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A12, 0x0021 };
    uint32_t const ces[9] = { 0x0BF5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_273)
{
    // 2A12 003F;	
    // (⨒) LINE INTEGRATION WITH RECTANGULAR PATH AROUND POLE	[0BF5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A12, 0x003F };
    uint32_t const ces[9] = { 0x0BF5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_274)
{
    // 2A12 0061;	
    // (⨒) LINE INTEGRATION WITH RECTANGULAR PATH AROUND POLE	[0BF5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A12, 0x0061 };
    uint32_t const ces[9] = { 0x0BF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_275)
{
    // 2A12 0041;	
    // (⨒) LINE INTEGRATION WITH RECTANGULAR PATH AROUND POLE	[0BF5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A12, 0x0041 };
    uint32_t const ces[9] = { 0x0BF5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_276)
{
    // 2A12 0062;	
    // (⨒) LINE INTEGRATION WITH RECTANGULAR PATH AROUND POLE	[0BF5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A12, 0x0062 };
    uint32_t const ces[9] = { 0x0BF5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_277)
{
    // 2A13 0021;	
    // (⨓) LINE INTEGRATION WITH SEMICIRCULAR PATH AROUND POLE	[0BF6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A13, 0x0021 };
    uint32_t const ces[9] = { 0x0BF6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_278)
{
    // 2A13 003F;	
    // (⨓) LINE INTEGRATION WITH SEMICIRCULAR PATH AROUND POLE	[0BF6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A13, 0x003F };
    uint32_t const ces[9] = { 0x0BF6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_279)
{
    // 2A13 0061;	
    // (⨓) LINE INTEGRATION WITH SEMICIRCULAR PATH AROUND POLE	[0BF6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A13, 0x0061 };
    uint32_t const ces[9] = { 0x0BF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_280)
{
    // 2A13 0041;	
    // (⨓) LINE INTEGRATION WITH SEMICIRCULAR PATH AROUND POLE	[0BF6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A13, 0x0041 };
    uint32_t const ces[9] = { 0x0BF6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_281)
{
    // 2A13 0062;	
    // (⨓) LINE INTEGRATION WITH SEMICIRCULAR PATH AROUND POLE	[0BF6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A13, 0x0062 };
    uint32_t const ces[9] = { 0x0BF6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_282)
{
    // 2A14 0021;	
    // (⨔) LINE INTEGRATION NOT INCLUDING THE POLE	[0BF7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A14, 0x0021 };
    uint32_t const ces[9] = { 0x0BF7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_283)
{
    // 2A14 003F;	
    // (⨔) LINE INTEGRATION NOT INCLUDING THE POLE	[0BF7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A14, 0x003F };
    uint32_t const ces[9] = { 0x0BF7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_284)
{
    // 2A14 0061;	
    // (⨔) LINE INTEGRATION NOT INCLUDING THE POLE	[0BF7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A14, 0x0061 };
    uint32_t const ces[9] = { 0x0BF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_285)
{
    // 2A14 0041;	
    // (⨔) LINE INTEGRATION NOT INCLUDING THE POLE	[0BF7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A14, 0x0041 };
    uint32_t const ces[9] = { 0x0BF7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_286)
{
    // 2A14 0062;	
    // (⨔) LINE INTEGRATION NOT INCLUDING THE POLE	[0BF7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A14, 0x0062 };
    uint32_t const ces[9] = { 0x0BF7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_287)
{
    // 2A15 0021;	
    // (⨕) INTEGRAL AROUND A POINT OPERATOR	[0BF8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A15, 0x0021 };
    uint32_t const ces[9] = { 0x0BF8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_288)
{
    // 2A15 003F;	
    // (⨕) INTEGRAL AROUND A POINT OPERATOR	[0BF8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A15, 0x003F };
    uint32_t const ces[9] = { 0x0BF8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_289)
{
    // 2A15 0061;	
    // (⨕) INTEGRAL AROUND A POINT OPERATOR	[0BF8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A15, 0x0061 };
    uint32_t const ces[9] = { 0x0BF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_290)
{
    // 2A15 0041;	
    // (⨕) INTEGRAL AROUND A POINT OPERATOR	[0BF8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A15, 0x0041 };
    uint32_t const ces[9] = { 0x0BF8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_291)
{
    // 2A15 0062;	
    // (⨕) INTEGRAL AROUND A POINT OPERATOR	[0BF8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A15, 0x0062 };
    uint32_t const ces[9] = { 0x0BF8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_292)
{
    // 2A16 0021;	
    // (⨖) QUATERNION INTEGRAL OPERATOR	[0BF9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A16, 0x0021 };
    uint32_t const ces[9] = { 0x0BF9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_293)
{
    // 2A16 003F;	
    // (⨖) QUATERNION INTEGRAL OPERATOR	[0BF9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A16, 0x003F };
    uint32_t const ces[9] = { 0x0BF9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_294)
{
    // 2A16 0061;	
    // (⨖) QUATERNION INTEGRAL OPERATOR	[0BF9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A16, 0x0061 };
    uint32_t const ces[9] = { 0x0BF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_295)
{
    // 2A16 0041;	
    // (⨖) QUATERNION INTEGRAL OPERATOR	[0BF9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A16, 0x0041 };
    uint32_t const ces[9] = { 0x0BF9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_296)
{
    // 2A16 0062;	
    // (⨖) QUATERNION INTEGRAL OPERATOR	[0BF9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A16, 0x0062 };
    uint32_t const ces[9] = { 0x0BF9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_297)
{
    // 2A17 0021;	
    // (⨗) INTEGRAL WITH LEFTWARDS ARROW WITH HOOK	[0BFA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A17, 0x0021 };
    uint32_t const ces[9] = { 0x0BFA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_298)
{
    // 2A17 003F;	
    // (⨗) INTEGRAL WITH LEFTWARDS ARROW WITH HOOK	[0BFA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A17, 0x003F };
    uint32_t const ces[9] = { 0x0BFA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_299)
{
    // 2A17 0061;	
    // (⨗) INTEGRAL WITH LEFTWARDS ARROW WITH HOOK	[0BFA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A17, 0x0061 };
    uint32_t const ces[9] = { 0x0BFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_300)
{
    // 2A17 0041;	
    // (⨗) INTEGRAL WITH LEFTWARDS ARROW WITH HOOK	[0BFA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A17, 0x0041 };
    uint32_t const ces[9] = { 0x0BFA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_301)
{
    // 2A17 0062;	
    // (⨗) INTEGRAL WITH LEFTWARDS ARROW WITH HOOK	[0BFA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A17, 0x0062 };
    uint32_t const ces[9] = { 0x0BFA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_302)
{
    // 2A18 0021;	
    // (⨘) INTEGRAL WITH TIMES SIGN	[0BFB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A18, 0x0021 };
    uint32_t const ces[9] = { 0x0BFB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_303)
{
    // 2A18 003F;	
    // (⨘) INTEGRAL WITH TIMES SIGN	[0BFB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A18, 0x003F };
    uint32_t const ces[9] = { 0x0BFB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_304)
{
    // 2A18 0061;	
    // (⨘) INTEGRAL WITH TIMES SIGN	[0BFB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A18, 0x0061 };
    uint32_t const ces[9] = { 0x0BFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_305)
{
    // 2A18 0041;	
    // (⨘) INTEGRAL WITH TIMES SIGN	[0BFB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A18, 0x0041 };
    uint32_t const ces[9] = { 0x0BFB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_306)
{
    // 2A18 0062;	
    // (⨘) INTEGRAL WITH TIMES SIGN	[0BFB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A18, 0x0062 };
    uint32_t const ces[9] = { 0x0BFB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_307)
{
    // 2A19 0021;	
    // (⨙) INTEGRAL WITH INTERSECTION	[0BFC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A19, 0x0021 };
    uint32_t const ces[9] = { 0x0BFC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_308)
{
    // 2A19 003F;	
    // (⨙) INTEGRAL WITH INTERSECTION	[0BFC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A19, 0x003F };
    uint32_t const ces[9] = { 0x0BFC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_309)
{
    // 2A19 0061;	
    // (⨙) INTEGRAL WITH INTERSECTION	[0BFC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A19, 0x0061 };
    uint32_t const ces[9] = { 0x0BFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_310)
{
    // 2A19 0041;	
    // (⨙) INTEGRAL WITH INTERSECTION	[0BFC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A19, 0x0041 };
    uint32_t const ces[9] = { 0x0BFC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_311)
{
    // 2A19 0062;	
    // (⨙) INTEGRAL WITH INTERSECTION	[0BFC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A19, 0x0062 };
    uint32_t const ces[9] = { 0x0BFC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_312)
{
    // 2A1A 0021;	
    // (⨚) INTEGRAL WITH UNION	[0BFD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1A, 0x0021 };
    uint32_t const ces[9] = { 0x0BFD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_313)
{
    // 2A1A 003F;	
    // (⨚) INTEGRAL WITH UNION	[0BFD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1A, 0x003F };
    uint32_t const ces[9] = { 0x0BFD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_314)
{
    // 2A1A 0061;	
    // (⨚) INTEGRAL WITH UNION	[0BFD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1A, 0x0061 };
    uint32_t const ces[9] = { 0x0BFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_315)
{
    // 2A1A 0041;	
    // (⨚) INTEGRAL WITH UNION	[0BFD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A1A, 0x0041 };
    uint32_t const ces[9] = { 0x0BFD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_316)
{
    // 2A1A 0062;	
    // (⨚) INTEGRAL WITH UNION	[0BFD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1A, 0x0062 };
    uint32_t const ces[9] = { 0x0BFD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_317)
{
    // 2A1B 0021;	
    // (⨛) INTEGRAL WITH OVERBAR	[0BFE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1B, 0x0021 };
    uint32_t const ces[9] = { 0x0BFE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_318)
{
    // 2A1B 003F;	
    // (⨛) INTEGRAL WITH OVERBAR	[0BFE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1B, 0x003F };
    uint32_t const ces[9] = { 0x0BFE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_319)
{
    // 2A1B 0061;	
    // (⨛) INTEGRAL WITH OVERBAR	[0BFE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1B, 0x0061 };
    uint32_t const ces[9] = { 0x0BFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_320)
{
    // 2A1B 0041;	
    // (⨛) INTEGRAL WITH OVERBAR	[0BFE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A1B, 0x0041 };
    uint32_t const ces[9] = { 0x0BFE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_321)
{
    // 2A1B 0062;	
    // (⨛) INTEGRAL WITH OVERBAR	[0BFE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1B, 0x0062 };
    uint32_t const ces[9] = { 0x0BFE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_322)
{
    // 2A1C 0021;	
    // (⨜) INTEGRAL WITH UNDERBAR	[0BFF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1C, 0x0021 };
    uint32_t const ces[9] = { 0x0BFF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_323)
{
    // 2A1C 003F;	
    // (⨜) INTEGRAL WITH UNDERBAR	[0BFF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1C, 0x003F };
    uint32_t const ces[9] = { 0x0BFF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_324)
{
    // 2A1C 0061;	
    // (⨜) INTEGRAL WITH UNDERBAR	[0BFF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1C, 0x0061 };
    uint32_t const ces[9] = { 0x0BFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_325)
{
    // 2A1C 0041;	
    // (⨜) INTEGRAL WITH UNDERBAR	[0BFF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A1C, 0x0041 };
    uint32_t const ces[9] = { 0x0BFF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_326)
{
    // 2A1C 0062;	
    // (⨜) INTEGRAL WITH UNDERBAR	[0BFF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1C, 0x0062 };
    uint32_t const ces[9] = { 0x0BFF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_327)
{
    // 2A1D 0021;	
    // (⨝) JOIN	[0C00 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1D, 0x0021 };
    uint32_t const ces[9] = { 0x0C00, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_328)
{
    // 2A1D 003F;	
    // (⨝) JOIN	[0C00 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1D, 0x003F };
    uint32_t const ces[9] = { 0x0C00, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_329)
{
    // 2A1D 0061;	
    // (⨝) JOIN	[0C00 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1D, 0x0061 };
    uint32_t const ces[9] = { 0x0C00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_330)
{
    // 2A1D 0041;	
    // (⨝) JOIN	[0C00 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A1D, 0x0041 };
    uint32_t const ces[9] = { 0x0C00, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_331)
{
    // 2A1D 0062;	
    // (⨝) JOIN	[0C00 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1D, 0x0062 };
    uint32_t const ces[9] = { 0x0C00, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_332)
{
    // 2A1E 0021;	
    // (⨞) LARGE LEFT TRIANGLE OPERATOR	[0C01 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1E, 0x0021 };
    uint32_t const ces[9] = { 0x0C01, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_333)
{
    // 2A1E 003F;	
    // (⨞) LARGE LEFT TRIANGLE OPERATOR	[0C01 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1E, 0x003F };
    uint32_t const ces[9] = { 0x0C01, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_334)
{
    // 2A1E 0061;	
    // (⨞) LARGE LEFT TRIANGLE OPERATOR	[0C01 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1E, 0x0061 };
    uint32_t const ces[9] = { 0x0C01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_335)
{
    // 2A1E 0041;	
    // (⨞) LARGE LEFT TRIANGLE OPERATOR	[0C01 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A1E, 0x0041 };
    uint32_t const ces[9] = { 0x0C01, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_336)
{
    // 2A1E 0062;	
    // (⨞) LARGE LEFT TRIANGLE OPERATOR	[0C01 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1E, 0x0062 };
    uint32_t const ces[9] = { 0x0C01, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_337)
{
    // 2A1F 0021;	
    // (⨟) Z NOTATION SCHEMA COMPOSITION	[0C02 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1F, 0x0021 };
    uint32_t const ces[9] = { 0x0C02, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_338)
{
    // 2A1F 003F;	
    // (⨟) Z NOTATION SCHEMA COMPOSITION	[0C02 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1F, 0x003F };
    uint32_t const ces[9] = { 0x0C02, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_339)
{
    // 2A1F 0061;	
    // (⨟) Z NOTATION SCHEMA COMPOSITION	[0C02 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1F, 0x0061 };
    uint32_t const ces[9] = { 0x0C02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_340)
{
    // 2A1F 0041;	
    // (⨟) Z NOTATION SCHEMA COMPOSITION	[0C02 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A1F, 0x0041 };
    uint32_t const ces[9] = { 0x0C02, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_341)
{
    // 2A1F 0062;	
    // (⨟) Z NOTATION SCHEMA COMPOSITION	[0C02 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A1F, 0x0062 };
    uint32_t const ces[9] = { 0x0C02, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_342)
{
    // 2A20 0021;	
    // (⨠) Z NOTATION SCHEMA PIPING	[0C03 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A20, 0x0021 };
    uint32_t const ces[9] = { 0x0C03, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_343)
{
    // 2A20 003F;	
    // (⨠) Z NOTATION SCHEMA PIPING	[0C03 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A20, 0x003F };
    uint32_t const ces[9] = { 0x0C03, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_344)
{
    // 2A20 0061;	
    // (⨠) Z NOTATION SCHEMA PIPING	[0C03 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A20, 0x0061 };
    uint32_t const ces[9] = { 0x0C03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_345)
{
    // 2A20 0041;	
    // (⨠) Z NOTATION SCHEMA PIPING	[0C03 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A20, 0x0041 };
    uint32_t const ces[9] = { 0x0C03, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_346)
{
    // 2A20 0062;	
    // (⨠) Z NOTATION SCHEMA PIPING	[0C03 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A20, 0x0062 };
    uint32_t const ces[9] = { 0x0C03, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_347)
{
    // 2A21 0021;	
    // (⨡) Z NOTATION SCHEMA PROJECTION	[0C04 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A21, 0x0021 };
    uint32_t const ces[9] = { 0x0C04, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_348)
{
    // 2A21 003F;	
    // (⨡) Z NOTATION SCHEMA PROJECTION	[0C04 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A21, 0x003F };
    uint32_t const ces[9] = { 0x0C04, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_349)
{
    // 2A21 0061;	
    // (⨡) Z NOTATION SCHEMA PROJECTION	[0C04 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A21, 0x0061 };
    uint32_t const ces[9] = { 0x0C04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_350)
{
    // 2A21 0041;	
    // (⨡) Z NOTATION SCHEMA PROJECTION	[0C04 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A21, 0x0041 };
    uint32_t const ces[9] = { 0x0C04, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_351)
{
    // 2A21 0062;	
    // (⨡) Z NOTATION SCHEMA PROJECTION	[0C04 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A21, 0x0062 };
    uint32_t const ces[9] = { 0x0C04, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_352)
{
    // 2A22 0021;	
    // (⨢) PLUS SIGN WITH SMALL CIRCLE ABOVE	[0C05 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A22, 0x0021 };
    uint32_t const ces[9] = { 0x0C05, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_353)
{
    // 2A22 003F;	
    // (⨢) PLUS SIGN WITH SMALL CIRCLE ABOVE	[0C05 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A22, 0x003F };
    uint32_t const ces[9] = { 0x0C05, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_354)
{
    // 2A22 0061;	
    // (⨢) PLUS SIGN WITH SMALL CIRCLE ABOVE	[0C05 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A22, 0x0061 };
    uint32_t const ces[9] = { 0x0C05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_355)
{
    // 2A22 0041;	
    // (⨢) PLUS SIGN WITH SMALL CIRCLE ABOVE	[0C05 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A22, 0x0041 };
    uint32_t const ces[9] = { 0x0C05, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_356)
{
    // 2A22 0062;	
    // (⨢) PLUS SIGN WITH SMALL CIRCLE ABOVE	[0C05 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A22, 0x0062 };
    uint32_t const ces[9] = { 0x0C05, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_357)
{
    // 2A23 0021;	
    // (⨣) PLUS SIGN WITH CIRCUMFLEX ACCENT ABOVE	[0C06 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A23, 0x0021 };
    uint32_t const ces[9] = { 0x0C06, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_358)
{
    // 2A23 003F;	
    // (⨣) PLUS SIGN WITH CIRCUMFLEX ACCENT ABOVE	[0C06 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A23, 0x003F };
    uint32_t const ces[9] = { 0x0C06, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_359)
{
    // 2A23 0061;	
    // (⨣) PLUS SIGN WITH CIRCUMFLEX ACCENT ABOVE	[0C06 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A23, 0x0061 };
    uint32_t const ces[9] = { 0x0C06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_360)
{
    // 2A23 0041;	
    // (⨣) PLUS SIGN WITH CIRCUMFLEX ACCENT ABOVE	[0C06 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A23, 0x0041 };
    uint32_t const ces[9] = { 0x0C06, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_361)
{
    // 2A23 0062;	
    // (⨣) PLUS SIGN WITH CIRCUMFLEX ACCENT ABOVE	[0C06 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A23, 0x0062 };
    uint32_t const ces[9] = { 0x0C06, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_362)
{
    // 2A24 0021;	
    // (⨤) PLUS SIGN WITH TILDE ABOVE	[0C07 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A24, 0x0021 };
    uint32_t const ces[9] = { 0x0C07, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_363)
{
    // 2A24 003F;	
    // (⨤) PLUS SIGN WITH TILDE ABOVE	[0C07 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A24, 0x003F };
    uint32_t const ces[9] = { 0x0C07, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_364)
{
    // 2A24 0061;	
    // (⨤) PLUS SIGN WITH TILDE ABOVE	[0C07 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A24, 0x0061 };
    uint32_t const ces[9] = { 0x0C07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_365)
{
    // 2A24 0041;	
    // (⨤) PLUS SIGN WITH TILDE ABOVE	[0C07 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A24, 0x0041 };
    uint32_t const ces[9] = { 0x0C07, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_366)
{
    // 2A24 0062;	
    // (⨤) PLUS SIGN WITH TILDE ABOVE	[0C07 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A24, 0x0062 };
    uint32_t const ces[9] = { 0x0C07, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_367)
{
    // 2A25 0021;	
    // (⨥) PLUS SIGN WITH DOT BELOW	[0C08 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A25, 0x0021 };
    uint32_t const ces[9] = { 0x0C08, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_368)
{
    // 2A25 003F;	
    // (⨥) PLUS SIGN WITH DOT BELOW	[0C08 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A25, 0x003F };
    uint32_t const ces[9] = { 0x0C08, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_369)
{
    // 2A25 0061;	
    // (⨥) PLUS SIGN WITH DOT BELOW	[0C08 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A25, 0x0061 };
    uint32_t const ces[9] = { 0x0C08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_370)
{
    // 2A25 0041;	
    // (⨥) PLUS SIGN WITH DOT BELOW	[0C08 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A25, 0x0041 };
    uint32_t const ces[9] = { 0x0C08, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_371)
{
    // 2A25 0062;	
    // (⨥) PLUS SIGN WITH DOT BELOW	[0C08 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A25, 0x0062 };
    uint32_t const ces[9] = { 0x0C08, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_372)
{
    // 2A26 0021;	
    // (⨦) PLUS SIGN WITH TILDE BELOW	[0C09 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A26, 0x0021 };
    uint32_t const ces[9] = { 0x0C09, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_373)
{
    // 2A26 003F;	
    // (⨦) PLUS SIGN WITH TILDE BELOW	[0C09 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A26, 0x003F };
    uint32_t const ces[9] = { 0x0C09, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_374)
{
    // 2A26 0061;	
    // (⨦) PLUS SIGN WITH TILDE BELOW	[0C09 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A26, 0x0061 };
    uint32_t const ces[9] = { 0x0C09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_375)
{
    // 2A26 0041;	
    // (⨦) PLUS SIGN WITH TILDE BELOW	[0C09 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A26, 0x0041 };
    uint32_t const ces[9] = { 0x0C09, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_376)
{
    // 2A26 0062;	
    // (⨦) PLUS SIGN WITH TILDE BELOW	[0C09 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A26, 0x0062 };
    uint32_t const ces[9] = { 0x0C09, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_377)
{
    // 2A27 0021;	
    // (⨧) PLUS SIGN WITH SUBSCRIPT TWO	[0C0A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A27, 0x0021 };
    uint32_t const ces[9] = { 0x0C0A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_378)
{
    // 2A27 003F;	
    // (⨧) PLUS SIGN WITH SUBSCRIPT TWO	[0C0A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A27, 0x003F };
    uint32_t const ces[9] = { 0x0C0A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_379)
{
    // 2A27 0061;	
    // (⨧) PLUS SIGN WITH SUBSCRIPT TWO	[0C0A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A27, 0x0061 };
    uint32_t const ces[9] = { 0x0C0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_380)
{
    // 2A27 0041;	
    // (⨧) PLUS SIGN WITH SUBSCRIPT TWO	[0C0A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A27, 0x0041 };
    uint32_t const ces[9] = { 0x0C0A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_381)
{
    // 2A27 0062;	
    // (⨧) PLUS SIGN WITH SUBSCRIPT TWO	[0C0A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A27, 0x0062 };
    uint32_t const ces[9] = { 0x0C0A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_382)
{
    // 2A28 0021;	
    // (⨨) PLUS SIGN WITH BLACK TRIANGLE	[0C0B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A28, 0x0021 };
    uint32_t const ces[9] = { 0x0C0B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_383)
{
    // 2A28 003F;	
    // (⨨) PLUS SIGN WITH BLACK TRIANGLE	[0C0B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A28, 0x003F };
    uint32_t const ces[9] = { 0x0C0B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_384)
{
    // 2A28 0061;	
    // (⨨) PLUS SIGN WITH BLACK TRIANGLE	[0C0B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A28, 0x0061 };
    uint32_t const ces[9] = { 0x0C0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_385)
{
    // 2A28 0041;	
    // (⨨) PLUS SIGN WITH BLACK TRIANGLE	[0C0B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A28, 0x0041 };
    uint32_t const ces[9] = { 0x0C0B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_386)
{
    // 2A28 0062;	
    // (⨨) PLUS SIGN WITH BLACK TRIANGLE	[0C0B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A28, 0x0062 };
    uint32_t const ces[9] = { 0x0C0B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_387)
{
    // 2A29 0021;	
    // (⨩) MINUS SIGN WITH COMMA ABOVE	[0C0C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A29, 0x0021 };
    uint32_t const ces[9] = { 0x0C0C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_388)
{
    // 2A29 003F;	
    // (⨩) MINUS SIGN WITH COMMA ABOVE	[0C0C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A29, 0x003F };
    uint32_t const ces[9] = { 0x0C0C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_389)
{
    // 2A29 0061;	
    // (⨩) MINUS SIGN WITH COMMA ABOVE	[0C0C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A29, 0x0061 };
    uint32_t const ces[9] = { 0x0C0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_390)
{
    // 2A29 0041;	
    // (⨩) MINUS SIGN WITH COMMA ABOVE	[0C0C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A29, 0x0041 };
    uint32_t const ces[9] = { 0x0C0C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_391)
{
    // 2A29 0062;	
    // (⨩) MINUS SIGN WITH COMMA ABOVE	[0C0C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A29, 0x0062 };
    uint32_t const ces[9] = { 0x0C0C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_392)
{
    // 2A2A 0021;	
    // (⨪) MINUS SIGN WITH DOT BELOW	[0C0D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2A, 0x0021 };
    uint32_t const ces[9] = { 0x0C0D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_393)
{
    // 2A2A 003F;	
    // (⨪) MINUS SIGN WITH DOT BELOW	[0C0D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2A, 0x003F };
    uint32_t const ces[9] = { 0x0C0D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_394)
{
    // 2A2A 0061;	
    // (⨪) MINUS SIGN WITH DOT BELOW	[0C0D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2A, 0x0061 };
    uint32_t const ces[9] = { 0x0C0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_395)
{
    // 2A2A 0041;	
    // (⨪) MINUS SIGN WITH DOT BELOW	[0C0D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A2A, 0x0041 };
    uint32_t const ces[9] = { 0x0C0D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_396)
{
    // 2A2A 0062;	
    // (⨪) MINUS SIGN WITH DOT BELOW	[0C0D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2A, 0x0062 };
    uint32_t const ces[9] = { 0x0C0D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_397)
{
    // 2A2B 0021;	
    // (⨫) MINUS SIGN WITH FALLING DOTS	[0C0E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2B, 0x0021 };
    uint32_t const ces[9] = { 0x0C0E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_398)
{
    // 2A2B 003F;	
    // (⨫) MINUS SIGN WITH FALLING DOTS	[0C0E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2B, 0x003F };
    uint32_t const ces[9] = { 0x0C0E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_399)
{
    // 2A2B 0061;	
    // (⨫) MINUS SIGN WITH FALLING DOTS	[0C0E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2B, 0x0061 };
    uint32_t const ces[9] = { 0x0C0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_400)
{
    // 2A2B 0041;	
    // (⨫) MINUS SIGN WITH FALLING DOTS	[0C0E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A2B, 0x0041 };
    uint32_t const ces[9] = { 0x0C0E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_401)
{
    // 2A2B 0062;	
    // (⨫) MINUS SIGN WITH FALLING DOTS	[0C0E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2B, 0x0062 };
    uint32_t const ces[9] = { 0x0C0E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_402)
{
    // 2A2C 0021;	
    // (⨬) MINUS SIGN WITH RISING DOTS	[0C0F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2C, 0x0021 };
    uint32_t const ces[9] = { 0x0C0F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_403)
{
    // 2A2C 003F;	
    // (⨬) MINUS SIGN WITH RISING DOTS	[0C0F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2C, 0x003F };
    uint32_t const ces[9] = { 0x0C0F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_404)
{
    // 2A2C 0061;	
    // (⨬) MINUS SIGN WITH RISING DOTS	[0C0F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2C, 0x0061 };
    uint32_t const ces[9] = { 0x0C0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_405)
{
    // 2A2C 0041;	
    // (⨬) MINUS SIGN WITH RISING DOTS	[0C0F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A2C, 0x0041 };
    uint32_t const ces[9] = { 0x0C0F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_406)
{
    // 2A2C 0062;	
    // (⨬) MINUS SIGN WITH RISING DOTS	[0C0F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2C, 0x0062 };
    uint32_t const ces[9] = { 0x0C0F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_407)
{
    // 2A2D 0021;	
    // (⨭) PLUS SIGN IN LEFT HALF CIRCLE	[0C10 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2D, 0x0021 };
    uint32_t const ces[9] = { 0x0C10, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_408)
{
    // 2A2D 003F;	
    // (⨭) PLUS SIGN IN LEFT HALF CIRCLE	[0C10 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2D, 0x003F };
    uint32_t const ces[9] = { 0x0C10, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_409)
{
    // 2A2D 0061;	
    // (⨭) PLUS SIGN IN LEFT HALF CIRCLE	[0C10 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2D, 0x0061 };
    uint32_t const ces[9] = { 0x0C10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_410)
{
    // 2A2D 0041;	
    // (⨭) PLUS SIGN IN LEFT HALF CIRCLE	[0C10 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A2D, 0x0041 };
    uint32_t const ces[9] = { 0x0C10, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_411)
{
    // 2A2D 0062;	
    // (⨭) PLUS SIGN IN LEFT HALF CIRCLE	[0C10 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2D, 0x0062 };
    uint32_t const ces[9] = { 0x0C10, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_412)
{
    // 2A2E 0021;	
    // (⨮) PLUS SIGN IN RIGHT HALF CIRCLE	[0C11 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2E, 0x0021 };
    uint32_t const ces[9] = { 0x0C11, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_413)
{
    // 2A2E 003F;	
    // (⨮) PLUS SIGN IN RIGHT HALF CIRCLE	[0C11 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2E, 0x003F };
    uint32_t const ces[9] = { 0x0C11, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_414)
{
    // 2A2E 0061;	
    // (⨮) PLUS SIGN IN RIGHT HALF CIRCLE	[0C11 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2E, 0x0061 };
    uint32_t const ces[9] = { 0x0C11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_415)
{
    // 2A2E 0041;	
    // (⨮) PLUS SIGN IN RIGHT HALF CIRCLE	[0C11 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A2E, 0x0041 };
    uint32_t const ces[9] = { 0x0C11, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_416)
{
    // 2A2E 0062;	
    // (⨮) PLUS SIGN IN RIGHT HALF CIRCLE	[0C11 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2E, 0x0062 };
    uint32_t const ces[9] = { 0x0C11, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_417)
{
    // 2A2F 0021;	
    // (⨯) VECTOR OR CROSS PRODUCT	[0C12 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2F, 0x0021 };
    uint32_t const ces[9] = { 0x0C12, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_418)
{
    // 2A2F 003F;	
    // (⨯) VECTOR OR CROSS PRODUCT	[0C12 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2F, 0x003F };
    uint32_t const ces[9] = { 0x0C12, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_419)
{
    // 2A2F 0061;	
    // (⨯) VECTOR OR CROSS PRODUCT	[0C12 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2F, 0x0061 };
    uint32_t const ces[9] = { 0x0C12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_420)
{
    // 2A2F 0041;	
    // (⨯) VECTOR OR CROSS PRODUCT	[0C12 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A2F, 0x0041 };
    uint32_t const ces[9] = { 0x0C12, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_421)
{
    // 2A2F 0062;	
    // (⨯) VECTOR OR CROSS PRODUCT	[0C12 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A2F, 0x0062 };
    uint32_t const ces[9] = { 0x0C12, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_422)
{
    // 2A30 0021;	
    // (⨰) MULTIPLICATION SIGN WITH DOT ABOVE	[0C13 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A30, 0x0021 };
    uint32_t const ces[9] = { 0x0C13, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_423)
{
    // 2A30 003F;	
    // (⨰) MULTIPLICATION SIGN WITH DOT ABOVE	[0C13 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A30, 0x003F };
    uint32_t const ces[9] = { 0x0C13, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_424)
{
    // 2A30 0061;	
    // (⨰) MULTIPLICATION SIGN WITH DOT ABOVE	[0C13 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A30, 0x0061 };
    uint32_t const ces[9] = { 0x0C13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_425)
{
    // 2A30 0041;	
    // (⨰) MULTIPLICATION SIGN WITH DOT ABOVE	[0C13 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A30, 0x0041 };
    uint32_t const ces[9] = { 0x0C13, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_426)
{
    // 2A30 0062;	
    // (⨰) MULTIPLICATION SIGN WITH DOT ABOVE	[0C13 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A30, 0x0062 };
    uint32_t const ces[9] = { 0x0C13, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_427)
{
    // 2A31 0021;	
    // (⨱) MULTIPLICATION SIGN WITH UNDERBAR	[0C14 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A31, 0x0021 };
    uint32_t const ces[9] = { 0x0C14, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_428)
{
    // 2A31 003F;	
    // (⨱) MULTIPLICATION SIGN WITH UNDERBAR	[0C14 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A31, 0x003F };
    uint32_t const ces[9] = { 0x0C14, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_429)
{
    // 2A31 0061;	
    // (⨱) MULTIPLICATION SIGN WITH UNDERBAR	[0C14 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A31, 0x0061 };
    uint32_t const ces[9] = { 0x0C14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_430)
{
    // 2A31 0041;	
    // (⨱) MULTIPLICATION SIGN WITH UNDERBAR	[0C14 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A31, 0x0041 };
    uint32_t const ces[9] = { 0x0C14, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_431)
{
    // 2A31 0062;	
    // (⨱) MULTIPLICATION SIGN WITH UNDERBAR	[0C14 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A31, 0x0062 };
    uint32_t const ces[9] = { 0x0C14, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_432)
{
    // 2A32 0021;	
    // (⨲) SEMIDIRECT PRODUCT WITH BOTTOM CLOSED	[0C15 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A32, 0x0021 };
    uint32_t const ces[9] = { 0x0C15, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_433)
{
    // 2A32 003F;	
    // (⨲) SEMIDIRECT PRODUCT WITH BOTTOM CLOSED	[0C15 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A32, 0x003F };
    uint32_t const ces[9] = { 0x0C15, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_434)
{
    // 2A32 0061;	
    // (⨲) SEMIDIRECT PRODUCT WITH BOTTOM CLOSED	[0C15 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A32, 0x0061 };
    uint32_t const ces[9] = { 0x0C15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_435)
{
    // 2A32 0041;	
    // (⨲) SEMIDIRECT PRODUCT WITH BOTTOM CLOSED	[0C15 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A32, 0x0041 };
    uint32_t const ces[9] = { 0x0C15, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_436)
{
    // 2A32 0062;	
    // (⨲) SEMIDIRECT PRODUCT WITH BOTTOM CLOSED	[0C15 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A32, 0x0062 };
    uint32_t const ces[9] = { 0x0C15, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_437)
{
    // 2A33 0021;	
    // (⨳) SMASH PRODUCT	[0C16 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A33, 0x0021 };
    uint32_t const ces[9] = { 0x0C16, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_438)
{
    // 2A33 003F;	
    // (⨳) SMASH PRODUCT	[0C16 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A33, 0x003F };
    uint32_t const ces[9] = { 0x0C16, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_439)
{
    // 2A33 0061;	
    // (⨳) SMASH PRODUCT	[0C16 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A33, 0x0061 };
    uint32_t const ces[9] = { 0x0C16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_440)
{
    // 2A33 0041;	
    // (⨳) SMASH PRODUCT	[0C16 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A33, 0x0041 };
    uint32_t const ces[9] = { 0x0C16, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_441)
{
    // 2A33 0062;	
    // (⨳) SMASH PRODUCT	[0C16 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A33, 0x0062 };
    uint32_t const ces[9] = { 0x0C16, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_442)
{
    // 2A34 0021;	
    // (⨴) MULTIPLICATION SIGN IN LEFT HALF CIRCLE	[0C17 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A34, 0x0021 };
    uint32_t const ces[9] = { 0x0C17, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_443)
{
    // 2A34 003F;	
    // (⨴) MULTIPLICATION SIGN IN LEFT HALF CIRCLE	[0C17 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A34, 0x003F };
    uint32_t const ces[9] = { 0x0C17, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_444)
{
    // 2A34 0061;	
    // (⨴) MULTIPLICATION SIGN IN LEFT HALF CIRCLE	[0C17 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A34, 0x0061 };
    uint32_t const ces[9] = { 0x0C17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_445)
{
    // 2A34 0041;	
    // (⨴) MULTIPLICATION SIGN IN LEFT HALF CIRCLE	[0C17 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A34, 0x0041 };
    uint32_t const ces[9] = { 0x0C17, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_446)
{
    // 2A34 0062;	
    // (⨴) MULTIPLICATION SIGN IN LEFT HALF CIRCLE	[0C17 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A34, 0x0062 };
    uint32_t const ces[9] = { 0x0C17, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_447)
{
    // 2A35 0021;	
    // (⨵) MULTIPLICATION SIGN IN RIGHT HALF CIRCLE	[0C18 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A35, 0x0021 };
    uint32_t const ces[9] = { 0x0C18, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_448)
{
    // 2A35 003F;	
    // (⨵) MULTIPLICATION SIGN IN RIGHT HALF CIRCLE	[0C18 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A35, 0x003F };
    uint32_t const ces[9] = { 0x0C18, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_449)
{
    // 2A35 0061;	
    // (⨵) MULTIPLICATION SIGN IN RIGHT HALF CIRCLE	[0C18 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A35, 0x0061 };
    uint32_t const ces[9] = { 0x0C18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_450)
{
    // 2A35 0041;	
    // (⨵) MULTIPLICATION SIGN IN RIGHT HALF CIRCLE	[0C18 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A35, 0x0041 };
    uint32_t const ces[9] = { 0x0C18, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_451)
{
    // 2A35 0062;	
    // (⨵) MULTIPLICATION SIGN IN RIGHT HALF CIRCLE	[0C18 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A35, 0x0062 };
    uint32_t const ces[9] = { 0x0C18, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_452)
{
    // 2A36 0021;	
    // (⨶) CIRCLED MULTIPLICATION SIGN WITH CIRCUMFLEX ACCENT	[0C19 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A36, 0x0021 };
    uint32_t const ces[9] = { 0x0C19, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_453)
{
    // 2A36 003F;	
    // (⨶) CIRCLED MULTIPLICATION SIGN WITH CIRCUMFLEX ACCENT	[0C19 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A36, 0x003F };
    uint32_t const ces[9] = { 0x0C19, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_454)
{
    // 2A36 0061;	
    // (⨶) CIRCLED MULTIPLICATION SIGN WITH CIRCUMFLEX ACCENT	[0C19 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A36, 0x0061 };
    uint32_t const ces[9] = { 0x0C19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_455)
{
    // 2A36 0041;	
    // (⨶) CIRCLED MULTIPLICATION SIGN WITH CIRCUMFLEX ACCENT	[0C19 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A36, 0x0041 };
    uint32_t const ces[9] = { 0x0C19, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_456)
{
    // 2A36 0062;	
    // (⨶) CIRCLED MULTIPLICATION SIGN WITH CIRCUMFLEX ACCENT	[0C19 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A36, 0x0062 };
    uint32_t const ces[9] = { 0x0C19, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_457)
{
    // 2A37 0021;	
    // (⨷) MULTIPLICATION SIGN IN DOUBLE CIRCLE	[0C1A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A37, 0x0021 };
    uint32_t const ces[9] = { 0x0C1A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_458)
{
    // 2A37 003F;	
    // (⨷) MULTIPLICATION SIGN IN DOUBLE CIRCLE	[0C1A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A37, 0x003F };
    uint32_t const ces[9] = { 0x0C1A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_459)
{
    // 2A37 0061;	
    // (⨷) MULTIPLICATION SIGN IN DOUBLE CIRCLE	[0C1A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A37, 0x0061 };
    uint32_t const ces[9] = { 0x0C1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_460)
{
    // 2A37 0041;	
    // (⨷) MULTIPLICATION SIGN IN DOUBLE CIRCLE	[0C1A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A37, 0x0041 };
    uint32_t const ces[9] = { 0x0C1A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_461)
{
    // 2A37 0062;	
    // (⨷) MULTIPLICATION SIGN IN DOUBLE CIRCLE	[0C1A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A37, 0x0062 };
    uint32_t const ces[9] = { 0x0C1A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_462)
{
    // 2A38 0021;	
    // (⨸) CIRCLED DIVISION SIGN	[0C1B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A38, 0x0021 };
    uint32_t const ces[9] = { 0x0C1B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_463)
{
    // 2A38 003F;	
    // (⨸) CIRCLED DIVISION SIGN	[0C1B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A38, 0x003F };
    uint32_t const ces[9] = { 0x0C1B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_464)
{
    // 2A38 0061;	
    // (⨸) CIRCLED DIVISION SIGN	[0C1B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A38, 0x0061 };
    uint32_t const ces[9] = { 0x0C1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_465)
{
    // 2A38 0041;	
    // (⨸) CIRCLED DIVISION SIGN	[0C1B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A38, 0x0041 };
    uint32_t const ces[9] = { 0x0C1B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_466)
{
    // 2A38 0062;	
    // (⨸) CIRCLED DIVISION SIGN	[0C1B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A38, 0x0062 };
    uint32_t const ces[9] = { 0x0C1B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_467)
{
    // 2A39 0021;	
    // (⨹) PLUS SIGN IN TRIANGLE	[0C1C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A39, 0x0021 };
    uint32_t const ces[9] = { 0x0C1C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_468)
{
    // 2A39 003F;	
    // (⨹) PLUS SIGN IN TRIANGLE	[0C1C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A39, 0x003F };
    uint32_t const ces[9] = { 0x0C1C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_469)
{
    // 2A39 0061;	
    // (⨹) PLUS SIGN IN TRIANGLE	[0C1C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A39, 0x0061 };
    uint32_t const ces[9] = { 0x0C1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_470)
{
    // 2A39 0041;	
    // (⨹) PLUS SIGN IN TRIANGLE	[0C1C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A39, 0x0041 };
    uint32_t const ces[9] = { 0x0C1C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_471)
{
    // 2A39 0062;	
    // (⨹) PLUS SIGN IN TRIANGLE	[0C1C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A39, 0x0062 };
    uint32_t const ces[9] = { 0x0C1C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_472)
{
    // 2A3A 0021;	
    // (⨺) MINUS SIGN IN TRIANGLE	[0C1D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3A, 0x0021 };
    uint32_t const ces[9] = { 0x0C1D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_473)
{
    // 2A3A 003F;	
    // (⨺) MINUS SIGN IN TRIANGLE	[0C1D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3A, 0x003F };
    uint32_t const ces[9] = { 0x0C1D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_474)
{
    // 2A3A 0061;	
    // (⨺) MINUS SIGN IN TRIANGLE	[0C1D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3A, 0x0061 };
    uint32_t const ces[9] = { 0x0C1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_475)
{
    // 2A3A 0041;	
    // (⨺) MINUS SIGN IN TRIANGLE	[0C1D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A3A, 0x0041 };
    uint32_t const ces[9] = { 0x0C1D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_476)
{
    // 2A3A 0062;	
    // (⨺) MINUS SIGN IN TRIANGLE	[0C1D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3A, 0x0062 };
    uint32_t const ces[9] = { 0x0C1D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_477)
{
    // 2A3B 0021;	
    // (⨻) MULTIPLICATION SIGN IN TRIANGLE	[0C1E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3B, 0x0021 };
    uint32_t const ces[9] = { 0x0C1E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_478)
{
    // 2A3B 003F;	
    // (⨻) MULTIPLICATION SIGN IN TRIANGLE	[0C1E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3B, 0x003F };
    uint32_t const ces[9] = { 0x0C1E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_479)
{
    // 2A3B 0061;	
    // (⨻) MULTIPLICATION SIGN IN TRIANGLE	[0C1E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3B, 0x0061 };
    uint32_t const ces[9] = { 0x0C1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_480)
{
    // 2A3B 0041;	
    // (⨻) MULTIPLICATION SIGN IN TRIANGLE	[0C1E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A3B, 0x0041 };
    uint32_t const ces[9] = { 0x0C1E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_481)
{
    // 2A3B 0062;	
    // (⨻) MULTIPLICATION SIGN IN TRIANGLE	[0C1E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3B, 0x0062 };
    uint32_t const ces[9] = { 0x0C1E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_482)
{
    // 2A3C 0021;	
    // (⨼) INTERIOR PRODUCT	[0C1F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3C, 0x0021 };
    uint32_t const ces[9] = { 0x0C1F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_483)
{
    // 2A3C 003F;	
    // (⨼) INTERIOR PRODUCT	[0C1F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3C, 0x003F };
    uint32_t const ces[9] = { 0x0C1F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_484)
{
    // 2A3C 0061;	
    // (⨼) INTERIOR PRODUCT	[0C1F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3C, 0x0061 };
    uint32_t const ces[9] = { 0x0C1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_485)
{
    // 2A3C 0041;	
    // (⨼) INTERIOR PRODUCT	[0C1F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A3C, 0x0041 };
    uint32_t const ces[9] = { 0x0C1F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_486)
{
    // 2A3C 0062;	
    // (⨼) INTERIOR PRODUCT	[0C1F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3C, 0x0062 };
    uint32_t const ces[9] = { 0x0C1F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_487)
{
    // 2A3D 0021;	
    // (⨽) RIGHTHAND INTERIOR PRODUCT	[0C20 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3D, 0x0021 };
    uint32_t const ces[9] = { 0x0C20, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_488)
{
    // 2A3D 003F;	
    // (⨽) RIGHTHAND INTERIOR PRODUCT	[0C20 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3D, 0x003F };
    uint32_t const ces[9] = { 0x0C20, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_489)
{
    // 2A3D 0061;	
    // (⨽) RIGHTHAND INTERIOR PRODUCT	[0C20 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3D, 0x0061 };
    uint32_t const ces[9] = { 0x0C20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_490)
{
    // 2A3D 0041;	
    // (⨽) RIGHTHAND INTERIOR PRODUCT	[0C20 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A3D, 0x0041 };
    uint32_t const ces[9] = { 0x0C20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_491)
{
    // 2A3D 0062;	
    // (⨽) RIGHTHAND INTERIOR PRODUCT	[0C20 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3D, 0x0062 };
    uint32_t const ces[9] = { 0x0C20, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_492)
{
    // 2A3E 0021;	
    // (⨾) Z NOTATION RELATIONAL COMPOSITION	[0C21 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3E, 0x0021 };
    uint32_t const ces[9] = { 0x0C21, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_493)
{
    // 2A3E 003F;	
    // (⨾) Z NOTATION RELATIONAL COMPOSITION	[0C21 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3E, 0x003F };
    uint32_t const ces[9] = { 0x0C21, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_494)
{
    // 2A3E 0061;	
    // (⨾) Z NOTATION RELATIONAL COMPOSITION	[0C21 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3E, 0x0061 };
    uint32_t const ces[9] = { 0x0C21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_495)
{
    // 2A3E 0041;	
    // (⨾) Z NOTATION RELATIONAL COMPOSITION	[0C21 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2A3E, 0x0041 };
    uint32_t const ces[9] = { 0x0C21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_496)
{
    // 2A3E 0062;	
    // (⨾) Z NOTATION RELATIONAL COMPOSITION	[0C21 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3E, 0x0062 };
    uint32_t const ces[9] = { 0x0C21, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_497)
{
    // 2A3F 0021;	
    // (⨿) AMALGAMATION OR COPRODUCT	[0C22 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3F, 0x0021 };
    uint32_t const ces[9] = { 0x0C22, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_498)
{
    // 2A3F 003F;	
    // (⨿) AMALGAMATION OR COPRODUCT	[0C22 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3F, 0x003F };
    uint32_t const ces[9] = { 0x0C22, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_037_499)
{
    // 2A3F 0061;	
    // (⨿) AMALGAMATION OR COPRODUCT	[0C22 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2A3F, 0x0061 };
    uint32_t const ces[9] = { 0x0C22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

