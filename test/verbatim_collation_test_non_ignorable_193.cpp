// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_193_000)
{
    // AABC AA89 0062;	
    // (ꪼꪉ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH NGO	[2E99 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA89, 0x0062 };
    uint32_t const ces[12] = { 0x2E99, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_001)
{
    // AA8A 0021;	
    // (ꪊ) TAI VIET LETTER LOW CO	[2E9A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8A, 0x0021 };
    uint32_t const ces[9] = { 0x2E9A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_002)
{
    // AA8A 003F;	
    // (ꪊ) TAI VIET LETTER LOW CO	[2E9A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8A, 0x003F };
    uint32_t const ces[9] = { 0x2E9A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_003)
{
    // AA8A 0061;	
    // (ꪊ) TAI VIET LETTER LOW CO	[2E9A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8A, 0x0061 };
    uint32_t const ces[9] = { 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_004)
{
    // AA8A 0041;	
    // (ꪊ) TAI VIET LETTER LOW CO	[2E9A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA8A, 0x0041 };
    uint32_t const ces[9] = { 0x2E9A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_005)
{
    // AA8A 0062;	
    // (ꪊ) TAI VIET LETTER LOW CO	[2E9A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8A, 0x0062 };
    uint32_t const ces[9] = { 0x2E9A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_006)
{
    // AAB5 AA8A 0021;	
    // (ꪵꪊ) TAI VIET VOWEL E, TAI VIET LETTER LOW CO	[2E9A 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8A, 0x0021 };
    uint32_t const ces[12] = { 0x2E9A, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_007)
{
    // AAB5 AA8A 003F;	
    // (ꪵꪊ) TAI VIET VOWEL E, TAI VIET LETTER LOW CO	[2E9A 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8A, 0x003F };
    uint32_t const ces[12] = { 0x2E9A, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_008)
{
    // AAB5 AA8A 0061;	
    // (ꪵꪊ) TAI VIET VOWEL E, TAI VIET LETTER LOW CO	[2E9A 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E9A, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_009)
{
    // AAB5 AA8A 0041;	
    // (ꪵꪊ) TAI VIET VOWEL E, TAI VIET LETTER LOW CO	[2E9A 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8A, 0x0041 };
    uint32_t const ces[12] = { 0x2E9A, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_010)
{
    // AAB5 AA8A 0062;	
    // (ꪵꪊ) TAI VIET VOWEL E, TAI VIET LETTER LOW CO	[2E9A 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8A, 0x0062 };
    uint32_t const ces[12] = { 0x2E9A, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_011)
{
    // AAB6 AA8A 0021;	
    // (ꪶꪊ) TAI VIET VOWEL O, TAI VIET LETTER LOW CO	[2E9A 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8A, 0x0021 };
    uint32_t const ces[12] = { 0x2E9A, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_012)
{
    // AAB6 AA8A 003F;	
    // (ꪶꪊ) TAI VIET VOWEL O, TAI VIET LETTER LOW CO	[2E9A 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8A, 0x003F };
    uint32_t const ces[12] = { 0x2E9A, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_013)
{
    // AAB6 AA8A 0061;	
    // (ꪶꪊ) TAI VIET VOWEL O, TAI VIET LETTER LOW CO	[2E9A 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E9A, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_014)
{
    // AAB6 AA8A 0041;	
    // (ꪶꪊ) TAI VIET VOWEL O, TAI VIET LETTER LOW CO	[2E9A 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8A, 0x0041 };
    uint32_t const ces[12] = { 0x2E9A, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_015)
{
    // AAB6 AA8A 0062;	
    // (ꪶꪊ) TAI VIET VOWEL O, TAI VIET LETTER LOW CO	[2E9A 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8A, 0x0062 };
    uint32_t const ces[12] = { 0x2E9A, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_016)
{
    // AAB9 AA8A 0021;	
    // (ꪹꪊ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW CO	[2E9A 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8A, 0x0021 };
    uint32_t const ces[12] = { 0x2E9A, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_017)
{
    // AAB9 AA8A 003F;	
    // (ꪹꪊ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW CO	[2E9A 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8A, 0x003F };
    uint32_t const ces[12] = { 0x2E9A, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_018)
{
    // AAB9 AA8A 0061;	
    // (ꪹꪊ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW CO	[2E9A 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E9A, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_019)
{
    // AAB9 AA8A 0041;	
    // (ꪹꪊ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW CO	[2E9A 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8A, 0x0041 };
    uint32_t const ces[12] = { 0x2E9A, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_020)
{
    // AAB9 AA8A 0062;	
    // (ꪹꪊ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW CO	[2E9A 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8A, 0x0062 };
    uint32_t const ces[12] = { 0x2E9A, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_021)
{
    // AABB AA8A 0021;	
    // (ꪻꪊ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW CO	[2E9A 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8A, 0x0021 };
    uint32_t const ces[12] = { 0x2E9A, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_022)
{
    // AABB AA8A 003F;	
    // (ꪻꪊ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW CO	[2E9A 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8A, 0x003F };
    uint32_t const ces[12] = { 0x2E9A, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_023)
{
    // AABB AA8A 0061;	
    // (ꪻꪊ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW CO	[2E9A 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E9A, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_024)
{
    // AABB AA8A 0041;	
    // (ꪻꪊ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW CO	[2E9A 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8A, 0x0041 };
    uint32_t const ces[12] = { 0x2E9A, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_025)
{
    // AABB AA8A 0062;	
    // (ꪻꪊ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW CO	[2E9A 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8A, 0x0062 };
    uint32_t const ces[12] = { 0x2E9A, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_026)
{
    // AABC AA8A 0021;	
    // (ꪼꪊ) TAI VIET VOWEL AY, TAI VIET LETTER LOW CO	[2E9A 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8A, 0x0021 };
    uint32_t const ces[12] = { 0x2E9A, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_027)
{
    // AABC AA8A 003F;	
    // (ꪼꪊ) TAI VIET VOWEL AY, TAI VIET LETTER LOW CO	[2E9A 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8A, 0x003F };
    uint32_t const ces[12] = { 0x2E9A, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_028)
{
    // AABC AA8A 0061;	
    // (ꪼꪊ) TAI VIET VOWEL AY, TAI VIET LETTER LOW CO	[2E9A 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E9A, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_029)
{
    // AABC AA8A 0041;	
    // (ꪼꪊ) TAI VIET VOWEL AY, TAI VIET LETTER LOW CO	[2E9A 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8A, 0x0041 };
    uint32_t const ces[12] = { 0x2E9A, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_030)
{
    // AABC AA8A 0062;	
    // (ꪼꪊ) TAI VIET VOWEL AY, TAI VIET LETTER LOW CO	[2E9A 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8A, 0x0062 };
    uint32_t const ces[12] = { 0x2E9A, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_031)
{
    // AA8B 0021;	
    // (ꪋ) TAI VIET LETTER HIGH CO	[2E9B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8B, 0x0021 };
    uint32_t const ces[9] = { 0x2E9B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_032)
{
    // AA8B 003F;	
    // (ꪋ) TAI VIET LETTER HIGH CO	[2E9B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8B, 0x003F };
    uint32_t const ces[9] = { 0x2E9B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_033)
{
    // AA8B 0061;	
    // (ꪋ) TAI VIET LETTER HIGH CO	[2E9B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8B, 0x0061 };
    uint32_t const ces[9] = { 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_034)
{
    // AA8B 0041;	
    // (ꪋ) TAI VIET LETTER HIGH CO	[2E9B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA8B, 0x0041 };
    uint32_t const ces[9] = { 0x2E9B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_035)
{
    // AA8B 0062;	
    // (ꪋ) TAI VIET LETTER HIGH CO	[2E9B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8B, 0x0062 };
    uint32_t const ces[9] = { 0x2E9B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_036)
{
    // AAB5 AA8B 0021;	
    // (ꪵꪋ) TAI VIET VOWEL E, TAI VIET LETTER HIGH CO	[2E9B 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8B, 0x0021 };
    uint32_t const ces[12] = { 0x2E9B, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_037)
{
    // AAB5 AA8B 003F;	
    // (ꪵꪋ) TAI VIET VOWEL E, TAI VIET LETTER HIGH CO	[2E9B 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8B, 0x003F };
    uint32_t const ces[12] = { 0x2E9B, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_038)
{
    // AAB5 AA8B 0061;	
    // (ꪵꪋ) TAI VIET VOWEL E, TAI VIET LETTER HIGH CO	[2E9B 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8B, 0x0061 };
    uint32_t const ces[12] = { 0x2E9B, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_039)
{
    // AAB5 AA8B 0041;	
    // (ꪵꪋ) TAI VIET VOWEL E, TAI VIET LETTER HIGH CO	[2E9B 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8B, 0x0041 };
    uint32_t const ces[12] = { 0x2E9B, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_040)
{
    // AAB5 AA8B 0062;	
    // (ꪵꪋ) TAI VIET VOWEL E, TAI VIET LETTER HIGH CO	[2E9B 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8B, 0x0062 };
    uint32_t const ces[12] = { 0x2E9B, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_041)
{
    // AAB6 AA8B 0021;	
    // (ꪶꪋ) TAI VIET VOWEL O, TAI VIET LETTER HIGH CO	[2E9B 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8B, 0x0021 };
    uint32_t const ces[12] = { 0x2E9B, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_042)
{
    // AAB6 AA8B 003F;	
    // (ꪶꪋ) TAI VIET VOWEL O, TAI VIET LETTER HIGH CO	[2E9B 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8B, 0x003F };
    uint32_t const ces[12] = { 0x2E9B, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_043)
{
    // AAB6 AA8B 0061;	
    // (ꪶꪋ) TAI VIET VOWEL O, TAI VIET LETTER HIGH CO	[2E9B 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8B, 0x0061 };
    uint32_t const ces[12] = { 0x2E9B, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_044)
{
    // AAB6 AA8B 0041;	
    // (ꪶꪋ) TAI VIET VOWEL O, TAI VIET LETTER HIGH CO	[2E9B 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8B, 0x0041 };
    uint32_t const ces[12] = { 0x2E9B, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_045)
{
    // AAB6 AA8B 0062;	
    // (ꪶꪋ) TAI VIET VOWEL O, TAI VIET LETTER HIGH CO	[2E9B 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8B, 0x0062 };
    uint32_t const ces[12] = { 0x2E9B, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_046)
{
    // AAB9 AA8B 0021;	
    // (ꪹꪋ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH CO	[2E9B 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8B, 0x0021 };
    uint32_t const ces[12] = { 0x2E9B, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_047)
{
    // AAB9 AA8B 003F;	
    // (ꪹꪋ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH CO	[2E9B 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8B, 0x003F };
    uint32_t const ces[12] = { 0x2E9B, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_048)
{
    // AAB9 AA8B 0061;	
    // (ꪹꪋ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH CO	[2E9B 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8B, 0x0061 };
    uint32_t const ces[12] = { 0x2E9B, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_049)
{
    // AAB9 AA8B 0041;	
    // (ꪹꪋ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH CO	[2E9B 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8B, 0x0041 };
    uint32_t const ces[12] = { 0x2E9B, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_050)
{
    // AAB9 AA8B 0062;	
    // (ꪹꪋ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH CO	[2E9B 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8B, 0x0062 };
    uint32_t const ces[12] = { 0x2E9B, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_051)
{
    // AABB AA8B 0021;	
    // (ꪻꪋ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH CO	[2E9B 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8B, 0x0021 };
    uint32_t const ces[12] = { 0x2E9B, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_052)
{
    // AABB AA8B 003F;	
    // (ꪻꪋ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH CO	[2E9B 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8B, 0x003F };
    uint32_t const ces[12] = { 0x2E9B, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_053)
{
    // AABB AA8B 0061;	
    // (ꪻꪋ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH CO	[2E9B 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8B, 0x0061 };
    uint32_t const ces[12] = { 0x2E9B, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_054)
{
    // AABB AA8B 0041;	
    // (ꪻꪋ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH CO	[2E9B 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8B, 0x0041 };
    uint32_t const ces[12] = { 0x2E9B, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_055)
{
    // AABB AA8B 0062;	
    // (ꪻꪋ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH CO	[2E9B 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8B, 0x0062 };
    uint32_t const ces[12] = { 0x2E9B, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_056)
{
    // AABC AA8B 0021;	
    // (ꪼꪋ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH CO	[2E9B 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8B, 0x0021 };
    uint32_t const ces[12] = { 0x2E9B, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_057)
{
    // AABC AA8B 003F;	
    // (ꪼꪋ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH CO	[2E9B 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8B, 0x003F };
    uint32_t const ces[12] = { 0x2E9B, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_058)
{
    // AABC AA8B 0061;	
    // (ꪼꪋ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH CO	[2E9B 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8B, 0x0061 };
    uint32_t const ces[12] = { 0x2E9B, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_059)
{
    // AABC AA8B 0041;	
    // (ꪼꪋ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH CO	[2E9B 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8B, 0x0041 };
    uint32_t const ces[12] = { 0x2E9B, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_060)
{
    // AABC AA8B 0062;	
    // (ꪼꪋ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH CO	[2E9B 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8B, 0x0062 };
    uint32_t const ces[12] = { 0x2E9B, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_061)
{
    // AA8C 0021;	
    // (ꪌ) TAI VIET LETTER LOW CHO	[2E9C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8C, 0x0021 };
    uint32_t const ces[9] = { 0x2E9C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_062)
{
    // AA8C 003F;	
    // (ꪌ) TAI VIET LETTER LOW CHO	[2E9C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8C, 0x003F };
    uint32_t const ces[9] = { 0x2E9C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_063)
{
    // AA8C 0061;	
    // (ꪌ) TAI VIET LETTER LOW CHO	[2E9C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8C, 0x0061 };
    uint32_t const ces[9] = { 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_064)
{
    // AA8C 0041;	
    // (ꪌ) TAI VIET LETTER LOW CHO	[2E9C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA8C, 0x0041 };
    uint32_t const ces[9] = { 0x2E9C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_065)
{
    // AA8C 0062;	
    // (ꪌ) TAI VIET LETTER LOW CHO	[2E9C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8C, 0x0062 };
    uint32_t const ces[9] = { 0x2E9C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_066)
{
    // AAB5 AA8C 0021;	
    // (ꪵꪌ) TAI VIET VOWEL E, TAI VIET LETTER LOW CHO	[2E9C 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8C, 0x0021 };
    uint32_t const ces[12] = { 0x2E9C, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_067)
{
    // AAB5 AA8C 003F;	
    // (ꪵꪌ) TAI VIET VOWEL E, TAI VIET LETTER LOW CHO	[2E9C 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8C, 0x003F };
    uint32_t const ces[12] = { 0x2E9C, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_068)
{
    // AAB5 AA8C 0061;	
    // (ꪵꪌ) TAI VIET VOWEL E, TAI VIET LETTER LOW CHO	[2E9C 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8C, 0x0061 };
    uint32_t const ces[12] = { 0x2E9C, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_069)
{
    // AAB5 AA8C 0041;	
    // (ꪵꪌ) TAI VIET VOWEL E, TAI VIET LETTER LOW CHO	[2E9C 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8C, 0x0041 };
    uint32_t const ces[12] = { 0x2E9C, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_070)
{
    // AAB5 AA8C 0062;	
    // (ꪵꪌ) TAI VIET VOWEL E, TAI VIET LETTER LOW CHO	[2E9C 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8C, 0x0062 };
    uint32_t const ces[12] = { 0x2E9C, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_071)
{
    // AAB6 AA8C 0021;	
    // (ꪶꪌ) TAI VIET VOWEL O, TAI VIET LETTER LOW CHO	[2E9C 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8C, 0x0021 };
    uint32_t const ces[12] = { 0x2E9C, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_072)
{
    // AAB6 AA8C 003F;	
    // (ꪶꪌ) TAI VIET VOWEL O, TAI VIET LETTER LOW CHO	[2E9C 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8C, 0x003F };
    uint32_t const ces[12] = { 0x2E9C, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_073)
{
    // AAB6 AA8C 0061;	
    // (ꪶꪌ) TAI VIET VOWEL O, TAI VIET LETTER LOW CHO	[2E9C 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8C, 0x0061 };
    uint32_t const ces[12] = { 0x2E9C, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_074)
{
    // AAB6 AA8C 0041;	
    // (ꪶꪌ) TAI VIET VOWEL O, TAI VIET LETTER LOW CHO	[2E9C 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8C, 0x0041 };
    uint32_t const ces[12] = { 0x2E9C, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_075)
{
    // AAB6 AA8C 0062;	
    // (ꪶꪌ) TAI VIET VOWEL O, TAI VIET LETTER LOW CHO	[2E9C 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8C, 0x0062 };
    uint32_t const ces[12] = { 0x2E9C, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_076)
{
    // AAB9 AA8C 0021;	
    // (ꪹꪌ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW CHO	[2E9C 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8C, 0x0021 };
    uint32_t const ces[12] = { 0x2E9C, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_077)
{
    // AAB9 AA8C 003F;	
    // (ꪹꪌ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW CHO	[2E9C 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8C, 0x003F };
    uint32_t const ces[12] = { 0x2E9C, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_078)
{
    // AAB9 AA8C 0061;	
    // (ꪹꪌ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW CHO	[2E9C 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8C, 0x0061 };
    uint32_t const ces[12] = { 0x2E9C, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_079)
{
    // AAB9 AA8C 0041;	
    // (ꪹꪌ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW CHO	[2E9C 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8C, 0x0041 };
    uint32_t const ces[12] = { 0x2E9C, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_080)
{
    // AAB9 AA8C 0062;	
    // (ꪹꪌ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW CHO	[2E9C 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8C, 0x0062 };
    uint32_t const ces[12] = { 0x2E9C, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_081)
{
    // AABB AA8C 0021;	
    // (ꪻꪌ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW CHO	[2E9C 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8C, 0x0021 };
    uint32_t const ces[12] = { 0x2E9C, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_082)
{
    // AABB AA8C 003F;	
    // (ꪻꪌ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW CHO	[2E9C 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8C, 0x003F };
    uint32_t const ces[12] = { 0x2E9C, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_083)
{
    // AABB AA8C 0061;	
    // (ꪻꪌ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW CHO	[2E9C 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8C, 0x0061 };
    uint32_t const ces[12] = { 0x2E9C, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_084)
{
    // AABB AA8C 0041;	
    // (ꪻꪌ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW CHO	[2E9C 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8C, 0x0041 };
    uint32_t const ces[12] = { 0x2E9C, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_085)
{
    // AABB AA8C 0062;	
    // (ꪻꪌ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW CHO	[2E9C 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8C, 0x0062 };
    uint32_t const ces[12] = { 0x2E9C, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_086)
{
    // AABC AA8C 0021;	
    // (ꪼꪌ) TAI VIET VOWEL AY, TAI VIET LETTER LOW CHO	[2E9C 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8C, 0x0021 };
    uint32_t const ces[12] = { 0x2E9C, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_087)
{
    // AABC AA8C 003F;	
    // (ꪼꪌ) TAI VIET VOWEL AY, TAI VIET LETTER LOW CHO	[2E9C 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8C, 0x003F };
    uint32_t const ces[12] = { 0x2E9C, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_088)
{
    // AABC AA8C 0061;	
    // (ꪼꪌ) TAI VIET VOWEL AY, TAI VIET LETTER LOW CHO	[2E9C 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8C, 0x0061 };
    uint32_t const ces[12] = { 0x2E9C, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_089)
{
    // AABC AA8C 0041;	
    // (ꪼꪌ) TAI VIET VOWEL AY, TAI VIET LETTER LOW CHO	[2E9C 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8C, 0x0041 };
    uint32_t const ces[12] = { 0x2E9C, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_090)
{
    // AABC AA8C 0062;	
    // (ꪼꪌ) TAI VIET VOWEL AY, TAI VIET LETTER LOW CHO	[2E9C 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8C, 0x0062 };
    uint32_t const ces[12] = { 0x2E9C, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_091)
{
    // AA8D 0021;	
    // (ꪍ) TAI VIET LETTER HIGH CHO	[2E9D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8D, 0x0021 };
    uint32_t const ces[9] = { 0x2E9D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_092)
{
    // AA8D 003F;	
    // (ꪍ) TAI VIET LETTER HIGH CHO	[2E9D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8D, 0x003F };
    uint32_t const ces[9] = { 0x2E9D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_093)
{
    // AA8D 0061;	
    // (ꪍ) TAI VIET LETTER HIGH CHO	[2E9D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8D, 0x0061 };
    uint32_t const ces[9] = { 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_094)
{
    // AA8D 0041;	
    // (ꪍ) TAI VIET LETTER HIGH CHO	[2E9D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA8D, 0x0041 };
    uint32_t const ces[9] = { 0x2E9D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_095)
{
    // AA8D 0062;	
    // (ꪍ) TAI VIET LETTER HIGH CHO	[2E9D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8D, 0x0062 };
    uint32_t const ces[9] = { 0x2E9D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_096)
{
    // AAB5 AA8D 0021;	
    // (ꪵꪍ) TAI VIET VOWEL E, TAI VIET LETTER HIGH CHO	[2E9D 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8D, 0x0021 };
    uint32_t const ces[12] = { 0x2E9D, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_097)
{
    // AAB5 AA8D 003F;	
    // (ꪵꪍ) TAI VIET VOWEL E, TAI VIET LETTER HIGH CHO	[2E9D 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8D, 0x003F };
    uint32_t const ces[12] = { 0x2E9D, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_098)
{
    // AAB5 AA8D 0061;	
    // (ꪵꪍ) TAI VIET VOWEL E, TAI VIET LETTER HIGH CHO	[2E9D 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E9D, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_099)
{
    // AAB5 AA8D 0041;	
    // (ꪵꪍ) TAI VIET VOWEL E, TAI VIET LETTER HIGH CHO	[2E9D 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8D, 0x0041 };
    uint32_t const ces[12] = { 0x2E9D, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_100)
{
    // AAB5 AA8D 0062;	
    // (ꪵꪍ) TAI VIET VOWEL E, TAI VIET LETTER HIGH CHO	[2E9D 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8D, 0x0062 };
    uint32_t const ces[12] = { 0x2E9D, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_101)
{
    // AAB6 AA8D 0021;	
    // (ꪶꪍ) TAI VIET VOWEL O, TAI VIET LETTER HIGH CHO	[2E9D 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8D, 0x0021 };
    uint32_t const ces[12] = { 0x2E9D, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_102)
{
    // AAB6 AA8D 003F;	
    // (ꪶꪍ) TAI VIET VOWEL O, TAI VIET LETTER HIGH CHO	[2E9D 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8D, 0x003F };
    uint32_t const ces[12] = { 0x2E9D, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_103)
{
    // AAB6 AA8D 0061;	
    // (ꪶꪍ) TAI VIET VOWEL O, TAI VIET LETTER HIGH CHO	[2E9D 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E9D, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_104)
{
    // AAB6 AA8D 0041;	
    // (ꪶꪍ) TAI VIET VOWEL O, TAI VIET LETTER HIGH CHO	[2E9D 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8D, 0x0041 };
    uint32_t const ces[12] = { 0x2E9D, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_105)
{
    // AAB6 AA8D 0062;	
    // (ꪶꪍ) TAI VIET VOWEL O, TAI VIET LETTER HIGH CHO	[2E9D 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8D, 0x0062 };
    uint32_t const ces[12] = { 0x2E9D, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_106)
{
    // AAB9 AA8D 0021;	
    // (ꪹꪍ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH CHO	[2E9D 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8D, 0x0021 };
    uint32_t const ces[12] = { 0x2E9D, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_107)
{
    // AAB9 AA8D 003F;	
    // (ꪹꪍ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH CHO	[2E9D 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8D, 0x003F };
    uint32_t const ces[12] = { 0x2E9D, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_108)
{
    // AAB9 AA8D 0061;	
    // (ꪹꪍ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH CHO	[2E9D 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E9D, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_109)
{
    // AAB9 AA8D 0041;	
    // (ꪹꪍ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH CHO	[2E9D 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8D, 0x0041 };
    uint32_t const ces[12] = { 0x2E9D, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_110)
{
    // AAB9 AA8D 0062;	
    // (ꪹꪍ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH CHO	[2E9D 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8D, 0x0062 };
    uint32_t const ces[12] = { 0x2E9D, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_111)
{
    // AABB AA8D 0021;	
    // (ꪻꪍ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH CHO	[2E9D 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8D, 0x0021 };
    uint32_t const ces[12] = { 0x2E9D, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_112)
{
    // AABB AA8D 003F;	
    // (ꪻꪍ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH CHO	[2E9D 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8D, 0x003F };
    uint32_t const ces[12] = { 0x2E9D, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_113)
{
    // AABB AA8D 0061;	
    // (ꪻꪍ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH CHO	[2E9D 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E9D, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_114)
{
    // AABB AA8D 0041;	
    // (ꪻꪍ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH CHO	[2E9D 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8D, 0x0041 };
    uint32_t const ces[12] = { 0x2E9D, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_115)
{
    // AABB AA8D 0062;	
    // (ꪻꪍ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH CHO	[2E9D 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8D, 0x0062 };
    uint32_t const ces[12] = { 0x2E9D, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_116)
{
    // AABC AA8D 0021;	
    // (ꪼꪍ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH CHO	[2E9D 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8D, 0x0021 };
    uint32_t const ces[12] = { 0x2E9D, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_117)
{
    // AABC AA8D 003F;	
    // (ꪼꪍ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH CHO	[2E9D 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8D, 0x003F };
    uint32_t const ces[12] = { 0x2E9D, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_118)
{
    // AABC AA8D 0061;	
    // (ꪼꪍ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH CHO	[2E9D 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E9D, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_119)
{
    // AABC AA8D 0041;	
    // (ꪼꪍ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH CHO	[2E9D 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8D, 0x0041 };
    uint32_t const ces[12] = { 0x2E9D, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_120)
{
    // AABC AA8D 0062;	
    // (ꪼꪍ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH CHO	[2E9D 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8D, 0x0062 };
    uint32_t const ces[12] = { 0x2E9D, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_121)
{
    // AA8E 0021;	
    // (ꪎ) TAI VIET LETTER LOW SO	[2E9E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8E, 0x0021 };
    uint32_t const ces[9] = { 0x2E9E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_122)
{
    // AA8E 003F;	
    // (ꪎ) TAI VIET LETTER LOW SO	[2E9E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8E, 0x003F };
    uint32_t const ces[9] = { 0x2E9E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_123)
{
    // AA8E 0061;	
    // (ꪎ) TAI VIET LETTER LOW SO	[2E9E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8E, 0x0061 };
    uint32_t const ces[9] = { 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_124)
{
    // AA8E 0041;	
    // (ꪎ) TAI VIET LETTER LOW SO	[2E9E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA8E, 0x0041 };
    uint32_t const ces[9] = { 0x2E9E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_125)
{
    // AA8E 0062;	
    // (ꪎ) TAI VIET LETTER LOW SO	[2E9E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8E, 0x0062 };
    uint32_t const ces[9] = { 0x2E9E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_126)
{
    // AAB5 AA8E 0021;	
    // (ꪵꪎ) TAI VIET VOWEL E, TAI VIET LETTER LOW SO	[2E9E 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8E, 0x0021 };
    uint32_t const ces[12] = { 0x2E9E, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_127)
{
    // AAB5 AA8E 003F;	
    // (ꪵꪎ) TAI VIET VOWEL E, TAI VIET LETTER LOW SO	[2E9E 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8E, 0x003F };
    uint32_t const ces[12] = { 0x2E9E, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_128)
{
    // AAB5 AA8E 0061;	
    // (ꪵꪎ) TAI VIET VOWEL E, TAI VIET LETTER LOW SO	[2E9E 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8E, 0x0061 };
    uint32_t const ces[12] = { 0x2E9E, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_129)
{
    // AAB5 AA8E 0041;	
    // (ꪵꪎ) TAI VIET VOWEL E, TAI VIET LETTER LOW SO	[2E9E 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8E, 0x0041 };
    uint32_t const ces[12] = { 0x2E9E, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_130)
{
    // AAB5 AA8E 0062;	
    // (ꪵꪎ) TAI VIET VOWEL E, TAI VIET LETTER LOW SO	[2E9E 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8E, 0x0062 };
    uint32_t const ces[12] = { 0x2E9E, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_131)
{
    // AAB6 AA8E 0021;	
    // (ꪶꪎ) TAI VIET VOWEL O, TAI VIET LETTER LOW SO	[2E9E 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8E, 0x0021 };
    uint32_t const ces[12] = { 0x2E9E, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_132)
{
    // AAB6 AA8E 003F;	
    // (ꪶꪎ) TAI VIET VOWEL O, TAI VIET LETTER LOW SO	[2E9E 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8E, 0x003F };
    uint32_t const ces[12] = { 0x2E9E, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_133)
{
    // AAB6 AA8E 0061;	
    // (ꪶꪎ) TAI VIET VOWEL O, TAI VIET LETTER LOW SO	[2E9E 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8E, 0x0061 };
    uint32_t const ces[12] = { 0x2E9E, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_134)
{
    // AAB6 AA8E 0041;	
    // (ꪶꪎ) TAI VIET VOWEL O, TAI VIET LETTER LOW SO	[2E9E 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8E, 0x0041 };
    uint32_t const ces[12] = { 0x2E9E, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_135)
{
    // AAB6 AA8E 0062;	
    // (ꪶꪎ) TAI VIET VOWEL O, TAI VIET LETTER LOW SO	[2E9E 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8E, 0x0062 };
    uint32_t const ces[12] = { 0x2E9E, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_136)
{
    // AAB9 AA8E 0021;	
    // (ꪹꪎ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW SO	[2E9E 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8E, 0x0021 };
    uint32_t const ces[12] = { 0x2E9E, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_137)
{
    // AAB9 AA8E 003F;	
    // (ꪹꪎ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW SO	[2E9E 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8E, 0x003F };
    uint32_t const ces[12] = { 0x2E9E, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_138)
{
    // AAB9 AA8E 0061;	
    // (ꪹꪎ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW SO	[2E9E 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8E, 0x0061 };
    uint32_t const ces[12] = { 0x2E9E, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_139)
{
    // AAB9 AA8E 0041;	
    // (ꪹꪎ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW SO	[2E9E 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8E, 0x0041 };
    uint32_t const ces[12] = { 0x2E9E, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_140)
{
    // AAB9 AA8E 0062;	
    // (ꪹꪎ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW SO	[2E9E 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8E, 0x0062 };
    uint32_t const ces[12] = { 0x2E9E, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_141)
{
    // AABB AA8E 0021;	
    // (ꪻꪎ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW SO	[2E9E 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8E, 0x0021 };
    uint32_t const ces[12] = { 0x2E9E, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_142)
{
    // AABB AA8E 003F;	
    // (ꪻꪎ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW SO	[2E9E 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8E, 0x003F };
    uint32_t const ces[12] = { 0x2E9E, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_143)
{
    // AABB AA8E 0061;	
    // (ꪻꪎ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW SO	[2E9E 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8E, 0x0061 };
    uint32_t const ces[12] = { 0x2E9E, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_144)
{
    // AABB AA8E 0041;	
    // (ꪻꪎ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW SO	[2E9E 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8E, 0x0041 };
    uint32_t const ces[12] = { 0x2E9E, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_145)
{
    // AABB AA8E 0062;	
    // (ꪻꪎ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW SO	[2E9E 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8E, 0x0062 };
    uint32_t const ces[12] = { 0x2E9E, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_146)
{
    // AABC AA8E 0021;	
    // (ꪼꪎ) TAI VIET VOWEL AY, TAI VIET LETTER LOW SO	[2E9E 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8E, 0x0021 };
    uint32_t const ces[12] = { 0x2E9E, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_147)
{
    // AABC AA8E 003F;	
    // (ꪼꪎ) TAI VIET VOWEL AY, TAI VIET LETTER LOW SO	[2E9E 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8E, 0x003F };
    uint32_t const ces[12] = { 0x2E9E, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_148)
{
    // AABC AA8E 0061;	
    // (ꪼꪎ) TAI VIET VOWEL AY, TAI VIET LETTER LOW SO	[2E9E 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8E, 0x0061 };
    uint32_t const ces[12] = { 0x2E9E, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_149)
{
    // AABC AA8E 0041;	
    // (ꪼꪎ) TAI VIET VOWEL AY, TAI VIET LETTER LOW SO	[2E9E 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8E, 0x0041 };
    uint32_t const ces[12] = { 0x2E9E, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_150)
{
    // AABC AA8E 0062;	
    // (ꪼꪎ) TAI VIET VOWEL AY, TAI VIET LETTER LOW SO	[2E9E 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8E, 0x0062 };
    uint32_t const ces[12] = { 0x2E9E, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_151)
{
    // AA8F 0021;	
    // (ꪏ) TAI VIET LETTER HIGH SO	[2E9F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8F, 0x0021 };
    uint32_t const ces[9] = { 0x2E9F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_152)
{
    // AA8F 003F;	
    // (ꪏ) TAI VIET LETTER HIGH SO	[2E9F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8F, 0x003F };
    uint32_t const ces[9] = { 0x2E9F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_153)
{
    // AA8F 0061;	
    // (ꪏ) TAI VIET LETTER HIGH SO	[2E9F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8F, 0x0061 };
    uint32_t const ces[9] = { 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_154)
{
    // AA8F 0041;	
    // (ꪏ) TAI VIET LETTER HIGH SO	[2E9F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA8F, 0x0041 };
    uint32_t const ces[9] = { 0x2E9F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_155)
{
    // AA8F 0062;	
    // (ꪏ) TAI VIET LETTER HIGH SO	[2E9F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA8F, 0x0062 };
    uint32_t const ces[9] = { 0x2E9F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_156)
{
    // AAB5 AA8F 0021;	
    // (ꪵꪏ) TAI VIET VOWEL E, TAI VIET LETTER HIGH SO	[2E9F 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8F, 0x0021 };
    uint32_t const ces[12] = { 0x2E9F, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_157)
{
    // AAB5 AA8F 003F;	
    // (ꪵꪏ) TAI VIET VOWEL E, TAI VIET LETTER HIGH SO	[2E9F 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8F, 0x003F };
    uint32_t const ces[12] = { 0x2E9F, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_158)
{
    // AAB5 AA8F 0061;	
    // (ꪵꪏ) TAI VIET VOWEL E, TAI VIET LETTER HIGH SO	[2E9F 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8F, 0x0061 };
    uint32_t const ces[12] = { 0x2E9F, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_159)
{
    // AAB5 AA8F 0041;	
    // (ꪵꪏ) TAI VIET VOWEL E, TAI VIET LETTER HIGH SO	[2E9F 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8F, 0x0041 };
    uint32_t const ces[12] = { 0x2E9F, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_160)
{
    // AAB5 AA8F 0062;	
    // (ꪵꪏ) TAI VIET VOWEL E, TAI VIET LETTER HIGH SO	[2E9F 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA8F, 0x0062 };
    uint32_t const ces[12] = { 0x2E9F, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_161)
{
    // AAB6 AA8F 0021;	
    // (ꪶꪏ) TAI VIET VOWEL O, TAI VIET LETTER HIGH SO	[2E9F 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8F, 0x0021 };
    uint32_t const ces[12] = { 0x2E9F, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_162)
{
    // AAB6 AA8F 003F;	
    // (ꪶꪏ) TAI VIET VOWEL O, TAI VIET LETTER HIGH SO	[2E9F 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8F, 0x003F };
    uint32_t const ces[12] = { 0x2E9F, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_163)
{
    // AAB6 AA8F 0061;	
    // (ꪶꪏ) TAI VIET VOWEL O, TAI VIET LETTER HIGH SO	[2E9F 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8F, 0x0061 };
    uint32_t const ces[12] = { 0x2E9F, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_164)
{
    // AAB6 AA8F 0041;	
    // (ꪶꪏ) TAI VIET VOWEL O, TAI VIET LETTER HIGH SO	[2E9F 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8F, 0x0041 };
    uint32_t const ces[12] = { 0x2E9F, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_165)
{
    // AAB6 AA8F 0062;	
    // (ꪶꪏ) TAI VIET VOWEL O, TAI VIET LETTER HIGH SO	[2E9F 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA8F, 0x0062 };
    uint32_t const ces[12] = { 0x2E9F, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_166)
{
    // AAB9 AA8F 0021;	
    // (ꪹꪏ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH SO	[2E9F 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8F, 0x0021 };
    uint32_t const ces[12] = { 0x2E9F, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_167)
{
    // AAB9 AA8F 003F;	
    // (ꪹꪏ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH SO	[2E9F 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8F, 0x003F };
    uint32_t const ces[12] = { 0x2E9F, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_168)
{
    // AAB9 AA8F 0061;	
    // (ꪹꪏ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH SO	[2E9F 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8F, 0x0061 };
    uint32_t const ces[12] = { 0x2E9F, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_169)
{
    // AAB9 AA8F 0041;	
    // (ꪹꪏ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH SO	[2E9F 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8F, 0x0041 };
    uint32_t const ces[12] = { 0x2E9F, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_170)
{
    // AAB9 AA8F 0062;	
    // (ꪹꪏ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH SO	[2E9F 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA8F, 0x0062 };
    uint32_t const ces[12] = { 0x2E9F, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_171)
{
    // AABB AA8F 0021;	
    // (ꪻꪏ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH SO	[2E9F 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8F, 0x0021 };
    uint32_t const ces[12] = { 0x2E9F, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_172)
{
    // AABB AA8F 003F;	
    // (ꪻꪏ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH SO	[2E9F 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8F, 0x003F };
    uint32_t const ces[12] = { 0x2E9F, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_173)
{
    // AABB AA8F 0061;	
    // (ꪻꪏ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH SO	[2E9F 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8F, 0x0061 };
    uint32_t const ces[12] = { 0x2E9F, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_174)
{
    // AABB AA8F 0041;	
    // (ꪻꪏ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH SO	[2E9F 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8F, 0x0041 };
    uint32_t const ces[12] = { 0x2E9F, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_175)
{
    // AABB AA8F 0062;	
    // (ꪻꪏ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH SO	[2E9F 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA8F, 0x0062 };
    uint32_t const ces[12] = { 0x2E9F, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_176)
{
    // AABC AA8F 0021;	
    // (ꪼꪏ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH SO	[2E9F 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8F, 0x0021 };
    uint32_t const ces[12] = { 0x2E9F, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_177)
{
    // AABC AA8F 003F;	
    // (ꪼꪏ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH SO	[2E9F 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8F, 0x003F };
    uint32_t const ces[12] = { 0x2E9F, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_178)
{
    // AABC AA8F 0061;	
    // (ꪼꪏ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH SO	[2E9F 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8F, 0x0061 };
    uint32_t const ces[12] = { 0x2E9F, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_179)
{
    // AABC AA8F 0041;	
    // (ꪼꪏ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH SO	[2E9F 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8F, 0x0041 };
    uint32_t const ces[12] = { 0x2E9F, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_180)
{
    // AABC AA8F 0062;	
    // (ꪼꪏ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH SO	[2E9F 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA8F, 0x0062 };
    uint32_t const ces[12] = { 0x2E9F, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_181)
{
    // AA90 0021;	
    // (ꪐ) TAI VIET LETTER LOW NYO	[2EA0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA90, 0x0021 };
    uint32_t const ces[9] = { 0x2EA0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_182)
{
    // AA90 003F;	
    // (ꪐ) TAI VIET LETTER LOW NYO	[2EA0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA90, 0x003F };
    uint32_t const ces[9] = { 0x2EA0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_183)
{
    // AA90 0061;	
    // (ꪐ) TAI VIET LETTER LOW NYO	[2EA0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA90, 0x0061 };
    uint32_t const ces[9] = { 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_184)
{
    // AA90 0041;	
    // (ꪐ) TAI VIET LETTER LOW NYO	[2EA0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA90, 0x0041 };
    uint32_t const ces[9] = { 0x2EA0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_185)
{
    // AA90 0062;	
    // (ꪐ) TAI VIET LETTER LOW NYO	[2EA0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA90, 0x0062 };
    uint32_t const ces[9] = { 0x2EA0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_186)
{
    // AAB5 AA90 0021;	
    // (ꪵꪐ) TAI VIET VOWEL E, TAI VIET LETTER LOW NYO	[2EA0 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA90, 0x0021 };
    uint32_t const ces[12] = { 0x2EA0, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_187)
{
    // AAB5 AA90 003F;	
    // (ꪵꪐ) TAI VIET VOWEL E, TAI VIET LETTER LOW NYO	[2EA0 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA90, 0x003F };
    uint32_t const ces[12] = { 0x2EA0, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_188)
{
    // AAB5 AA90 0061;	
    // (ꪵꪐ) TAI VIET VOWEL E, TAI VIET LETTER LOW NYO	[2EA0 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA90, 0x0061 };
    uint32_t const ces[12] = { 0x2EA0, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_189)
{
    // AAB5 AA90 0041;	
    // (ꪵꪐ) TAI VIET VOWEL E, TAI VIET LETTER LOW NYO	[2EA0 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA90, 0x0041 };
    uint32_t const ces[12] = { 0x2EA0, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_190)
{
    // AAB5 AA90 0062;	
    // (ꪵꪐ) TAI VIET VOWEL E, TAI VIET LETTER LOW NYO	[2EA0 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA90, 0x0062 };
    uint32_t const ces[12] = { 0x2EA0, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_191)
{
    // AAB6 AA90 0021;	
    // (ꪶꪐ) TAI VIET VOWEL O, TAI VIET LETTER LOW NYO	[2EA0 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA90, 0x0021 };
    uint32_t const ces[12] = { 0x2EA0, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_192)
{
    // AAB6 AA90 003F;	
    // (ꪶꪐ) TAI VIET VOWEL O, TAI VIET LETTER LOW NYO	[2EA0 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA90, 0x003F };
    uint32_t const ces[12] = { 0x2EA0, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_193)
{
    // AAB6 AA90 0061;	
    // (ꪶꪐ) TAI VIET VOWEL O, TAI VIET LETTER LOW NYO	[2EA0 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA90, 0x0061 };
    uint32_t const ces[12] = { 0x2EA0, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_194)
{
    // AAB6 AA90 0041;	
    // (ꪶꪐ) TAI VIET VOWEL O, TAI VIET LETTER LOW NYO	[2EA0 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA90, 0x0041 };
    uint32_t const ces[12] = { 0x2EA0, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_195)
{
    // AAB6 AA90 0062;	
    // (ꪶꪐ) TAI VIET VOWEL O, TAI VIET LETTER LOW NYO	[2EA0 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA90, 0x0062 };
    uint32_t const ces[12] = { 0x2EA0, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_196)
{
    // AAB9 AA90 0021;	
    // (ꪹꪐ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW NYO	[2EA0 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA90, 0x0021 };
    uint32_t const ces[12] = { 0x2EA0, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_197)
{
    // AAB9 AA90 003F;	
    // (ꪹꪐ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW NYO	[2EA0 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA90, 0x003F };
    uint32_t const ces[12] = { 0x2EA0, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_198)
{
    // AAB9 AA90 0061;	
    // (ꪹꪐ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW NYO	[2EA0 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA90, 0x0061 };
    uint32_t const ces[12] = { 0x2EA0, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_199)
{
    // AAB9 AA90 0041;	
    // (ꪹꪐ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW NYO	[2EA0 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA90, 0x0041 };
    uint32_t const ces[12] = { 0x2EA0, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_200)
{
    // AAB9 AA90 0062;	
    // (ꪹꪐ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW NYO	[2EA0 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA90, 0x0062 };
    uint32_t const ces[12] = { 0x2EA0, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_201)
{
    // AABB AA90 0021;	
    // (ꪻꪐ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW NYO	[2EA0 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA90, 0x0021 };
    uint32_t const ces[12] = { 0x2EA0, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_202)
{
    // AABB AA90 003F;	
    // (ꪻꪐ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW NYO	[2EA0 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA90, 0x003F };
    uint32_t const ces[12] = { 0x2EA0, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_203)
{
    // AABB AA90 0061;	
    // (ꪻꪐ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW NYO	[2EA0 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA90, 0x0061 };
    uint32_t const ces[12] = { 0x2EA0, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_204)
{
    // AABB AA90 0041;	
    // (ꪻꪐ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW NYO	[2EA0 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA90, 0x0041 };
    uint32_t const ces[12] = { 0x2EA0, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_205)
{
    // AABB AA90 0062;	
    // (ꪻꪐ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW NYO	[2EA0 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA90, 0x0062 };
    uint32_t const ces[12] = { 0x2EA0, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_206)
{
    // AABC AA90 0021;	
    // (ꪼꪐ) TAI VIET VOWEL AY, TAI VIET LETTER LOW NYO	[2EA0 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA90, 0x0021 };
    uint32_t const ces[12] = { 0x2EA0, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_207)
{
    // AABC AA90 003F;	
    // (ꪼꪐ) TAI VIET VOWEL AY, TAI VIET LETTER LOW NYO	[2EA0 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA90, 0x003F };
    uint32_t const ces[12] = { 0x2EA0, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_208)
{
    // AABC AA90 0061;	
    // (ꪼꪐ) TAI VIET VOWEL AY, TAI VIET LETTER LOW NYO	[2EA0 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA90, 0x0061 };
    uint32_t const ces[12] = { 0x2EA0, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_209)
{
    // AABC AA90 0041;	
    // (ꪼꪐ) TAI VIET VOWEL AY, TAI VIET LETTER LOW NYO	[2EA0 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA90, 0x0041 };
    uint32_t const ces[12] = { 0x2EA0, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_210)
{
    // AABC AA90 0062;	
    // (ꪼꪐ) TAI VIET VOWEL AY, TAI VIET LETTER LOW NYO	[2EA0 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA90, 0x0062 };
    uint32_t const ces[12] = { 0x2EA0, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_211)
{
    // AA91 0021;	
    // (ꪑ) TAI VIET LETTER HIGH NYO	[2EA1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA91, 0x0021 };
    uint32_t const ces[9] = { 0x2EA1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_212)
{
    // AA91 003F;	
    // (ꪑ) TAI VIET LETTER HIGH NYO	[2EA1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA91, 0x003F };
    uint32_t const ces[9] = { 0x2EA1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_213)
{
    // AA91 0061;	
    // (ꪑ) TAI VIET LETTER HIGH NYO	[2EA1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA91, 0x0061 };
    uint32_t const ces[9] = { 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_214)
{
    // AA91 0041;	
    // (ꪑ) TAI VIET LETTER HIGH NYO	[2EA1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA91, 0x0041 };
    uint32_t const ces[9] = { 0x2EA1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_215)
{
    // AA91 0062;	
    // (ꪑ) TAI VIET LETTER HIGH NYO	[2EA1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA91, 0x0062 };
    uint32_t const ces[9] = { 0x2EA1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_216)
{
    // AAB5 AA91 0021;	
    // (ꪵꪑ) TAI VIET VOWEL E, TAI VIET LETTER HIGH NYO	[2EA1 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA91, 0x0021 };
    uint32_t const ces[12] = { 0x2EA1, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_217)
{
    // AAB5 AA91 003F;	
    // (ꪵꪑ) TAI VIET VOWEL E, TAI VIET LETTER HIGH NYO	[2EA1 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA91, 0x003F };
    uint32_t const ces[12] = { 0x2EA1, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_218)
{
    // AAB5 AA91 0061;	
    // (ꪵꪑ) TAI VIET VOWEL E, TAI VIET LETTER HIGH NYO	[2EA1 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA91, 0x0061 };
    uint32_t const ces[12] = { 0x2EA1, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_219)
{
    // AAB5 AA91 0041;	
    // (ꪵꪑ) TAI VIET VOWEL E, TAI VIET LETTER HIGH NYO	[2EA1 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA91, 0x0041 };
    uint32_t const ces[12] = { 0x2EA1, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_220)
{
    // AAB5 AA91 0062;	
    // (ꪵꪑ) TAI VIET VOWEL E, TAI VIET LETTER HIGH NYO	[2EA1 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA91, 0x0062 };
    uint32_t const ces[12] = { 0x2EA1, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_221)
{
    // AAB6 AA91 0021;	
    // (ꪶꪑ) TAI VIET VOWEL O, TAI VIET LETTER HIGH NYO	[2EA1 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA91, 0x0021 };
    uint32_t const ces[12] = { 0x2EA1, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_222)
{
    // AAB6 AA91 003F;	
    // (ꪶꪑ) TAI VIET VOWEL O, TAI VIET LETTER HIGH NYO	[2EA1 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA91, 0x003F };
    uint32_t const ces[12] = { 0x2EA1, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_223)
{
    // AAB6 AA91 0061;	
    // (ꪶꪑ) TAI VIET VOWEL O, TAI VIET LETTER HIGH NYO	[2EA1 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA91, 0x0061 };
    uint32_t const ces[12] = { 0x2EA1, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_224)
{
    // AAB6 AA91 0041;	
    // (ꪶꪑ) TAI VIET VOWEL O, TAI VIET LETTER HIGH NYO	[2EA1 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA91, 0x0041 };
    uint32_t const ces[12] = { 0x2EA1, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_225)
{
    // AAB6 AA91 0062;	
    // (ꪶꪑ) TAI VIET VOWEL O, TAI VIET LETTER HIGH NYO	[2EA1 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA91, 0x0062 };
    uint32_t const ces[12] = { 0x2EA1, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_226)
{
    // AAB9 AA91 0021;	
    // (ꪹꪑ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH NYO	[2EA1 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA91, 0x0021 };
    uint32_t const ces[12] = { 0x2EA1, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_227)
{
    // AAB9 AA91 003F;	
    // (ꪹꪑ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH NYO	[2EA1 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA91, 0x003F };
    uint32_t const ces[12] = { 0x2EA1, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_228)
{
    // AAB9 AA91 0061;	
    // (ꪹꪑ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH NYO	[2EA1 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA91, 0x0061 };
    uint32_t const ces[12] = { 0x2EA1, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_229)
{
    // AAB9 AA91 0041;	
    // (ꪹꪑ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH NYO	[2EA1 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA91, 0x0041 };
    uint32_t const ces[12] = { 0x2EA1, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_230)
{
    // AAB9 AA91 0062;	
    // (ꪹꪑ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH NYO	[2EA1 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA91, 0x0062 };
    uint32_t const ces[12] = { 0x2EA1, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_231)
{
    // AABB AA91 0021;	
    // (ꪻꪑ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH NYO	[2EA1 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA91, 0x0021 };
    uint32_t const ces[12] = { 0x2EA1, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_232)
{
    // AABB AA91 003F;	
    // (ꪻꪑ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH NYO	[2EA1 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA91, 0x003F };
    uint32_t const ces[12] = { 0x2EA1, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_233)
{
    // AABB AA91 0061;	
    // (ꪻꪑ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH NYO	[2EA1 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA91, 0x0061 };
    uint32_t const ces[12] = { 0x2EA1, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_234)
{
    // AABB AA91 0041;	
    // (ꪻꪑ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH NYO	[2EA1 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA91, 0x0041 };
    uint32_t const ces[12] = { 0x2EA1, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_235)
{
    // AABB AA91 0062;	
    // (ꪻꪑ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH NYO	[2EA1 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA91, 0x0062 };
    uint32_t const ces[12] = { 0x2EA1, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_236)
{
    // AABC AA91 0021;	
    // (ꪼꪑ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH NYO	[2EA1 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA91, 0x0021 };
    uint32_t const ces[12] = { 0x2EA1, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_237)
{
    // AABC AA91 003F;	
    // (ꪼꪑ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH NYO	[2EA1 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA91, 0x003F };
    uint32_t const ces[12] = { 0x2EA1, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_238)
{
    // AABC AA91 0061;	
    // (ꪼꪑ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH NYO	[2EA1 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA91, 0x0061 };
    uint32_t const ces[12] = { 0x2EA1, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_239)
{
    // AABC AA91 0041;	
    // (ꪼꪑ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH NYO	[2EA1 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA91, 0x0041 };
    uint32_t const ces[12] = { 0x2EA1, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_240)
{
    // AABC AA91 0062;	
    // (ꪼꪑ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH NYO	[2EA1 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA91, 0x0062 };
    uint32_t const ces[12] = { 0x2EA1, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_241)
{
    // AA92 0021;	
    // (ꪒ) TAI VIET LETTER LOW DO	[2EA2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA92, 0x0021 };
    uint32_t const ces[9] = { 0x2EA2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_242)
{
    // AA92 003F;	
    // (ꪒ) TAI VIET LETTER LOW DO	[2EA2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA92, 0x003F };
    uint32_t const ces[9] = { 0x2EA2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_243)
{
    // AA92 0061;	
    // (ꪒ) TAI VIET LETTER LOW DO	[2EA2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA92, 0x0061 };
    uint32_t const ces[9] = { 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_244)
{
    // AA92 0041;	
    // (ꪒ) TAI VIET LETTER LOW DO	[2EA2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA92, 0x0041 };
    uint32_t const ces[9] = { 0x2EA2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_245)
{
    // AA92 0062;	
    // (ꪒ) TAI VIET LETTER LOW DO	[2EA2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA92, 0x0062 };
    uint32_t const ces[9] = { 0x2EA2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_246)
{
    // AAB5 AA92 0021;	
    // (ꪵꪒ) TAI VIET VOWEL E, TAI VIET LETTER LOW DO	[2EA2 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA92, 0x0021 };
    uint32_t const ces[12] = { 0x2EA2, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_247)
{
    // AAB5 AA92 003F;	
    // (ꪵꪒ) TAI VIET VOWEL E, TAI VIET LETTER LOW DO	[2EA2 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA92, 0x003F };
    uint32_t const ces[12] = { 0x2EA2, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_248)
{
    // AAB5 AA92 0061;	
    // (ꪵꪒ) TAI VIET VOWEL E, TAI VIET LETTER LOW DO	[2EA2 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA92, 0x0061 };
    uint32_t const ces[12] = { 0x2EA2, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_249)
{
    // AAB5 AA92 0041;	
    // (ꪵꪒ) TAI VIET VOWEL E, TAI VIET LETTER LOW DO	[2EA2 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA92, 0x0041 };
    uint32_t const ces[12] = { 0x2EA2, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_250)
{
    // AAB5 AA92 0062;	
    // (ꪵꪒ) TAI VIET VOWEL E, TAI VIET LETTER LOW DO	[2EA2 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA92, 0x0062 };
    uint32_t const ces[12] = { 0x2EA2, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_251)
{
    // AAB6 AA92 0021;	
    // (ꪶꪒ) TAI VIET VOWEL O, TAI VIET LETTER LOW DO	[2EA2 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA92, 0x0021 };
    uint32_t const ces[12] = { 0x2EA2, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_252)
{
    // AAB6 AA92 003F;	
    // (ꪶꪒ) TAI VIET VOWEL O, TAI VIET LETTER LOW DO	[2EA2 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA92, 0x003F };
    uint32_t const ces[12] = { 0x2EA2, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_253)
{
    // AAB6 AA92 0061;	
    // (ꪶꪒ) TAI VIET VOWEL O, TAI VIET LETTER LOW DO	[2EA2 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA92, 0x0061 };
    uint32_t const ces[12] = { 0x2EA2, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_254)
{
    // AAB6 AA92 0041;	
    // (ꪶꪒ) TAI VIET VOWEL O, TAI VIET LETTER LOW DO	[2EA2 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA92, 0x0041 };
    uint32_t const ces[12] = { 0x2EA2, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_255)
{
    // AAB6 AA92 0062;	
    // (ꪶꪒ) TAI VIET VOWEL O, TAI VIET LETTER LOW DO	[2EA2 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA92, 0x0062 };
    uint32_t const ces[12] = { 0x2EA2, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_256)
{
    // AAB9 AA92 0021;	
    // (ꪹꪒ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW DO	[2EA2 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA92, 0x0021 };
    uint32_t const ces[12] = { 0x2EA2, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_257)
{
    // AAB9 AA92 003F;	
    // (ꪹꪒ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW DO	[2EA2 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA92, 0x003F };
    uint32_t const ces[12] = { 0x2EA2, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_258)
{
    // AAB9 AA92 0061;	
    // (ꪹꪒ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW DO	[2EA2 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA92, 0x0061 };
    uint32_t const ces[12] = { 0x2EA2, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_259)
{
    // AAB9 AA92 0041;	
    // (ꪹꪒ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW DO	[2EA2 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA92, 0x0041 };
    uint32_t const ces[12] = { 0x2EA2, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_260)
{
    // AAB9 AA92 0062;	
    // (ꪹꪒ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW DO	[2EA2 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA92, 0x0062 };
    uint32_t const ces[12] = { 0x2EA2, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_261)
{
    // AABB AA92 0021;	
    // (ꪻꪒ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW DO	[2EA2 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA92, 0x0021 };
    uint32_t const ces[12] = { 0x2EA2, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_262)
{
    // AABB AA92 003F;	
    // (ꪻꪒ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW DO	[2EA2 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA92, 0x003F };
    uint32_t const ces[12] = { 0x2EA2, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_263)
{
    // AABB AA92 0061;	
    // (ꪻꪒ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW DO	[2EA2 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA92, 0x0061 };
    uint32_t const ces[12] = { 0x2EA2, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_264)
{
    // AABB AA92 0041;	
    // (ꪻꪒ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW DO	[2EA2 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA92, 0x0041 };
    uint32_t const ces[12] = { 0x2EA2, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_265)
{
    // AABB AA92 0062;	
    // (ꪻꪒ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW DO	[2EA2 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA92, 0x0062 };
    uint32_t const ces[12] = { 0x2EA2, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_266)
{
    // AABC AA92 0021;	
    // (ꪼꪒ) TAI VIET VOWEL AY, TAI VIET LETTER LOW DO	[2EA2 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA92, 0x0021 };
    uint32_t const ces[12] = { 0x2EA2, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_267)
{
    // AABC AA92 003F;	
    // (ꪼꪒ) TAI VIET VOWEL AY, TAI VIET LETTER LOW DO	[2EA2 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA92, 0x003F };
    uint32_t const ces[12] = { 0x2EA2, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_268)
{
    // AABC AA92 0061;	
    // (ꪼꪒ) TAI VIET VOWEL AY, TAI VIET LETTER LOW DO	[2EA2 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA92, 0x0061 };
    uint32_t const ces[12] = { 0x2EA2, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_269)
{
    // AABC AA92 0041;	
    // (ꪼꪒ) TAI VIET VOWEL AY, TAI VIET LETTER LOW DO	[2EA2 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA92, 0x0041 };
    uint32_t const ces[12] = { 0x2EA2, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_270)
{
    // AABC AA92 0062;	
    // (ꪼꪒ) TAI VIET VOWEL AY, TAI VIET LETTER LOW DO	[2EA2 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA92, 0x0062 };
    uint32_t const ces[12] = { 0x2EA2, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_271)
{
    // AA93 0021;	
    // (ꪓ) TAI VIET LETTER HIGH DO	[2EA3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA93, 0x0021 };
    uint32_t const ces[9] = { 0x2EA3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_272)
{
    // AA93 003F;	
    // (ꪓ) TAI VIET LETTER HIGH DO	[2EA3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA93, 0x003F };
    uint32_t const ces[9] = { 0x2EA3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_273)
{
    // AA93 0061;	
    // (ꪓ) TAI VIET LETTER HIGH DO	[2EA3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA93, 0x0061 };
    uint32_t const ces[9] = { 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_274)
{
    // AA93 0041;	
    // (ꪓ) TAI VIET LETTER HIGH DO	[2EA3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA93, 0x0041 };
    uint32_t const ces[9] = { 0x2EA3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_275)
{
    // AA93 0062;	
    // (ꪓ) TAI VIET LETTER HIGH DO	[2EA3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA93, 0x0062 };
    uint32_t const ces[9] = { 0x2EA3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_276)
{
    // AAB5 AA93 0021;	
    // (ꪵꪓ) TAI VIET VOWEL E, TAI VIET LETTER HIGH DO	[2EA3 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA93, 0x0021 };
    uint32_t const ces[12] = { 0x2EA3, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_277)
{
    // AAB5 AA93 003F;	
    // (ꪵꪓ) TAI VIET VOWEL E, TAI VIET LETTER HIGH DO	[2EA3 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA93, 0x003F };
    uint32_t const ces[12] = { 0x2EA3, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_278)
{
    // AAB5 AA93 0061;	
    // (ꪵꪓ) TAI VIET VOWEL E, TAI VIET LETTER HIGH DO	[2EA3 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA93, 0x0061 };
    uint32_t const ces[12] = { 0x2EA3, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_279)
{
    // AAB5 AA93 0041;	
    // (ꪵꪓ) TAI VIET VOWEL E, TAI VIET LETTER HIGH DO	[2EA3 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA93, 0x0041 };
    uint32_t const ces[12] = { 0x2EA3, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_280)
{
    // AAB5 AA93 0062;	
    // (ꪵꪓ) TAI VIET VOWEL E, TAI VIET LETTER HIGH DO	[2EA3 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA93, 0x0062 };
    uint32_t const ces[12] = { 0x2EA3, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_281)
{
    // AAB6 AA93 0021;	
    // (ꪶꪓ) TAI VIET VOWEL O, TAI VIET LETTER HIGH DO	[2EA3 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA93, 0x0021 };
    uint32_t const ces[12] = { 0x2EA3, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_282)
{
    // AAB6 AA93 003F;	
    // (ꪶꪓ) TAI VIET VOWEL O, TAI VIET LETTER HIGH DO	[2EA3 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA93, 0x003F };
    uint32_t const ces[12] = { 0x2EA3, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_283)
{
    // AAB6 AA93 0061;	
    // (ꪶꪓ) TAI VIET VOWEL O, TAI VIET LETTER HIGH DO	[2EA3 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA93, 0x0061 };
    uint32_t const ces[12] = { 0x2EA3, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_284)
{
    // AAB6 AA93 0041;	
    // (ꪶꪓ) TAI VIET VOWEL O, TAI VIET LETTER HIGH DO	[2EA3 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA93, 0x0041 };
    uint32_t const ces[12] = { 0x2EA3, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_285)
{
    // AAB6 AA93 0062;	
    // (ꪶꪓ) TAI VIET VOWEL O, TAI VIET LETTER HIGH DO	[2EA3 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA93, 0x0062 };
    uint32_t const ces[12] = { 0x2EA3, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_286)
{
    // AAB9 AA93 0021;	
    // (ꪹꪓ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH DO	[2EA3 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA93, 0x0021 };
    uint32_t const ces[12] = { 0x2EA3, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_287)
{
    // AAB9 AA93 003F;	
    // (ꪹꪓ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH DO	[2EA3 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA93, 0x003F };
    uint32_t const ces[12] = { 0x2EA3, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_288)
{
    // AAB9 AA93 0061;	
    // (ꪹꪓ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH DO	[2EA3 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA93, 0x0061 };
    uint32_t const ces[12] = { 0x2EA3, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_289)
{
    // AAB9 AA93 0041;	
    // (ꪹꪓ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH DO	[2EA3 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA93, 0x0041 };
    uint32_t const ces[12] = { 0x2EA3, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_290)
{
    // AAB9 AA93 0062;	
    // (ꪹꪓ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH DO	[2EA3 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA93, 0x0062 };
    uint32_t const ces[12] = { 0x2EA3, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_291)
{
    // AABB AA93 0021;	
    // (ꪻꪓ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH DO	[2EA3 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA93, 0x0021 };
    uint32_t const ces[12] = { 0x2EA3, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_292)
{
    // AABB AA93 003F;	
    // (ꪻꪓ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH DO	[2EA3 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA93, 0x003F };
    uint32_t const ces[12] = { 0x2EA3, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_293)
{
    // AABB AA93 0061;	
    // (ꪻꪓ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH DO	[2EA3 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA93, 0x0061 };
    uint32_t const ces[12] = { 0x2EA3, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_294)
{
    // AABB AA93 0041;	
    // (ꪻꪓ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH DO	[2EA3 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA93, 0x0041 };
    uint32_t const ces[12] = { 0x2EA3, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_295)
{
    // AABB AA93 0062;	
    // (ꪻꪓ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH DO	[2EA3 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA93, 0x0062 };
    uint32_t const ces[12] = { 0x2EA3, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_296)
{
    // AABC AA93 0021;	
    // (ꪼꪓ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH DO	[2EA3 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA93, 0x0021 };
    uint32_t const ces[12] = { 0x2EA3, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_297)
{
    // AABC AA93 003F;	
    // (ꪼꪓ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH DO	[2EA3 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA93, 0x003F };
    uint32_t const ces[12] = { 0x2EA3, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_298)
{
    // AABC AA93 0061;	
    // (ꪼꪓ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH DO	[2EA3 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA93, 0x0061 };
    uint32_t const ces[12] = { 0x2EA3, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_299)
{
    // AABC AA93 0041;	
    // (ꪼꪓ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH DO	[2EA3 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA93, 0x0041 };
    uint32_t const ces[12] = { 0x2EA3, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_300)
{
    // AABC AA93 0062;	
    // (ꪼꪓ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH DO	[2EA3 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA93, 0x0062 };
    uint32_t const ces[12] = { 0x2EA3, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_301)
{
    // AA94 0021;	
    // (ꪔ) TAI VIET LETTER LOW TO	[2EA4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA94, 0x0021 };
    uint32_t const ces[9] = { 0x2EA4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_302)
{
    // AA94 003F;	
    // (ꪔ) TAI VIET LETTER LOW TO	[2EA4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA94, 0x003F };
    uint32_t const ces[9] = { 0x2EA4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_303)
{
    // AA94 0061;	
    // (ꪔ) TAI VIET LETTER LOW TO	[2EA4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA94, 0x0061 };
    uint32_t const ces[9] = { 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_304)
{
    // AA94 0041;	
    // (ꪔ) TAI VIET LETTER LOW TO	[2EA4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA94, 0x0041 };
    uint32_t const ces[9] = { 0x2EA4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_305)
{
    // AA94 0062;	
    // (ꪔ) TAI VIET LETTER LOW TO	[2EA4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA94, 0x0062 };
    uint32_t const ces[9] = { 0x2EA4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_306)
{
    // AAB5 AA94 0021;	
    // (ꪵꪔ) TAI VIET VOWEL E, TAI VIET LETTER LOW TO	[2EA4 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA94, 0x0021 };
    uint32_t const ces[12] = { 0x2EA4, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_307)
{
    // AAB5 AA94 003F;	
    // (ꪵꪔ) TAI VIET VOWEL E, TAI VIET LETTER LOW TO	[2EA4 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA94, 0x003F };
    uint32_t const ces[12] = { 0x2EA4, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_308)
{
    // AAB5 AA94 0061;	
    // (ꪵꪔ) TAI VIET VOWEL E, TAI VIET LETTER LOW TO	[2EA4 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA94, 0x0061 };
    uint32_t const ces[12] = { 0x2EA4, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_309)
{
    // AAB5 AA94 0041;	
    // (ꪵꪔ) TAI VIET VOWEL E, TAI VIET LETTER LOW TO	[2EA4 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA94, 0x0041 };
    uint32_t const ces[12] = { 0x2EA4, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_310)
{
    // AAB5 AA94 0062;	
    // (ꪵꪔ) TAI VIET VOWEL E, TAI VIET LETTER LOW TO	[2EA4 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA94, 0x0062 };
    uint32_t const ces[12] = { 0x2EA4, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_311)
{
    // AAB6 AA94 0021;	
    // (ꪶꪔ) TAI VIET VOWEL O, TAI VIET LETTER LOW TO	[2EA4 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA94, 0x0021 };
    uint32_t const ces[12] = { 0x2EA4, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_312)
{
    // AAB6 AA94 003F;	
    // (ꪶꪔ) TAI VIET VOWEL O, TAI VIET LETTER LOW TO	[2EA4 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA94, 0x003F };
    uint32_t const ces[12] = { 0x2EA4, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_313)
{
    // AAB6 AA94 0061;	
    // (ꪶꪔ) TAI VIET VOWEL O, TAI VIET LETTER LOW TO	[2EA4 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA94, 0x0061 };
    uint32_t const ces[12] = { 0x2EA4, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_314)
{
    // AAB6 AA94 0041;	
    // (ꪶꪔ) TAI VIET VOWEL O, TAI VIET LETTER LOW TO	[2EA4 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA94, 0x0041 };
    uint32_t const ces[12] = { 0x2EA4, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_315)
{
    // AAB6 AA94 0062;	
    // (ꪶꪔ) TAI VIET VOWEL O, TAI VIET LETTER LOW TO	[2EA4 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA94, 0x0062 };
    uint32_t const ces[12] = { 0x2EA4, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_316)
{
    // AAB9 AA94 0021;	
    // (ꪹꪔ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW TO	[2EA4 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA94, 0x0021 };
    uint32_t const ces[12] = { 0x2EA4, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_317)
{
    // AAB9 AA94 003F;	
    // (ꪹꪔ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW TO	[2EA4 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA94, 0x003F };
    uint32_t const ces[12] = { 0x2EA4, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_318)
{
    // AAB9 AA94 0061;	
    // (ꪹꪔ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW TO	[2EA4 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA94, 0x0061 };
    uint32_t const ces[12] = { 0x2EA4, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_319)
{
    // AAB9 AA94 0041;	
    // (ꪹꪔ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW TO	[2EA4 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA94, 0x0041 };
    uint32_t const ces[12] = { 0x2EA4, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_320)
{
    // AAB9 AA94 0062;	
    // (ꪹꪔ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW TO	[2EA4 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA94, 0x0062 };
    uint32_t const ces[12] = { 0x2EA4, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_321)
{
    // AABB AA94 0021;	
    // (ꪻꪔ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW TO	[2EA4 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA94, 0x0021 };
    uint32_t const ces[12] = { 0x2EA4, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_322)
{
    // AABB AA94 003F;	
    // (ꪻꪔ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW TO	[2EA4 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA94, 0x003F };
    uint32_t const ces[12] = { 0x2EA4, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_323)
{
    // AABB AA94 0061;	
    // (ꪻꪔ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW TO	[2EA4 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA94, 0x0061 };
    uint32_t const ces[12] = { 0x2EA4, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_324)
{
    // AABB AA94 0041;	
    // (ꪻꪔ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW TO	[2EA4 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA94, 0x0041 };
    uint32_t const ces[12] = { 0x2EA4, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_325)
{
    // AABB AA94 0062;	
    // (ꪻꪔ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW TO	[2EA4 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA94, 0x0062 };
    uint32_t const ces[12] = { 0x2EA4, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_326)
{
    // AABC AA94 0021;	
    // (ꪼꪔ) TAI VIET VOWEL AY, TAI VIET LETTER LOW TO	[2EA4 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA94, 0x0021 };
    uint32_t const ces[12] = { 0x2EA4, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_327)
{
    // AABC AA94 003F;	
    // (ꪼꪔ) TAI VIET VOWEL AY, TAI VIET LETTER LOW TO	[2EA4 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA94, 0x003F };
    uint32_t const ces[12] = { 0x2EA4, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_328)
{
    // AABC AA94 0061;	
    // (ꪼꪔ) TAI VIET VOWEL AY, TAI VIET LETTER LOW TO	[2EA4 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA94, 0x0061 };
    uint32_t const ces[12] = { 0x2EA4, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_329)
{
    // AABC AA94 0041;	
    // (ꪼꪔ) TAI VIET VOWEL AY, TAI VIET LETTER LOW TO	[2EA4 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA94, 0x0041 };
    uint32_t const ces[12] = { 0x2EA4, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_330)
{
    // AABC AA94 0062;	
    // (ꪼꪔ) TAI VIET VOWEL AY, TAI VIET LETTER LOW TO	[2EA4 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA94, 0x0062 };
    uint32_t const ces[12] = { 0x2EA4, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_331)
{
    // AA95 0021;	
    // (ꪕ) TAI VIET LETTER HIGH TO	[2EA5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA95, 0x0021 };
    uint32_t const ces[9] = { 0x2EA5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_332)
{
    // AA95 003F;	
    // (ꪕ) TAI VIET LETTER HIGH TO	[2EA5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA95, 0x003F };
    uint32_t const ces[9] = { 0x2EA5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_333)
{
    // AA95 0061;	
    // (ꪕ) TAI VIET LETTER HIGH TO	[2EA5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA95, 0x0061 };
    uint32_t const ces[9] = { 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_334)
{
    // AA95 0041;	
    // (ꪕ) TAI VIET LETTER HIGH TO	[2EA5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA95, 0x0041 };
    uint32_t const ces[9] = { 0x2EA5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_335)
{
    // AA95 0062;	
    // (ꪕ) TAI VIET LETTER HIGH TO	[2EA5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA95, 0x0062 };
    uint32_t const ces[9] = { 0x2EA5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_336)
{
    // AAB5 AA95 0021;	
    // (ꪵꪕ) TAI VIET VOWEL E, TAI VIET LETTER HIGH TO	[2EA5 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA95, 0x0021 };
    uint32_t const ces[12] = { 0x2EA5, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_337)
{
    // AAB5 AA95 003F;	
    // (ꪵꪕ) TAI VIET VOWEL E, TAI VIET LETTER HIGH TO	[2EA5 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA95, 0x003F };
    uint32_t const ces[12] = { 0x2EA5, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_338)
{
    // AAB5 AA95 0061;	
    // (ꪵꪕ) TAI VIET VOWEL E, TAI VIET LETTER HIGH TO	[2EA5 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA95, 0x0061 };
    uint32_t const ces[12] = { 0x2EA5, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_339)
{
    // AAB5 AA95 0041;	
    // (ꪵꪕ) TAI VIET VOWEL E, TAI VIET LETTER HIGH TO	[2EA5 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA95, 0x0041 };
    uint32_t const ces[12] = { 0x2EA5, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_340)
{
    // AAB5 AA95 0062;	
    // (ꪵꪕ) TAI VIET VOWEL E, TAI VIET LETTER HIGH TO	[2EA5 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA95, 0x0062 };
    uint32_t const ces[12] = { 0x2EA5, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_341)
{
    // AAB6 AA95 0021;	
    // (ꪶꪕ) TAI VIET VOWEL O, TAI VIET LETTER HIGH TO	[2EA5 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA95, 0x0021 };
    uint32_t const ces[12] = { 0x2EA5, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_342)
{
    // AAB6 AA95 003F;	
    // (ꪶꪕ) TAI VIET VOWEL O, TAI VIET LETTER HIGH TO	[2EA5 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA95, 0x003F };
    uint32_t const ces[12] = { 0x2EA5, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_343)
{
    // AAB6 AA95 0061;	
    // (ꪶꪕ) TAI VIET VOWEL O, TAI VIET LETTER HIGH TO	[2EA5 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA95, 0x0061 };
    uint32_t const ces[12] = { 0x2EA5, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_344)
{
    // AAB6 AA95 0041;	
    // (ꪶꪕ) TAI VIET VOWEL O, TAI VIET LETTER HIGH TO	[2EA5 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA95, 0x0041 };
    uint32_t const ces[12] = { 0x2EA5, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_345)
{
    // AAB6 AA95 0062;	
    // (ꪶꪕ) TAI VIET VOWEL O, TAI VIET LETTER HIGH TO	[2EA5 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA95, 0x0062 };
    uint32_t const ces[12] = { 0x2EA5, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_346)
{
    // AAB9 AA95 0021;	
    // (ꪹꪕ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH TO	[2EA5 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA95, 0x0021 };
    uint32_t const ces[12] = { 0x2EA5, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_347)
{
    // AAB9 AA95 003F;	
    // (ꪹꪕ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH TO	[2EA5 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA95, 0x003F };
    uint32_t const ces[12] = { 0x2EA5, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_348)
{
    // AAB9 AA95 0061;	
    // (ꪹꪕ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH TO	[2EA5 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA95, 0x0061 };
    uint32_t const ces[12] = { 0x2EA5, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_349)
{
    // AAB9 AA95 0041;	
    // (ꪹꪕ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH TO	[2EA5 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA95, 0x0041 };
    uint32_t const ces[12] = { 0x2EA5, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_350)
{
    // AAB9 AA95 0062;	
    // (ꪹꪕ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH TO	[2EA5 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA95, 0x0062 };
    uint32_t const ces[12] = { 0x2EA5, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_351)
{
    // AABB AA95 0021;	
    // (ꪻꪕ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH TO	[2EA5 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA95, 0x0021 };
    uint32_t const ces[12] = { 0x2EA5, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_352)
{
    // AABB AA95 003F;	
    // (ꪻꪕ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH TO	[2EA5 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA95, 0x003F };
    uint32_t const ces[12] = { 0x2EA5, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_353)
{
    // AABB AA95 0061;	
    // (ꪻꪕ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH TO	[2EA5 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA95, 0x0061 };
    uint32_t const ces[12] = { 0x2EA5, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_354)
{
    // AABB AA95 0041;	
    // (ꪻꪕ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH TO	[2EA5 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA95, 0x0041 };
    uint32_t const ces[12] = { 0x2EA5, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_355)
{
    // AABB AA95 0062;	
    // (ꪻꪕ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH TO	[2EA5 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA95, 0x0062 };
    uint32_t const ces[12] = { 0x2EA5, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_356)
{
    // AABC AA95 0021;	
    // (ꪼꪕ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH TO	[2EA5 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA95, 0x0021 };
    uint32_t const ces[12] = { 0x2EA5, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_357)
{
    // AABC AA95 003F;	
    // (ꪼꪕ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH TO	[2EA5 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA95, 0x003F };
    uint32_t const ces[12] = { 0x2EA5, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_358)
{
    // AABC AA95 0061;	
    // (ꪼꪕ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH TO	[2EA5 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA95, 0x0061 };
    uint32_t const ces[12] = { 0x2EA5, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_359)
{
    // AABC AA95 0041;	
    // (ꪼꪕ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH TO	[2EA5 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA95, 0x0041 };
    uint32_t const ces[12] = { 0x2EA5, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_360)
{
    // AABC AA95 0062;	
    // (ꪼꪕ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH TO	[2EA5 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA95, 0x0062 };
    uint32_t const ces[12] = { 0x2EA5, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_361)
{
    // AA96 0021;	
    // (ꪖ) TAI VIET LETTER LOW THO	[2EA6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA96, 0x0021 };
    uint32_t const ces[9] = { 0x2EA6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_362)
{
    // AA96 003F;	
    // (ꪖ) TAI VIET LETTER LOW THO	[2EA6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA96, 0x003F };
    uint32_t const ces[9] = { 0x2EA6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_363)
{
    // AA96 0061;	
    // (ꪖ) TAI VIET LETTER LOW THO	[2EA6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA96, 0x0061 };
    uint32_t const ces[9] = { 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_364)
{
    // AA96 0041;	
    // (ꪖ) TAI VIET LETTER LOW THO	[2EA6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA96, 0x0041 };
    uint32_t const ces[9] = { 0x2EA6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_365)
{
    // AA96 0062;	
    // (ꪖ) TAI VIET LETTER LOW THO	[2EA6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA96, 0x0062 };
    uint32_t const ces[9] = { 0x2EA6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_366)
{
    // AAB5 AA96 0021;	
    // (ꪵꪖ) TAI VIET VOWEL E, TAI VIET LETTER LOW THO	[2EA6 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA96, 0x0021 };
    uint32_t const ces[12] = { 0x2EA6, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_367)
{
    // AAB5 AA96 003F;	
    // (ꪵꪖ) TAI VIET VOWEL E, TAI VIET LETTER LOW THO	[2EA6 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA96, 0x003F };
    uint32_t const ces[12] = { 0x2EA6, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_368)
{
    // AAB5 AA96 0061;	
    // (ꪵꪖ) TAI VIET VOWEL E, TAI VIET LETTER LOW THO	[2EA6 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA96, 0x0061 };
    uint32_t const ces[12] = { 0x2EA6, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_369)
{
    // AAB5 AA96 0041;	
    // (ꪵꪖ) TAI VIET VOWEL E, TAI VIET LETTER LOW THO	[2EA6 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA96, 0x0041 };
    uint32_t const ces[12] = { 0x2EA6, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_370)
{
    // AAB5 AA96 0062;	
    // (ꪵꪖ) TAI VIET VOWEL E, TAI VIET LETTER LOW THO	[2EA6 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA96, 0x0062 };
    uint32_t const ces[12] = { 0x2EA6, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_371)
{
    // AAB6 AA96 0021;	
    // (ꪶꪖ) TAI VIET VOWEL O, TAI VIET LETTER LOW THO	[2EA6 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA96, 0x0021 };
    uint32_t const ces[12] = { 0x2EA6, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_372)
{
    // AAB6 AA96 003F;	
    // (ꪶꪖ) TAI VIET VOWEL O, TAI VIET LETTER LOW THO	[2EA6 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA96, 0x003F };
    uint32_t const ces[12] = { 0x2EA6, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_373)
{
    // AAB6 AA96 0061;	
    // (ꪶꪖ) TAI VIET VOWEL O, TAI VIET LETTER LOW THO	[2EA6 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA96, 0x0061 };
    uint32_t const ces[12] = { 0x2EA6, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_374)
{
    // AAB6 AA96 0041;	
    // (ꪶꪖ) TAI VIET VOWEL O, TAI VIET LETTER LOW THO	[2EA6 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA96, 0x0041 };
    uint32_t const ces[12] = { 0x2EA6, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_375)
{
    // AAB6 AA96 0062;	
    // (ꪶꪖ) TAI VIET VOWEL O, TAI VIET LETTER LOW THO	[2EA6 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA96, 0x0062 };
    uint32_t const ces[12] = { 0x2EA6, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_376)
{
    // AAB9 AA96 0021;	
    // (ꪹꪖ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW THO	[2EA6 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA96, 0x0021 };
    uint32_t const ces[12] = { 0x2EA6, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_377)
{
    // AAB9 AA96 003F;	
    // (ꪹꪖ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW THO	[2EA6 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA96, 0x003F };
    uint32_t const ces[12] = { 0x2EA6, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_378)
{
    // AAB9 AA96 0061;	
    // (ꪹꪖ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW THO	[2EA6 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA96, 0x0061 };
    uint32_t const ces[12] = { 0x2EA6, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_379)
{
    // AAB9 AA96 0041;	
    // (ꪹꪖ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW THO	[2EA6 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA96, 0x0041 };
    uint32_t const ces[12] = { 0x2EA6, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_380)
{
    // AAB9 AA96 0062;	
    // (ꪹꪖ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW THO	[2EA6 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA96, 0x0062 };
    uint32_t const ces[12] = { 0x2EA6, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_381)
{
    // AABB AA96 0021;	
    // (ꪻꪖ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW THO	[2EA6 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA96, 0x0021 };
    uint32_t const ces[12] = { 0x2EA6, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_382)
{
    // AABB AA96 003F;	
    // (ꪻꪖ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW THO	[2EA6 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA96, 0x003F };
    uint32_t const ces[12] = { 0x2EA6, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_383)
{
    // AABB AA96 0061;	
    // (ꪻꪖ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW THO	[2EA6 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA96, 0x0061 };
    uint32_t const ces[12] = { 0x2EA6, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_384)
{
    // AABB AA96 0041;	
    // (ꪻꪖ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW THO	[2EA6 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA96, 0x0041 };
    uint32_t const ces[12] = { 0x2EA6, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_385)
{
    // AABB AA96 0062;	
    // (ꪻꪖ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW THO	[2EA6 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA96, 0x0062 };
    uint32_t const ces[12] = { 0x2EA6, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_386)
{
    // AABC AA96 0021;	
    // (ꪼꪖ) TAI VIET VOWEL AY, TAI VIET LETTER LOW THO	[2EA6 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA96, 0x0021 };
    uint32_t const ces[12] = { 0x2EA6, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_387)
{
    // AABC AA96 003F;	
    // (ꪼꪖ) TAI VIET VOWEL AY, TAI VIET LETTER LOW THO	[2EA6 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA96, 0x003F };
    uint32_t const ces[12] = { 0x2EA6, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_388)
{
    // AABC AA96 0061;	
    // (ꪼꪖ) TAI VIET VOWEL AY, TAI VIET LETTER LOW THO	[2EA6 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA96, 0x0061 };
    uint32_t const ces[12] = { 0x2EA6, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_389)
{
    // AABC AA96 0041;	
    // (ꪼꪖ) TAI VIET VOWEL AY, TAI VIET LETTER LOW THO	[2EA6 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA96, 0x0041 };
    uint32_t const ces[12] = { 0x2EA6, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_390)
{
    // AABC AA96 0062;	
    // (ꪼꪖ) TAI VIET VOWEL AY, TAI VIET LETTER LOW THO	[2EA6 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA96, 0x0062 };
    uint32_t const ces[12] = { 0x2EA6, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_391)
{
    // AA97 0021;	
    // (ꪗ) TAI VIET LETTER HIGH THO	[2EA7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA97, 0x0021 };
    uint32_t const ces[9] = { 0x2EA7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_392)
{
    // AA97 003F;	
    // (ꪗ) TAI VIET LETTER HIGH THO	[2EA7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA97, 0x003F };
    uint32_t const ces[9] = { 0x2EA7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_393)
{
    // AA97 0061;	
    // (ꪗ) TAI VIET LETTER HIGH THO	[2EA7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA97, 0x0061 };
    uint32_t const ces[9] = { 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_394)
{
    // AA97 0041;	
    // (ꪗ) TAI VIET LETTER HIGH THO	[2EA7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA97, 0x0041 };
    uint32_t const ces[9] = { 0x2EA7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_395)
{
    // AA97 0062;	
    // (ꪗ) TAI VIET LETTER HIGH THO	[2EA7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA97, 0x0062 };
    uint32_t const ces[9] = { 0x2EA7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_396)
{
    // AAB5 AA97 0021;	
    // (ꪵꪗ) TAI VIET VOWEL E, TAI VIET LETTER HIGH THO	[2EA7 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA97, 0x0021 };
    uint32_t const ces[12] = { 0x2EA7, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_397)
{
    // AAB5 AA97 003F;	
    // (ꪵꪗ) TAI VIET VOWEL E, TAI VIET LETTER HIGH THO	[2EA7 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA97, 0x003F };
    uint32_t const ces[12] = { 0x2EA7, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_398)
{
    // AAB5 AA97 0061;	
    // (ꪵꪗ) TAI VIET VOWEL E, TAI VIET LETTER HIGH THO	[2EA7 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA97, 0x0061 };
    uint32_t const ces[12] = { 0x2EA7, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_399)
{
    // AAB5 AA97 0041;	
    // (ꪵꪗ) TAI VIET VOWEL E, TAI VIET LETTER HIGH THO	[2EA7 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA97, 0x0041 };
    uint32_t const ces[12] = { 0x2EA7, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_400)
{
    // AAB5 AA97 0062;	
    // (ꪵꪗ) TAI VIET VOWEL E, TAI VIET LETTER HIGH THO	[2EA7 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA97, 0x0062 };
    uint32_t const ces[12] = { 0x2EA7, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_401)
{
    // AAB6 AA97 0021;	
    // (ꪶꪗ) TAI VIET VOWEL O, TAI VIET LETTER HIGH THO	[2EA7 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA97, 0x0021 };
    uint32_t const ces[12] = { 0x2EA7, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_402)
{
    // AAB6 AA97 003F;	
    // (ꪶꪗ) TAI VIET VOWEL O, TAI VIET LETTER HIGH THO	[2EA7 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA97, 0x003F };
    uint32_t const ces[12] = { 0x2EA7, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_403)
{
    // AAB6 AA97 0061;	
    // (ꪶꪗ) TAI VIET VOWEL O, TAI VIET LETTER HIGH THO	[2EA7 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA97, 0x0061 };
    uint32_t const ces[12] = { 0x2EA7, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_404)
{
    // AAB6 AA97 0041;	
    // (ꪶꪗ) TAI VIET VOWEL O, TAI VIET LETTER HIGH THO	[2EA7 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA97, 0x0041 };
    uint32_t const ces[12] = { 0x2EA7, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_405)
{
    // AAB6 AA97 0062;	
    // (ꪶꪗ) TAI VIET VOWEL O, TAI VIET LETTER HIGH THO	[2EA7 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA97, 0x0062 };
    uint32_t const ces[12] = { 0x2EA7, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_406)
{
    // AAB9 AA97 0021;	
    // (ꪹꪗ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH THO	[2EA7 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA97, 0x0021 };
    uint32_t const ces[12] = { 0x2EA7, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_407)
{
    // AAB9 AA97 003F;	
    // (ꪹꪗ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH THO	[2EA7 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA97, 0x003F };
    uint32_t const ces[12] = { 0x2EA7, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_408)
{
    // AAB9 AA97 0061;	
    // (ꪹꪗ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH THO	[2EA7 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA97, 0x0061 };
    uint32_t const ces[12] = { 0x2EA7, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_409)
{
    // AAB9 AA97 0041;	
    // (ꪹꪗ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH THO	[2EA7 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA97, 0x0041 };
    uint32_t const ces[12] = { 0x2EA7, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_410)
{
    // AAB9 AA97 0062;	
    // (ꪹꪗ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH THO	[2EA7 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA97, 0x0062 };
    uint32_t const ces[12] = { 0x2EA7, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_411)
{
    // AABB AA97 0021;	
    // (ꪻꪗ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH THO	[2EA7 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA97, 0x0021 };
    uint32_t const ces[12] = { 0x2EA7, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_412)
{
    // AABB AA97 003F;	
    // (ꪻꪗ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH THO	[2EA7 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA97, 0x003F };
    uint32_t const ces[12] = { 0x2EA7, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_413)
{
    // AABB AA97 0061;	
    // (ꪻꪗ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH THO	[2EA7 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA97, 0x0061 };
    uint32_t const ces[12] = { 0x2EA7, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_414)
{
    // AABB AA97 0041;	
    // (ꪻꪗ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH THO	[2EA7 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA97, 0x0041 };
    uint32_t const ces[12] = { 0x2EA7, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_415)
{
    // AABB AA97 0062;	
    // (ꪻꪗ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH THO	[2EA7 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA97, 0x0062 };
    uint32_t const ces[12] = { 0x2EA7, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_416)
{
    // AABC AA97 0021;	
    // (ꪼꪗ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH THO	[2EA7 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA97, 0x0021 };
    uint32_t const ces[12] = { 0x2EA7, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_417)
{
    // AABC AA97 003F;	
    // (ꪼꪗ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH THO	[2EA7 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA97, 0x003F };
    uint32_t const ces[12] = { 0x2EA7, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_418)
{
    // AABC AA97 0061;	
    // (ꪼꪗ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH THO	[2EA7 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA97, 0x0061 };
    uint32_t const ces[12] = { 0x2EA7, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_419)
{
    // AABC AA97 0041;	
    // (ꪼꪗ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH THO	[2EA7 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA97, 0x0041 };
    uint32_t const ces[12] = { 0x2EA7, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_420)
{
    // AABC AA97 0062;	
    // (ꪼꪗ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH THO	[2EA7 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA97, 0x0062 };
    uint32_t const ces[12] = { 0x2EA7, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_421)
{
    // AA98 0021;	
    // (ꪘ) TAI VIET LETTER LOW NO	[2EA8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA98, 0x0021 };
    uint32_t const ces[9] = { 0x2EA8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_422)
{
    // AA98 003F;	
    // (ꪘ) TAI VIET LETTER LOW NO	[2EA8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA98, 0x003F };
    uint32_t const ces[9] = { 0x2EA8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_423)
{
    // AA98 0061;	
    // (ꪘ) TAI VIET LETTER LOW NO	[2EA8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA98, 0x0061 };
    uint32_t const ces[9] = { 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_424)
{
    // AA98 0041;	
    // (ꪘ) TAI VIET LETTER LOW NO	[2EA8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA98, 0x0041 };
    uint32_t const ces[9] = { 0x2EA8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_425)
{
    // AA98 0062;	
    // (ꪘ) TAI VIET LETTER LOW NO	[2EA8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA98, 0x0062 };
    uint32_t const ces[9] = { 0x2EA8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_426)
{
    // AAB5 AA98 0021;	
    // (ꪵꪘ) TAI VIET VOWEL E, TAI VIET LETTER LOW NO	[2EA8 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA98, 0x0021 };
    uint32_t const ces[12] = { 0x2EA8, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_427)
{
    // AAB5 AA98 003F;	
    // (ꪵꪘ) TAI VIET VOWEL E, TAI VIET LETTER LOW NO	[2EA8 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA98, 0x003F };
    uint32_t const ces[12] = { 0x2EA8, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_428)
{
    // AAB5 AA98 0061;	
    // (ꪵꪘ) TAI VIET VOWEL E, TAI VIET LETTER LOW NO	[2EA8 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA98, 0x0061 };
    uint32_t const ces[12] = { 0x2EA8, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_429)
{
    // AAB5 AA98 0041;	
    // (ꪵꪘ) TAI VIET VOWEL E, TAI VIET LETTER LOW NO	[2EA8 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA98, 0x0041 };
    uint32_t const ces[12] = { 0x2EA8, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_430)
{
    // AAB5 AA98 0062;	
    // (ꪵꪘ) TAI VIET VOWEL E, TAI VIET LETTER LOW NO	[2EA8 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA98, 0x0062 };
    uint32_t const ces[12] = { 0x2EA8, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_431)
{
    // AAB6 AA98 0021;	
    // (ꪶꪘ) TAI VIET VOWEL O, TAI VIET LETTER LOW NO	[2EA8 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA98, 0x0021 };
    uint32_t const ces[12] = { 0x2EA8, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_432)
{
    // AAB6 AA98 003F;	
    // (ꪶꪘ) TAI VIET VOWEL O, TAI VIET LETTER LOW NO	[2EA8 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA98, 0x003F };
    uint32_t const ces[12] = { 0x2EA8, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_433)
{
    // AAB6 AA98 0061;	
    // (ꪶꪘ) TAI VIET VOWEL O, TAI VIET LETTER LOW NO	[2EA8 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA98, 0x0061 };
    uint32_t const ces[12] = { 0x2EA8, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_434)
{
    // AAB6 AA98 0041;	
    // (ꪶꪘ) TAI VIET VOWEL O, TAI VIET LETTER LOW NO	[2EA8 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA98, 0x0041 };
    uint32_t const ces[12] = { 0x2EA8, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_435)
{
    // AAB6 AA98 0062;	
    // (ꪶꪘ) TAI VIET VOWEL O, TAI VIET LETTER LOW NO	[2EA8 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA98, 0x0062 };
    uint32_t const ces[12] = { 0x2EA8, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_436)
{
    // AAB9 AA98 0021;	
    // (ꪹꪘ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW NO	[2EA8 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA98, 0x0021 };
    uint32_t const ces[12] = { 0x2EA8, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_437)
{
    // AAB9 AA98 003F;	
    // (ꪹꪘ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW NO	[2EA8 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA98, 0x003F };
    uint32_t const ces[12] = { 0x2EA8, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_438)
{
    // AAB9 AA98 0061;	
    // (ꪹꪘ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW NO	[2EA8 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA98, 0x0061 };
    uint32_t const ces[12] = { 0x2EA8, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_439)
{
    // AAB9 AA98 0041;	
    // (ꪹꪘ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW NO	[2EA8 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA98, 0x0041 };
    uint32_t const ces[12] = { 0x2EA8, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_440)
{
    // AAB9 AA98 0062;	
    // (ꪹꪘ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW NO	[2EA8 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA98, 0x0062 };
    uint32_t const ces[12] = { 0x2EA8, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_441)
{
    // AABB AA98 0021;	
    // (ꪻꪘ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW NO	[2EA8 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA98, 0x0021 };
    uint32_t const ces[12] = { 0x2EA8, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_442)
{
    // AABB AA98 003F;	
    // (ꪻꪘ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW NO	[2EA8 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA98, 0x003F };
    uint32_t const ces[12] = { 0x2EA8, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_443)
{
    // AABB AA98 0061;	
    // (ꪻꪘ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW NO	[2EA8 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA98, 0x0061 };
    uint32_t const ces[12] = { 0x2EA8, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_444)
{
    // AABB AA98 0041;	
    // (ꪻꪘ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW NO	[2EA8 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA98, 0x0041 };
    uint32_t const ces[12] = { 0x2EA8, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_445)
{
    // AABB AA98 0062;	
    // (ꪻꪘ) TAI VIET VOWEL AUE, TAI VIET LETTER LOW NO	[2EA8 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA98, 0x0062 };
    uint32_t const ces[12] = { 0x2EA8, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_446)
{
    // AABC AA98 0021;	
    // (ꪼꪘ) TAI VIET VOWEL AY, TAI VIET LETTER LOW NO	[2EA8 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA98, 0x0021 };
    uint32_t const ces[12] = { 0x2EA8, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_447)
{
    // AABC AA98 003F;	
    // (ꪼꪘ) TAI VIET VOWEL AY, TAI VIET LETTER LOW NO	[2EA8 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA98, 0x003F };
    uint32_t const ces[12] = { 0x2EA8, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_448)
{
    // AABC AA98 0061;	
    // (ꪼꪘ) TAI VIET VOWEL AY, TAI VIET LETTER LOW NO	[2EA8 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA98, 0x0061 };
    uint32_t const ces[12] = { 0x2EA8, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_449)
{
    // AABC AA98 0041;	
    // (ꪼꪘ) TAI VIET VOWEL AY, TAI VIET LETTER LOW NO	[2EA8 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA98, 0x0041 };
    uint32_t const ces[12] = { 0x2EA8, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_450)
{
    // AABC AA98 0062;	
    // (ꪼꪘ) TAI VIET VOWEL AY, TAI VIET LETTER LOW NO	[2EA8 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA98, 0x0062 };
    uint32_t const ces[12] = { 0x2EA8, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_451)
{
    // AA99 0021;	
    // (ꪙ) TAI VIET LETTER HIGH NO	[2EA9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA99, 0x0021 };
    uint32_t const ces[9] = { 0x2EA9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_452)
{
    // AA99 003F;	
    // (ꪙ) TAI VIET LETTER HIGH NO	[2EA9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA99, 0x003F };
    uint32_t const ces[9] = { 0x2EA9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_453)
{
    // AA99 0061;	
    // (ꪙ) TAI VIET LETTER HIGH NO	[2EA9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA99, 0x0061 };
    uint32_t const ces[9] = { 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_454)
{
    // AA99 0041;	
    // (ꪙ) TAI VIET LETTER HIGH NO	[2EA9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA99, 0x0041 };
    uint32_t const ces[9] = { 0x2EA9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_455)
{
    // AA99 0062;	
    // (ꪙ) TAI VIET LETTER HIGH NO	[2EA9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA99, 0x0062 };
    uint32_t const ces[9] = { 0x2EA9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_456)
{
    // AAB5 AA99 0021;	
    // (ꪵꪙ) TAI VIET VOWEL E, TAI VIET LETTER HIGH NO	[2EA9 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA99, 0x0021 };
    uint32_t const ces[12] = { 0x2EA9, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_457)
{
    // AAB5 AA99 003F;	
    // (ꪵꪙ) TAI VIET VOWEL E, TAI VIET LETTER HIGH NO	[2EA9 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA99, 0x003F };
    uint32_t const ces[12] = { 0x2EA9, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_458)
{
    // AAB5 AA99 0061;	
    // (ꪵꪙ) TAI VIET VOWEL E, TAI VIET LETTER HIGH NO	[2EA9 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA99, 0x0061 };
    uint32_t const ces[12] = { 0x2EA9, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_459)
{
    // AAB5 AA99 0041;	
    // (ꪵꪙ) TAI VIET VOWEL E, TAI VIET LETTER HIGH NO	[2EA9 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA99, 0x0041 };
    uint32_t const ces[12] = { 0x2EA9, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_460)
{
    // AAB5 AA99 0062;	
    // (ꪵꪙ) TAI VIET VOWEL E, TAI VIET LETTER HIGH NO	[2EA9 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA99, 0x0062 };
    uint32_t const ces[12] = { 0x2EA9, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_461)
{
    // AAB6 AA99 0021;	
    // (ꪶꪙ) TAI VIET VOWEL O, TAI VIET LETTER HIGH NO	[2EA9 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA99, 0x0021 };
    uint32_t const ces[12] = { 0x2EA9, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_462)
{
    // AAB6 AA99 003F;	
    // (ꪶꪙ) TAI VIET VOWEL O, TAI VIET LETTER HIGH NO	[2EA9 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA99, 0x003F };
    uint32_t const ces[12] = { 0x2EA9, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_463)
{
    // AAB6 AA99 0061;	
    // (ꪶꪙ) TAI VIET VOWEL O, TAI VIET LETTER HIGH NO	[2EA9 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA99, 0x0061 };
    uint32_t const ces[12] = { 0x2EA9, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_464)
{
    // AAB6 AA99 0041;	
    // (ꪶꪙ) TAI VIET VOWEL O, TAI VIET LETTER HIGH NO	[2EA9 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA99, 0x0041 };
    uint32_t const ces[12] = { 0x2EA9, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_465)
{
    // AAB6 AA99 0062;	
    // (ꪶꪙ) TAI VIET VOWEL O, TAI VIET LETTER HIGH NO	[2EA9 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA99, 0x0062 };
    uint32_t const ces[12] = { 0x2EA9, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_466)
{
    // AAB9 AA99 0021;	
    // (ꪹꪙ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH NO	[2EA9 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA99, 0x0021 };
    uint32_t const ces[12] = { 0x2EA9, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_467)
{
    // AAB9 AA99 003F;	
    // (ꪹꪙ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH NO	[2EA9 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA99, 0x003F };
    uint32_t const ces[12] = { 0x2EA9, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_468)
{
    // AAB9 AA99 0061;	
    // (ꪹꪙ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH NO	[2EA9 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA99, 0x0061 };
    uint32_t const ces[12] = { 0x2EA9, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_469)
{
    // AAB9 AA99 0041;	
    // (ꪹꪙ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH NO	[2EA9 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA99, 0x0041 };
    uint32_t const ces[12] = { 0x2EA9, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_470)
{
    // AAB9 AA99 0062;	
    // (ꪹꪙ) TAI VIET VOWEL UEA, TAI VIET LETTER HIGH NO	[2EA9 2EC9 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA99, 0x0062 };
    uint32_t const ces[12] = { 0x2EA9, 0x2EC9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_471)
{
    // AABB AA99 0021;	
    // (ꪻꪙ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH NO	[2EA9 2ECB 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA99, 0x0021 };
    uint32_t const ces[12] = { 0x2EA9, 0x2ECB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_472)
{
    // AABB AA99 003F;	
    // (ꪻꪙ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH NO	[2EA9 2ECB 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA99, 0x003F };
    uint32_t const ces[12] = { 0x2EA9, 0x2ECB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_473)
{
    // AABB AA99 0061;	
    // (ꪻꪙ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH NO	[2EA9 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA99, 0x0061 };
    uint32_t const ces[12] = { 0x2EA9, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_474)
{
    // AABB AA99 0041;	
    // (ꪻꪙ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH NO	[2EA9 2ECB 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABB, 0xAA99, 0x0041 };
    uint32_t const ces[12] = { 0x2EA9, 0x2ECB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_475)
{
    // AABB AA99 0062;	
    // (ꪻꪙ) TAI VIET VOWEL AUE, TAI VIET LETTER HIGH NO	[2EA9 2ECB 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABB, 0xAA99, 0x0062 };
    uint32_t const ces[12] = { 0x2EA9, 0x2ECB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_476)
{
    // AABC AA99 0021;	
    // (ꪼꪙ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH NO	[2EA9 2ECC 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA99, 0x0021 };
    uint32_t const ces[12] = { 0x2EA9, 0x2ECC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_477)
{
    // AABC AA99 003F;	
    // (ꪼꪙ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH NO	[2EA9 2ECC 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA99, 0x003F };
    uint32_t const ces[12] = { 0x2EA9, 0x2ECC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_478)
{
    // AABC AA99 0061;	
    // (ꪼꪙ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH NO	[2EA9 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA99, 0x0061 };
    uint32_t const ces[12] = { 0x2EA9, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_479)
{
    // AABC AA99 0041;	
    // (ꪼꪙ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH NO	[2EA9 2ECC 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAABC, 0xAA99, 0x0041 };
    uint32_t const ces[12] = { 0x2EA9, 0x2ECC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_480)
{
    // AABC AA99 0062;	
    // (ꪼꪙ) TAI VIET VOWEL AY, TAI VIET LETTER HIGH NO	[2EA9 2ECC 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAABC, 0xAA99, 0x0062 };
    uint32_t const ces[12] = { 0x2EA9, 0x2ECC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_481)
{
    // AA9A 0021;	
    // (ꪚ) TAI VIET LETTER LOW BO	[2EAA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9A, 0x0021 };
    uint32_t const ces[9] = { 0x2EAA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_482)
{
    // AA9A 003F;	
    // (ꪚ) TAI VIET LETTER LOW BO	[2EAA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9A, 0x003F };
    uint32_t const ces[9] = { 0x2EAA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_483)
{
    // AA9A 0061;	
    // (ꪚ) TAI VIET LETTER LOW BO	[2EAA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9A, 0x0061 };
    uint32_t const ces[9] = { 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_484)
{
    // AA9A 0041;	
    // (ꪚ) TAI VIET LETTER LOW BO	[2EAA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAA9A, 0x0041 };
    uint32_t const ces[9] = { 0x2EAA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_485)
{
    // AA9A 0062;	
    // (ꪚ) TAI VIET LETTER LOW BO	[2EAA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAA9A, 0x0062 };
    uint32_t const ces[9] = { 0x2EAA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_486)
{
    // AAB5 AA9A 0021;	
    // (ꪵꪚ) TAI VIET VOWEL E, TAI VIET LETTER LOW BO	[2EAA 2EC5 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9A, 0x0021 };
    uint32_t const ces[12] = { 0x2EAA, 0x2EC5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_487)
{
    // AAB5 AA9A 003F;	
    // (ꪵꪚ) TAI VIET VOWEL E, TAI VIET LETTER LOW BO	[2EAA 2EC5 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9A, 0x003F };
    uint32_t const ces[12] = { 0x2EAA, 0x2EC5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_488)
{
    // AAB5 AA9A 0061;	
    // (ꪵꪚ) TAI VIET VOWEL E, TAI VIET LETTER LOW BO	[2EAA 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9A, 0x0061 };
    uint32_t const ces[12] = { 0x2EAA, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_489)
{
    // AAB5 AA9A 0041;	
    // (ꪵꪚ) TAI VIET VOWEL E, TAI VIET LETTER LOW BO	[2EAA 2EC5 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9A, 0x0041 };
    uint32_t const ces[12] = { 0x2EAA, 0x2EC5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_490)
{
    // AAB5 AA9A 0062;	
    // (ꪵꪚ) TAI VIET VOWEL E, TAI VIET LETTER LOW BO	[2EAA 2EC5 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB5, 0xAA9A, 0x0062 };
    uint32_t const ces[12] = { 0x2EAA, 0x2EC5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_491)
{
    // AAB6 AA9A 0021;	
    // (ꪶꪚ) TAI VIET VOWEL O, TAI VIET LETTER LOW BO	[2EAA 2EC6 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9A, 0x0021 };
    uint32_t const ces[12] = { 0x2EAA, 0x2EC6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_492)
{
    // AAB6 AA9A 003F;	
    // (ꪶꪚ) TAI VIET VOWEL O, TAI VIET LETTER LOW BO	[2EAA 2EC6 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9A, 0x003F };
    uint32_t const ces[12] = { 0x2EAA, 0x2EC6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_493)
{
    // AAB6 AA9A 0061;	
    // (ꪶꪚ) TAI VIET VOWEL O, TAI VIET LETTER LOW BO	[2EAA 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9A, 0x0061 };
    uint32_t const ces[12] = { 0x2EAA, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_494)
{
    // AAB6 AA9A 0041;	
    // (ꪶꪚ) TAI VIET VOWEL O, TAI VIET LETTER LOW BO	[2EAA 2EC6 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9A, 0x0041 };
    uint32_t const ces[12] = { 0x2EAA, 0x2EC6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_495)
{
    // AAB6 AA9A 0062;	
    // (ꪶꪚ) TAI VIET VOWEL O, TAI VIET LETTER LOW BO	[2EAA 2EC6 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB6, 0xAA9A, 0x0062 };
    uint32_t const ces[12] = { 0x2EAA, 0x2EC6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_496)
{
    // AAB9 AA9A 0021;	
    // (ꪹꪚ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW BO	[2EAA 2EC9 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9A, 0x0021 };
    uint32_t const ces[12] = { 0x2EAA, 0x2EC9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_497)
{
    // AAB9 AA9A 003F;	
    // (ꪹꪚ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW BO	[2EAA 2EC9 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9A, 0x003F };
    uint32_t const ces[12] = { 0x2EAA, 0x2EC9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_498)
{
    // AAB9 AA9A 0061;	
    // (ꪹꪚ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW BO	[2EAA 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9A, 0x0061 };
    uint32_t const ces[12] = { 0x2EAA, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_193_499)
{
    // AAB9 AA9A 0041;	
    // (ꪹꪚ) TAI VIET VOWEL UEA, TAI VIET LETTER LOW BO	[2EAA 2EC9 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0xAAB9, 0xAA9A, 0x0041 };
    uint32_t const ces[12] = { 0x2EAA, 0x2EC9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

