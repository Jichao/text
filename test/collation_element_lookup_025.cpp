// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_025_000)
{
    // 0F46  ; [.2EDE.0020.0002] 
    // TIBETAN LETTER CHA

    uint32_t const cps[1] = { 0xf46 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ede), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_001)
{
    // 0F47  ; [.2EE0.0020.0002] 
    // TIBETAN LETTER JA

    uint32_t const cps[1] = { 0xf47 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ee0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_002)
{
    // 0F49  ; [.2EE2.0020.0002] 
    // TIBETAN LETTER NYA

    uint32_t const cps[1] = { 0xf49 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ee2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_003)
{
    // 0F4A  ; [.2EE4.0020.0002] 
    // TIBETAN LETTER TTA

    uint32_t const cps[1] = { 0xf4a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ee4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_004)
{
    // 0F4B  ; [.2EE6.0020.0002] 
    // TIBETAN LETTER TTHA

    uint32_t const cps[1] = { 0xf4b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ee6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_005)
{
    // 0F4C  ; [.2EE8.0020.0002] 
    // TIBETAN LETTER DDA

    uint32_t const cps[1] = { 0xf4c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ee8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_006)
{
    // 0F4D  ; [.2EE8.0020.0002][.2F18.0020.0002] 
    // TIBETAN LETTER DDHA

    uint32_t const cps[1] = { 0xf4d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ee8), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2f18), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_025_007)
{
    // 0F4E  ; [.2EEA.0020.0002] 
    // TIBETAN LETTER NNA

    uint32_t const cps[1] = { 0xf4e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_008)
{
    // 0F4F  ; [.2EEC.0020.0002] 
    // TIBETAN LETTER TA

    uint32_t const cps[1] = { 0xf4f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_009)
{
    // 0F50  ; [.2EEE.0020.0002] 
    // TIBETAN LETTER THA

    uint32_t const cps[1] = { 0xf50 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_010)
{
    // 0F51  ; [.2EF0.0020.0002] 
    // TIBETAN LETTER DA

    uint32_t const cps[1] = { 0xf51 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ef0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_011)
{
    // 0F52  ; [.2EF0.0020.0002][.2F18.0020.0002] 
    // TIBETAN LETTER DHA

    uint32_t const cps[1] = { 0xf52 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ef0), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2f18), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_025_012)
{
    // 0F53  ; [.2EF2.0020.0002] 
    // TIBETAN LETTER NA

    uint32_t const cps[1] = { 0xf53 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ef2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_013)
{
    // 0F54  ; [.2EF4.0020.0002] 
    // TIBETAN LETTER PA

    uint32_t const cps[1] = { 0xf54 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ef4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_014)
{
    // 0F55  ; [.2EF6.0020.0002] 
    // TIBETAN LETTER PHA

    uint32_t const cps[1] = { 0xf55 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ef6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_015)
{
    // 0F56  ; [.2EF8.0020.0002] 
    // TIBETAN LETTER BA

    uint32_t const cps[1] = { 0xf56 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ef8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_016)
{
    // 0F57  ; [.2EF8.0020.0002][.2F18.0020.0002] 
    // TIBETAN LETTER BHA

    uint32_t const cps[1] = { 0xf57 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ef8), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2f18), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_025_017)
{
    // 0F58  ; [.2EFA.0020.0002] 
    // TIBETAN LETTER MA

    uint32_t const cps[1] = { 0xf58 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2efa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_018)
{
    // 0F59  ; [.2EFC.0020.0002] 
    // TIBETAN LETTER TSA

    uint32_t const cps[1] = { 0xf59 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2efc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_019)
{
    // 0F5A  ; [.2EFE.0020.0002] 
    // TIBETAN LETTER TSHA

    uint32_t const cps[1] = { 0xf5a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2efe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_020)
{
    // 0F5B  ; [.2F00.0020.0002] 
    // TIBETAN LETTER DZA

    uint32_t const cps[1] = { 0xf5b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f00), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_021)
{
    // 0F5C  ; [.2F00.0020.0002][.2F18.0020.0002] 
    // TIBETAN LETTER DZHA

    uint32_t const cps[1] = { 0xf5c };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2f00), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2f18), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_025_022)
{
    // 0F5D  ; [.2F02.0020.0002] 
    // TIBETAN LETTER WA

    uint32_t const cps[1] = { 0xf5d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f02), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_023)
{
    // 0F5E  ; [.2F04.0020.0002] 
    // TIBETAN LETTER ZHA

    uint32_t const cps[1] = { 0xf5e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f04), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_024)
{
    // 0F5F  ; [.2F06.0020.0002] 
    // TIBETAN LETTER ZA

    uint32_t const cps[1] = { 0xf5f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f06), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_025)
{
    // 0F60  ; [.2F08.0020.0002] 
    // TIBETAN LETTER -A

    uint32_t const cps[1] = { 0xf60 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f08), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_026)
{
    // 0F61  ; [.2F0A.0020.0002] 
    // TIBETAN LETTER YA

    uint32_t const cps[1] = { 0xf61 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f0a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_027)
{
    // 0F62  ; [.2F0C.0020.0002] 
    // TIBETAN LETTER RA

    uint32_t const cps[1] = { 0xf62 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f0c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_028)
{
    // 0F63  ; [.2F0F.0020.0002] 
    // TIBETAN LETTER LA

    uint32_t const cps[1] = { 0xf63 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f0f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_029)
{
    // 0F64  ; [.2F11.0020.0002] 
    // TIBETAN LETTER SHA

    uint32_t const cps[1] = { 0xf64 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f11), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_030)
{
    // 0F65  ; [.2F13.0020.0002] 
    // TIBETAN LETTER SSA

    uint32_t const cps[1] = { 0xf65 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f13), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_031)
{
    // 0F66  ; [.2F15.0020.0002] 
    // TIBETAN LETTER SA

    uint32_t const cps[1] = { 0xf66 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f15), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_032)
{
    // 0F67  ; [.2F17.0020.0002] 
    // TIBETAN LETTER HA

    uint32_t const cps[1] = { 0xf67 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f17), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_033)
{
    // 0F68  ; [.2F19.0020.0002] 
    // TIBETAN LETTER A

    uint32_t const cps[1] = { 0xf68 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f19), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_034)
{
    // 0F69  ; [.2ED3.0020.0002][.2F14.0020.0002] 
    // TIBETAN LETTER KSSA

    uint32_t const cps[1] = { 0xf69 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ed3), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2f14), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_025_035)
{
    // 0F6A  ; [.2F0C.0020.0004][.0000.0112.0004] 
    // TIBETAN LETTER FIXED-FORM RA

    uint32_t const cps[1] = { 0xf6a };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2f0c), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_025_036)
{
    // 0F6B  ; [.2ED5.0020.0002] 
    // TIBETAN LETTER KKA

    uint32_t const cps[1] = { 0xf6b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ed5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_037)
{
    // 0F6C  ; [.2F0E.0020.0002] 
    // TIBETAN LETTER RRA

    uint32_t const cps[1] = { 0xf6c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f0e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_038)
{
    // 0F71  ; [.2F23.0020.0002] 
    // TIBETAN VOWEL SIGN AA

    uint32_t const cps[1] = { 0xf71 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f23), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_039)
{
    // 0F71 0F72 ; [.2F25.0020.0002] 
    // TIBETAN VOWEL SIGN II

    uint32_t const cps[2] = { 0xf71, 0xf72 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f25), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_040)
{
    // 0F71 0F74 ; [.2F29.0020.0002] 
    // TIBETAN VOWEL SIGN UU

    uint32_t const cps[2] = { 0xf71, 0xf74 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f29), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_041)
{
    // 0F71 0F80 ; [.2F27.0020.0002] 
    // TIBETAN VOWEL SIGN REVERSED II

    uint32_t const cps[2] = { 0xf71, 0xf80 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f27), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_042)
{
    // 0F72  ; [.2F24.0020.0002] 
    // TIBETAN VOWEL SIGN I

    uint32_t const cps[1] = { 0xf72 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f24), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_043)
{
    // 0F73  ; [.2F25.0020.0002] 
    // TIBETAN VOWEL SIGN II

    uint32_t const cps[1] = { 0xf73 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f25), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_044)
{
    // 0F74  ; [.2F28.0020.0002] 
    // TIBETAN VOWEL SIGN U

    uint32_t const cps[1] = { 0xf74 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f28), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_045)
{
    // 0F75  ; [.2F29.0020.0002] 
    // TIBETAN VOWEL SIGN UU

    uint32_t const cps[1] = { 0xf75 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f29), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_046)
{
    // 0F76  ; [.2F2A.0020.0002] 
    // TIBETAN VOWEL SIGN VOCALIC R

    uint32_t const cps[1] = { 0xf76 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f2a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_047)
{
    // 0F77  ; [.2F2B.0020.0002] 
    // TIBETAN VOWEL SIGN VOCALIC RR

    uint32_t const cps[1] = { 0xf77 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f2b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_048)
{
    // 0F78  ; [.2F2C.0020.0002] 
    // TIBETAN VOWEL SIGN VOCALIC L

    uint32_t const cps[1] = { 0xf78 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f2c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_049)
{
    // 0F79  ; [.2F2D.0020.0002] 
    // TIBETAN VOWEL SIGN VOCALIC LL

    uint32_t const cps[1] = { 0xf79 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f2d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_050)
{
    // 0F7A  ; [.2F2E.0020.0002] 
    // TIBETAN VOWEL SIGN E

    uint32_t const cps[1] = { 0xf7a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f2e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_051)
{
    // 0F7B  ; [.2F2F.0020.0002] 
    // TIBETAN VOWEL SIGN EE

    uint32_t const cps[1] = { 0xf7b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f2f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_052)
{
    // 0F7C  ; [.2F30.0020.0002] 
    // TIBETAN VOWEL SIGN O

    uint32_t const cps[1] = { 0xf7c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f30), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_053)
{
    // 0F7D  ; [.2F31.0020.0002] 
    // TIBETAN VOWEL SIGN OO

    uint32_t const cps[1] = { 0xf7d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f31), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_054)
{
    // 0F7E  ; [.0000.00C4.0002] 
    // TIBETAN SIGN RJES SU NGA RO

    uint32_t const cps[1] = { 0xf7e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_055)
{
    // 0F7F  ; [.0000.00C5.0002] 
    // TIBETAN SIGN RNAM BCAD

    uint32_t const cps[1] = { 0xf7f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa5), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_056)
{
    // 0F80  ; [.2F26.0020.0002] 
    // TIBETAN VOWEL SIGN REVERSED I

    uint32_t const cps[1] = { 0xf80 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f26), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_057)
{
    // 0F81  ; [.2F27.0020.0002] 
    // TIBETAN VOWEL SIGN REVERSED II

    uint32_t const cps[1] = { 0xf81 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f27), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_058)
{
    // 0F82  ; [.0000.0000.0000] 
    // TIBETAN SIGN NYI ZLA NAA DA

    uint32_t const cps[1] = { 0xf82 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_059)
{
    // 0F83  ; [.0000.0000.0000] 
    // TIBETAN SIGN SNA LDAN

    uint32_t const cps[1] = { 0xf83 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_060)
{
    // 0F84  ; [.2F32.0020.0002] 
    // TIBETAN MARK HALANTA

    uint32_t const cps[1] = { 0xf84 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f32), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_061)
{
    // 0F85  ; [*0409.0020.0002] 
    // TIBETAN MARK PALUTA

    uint32_t const cps[1] = { 0xf85 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x409), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_062)
{
    // 0F86  ; [.0000.0000.0000] 
    // TIBETAN SIGN LCI RTAGS

    uint32_t const cps[1] = { 0xf86 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_063)
{
    // 0F87  ; [.0000.0000.0000] 
    // TIBETAN SIGN YANG RTAGS

    uint32_t const cps[1] = { 0xf87 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_064)
{
    // 0F88  ; [.2F1B.0020.0002] 
    // TIBETAN SIGN LCE TSA CAN

    uint32_t const cps[1] = { 0xf88 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f1b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_065)
{
    // 0F89  ; [.2F1D.0020.0002] 
    // TIBETAN SIGN MCHU CAN

    uint32_t const cps[1] = { 0xf89 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f1d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_066)
{
    // 0F8A  ; [.2F21.0020.0002] 
    // TIBETAN SIGN GRU CAN RGYINGS

    uint32_t const cps[1] = { 0xf8a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f21), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_067)
{
    // 0F8B  ; [.2F22.0020.0002] 
    // TIBETAN SIGN GRU MED RGYINGS

    uint32_t const cps[1] = { 0xf8b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f22), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_068)
{
    // 0F8C  ; [.2F1F.0020.0002] 
    // TIBETAN SIGN INVERTED MCHU CAN

    uint32_t const cps[1] = { 0xf8c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f1f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_069)
{
    // 0F8D  ; [.2F1C.0020.0002] 
    // TIBETAN SUBJOINED SIGN LCE TSA CAN

    uint32_t const cps[1] = { 0xf8d };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f1c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_070)
{
    // 0F8E  ; [.2F1E.0020.0002] 
    // TIBETAN SUBJOINED SIGN MCHU CAN

    uint32_t const cps[1] = { 0xf8e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f1e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_071)
{
    // 0F8F  ; [.2F20.0020.0002] 
    // TIBETAN SUBJOINED SIGN INVERTED MCHU CAN

    uint32_t const cps[1] = { 0xf8f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f20), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_072)
{
    // 0F90  ; [.2ED4.0020.0002] 
    // TIBETAN SUBJOINED LETTER KA

    uint32_t const cps[1] = { 0xf90 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ed4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_073)
{
    // 0F91  ; [.2ED7.0020.0002] 
    // TIBETAN SUBJOINED LETTER KHA

    uint32_t const cps[1] = { 0xf91 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ed7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_074)
{
    // 0F92  ; [.2ED9.0020.0002] 
    // TIBETAN SUBJOINED LETTER GA

    uint32_t const cps[1] = { 0xf92 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ed9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_075)
{
    // 0F93  ; [.2ED9.0020.0002][.2F18.0020.0002] 
    // TIBETAN SUBJOINED LETTER GHA

    uint32_t const cps[1] = { 0xf93 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ed9), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2f18), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_025_076)
{
    // 0F94  ; [.2EDB.0020.0002] 
    // TIBETAN SUBJOINED LETTER NGA

    uint32_t const cps[1] = { 0xf94 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2edb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_077)
{
    // 0F95  ; [.2EDD.0020.0002] 
    // TIBETAN SUBJOINED LETTER CA

    uint32_t const cps[1] = { 0xf95 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2edd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_078)
{
    // 0F96  ; [.2EDF.0020.0002] 
    // TIBETAN SUBJOINED LETTER CHA

    uint32_t const cps[1] = { 0xf96 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2edf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_079)
{
    // 0F97  ; [.2EE1.0020.0002] 
    // TIBETAN SUBJOINED LETTER JA

    uint32_t const cps[1] = { 0xf97 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ee1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_080)
{
    // 0F99  ; [.2EE3.0020.0002] 
    // TIBETAN SUBJOINED LETTER NYA

    uint32_t const cps[1] = { 0xf99 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ee3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_081)
{
    // 0F9A  ; [.2EE5.0020.0002] 
    // TIBETAN SUBJOINED LETTER TTA

    uint32_t const cps[1] = { 0xf9a };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ee5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_082)
{
    // 0F9B  ; [.2EE7.0020.0002] 
    // TIBETAN SUBJOINED LETTER TTHA

    uint32_t const cps[1] = { 0xf9b };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ee7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_083)
{
    // 0F9C  ; [.2EE9.0020.0002] 
    // TIBETAN SUBJOINED LETTER DDA

    uint32_t const cps[1] = { 0xf9c };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ee9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_084)
{
    // 0F9D  ; [.2EE9.0020.0002][.2F18.0020.0002] 
    // TIBETAN SUBJOINED LETTER DDHA

    uint32_t const cps[1] = { 0xf9d };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ee9), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2f18), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_025_085)
{
    // 0F9E  ; [.2EEB.0020.0002] 
    // TIBETAN SUBJOINED LETTER NNA

    uint32_t const cps[1] = { 0xf9e };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eeb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_086)
{
    // 0F9F  ; [.2EED.0020.0002] 
    // TIBETAN SUBJOINED LETTER TA

    uint32_t const cps[1] = { 0xf9f };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_087)
{
    // 0FA0  ; [.2EEF.0020.0002] 
    // TIBETAN SUBJOINED LETTER THA

    uint32_t const cps[1] = { 0xfa0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_088)
{
    // 0FA1  ; [.2EF1.0020.0002] 
    // TIBETAN SUBJOINED LETTER DA

    uint32_t const cps[1] = { 0xfa1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ef1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_089)
{
    // 0FA2  ; [.2EF1.0020.0002][.2F18.0020.0002] 
    // TIBETAN SUBJOINED LETTER DHA

    uint32_t const cps[1] = { 0xfa2 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ef1), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2f18), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_025_090)
{
    // 0FA3  ; [.2EF3.0020.0002] 
    // TIBETAN SUBJOINED LETTER NA

    uint32_t const cps[1] = { 0xfa3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ef3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_091)
{
    // 0FA4  ; [.2EF5.0020.0002] 
    // TIBETAN SUBJOINED LETTER PA

    uint32_t const cps[1] = { 0xfa4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ef5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_092)
{
    // 0FA5  ; [.2EF7.0020.0002] 
    // TIBETAN SUBJOINED LETTER PHA

    uint32_t const cps[1] = { 0xfa5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ef7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_093)
{
    // 0FA6  ; [.2EF9.0020.0002] 
    // TIBETAN SUBJOINED LETTER BA

    uint32_t const cps[1] = { 0xfa6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2ef9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_094)
{
    // 0FA7  ; [.2EF9.0020.0002][.2F18.0020.0002] 
    // TIBETAN SUBJOINED LETTER BHA

    uint32_t const cps[1] = { 0xfa7 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ef9), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2f18), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_025_095)
{
    // 0FA8  ; [.2EFB.0020.0002] 
    // TIBETAN SUBJOINED LETTER MA

    uint32_t const cps[1] = { 0xfa8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2efb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_096)
{
    // 0FA9  ; [.2EFD.0020.0002] 
    // TIBETAN SUBJOINED LETTER TSA

    uint32_t const cps[1] = { 0xfa9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2efd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_097)
{
    // 0FAA  ; [.2EFF.0020.0002] 
    // TIBETAN SUBJOINED LETTER TSHA

    uint32_t const cps[1] = { 0xfaa };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2eff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_098)
{
    // 0FAB  ; [.2F01.0020.0002] 
    // TIBETAN SUBJOINED LETTER DZA

    uint32_t const cps[1] = { 0xfab };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f01), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_099)
{
    // 0FAC  ; [.2F01.0020.0002][.2F18.0020.0002] 
    // TIBETAN SUBJOINED LETTER DZHA

    uint32_t const cps[1] = { 0xfac };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2f01), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2f18), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_025_100)
{
    // 0FAD  ; [.2F03.0020.0002] 
    // TIBETAN SUBJOINED LETTER WA

    uint32_t const cps[1] = { 0xfad };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f03), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_101)
{
    // 0FAE  ; [.2F05.0020.0002] 
    // TIBETAN SUBJOINED LETTER ZHA

    uint32_t const cps[1] = { 0xfae };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f05), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_102)
{
    // 0FAF  ; [.2F07.0020.0002] 
    // TIBETAN SUBJOINED LETTER ZA

    uint32_t const cps[1] = { 0xfaf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f07), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_103)
{
    // 0FB0  ; [.2F09.0020.0002] 
    // TIBETAN SUBJOINED LETTER -A

    uint32_t const cps[1] = { 0xfb0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f09), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_104)
{
    // 0FB1  ; [.2F0B.0020.0002] 
    // TIBETAN SUBJOINED LETTER YA

    uint32_t const cps[1] = { 0xfb1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f0b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_105)
{
    // 0FB2  ; [.2F0D.0020.0002] 
    // TIBETAN SUBJOINED LETTER RA

    uint32_t const cps[1] = { 0xfb2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f0d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_106)
{
    // 0FB2 0F71 0F80 ; [.2F2B.0020.0002] 
    // TIBETAN VOWEL SIGN VOCALIC RR

    uint32_t const cps[3] = { 0xfb2, 0xf71, 0xf80 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f2b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 3);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 3);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_107)
{
    // 0FB2 0F80 ; [.2F2A.0020.0002] 
    // TIBETAN VOWEL SIGN VOCALIC R

    uint32_t const cps[2] = { 0xfb2, 0xf80 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f2a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_108)
{
    // 0FB2 0F81 ; [.2F2B.0020.0002] 
    // TIBETAN VOWEL SIGN VOCALIC RR

    uint32_t const cps[2] = { 0xfb2, 0xf81 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f2b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_109)
{
    // 0FB3  ; [.2F10.0020.0002] 
    // TIBETAN SUBJOINED LETTER LA

    uint32_t const cps[1] = { 0xfb3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f10), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_110)
{
    // 0FB3 0F71 0F80 ; [.2F2D.0020.0002] 
    // TIBETAN VOWEL SIGN VOCALIC LL

    uint32_t const cps[3] = { 0xfb3, 0xf71, 0xf80 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f2d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 3);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 3);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_111)
{
    // 0FB3 0F80 ; [.2F2C.0020.0002] 
    // TIBETAN VOWEL SIGN VOCALIC L

    uint32_t const cps[2] = { 0xfb3, 0xf80 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f2c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_112)
{
    // 0FB3 0F81 ; [.2F2D.0020.0002] 
    // TIBETAN VOWEL SIGN VOCALIC LL

    uint32_t const cps[2] = { 0xfb3, 0xf81 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f2d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 2);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 2);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_113)
{
    // 0FB4  ; [.2F12.0020.0002] 
    // TIBETAN SUBJOINED LETTER SHA

    uint32_t const cps[1] = { 0xfb4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f12), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_114)
{
    // 0FB5  ; [.2F14.0020.0002] 
    // TIBETAN SUBJOINED LETTER SSA

    uint32_t const cps[1] = { 0xfb5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f14), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_115)
{
    // 0FB6  ; [.2F16.0020.0002] 
    // TIBETAN SUBJOINED LETTER SA

    uint32_t const cps[1] = { 0xfb6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f16), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_116)
{
    // 0FB7  ; [.2F18.0020.0002] 
    // TIBETAN SUBJOINED LETTER HA

    uint32_t const cps[1] = { 0xfb7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f18), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_117)
{
    // 0FB8  ; [.2F1A.0020.0002] 
    // TIBETAN SUBJOINED LETTER A

    uint32_t const cps[1] = { 0xfb8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x2f1a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_118)
{
    // 0FB9  ; [.2ED4.0020.0002][.2F14.0020.0002] 
    // TIBETAN SUBJOINED LETTER KSSA

    uint32_t const cps[1] = { 0xfb9 };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2ed4), uint8_t(0x0), uint8_t(0x2)}, {uint16_t(0x2f14), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_025_119)
{
    // 0FBA  ; [.2F03.0020.0004][.0000.0112.0004] 
    // TIBETAN SUBJOINED LETTER FIXED-FORM WA

    uint32_t const cps[1] = { 0xfba };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2f03), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_025_120)
{
    // 0FBB  ; [.2F0B.0020.0004][.0000.0112.0004] 
    // TIBETAN SUBJOINED LETTER FIXED-FORM YA

    uint32_t const cps[1] = { 0xfbb };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2f0b), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_025_121)
{
    // 0FBC  ; [.2F0D.0020.0004][.0000.0112.0004] 
    // TIBETAN SUBJOINED LETTER FIXED-FORM RA

    uint32_t const cps[1] = { 0xfbc };
    // biased L2 weight
    boost::text::collation_element const ces[2] = { {uint16_t(0x2f0d), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x0), uint8_t(0xf2), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 2));
}

TEST(collation, table_lookup_025_122)
{
    // 0FBE  ; [*054C.0020.0002] 
    // TIBETAN KU RU KHA

    uint32_t const cps[1] = { 0xfbe };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x54c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_123)
{
    // 0FBF  ; [*054D.0020.0002] 
    // TIBETAN KU RU KHA BZHI MIG CAN

    uint32_t const cps[1] = { 0xfbf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x54d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_124)
{
    // 0FC0  ; [*054E.0020.0002] 
    // TIBETAN CANTILLATION SIGN HEAVY BEAT

    uint32_t const cps[1] = { 0xfc0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x54e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_125)
{
    // 0FC1  ; [*054F.0020.0002] 
    // TIBETAN CANTILLATION SIGN LIGHT BEAT

    uint32_t const cps[1] = { 0xfc1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x54f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_126)
{
    // 0FC2  ; [*0550.0020.0002] 
    // TIBETAN CANTILLATION SIGN CANG TE-U

    uint32_t const cps[1] = { 0xfc2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x550), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_127)
{
    // 0FC3  ; [*0551.0020.0002] 
    // TIBETAN CANTILLATION SIGN SBUB -CHAL

    uint32_t const cps[1] = { 0xfc3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x551), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_128)
{
    // 0FC4  ; [*0552.0020.0002] 
    // TIBETAN SYMBOL DRIL BU

    uint32_t const cps[1] = { 0xfc4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x552), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_129)
{
    // 0FC5  ; [*0553.0020.0002] 
    // TIBETAN SYMBOL RDO RJE

    uint32_t const cps[1] = { 0xfc5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x553), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_130)
{
    // 0FC6  ; [.0000.0000.0000] 
    // TIBETAN SYMBOL PADMA GDAN

    uint32_t const cps[1] = { 0xfc6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_131)
{
    // 0FC7  ; [*0554.0020.0002] 
    // TIBETAN SYMBOL RDO RJE RGYA GRAM

    uint32_t const cps[1] = { 0xfc7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x554), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_132)
{
    // 0FC8  ; [*0555.0020.0002] 
    // TIBETAN SYMBOL PHUR PA

    uint32_t const cps[1] = { 0xfc8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x555), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_133)
{
    // 0FC9  ; [*0556.0020.0002] 
    // TIBETAN SYMBOL NOR BU

    uint32_t const cps[1] = { 0xfc9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x556), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_134)
{
    // 0FCA  ; [*0557.0020.0002] 
    // TIBETAN SYMBOL NOR BU NYIS -KHYIL

    uint32_t const cps[1] = { 0xfca };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x557), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_135)
{
    // 0FCB  ; [*0558.0020.0002] 
    // TIBETAN SYMBOL NOR BU GSUM -KHYIL

    uint32_t const cps[1] = { 0xfcb };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x558), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_136)
{
    // 0FCC  ; [*0559.0020.0002] 
    // TIBETAN SYMBOL NOR BU BZHI -KHYIL

    uint32_t const cps[1] = { 0xfcc };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x559), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_137)
{
    // 0FCE  ; [*055A.0020.0002] 
    // TIBETAN SIGN RDEL NAG RDEL DKAR

    uint32_t const cps[1] = { 0xfce };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x55a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_138)
{
    // 0FCF  ; [*055B.0020.0002] 
    // TIBETAN SIGN RDEL NAG GSUM

    uint32_t const cps[1] = { 0xfcf };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x55b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_139)
{
    // 0FD0  ; [*0400.0020.0002] 
    // TIBETAN MARK BSKA- SHOG GI MGO RGYAN

    uint32_t const cps[1] = { 0xfd0 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x400), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_140)
{
    // 0FD1  ; [*0401.0020.0002] 
    // TIBETAN MARK MNYAM YIG GI MGO RGYAN

    uint32_t const cps[1] = { 0xfd1 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x401), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_141)
{
    // 0FD2  ; [*040A.0020.0002] 
    // TIBETAN MARK NYIS TSHEG

    uint32_t const cps[1] = { 0xfd2 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x40a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_142)
{
    // 0FD3  ; [*040B.0020.0002] 
    // TIBETAN MARK INITIAL BRDA RNYING YIG MGO MDUN MA

    uint32_t const cps[1] = { 0xfd3 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x40b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_143)
{
    // 0FD4  ; [*040C.0020.0002] 
    // TIBETAN MARK CLOSING BRDA RNYING YIG MGO SGAB MA

    uint32_t const cps[1] = { 0xfd4 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x40c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_144)
{
    // 0FD5  ; [*055C.0020.0002] 
    // RIGHT-FACING SVASTI SIGN

    uint32_t const cps[1] = { 0xfd5 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x55c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_145)
{
    // 0FD6  ; [*055D.0020.0002] 
    // LEFT-FACING SVASTI SIGN

    uint32_t const cps[1] = { 0xfd6 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x55d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_146)
{
    // 0FD7  ; [*055E.0020.0002] 
    // RIGHT-FACING SVASTI SIGN WITH DOTS

    uint32_t const cps[1] = { 0xfd7 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x55e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_147)
{
    // 0FD8  ; [*055F.0020.0002] 
    // LEFT-FACING SVASTI SIGN WITH DOTS

    uint32_t const cps[1] = { 0xfd8 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x55f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_148)
{
    // 0FD9  ; [*040D.0020.0002] 
    // TIBETAN MARK LEADING MCHAN RTAGS

    uint32_t const cps[1] = { 0xfd9 };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x40d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_025_149)
{
    // 0FDA  ; [*040E.0020.0002] 
    // TIBETAN MARK TRAILING MCHAN RTAGS

    uint32_t const cps[1] = { 0xfda };
    // biased L2 weight
    boost::text::collation_element const ces[1] = { {uint16_t(0x40e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

