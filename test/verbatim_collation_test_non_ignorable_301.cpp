// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_301_000)
{
    // 131BD 003F;	
    // (𓆽) EGYPTIAN HIEROGLYPH M012A	[5207 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BD, 0x003F };
    uint32_t const ces[9] = { 0x5207, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_001)
{
    // 131BD 0061;	
    // (𓆽) EGYPTIAN HIEROGLYPH M012A	[5207 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BD, 0x0061 };
    uint32_t const ces[9] = { 0x5207, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_002)
{
    // 131BD 0041;	
    // (𓆽) EGYPTIAN HIEROGLYPH M012A	[5207 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131BD, 0x0041 };
    uint32_t const ces[9] = { 0x5207, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_003)
{
    // 131BD 0062;	
    // (𓆽) EGYPTIAN HIEROGLYPH M012A	[5207 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BD, 0x0062 };
    uint32_t const ces[9] = { 0x5207, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_004)
{
    // 131BE 0021;	
    // (𓆾) EGYPTIAN HIEROGLYPH M012B	[5208 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BE, 0x0021 };
    uint32_t const ces[9] = { 0x5208, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_005)
{
    // 131BE 003F;	
    // (𓆾) EGYPTIAN HIEROGLYPH M012B	[5208 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BE, 0x003F };
    uint32_t const ces[9] = { 0x5208, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_006)
{
    // 131BE 0061;	
    // (𓆾) EGYPTIAN HIEROGLYPH M012B	[5208 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BE, 0x0061 };
    uint32_t const ces[9] = { 0x5208, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_007)
{
    // 131BE 0041;	
    // (𓆾) EGYPTIAN HIEROGLYPH M012B	[5208 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131BE, 0x0041 };
    uint32_t const ces[9] = { 0x5208, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_008)
{
    // 131BE 0062;	
    // (𓆾) EGYPTIAN HIEROGLYPH M012B	[5208 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BE, 0x0062 };
    uint32_t const ces[9] = { 0x5208, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_009)
{
    // 131BF 0021;	
    // (𓆿) EGYPTIAN HIEROGLYPH M012C	[5209 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BF, 0x0021 };
    uint32_t const ces[9] = { 0x5209, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_010)
{
    // 131BF 003F;	
    // (𓆿) EGYPTIAN HIEROGLYPH M012C	[5209 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BF, 0x003F };
    uint32_t const ces[9] = { 0x5209, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_011)
{
    // 131BF 0061;	
    // (𓆿) EGYPTIAN HIEROGLYPH M012C	[5209 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BF, 0x0061 };
    uint32_t const ces[9] = { 0x5209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_012)
{
    // 131BF 0041;	
    // (𓆿) EGYPTIAN HIEROGLYPH M012C	[5209 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131BF, 0x0041 };
    uint32_t const ces[9] = { 0x5209, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_013)
{
    // 131BF 0062;	
    // (𓆿) EGYPTIAN HIEROGLYPH M012C	[5209 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131BF, 0x0062 };
    uint32_t const ces[9] = { 0x5209, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_014)
{
    // 131C0 0021;	
    // (𓇀) EGYPTIAN HIEROGLYPH M012D	[520A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C0, 0x0021 };
    uint32_t const ces[9] = { 0x520A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_015)
{
    // 131C0 003F;	
    // (𓇀) EGYPTIAN HIEROGLYPH M012D	[520A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C0, 0x003F };
    uint32_t const ces[9] = { 0x520A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_016)
{
    // 131C0 0061;	
    // (𓇀) EGYPTIAN HIEROGLYPH M012D	[520A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C0, 0x0061 };
    uint32_t const ces[9] = { 0x520A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_017)
{
    // 131C0 0041;	
    // (𓇀) EGYPTIAN HIEROGLYPH M012D	[520A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131C0, 0x0041 };
    uint32_t const ces[9] = { 0x520A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_018)
{
    // 131C0 0062;	
    // (𓇀) EGYPTIAN HIEROGLYPH M012D	[520A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C0, 0x0062 };
    uint32_t const ces[9] = { 0x520A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_019)
{
    // 131C1 0021;	
    // (𓇁) EGYPTIAN HIEROGLYPH M012E	[520B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C1, 0x0021 };
    uint32_t const ces[9] = { 0x520B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_020)
{
    // 131C1 003F;	
    // (𓇁) EGYPTIAN HIEROGLYPH M012E	[520B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C1, 0x003F };
    uint32_t const ces[9] = { 0x520B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_021)
{
    // 131C1 0061;	
    // (𓇁) EGYPTIAN HIEROGLYPH M012E	[520B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C1, 0x0061 };
    uint32_t const ces[9] = { 0x520B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_022)
{
    // 131C1 0041;	
    // (𓇁) EGYPTIAN HIEROGLYPH M012E	[520B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131C1, 0x0041 };
    uint32_t const ces[9] = { 0x520B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_023)
{
    // 131C1 0062;	
    // (𓇁) EGYPTIAN HIEROGLYPH M012E	[520B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C1, 0x0062 };
    uint32_t const ces[9] = { 0x520B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_024)
{
    // 131C2 0021;	
    // (𓇂) EGYPTIAN HIEROGLYPH M012F	[520C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C2, 0x0021 };
    uint32_t const ces[9] = { 0x520C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_025)
{
    // 131C2 003F;	
    // (𓇂) EGYPTIAN HIEROGLYPH M012F	[520C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C2, 0x003F };
    uint32_t const ces[9] = { 0x520C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_026)
{
    // 131C2 0061;	
    // (𓇂) EGYPTIAN HIEROGLYPH M012F	[520C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C2, 0x0061 };
    uint32_t const ces[9] = { 0x520C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_027)
{
    // 131C2 0041;	
    // (𓇂) EGYPTIAN HIEROGLYPH M012F	[520C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131C2, 0x0041 };
    uint32_t const ces[9] = { 0x520C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_028)
{
    // 131C2 0062;	
    // (𓇂) EGYPTIAN HIEROGLYPH M012F	[520C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C2, 0x0062 };
    uint32_t const ces[9] = { 0x520C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_029)
{
    // 131C3 0021;	
    // (𓇃) EGYPTIAN HIEROGLYPH M012G	[520D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C3, 0x0021 };
    uint32_t const ces[9] = { 0x520D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_030)
{
    // 131C3 003F;	
    // (𓇃) EGYPTIAN HIEROGLYPH M012G	[520D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C3, 0x003F };
    uint32_t const ces[9] = { 0x520D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_031)
{
    // 131C3 0061;	
    // (𓇃) EGYPTIAN HIEROGLYPH M012G	[520D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C3, 0x0061 };
    uint32_t const ces[9] = { 0x520D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_032)
{
    // 131C3 0041;	
    // (𓇃) EGYPTIAN HIEROGLYPH M012G	[520D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131C3, 0x0041 };
    uint32_t const ces[9] = { 0x520D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_033)
{
    // 131C3 0062;	
    // (𓇃) EGYPTIAN HIEROGLYPH M012G	[520D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C3, 0x0062 };
    uint32_t const ces[9] = { 0x520D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_034)
{
    // 131C4 0021;	
    // (𓇄) EGYPTIAN HIEROGLYPH M012H	[520E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C4, 0x0021 };
    uint32_t const ces[9] = { 0x520E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_035)
{
    // 131C4 003F;	
    // (𓇄) EGYPTIAN HIEROGLYPH M012H	[520E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C4, 0x003F };
    uint32_t const ces[9] = { 0x520E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_036)
{
    // 131C4 0061;	
    // (𓇄) EGYPTIAN HIEROGLYPH M012H	[520E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C4, 0x0061 };
    uint32_t const ces[9] = { 0x520E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_037)
{
    // 131C4 0041;	
    // (𓇄) EGYPTIAN HIEROGLYPH M012H	[520E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131C4, 0x0041 };
    uint32_t const ces[9] = { 0x520E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_038)
{
    // 131C4 0062;	
    // (𓇄) EGYPTIAN HIEROGLYPH M012H	[520E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C4, 0x0062 };
    uint32_t const ces[9] = { 0x520E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_039)
{
    // 131C5 0021;	
    // (𓇅) EGYPTIAN HIEROGLYPH M013	[520F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C5, 0x0021 };
    uint32_t const ces[9] = { 0x520F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_040)
{
    // 131C5 003F;	
    // (𓇅) EGYPTIAN HIEROGLYPH M013	[520F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C5, 0x003F };
    uint32_t const ces[9] = { 0x520F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_041)
{
    // 131C5 0061;	
    // (𓇅) EGYPTIAN HIEROGLYPH M013	[520F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C5, 0x0061 };
    uint32_t const ces[9] = { 0x520F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_042)
{
    // 131C5 0041;	
    // (𓇅) EGYPTIAN HIEROGLYPH M013	[520F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131C5, 0x0041 };
    uint32_t const ces[9] = { 0x520F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_043)
{
    // 131C5 0062;	
    // (𓇅) EGYPTIAN HIEROGLYPH M013	[520F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C5, 0x0062 };
    uint32_t const ces[9] = { 0x520F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_044)
{
    // 131C6 0021;	
    // (𓇆) EGYPTIAN HIEROGLYPH M014	[5210 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C6, 0x0021 };
    uint32_t const ces[9] = { 0x5210, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_045)
{
    // 131C6 003F;	
    // (𓇆) EGYPTIAN HIEROGLYPH M014	[5210 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C6, 0x003F };
    uint32_t const ces[9] = { 0x5210, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_046)
{
    // 131C6 0061;	
    // (𓇆) EGYPTIAN HIEROGLYPH M014	[5210 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C6, 0x0061 };
    uint32_t const ces[9] = { 0x5210, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_047)
{
    // 131C6 0041;	
    // (𓇆) EGYPTIAN HIEROGLYPH M014	[5210 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131C6, 0x0041 };
    uint32_t const ces[9] = { 0x5210, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_048)
{
    // 131C6 0062;	
    // (𓇆) EGYPTIAN HIEROGLYPH M014	[5210 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C6, 0x0062 };
    uint32_t const ces[9] = { 0x5210, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_049)
{
    // 131C7 0021;	
    // (𓇇) EGYPTIAN HIEROGLYPH M015	[5211 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C7, 0x0021 };
    uint32_t const ces[9] = { 0x5211, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_050)
{
    // 131C7 003F;	
    // (𓇇) EGYPTIAN HIEROGLYPH M015	[5211 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C7, 0x003F };
    uint32_t const ces[9] = { 0x5211, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_051)
{
    // 131C7 0061;	
    // (𓇇) EGYPTIAN HIEROGLYPH M015	[5211 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C7, 0x0061 };
    uint32_t const ces[9] = { 0x5211, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_052)
{
    // 131C7 0041;	
    // (𓇇) EGYPTIAN HIEROGLYPH M015	[5211 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131C7, 0x0041 };
    uint32_t const ces[9] = { 0x5211, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_053)
{
    // 131C7 0062;	
    // (𓇇) EGYPTIAN HIEROGLYPH M015	[5211 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C7, 0x0062 };
    uint32_t const ces[9] = { 0x5211, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_054)
{
    // 131C8 0021;	
    // (𓇈) EGYPTIAN HIEROGLYPH M015A	[5212 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C8, 0x0021 };
    uint32_t const ces[9] = { 0x5212, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_055)
{
    // 131C8 003F;	
    // (𓇈) EGYPTIAN HIEROGLYPH M015A	[5212 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C8, 0x003F };
    uint32_t const ces[9] = { 0x5212, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_056)
{
    // 131C8 0061;	
    // (𓇈) EGYPTIAN HIEROGLYPH M015A	[5212 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C8, 0x0061 };
    uint32_t const ces[9] = { 0x5212, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_057)
{
    // 131C8 0041;	
    // (𓇈) EGYPTIAN HIEROGLYPH M015A	[5212 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131C8, 0x0041 };
    uint32_t const ces[9] = { 0x5212, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_058)
{
    // 131C8 0062;	
    // (𓇈) EGYPTIAN HIEROGLYPH M015A	[5212 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C8, 0x0062 };
    uint32_t const ces[9] = { 0x5212, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_059)
{
    // 131C9 0021;	
    // (𓇉) EGYPTIAN HIEROGLYPH M016	[5213 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C9, 0x0021 };
    uint32_t const ces[9] = { 0x5213, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_060)
{
    // 131C9 003F;	
    // (𓇉) EGYPTIAN HIEROGLYPH M016	[5213 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C9, 0x003F };
    uint32_t const ces[9] = { 0x5213, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_061)
{
    // 131C9 0061;	
    // (𓇉) EGYPTIAN HIEROGLYPH M016	[5213 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C9, 0x0061 };
    uint32_t const ces[9] = { 0x5213, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_062)
{
    // 131C9 0041;	
    // (𓇉) EGYPTIAN HIEROGLYPH M016	[5213 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131C9, 0x0041 };
    uint32_t const ces[9] = { 0x5213, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_063)
{
    // 131C9 0062;	
    // (𓇉) EGYPTIAN HIEROGLYPH M016	[5213 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131C9, 0x0062 };
    uint32_t const ces[9] = { 0x5213, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_064)
{
    // 131CA 0021;	
    // (𓇊) EGYPTIAN HIEROGLYPH M016A	[5214 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CA, 0x0021 };
    uint32_t const ces[9] = { 0x5214, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_065)
{
    // 131CA 003F;	
    // (𓇊) EGYPTIAN HIEROGLYPH M016A	[5214 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CA, 0x003F };
    uint32_t const ces[9] = { 0x5214, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_066)
{
    // 131CA 0061;	
    // (𓇊) EGYPTIAN HIEROGLYPH M016A	[5214 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CA, 0x0061 };
    uint32_t const ces[9] = { 0x5214, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_067)
{
    // 131CA 0041;	
    // (𓇊) EGYPTIAN HIEROGLYPH M016A	[5214 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131CA, 0x0041 };
    uint32_t const ces[9] = { 0x5214, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_068)
{
    // 131CA 0062;	
    // (𓇊) EGYPTIAN HIEROGLYPH M016A	[5214 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CA, 0x0062 };
    uint32_t const ces[9] = { 0x5214, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_069)
{
    // 131CB 0021;	
    // (𓇋) EGYPTIAN HIEROGLYPH M017	[5215 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CB, 0x0021 };
    uint32_t const ces[9] = { 0x5215, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_070)
{
    // 131CB 003F;	
    // (𓇋) EGYPTIAN HIEROGLYPH M017	[5215 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CB, 0x003F };
    uint32_t const ces[9] = { 0x5215, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_071)
{
    // 131CB 0061;	
    // (𓇋) EGYPTIAN HIEROGLYPH M017	[5215 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CB, 0x0061 };
    uint32_t const ces[9] = { 0x5215, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_072)
{
    // 131CB 0041;	
    // (𓇋) EGYPTIAN HIEROGLYPH M017	[5215 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131CB, 0x0041 };
    uint32_t const ces[9] = { 0x5215, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_073)
{
    // 131CB 0062;	
    // (𓇋) EGYPTIAN HIEROGLYPH M017	[5215 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CB, 0x0062 };
    uint32_t const ces[9] = { 0x5215, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_074)
{
    // 131CC 0021;	
    // (𓇌) EGYPTIAN HIEROGLYPH M017A	[5216 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CC, 0x0021 };
    uint32_t const ces[9] = { 0x5216, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_075)
{
    // 131CC 003F;	
    // (𓇌) EGYPTIAN HIEROGLYPH M017A	[5216 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CC, 0x003F };
    uint32_t const ces[9] = { 0x5216, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_076)
{
    // 131CC 0061;	
    // (𓇌) EGYPTIAN HIEROGLYPH M017A	[5216 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CC, 0x0061 };
    uint32_t const ces[9] = { 0x5216, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_077)
{
    // 131CC 0041;	
    // (𓇌) EGYPTIAN HIEROGLYPH M017A	[5216 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131CC, 0x0041 };
    uint32_t const ces[9] = { 0x5216, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_078)
{
    // 131CC 0062;	
    // (𓇌) EGYPTIAN HIEROGLYPH M017A	[5216 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CC, 0x0062 };
    uint32_t const ces[9] = { 0x5216, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_079)
{
    // 131CD 0021;	
    // (𓇍) EGYPTIAN HIEROGLYPH M018	[5217 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CD, 0x0021 };
    uint32_t const ces[9] = { 0x5217, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_080)
{
    // 131CD 003F;	
    // (𓇍) EGYPTIAN HIEROGLYPH M018	[5217 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CD, 0x003F };
    uint32_t const ces[9] = { 0x5217, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_081)
{
    // 131CD 0061;	
    // (𓇍) EGYPTIAN HIEROGLYPH M018	[5217 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CD, 0x0061 };
    uint32_t const ces[9] = { 0x5217, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_082)
{
    // 131CD 0041;	
    // (𓇍) EGYPTIAN HIEROGLYPH M018	[5217 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131CD, 0x0041 };
    uint32_t const ces[9] = { 0x5217, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_083)
{
    // 131CD 0062;	
    // (𓇍) EGYPTIAN HIEROGLYPH M018	[5217 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CD, 0x0062 };
    uint32_t const ces[9] = { 0x5217, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_084)
{
    // 131CE 0021;	
    // (𓇎) EGYPTIAN HIEROGLYPH M019	[5218 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CE, 0x0021 };
    uint32_t const ces[9] = { 0x5218, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_085)
{
    // 131CE 003F;	
    // (𓇎) EGYPTIAN HIEROGLYPH M019	[5218 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CE, 0x003F };
    uint32_t const ces[9] = { 0x5218, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_086)
{
    // 131CE 0061;	
    // (𓇎) EGYPTIAN HIEROGLYPH M019	[5218 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CE, 0x0061 };
    uint32_t const ces[9] = { 0x5218, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_087)
{
    // 131CE 0041;	
    // (𓇎) EGYPTIAN HIEROGLYPH M019	[5218 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131CE, 0x0041 };
    uint32_t const ces[9] = { 0x5218, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_088)
{
    // 131CE 0062;	
    // (𓇎) EGYPTIAN HIEROGLYPH M019	[5218 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CE, 0x0062 };
    uint32_t const ces[9] = { 0x5218, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_089)
{
    // 131CF 0021;	
    // (𓇏) EGYPTIAN HIEROGLYPH M020	[5219 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CF, 0x0021 };
    uint32_t const ces[9] = { 0x5219, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_090)
{
    // 131CF 003F;	
    // (𓇏) EGYPTIAN HIEROGLYPH M020	[5219 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CF, 0x003F };
    uint32_t const ces[9] = { 0x5219, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_091)
{
    // 131CF 0061;	
    // (𓇏) EGYPTIAN HIEROGLYPH M020	[5219 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CF, 0x0061 };
    uint32_t const ces[9] = { 0x5219, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_092)
{
    // 131CF 0041;	
    // (𓇏) EGYPTIAN HIEROGLYPH M020	[5219 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131CF, 0x0041 };
    uint32_t const ces[9] = { 0x5219, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_093)
{
    // 131CF 0062;	
    // (𓇏) EGYPTIAN HIEROGLYPH M020	[5219 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131CF, 0x0062 };
    uint32_t const ces[9] = { 0x5219, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_094)
{
    // 131D0 0021;	
    // (𓇐) EGYPTIAN HIEROGLYPH M021	[521A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D0, 0x0021 };
    uint32_t const ces[9] = { 0x521A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_095)
{
    // 131D0 003F;	
    // (𓇐) EGYPTIAN HIEROGLYPH M021	[521A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D0, 0x003F };
    uint32_t const ces[9] = { 0x521A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_096)
{
    // 131D0 0061;	
    // (𓇐) EGYPTIAN HIEROGLYPH M021	[521A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D0, 0x0061 };
    uint32_t const ces[9] = { 0x521A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_097)
{
    // 131D0 0041;	
    // (𓇐) EGYPTIAN HIEROGLYPH M021	[521A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131D0, 0x0041 };
    uint32_t const ces[9] = { 0x521A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_098)
{
    // 131D0 0062;	
    // (𓇐) EGYPTIAN HIEROGLYPH M021	[521A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D0, 0x0062 };
    uint32_t const ces[9] = { 0x521A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_099)
{
    // 131D1 0021;	
    // (𓇑) EGYPTIAN HIEROGLYPH M022	[521B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D1, 0x0021 };
    uint32_t const ces[9] = { 0x521B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_100)
{
    // 131D1 003F;	
    // (𓇑) EGYPTIAN HIEROGLYPH M022	[521B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D1, 0x003F };
    uint32_t const ces[9] = { 0x521B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_101)
{
    // 131D1 0061;	
    // (𓇑) EGYPTIAN HIEROGLYPH M022	[521B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D1, 0x0061 };
    uint32_t const ces[9] = { 0x521B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_102)
{
    // 131D1 0041;	
    // (𓇑) EGYPTIAN HIEROGLYPH M022	[521B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131D1, 0x0041 };
    uint32_t const ces[9] = { 0x521B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_103)
{
    // 131D1 0062;	
    // (𓇑) EGYPTIAN HIEROGLYPH M022	[521B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D1, 0x0062 };
    uint32_t const ces[9] = { 0x521B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_104)
{
    // 131D2 0021;	
    // (𓇒) EGYPTIAN HIEROGLYPH M022A	[521C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D2, 0x0021 };
    uint32_t const ces[9] = { 0x521C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_105)
{
    // 131D2 003F;	
    // (𓇒) EGYPTIAN HIEROGLYPH M022A	[521C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D2, 0x003F };
    uint32_t const ces[9] = { 0x521C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_106)
{
    // 131D2 0061;	
    // (𓇒) EGYPTIAN HIEROGLYPH M022A	[521C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D2, 0x0061 };
    uint32_t const ces[9] = { 0x521C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_107)
{
    // 131D2 0041;	
    // (𓇒) EGYPTIAN HIEROGLYPH M022A	[521C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131D2, 0x0041 };
    uint32_t const ces[9] = { 0x521C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_108)
{
    // 131D2 0062;	
    // (𓇒) EGYPTIAN HIEROGLYPH M022A	[521C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D2, 0x0062 };
    uint32_t const ces[9] = { 0x521C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_109)
{
    // 131D3 0021;	
    // (𓇓) EGYPTIAN HIEROGLYPH M023	[521D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D3, 0x0021 };
    uint32_t const ces[9] = { 0x521D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_110)
{
    // 131D3 003F;	
    // (𓇓) EGYPTIAN HIEROGLYPH M023	[521D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D3, 0x003F };
    uint32_t const ces[9] = { 0x521D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_111)
{
    // 131D3 0061;	
    // (𓇓) EGYPTIAN HIEROGLYPH M023	[521D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D3, 0x0061 };
    uint32_t const ces[9] = { 0x521D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_112)
{
    // 131D3 0041;	
    // (𓇓) EGYPTIAN HIEROGLYPH M023	[521D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131D3, 0x0041 };
    uint32_t const ces[9] = { 0x521D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_113)
{
    // 131D3 0062;	
    // (𓇓) EGYPTIAN HIEROGLYPH M023	[521D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D3, 0x0062 };
    uint32_t const ces[9] = { 0x521D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_114)
{
    // 131D4 0021;	
    // (𓇔) EGYPTIAN HIEROGLYPH M024	[521E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D4, 0x0021 };
    uint32_t const ces[9] = { 0x521E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_115)
{
    // 131D4 003F;	
    // (𓇔) EGYPTIAN HIEROGLYPH M024	[521E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D4, 0x003F };
    uint32_t const ces[9] = { 0x521E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_116)
{
    // 131D4 0061;	
    // (𓇔) EGYPTIAN HIEROGLYPH M024	[521E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D4, 0x0061 };
    uint32_t const ces[9] = { 0x521E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_117)
{
    // 131D4 0041;	
    // (𓇔) EGYPTIAN HIEROGLYPH M024	[521E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131D4, 0x0041 };
    uint32_t const ces[9] = { 0x521E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_118)
{
    // 131D4 0062;	
    // (𓇔) EGYPTIAN HIEROGLYPH M024	[521E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D4, 0x0062 };
    uint32_t const ces[9] = { 0x521E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_119)
{
    // 131D5 0021;	
    // (𓇕) EGYPTIAN HIEROGLYPH M024A	[521F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D5, 0x0021 };
    uint32_t const ces[9] = { 0x521F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_120)
{
    // 131D5 003F;	
    // (𓇕) EGYPTIAN HIEROGLYPH M024A	[521F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D5, 0x003F };
    uint32_t const ces[9] = { 0x521F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_121)
{
    // 131D5 0061;	
    // (𓇕) EGYPTIAN HIEROGLYPH M024A	[521F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D5, 0x0061 };
    uint32_t const ces[9] = { 0x521F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_122)
{
    // 131D5 0041;	
    // (𓇕) EGYPTIAN HIEROGLYPH M024A	[521F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131D5, 0x0041 };
    uint32_t const ces[9] = { 0x521F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_123)
{
    // 131D5 0062;	
    // (𓇕) EGYPTIAN HIEROGLYPH M024A	[521F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D5, 0x0062 };
    uint32_t const ces[9] = { 0x521F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_124)
{
    // 131D6 0021;	
    // (𓇖) EGYPTIAN HIEROGLYPH M025	[5220 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D6, 0x0021 };
    uint32_t const ces[9] = { 0x5220, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_125)
{
    // 131D6 003F;	
    // (𓇖) EGYPTIAN HIEROGLYPH M025	[5220 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D6, 0x003F };
    uint32_t const ces[9] = { 0x5220, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_126)
{
    // 131D6 0061;	
    // (𓇖) EGYPTIAN HIEROGLYPH M025	[5220 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D6, 0x0061 };
    uint32_t const ces[9] = { 0x5220, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_127)
{
    // 131D6 0041;	
    // (𓇖) EGYPTIAN HIEROGLYPH M025	[5220 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131D6, 0x0041 };
    uint32_t const ces[9] = { 0x5220, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_128)
{
    // 131D6 0062;	
    // (𓇖) EGYPTIAN HIEROGLYPH M025	[5220 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D6, 0x0062 };
    uint32_t const ces[9] = { 0x5220, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_129)
{
    // 131D7 0021;	
    // (𓇗) EGYPTIAN HIEROGLYPH M026	[5221 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D7, 0x0021 };
    uint32_t const ces[9] = { 0x5221, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_130)
{
    // 131D7 003F;	
    // (𓇗) EGYPTIAN HIEROGLYPH M026	[5221 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D7, 0x003F };
    uint32_t const ces[9] = { 0x5221, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_131)
{
    // 131D7 0061;	
    // (𓇗) EGYPTIAN HIEROGLYPH M026	[5221 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D7, 0x0061 };
    uint32_t const ces[9] = { 0x5221, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_132)
{
    // 131D7 0041;	
    // (𓇗) EGYPTIAN HIEROGLYPH M026	[5221 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131D7, 0x0041 };
    uint32_t const ces[9] = { 0x5221, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_133)
{
    // 131D7 0062;	
    // (𓇗) EGYPTIAN HIEROGLYPH M026	[5221 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D7, 0x0062 };
    uint32_t const ces[9] = { 0x5221, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_134)
{
    // 131D8 0021;	
    // (𓇘) EGYPTIAN HIEROGLYPH M027	[5222 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D8, 0x0021 };
    uint32_t const ces[9] = { 0x5222, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_135)
{
    // 131D8 003F;	
    // (𓇘) EGYPTIAN HIEROGLYPH M027	[5222 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D8, 0x003F };
    uint32_t const ces[9] = { 0x5222, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_136)
{
    // 131D8 0061;	
    // (𓇘) EGYPTIAN HIEROGLYPH M027	[5222 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D8, 0x0061 };
    uint32_t const ces[9] = { 0x5222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_137)
{
    // 131D8 0041;	
    // (𓇘) EGYPTIAN HIEROGLYPH M027	[5222 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131D8, 0x0041 };
    uint32_t const ces[9] = { 0x5222, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_138)
{
    // 131D8 0062;	
    // (𓇘) EGYPTIAN HIEROGLYPH M027	[5222 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D8, 0x0062 };
    uint32_t const ces[9] = { 0x5222, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_139)
{
    // 131D9 0021;	
    // (𓇙) EGYPTIAN HIEROGLYPH M028	[5223 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D9, 0x0021 };
    uint32_t const ces[9] = { 0x5223, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_140)
{
    // 131D9 003F;	
    // (𓇙) EGYPTIAN HIEROGLYPH M028	[5223 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D9, 0x003F };
    uint32_t const ces[9] = { 0x5223, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_141)
{
    // 131D9 0061;	
    // (𓇙) EGYPTIAN HIEROGLYPH M028	[5223 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D9, 0x0061 };
    uint32_t const ces[9] = { 0x5223, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_142)
{
    // 131D9 0041;	
    // (𓇙) EGYPTIAN HIEROGLYPH M028	[5223 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131D9, 0x0041 };
    uint32_t const ces[9] = { 0x5223, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_143)
{
    // 131D9 0062;	
    // (𓇙) EGYPTIAN HIEROGLYPH M028	[5223 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131D9, 0x0062 };
    uint32_t const ces[9] = { 0x5223, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_144)
{
    // 131DA 0021;	
    // (𓇚) EGYPTIAN HIEROGLYPH M028A	[5224 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DA, 0x0021 };
    uint32_t const ces[9] = { 0x5224, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_145)
{
    // 131DA 003F;	
    // (𓇚) EGYPTIAN HIEROGLYPH M028A	[5224 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DA, 0x003F };
    uint32_t const ces[9] = { 0x5224, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_146)
{
    // 131DA 0061;	
    // (𓇚) EGYPTIAN HIEROGLYPH M028A	[5224 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DA, 0x0061 };
    uint32_t const ces[9] = { 0x5224, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_147)
{
    // 131DA 0041;	
    // (𓇚) EGYPTIAN HIEROGLYPH M028A	[5224 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131DA, 0x0041 };
    uint32_t const ces[9] = { 0x5224, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_148)
{
    // 131DA 0062;	
    // (𓇚) EGYPTIAN HIEROGLYPH M028A	[5224 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DA, 0x0062 };
    uint32_t const ces[9] = { 0x5224, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_149)
{
    // 131DB 0021;	
    // (𓇛) EGYPTIAN HIEROGLYPH M029	[5225 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DB, 0x0021 };
    uint32_t const ces[9] = { 0x5225, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_150)
{
    // 131DB 003F;	
    // (𓇛) EGYPTIAN HIEROGLYPH M029	[5225 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DB, 0x003F };
    uint32_t const ces[9] = { 0x5225, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_151)
{
    // 131DB 0061;	
    // (𓇛) EGYPTIAN HIEROGLYPH M029	[5225 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DB, 0x0061 };
    uint32_t const ces[9] = { 0x5225, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_152)
{
    // 131DB 0041;	
    // (𓇛) EGYPTIAN HIEROGLYPH M029	[5225 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131DB, 0x0041 };
    uint32_t const ces[9] = { 0x5225, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_153)
{
    // 131DB 0062;	
    // (𓇛) EGYPTIAN HIEROGLYPH M029	[5225 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DB, 0x0062 };
    uint32_t const ces[9] = { 0x5225, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_154)
{
    // 131DC 0021;	
    // (𓇜) EGYPTIAN HIEROGLYPH M030	[5226 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DC, 0x0021 };
    uint32_t const ces[9] = { 0x5226, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_155)
{
    // 131DC 003F;	
    // (𓇜) EGYPTIAN HIEROGLYPH M030	[5226 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DC, 0x003F };
    uint32_t const ces[9] = { 0x5226, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_156)
{
    // 131DC 0061;	
    // (𓇜) EGYPTIAN HIEROGLYPH M030	[5226 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DC, 0x0061 };
    uint32_t const ces[9] = { 0x5226, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_157)
{
    // 131DC 0041;	
    // (𓇜) EGYPTIAN HIEROGLYPH M030	[5226 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131DC, 0x0041 };
    uint32_t const ces[9] = { 0x5226, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_158)
{
    // 131DC 0062;	
    // (𓇜) EGYPTIAN HIEROGLYPH M030	[5226 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DC, 0x0062 };
    uint32_t const ces[9] = { 0x5226, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_159)
{
    // 131DD 0021;	
    // (𓇝) EGYPTIAN HIEROGLYPH M031	[5227 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DD, 0x0021 };
    uint32_t const ces[9] = { 0x5227, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_160)
{
    // 131DD 003F;	
    // (𓇝) EGYPTIAN HIEROGLYPH M031	[5227 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DD, 0x003F };
    uint32_t const ces[9] = { 0x5227, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_161)
{
    // 131DD 0061;	
    // (𓇝) EGYPTIAN HIEROGLYPH M031	[5227 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DD, 0x0061 };
    uint32_t const ces[9] = { 0x5227, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_162)
{
    // 131DD 0041;	
    // (𓇝) EGYPTIAN HIEROGLYPH M031	[5227 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131DD, 0x0041 };
    uint32_t const ces[9] = { 0x5227, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_163)
{
    // 131DD 0062;	
    // (𓇝) EGYPTIAN HIEROGLYPH M031	[5227 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DD, 0x0062 };
    uint32_t const ces[9] = { 0x5227, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_164)
{
    // 131DE 0021;	
    // (𓇞) EGYPTIAN HIEROGLYPH M031A	[5228 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DE, 0x0021 };
    uint32_t const ces[9] = { 0x5228, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_165)
{
    // 131DE 003F;	
    // (𓇞) EGYPTIAN HIEROGLYPH M031A	[5228 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DE, 0x003F };
    uint32_t const ces[9] = { 0x5228, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_166)
{
    // 131DE 0061;	
    // (𓇞) EGYPTIAN HIEROGLYPH M031A	[5228 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DE, 0x0061 };
    uint32_t const ces[9] = { 0x5228, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_167)
{
    // 131DE 0041;	
    // (𓇞) EGYPTIAN HIEROGLYPH M031A	[5228 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131DE, 0x0041 };
    uint32_t const ces[9] = { 0x5228, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_168)
{
    // 131DE 0062;	
    // (𓇞) EGYPTIAN HIEROGLYPH M031A	[5228 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DE, 0x0062 };
    uint32_t const ces[9] = { 0x5228, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_169)
{
    // 131DF 0021;	
    // (𓇟) EGYPTIAN HIEROGLYPH M032	[5229 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DF, 0x0021 };
    uint32_t const ces[9] = { 0x5229, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_170)
{
    // 131DF 003F;	
    // (𓇟) EGYPTIAN HIEROGLYPH M032	[5229 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DF, 0x003F };
    uint32_t const ces[9] = { 0x5229, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_171)
{
    // 131DF 0061;	
    // (𓇟) EGYPTIAN HIEROGLYPH M032	[5229 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DF, 0x0061 };
    uint32_t const ces[9] = { 0x5229, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_172)
{
    // 131DF 0041;	
    // (𓇟) EGYPTIAN HIEROGLYPH M032	[5229 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131DF, 0x0041 };
    uint32_t const ces[9] = { 0x5229, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_173)
{
    // 131DF 0062;	
    // (𓇟) EGYPTIAN HIEROGLYPH M032	[5229 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131DF, 0x0062 };
    uint32_t const ces[9] = { 0x5229, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_174)
{
    // 131E0 0021;	
    // (𓇠) EGYPTIAN HIEROGLYPH M033	[522A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E0, 0x0021 };
    uint32_t const ces[9] = { 0x522A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_175)
{
    // 131E0 003F;	
    // (𓇠) EGYPTIAN HIEROGLYPH M033	[522A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E0, 0x003F };
    uint32_t const ces[9] = { 0x522A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_176)
{
    // 131E0 0061;	
    // (𓇠) EGYPTIAN HIEROGLYPH M033	[522A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E0, 0x0061 };
    uint32_t const ces[9] = { 0x522A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_177)
{
    // 131E0 0041;	
    // (𓇠) EGYPTIAN HIEROGLYPH M033	[522A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131E0, 0x0041 };
    uint32_t const ces[9] = { 0x522A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_178)
{
    // 131E0 0062;	
    // (𓇠) EGYPTIAN HIEROGLYPH M033	[522A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E0, 0x0062 };
    uint32_t const ces[9] = { 0x522A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_179)
{
    // 131E1 0021;	
    // (𓇡) EGYPTIAN HIEROGLYPH M033A	[522B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E1, 0x0021 };
    uint32_t const ces[9] = { 0x522B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_180)
{
    // 131E1 003F;	
    // (𓇡) EGYPTIAN HIEROGLYPH M033A	[522B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E1, 0x003F };
    uint32_t const ces[9] = { 0x522B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_181)
{
    // 131E1 0061;	
    // (𓇡) EGYPTIAN HIEROGLYPH M033A	[522B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E1, 0x0061 };
    uint32_t const ces[9] = { 0x522B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_182)
{
    // 131E1 0041;	
    // (𓇡) EGYPTIAN HIEROGLYPH M033A	[522B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131E1, 0x0041 };
    uint32_t const ces[9] = { 0x522B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_183)
{
    // 131E1 0062;	
    // (𓇡) EGYPTIAN HIEROGLYPH M033A	[522B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E1, 0x0062 };
    uint32_t const ces[9] = { 0x522B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_184)
{
    // 131E2 0021;	
    // (𓇢) EGYPTIAN HIEROGLYPH M033B	[522C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E2, 0x0021 };
    uint32_t const ces[9] = { 0x522C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_185)
{
    // 131E2 003F;	
    // (𓇢) EGYPTIAN HIEROGLYPH M033B	[522C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E2, 0x003F };
    uint32_t const ces[9] = { 0x522C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_186)
{
    // 131E2 0061;	
    // (𓇢) EGYPTIAN HIEROGLYPH M033B	[522C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E2, 0x0061 };
    uint32_t const ces[9] = { 0x522C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_187)
{
    // 131E2 0041;	
    // (𓇢) EGYPTIAN HIEROGLYPH M033B	[522C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131E2, 0x0041 };
    uint32_t const ces[9] = { 0x522C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_188)
{
    // 131E2 0062;	
    // (𓇢) EGYPTIAN HIEROGLYPH M033B	[522C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E2, 0x0062 };
    uint32_t const ces[9] = { 0x522C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_189)
{
    // 131E3 0021;	
    // (𓇣) EGYPTIAN HIEROGLYPH M034	[522D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E3, 0x0021 };
    uint32_t const ces[9] = { 0x522D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_190)
{
    // 131E3 003F;	
    // (𓇣) EGYPTIAN HIEROGLYPH M034	[522D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E3, 0x003F };
    uint32_t const ces[9] = { 0x522D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_191)
{
    // 131E3 0061;	
    // (𓇣) EGYPTIAN HIEROGLYPH M034	[522D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E3, 0x0061 };
    uint32_t const ces[9] = { 0x522D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_192)
{
    // 131E3 0041;	
    // (𓇣) EGYPTIAN HIEROGLYPH M034	[522D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131E3, 0x0041 };
    uint32_t const ces[9] = { 0x522D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_193)
{
    // 131E3 0062;	
    // (𓇣) EGYPTIAN HIEROGLYPH M034	[522D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E3, 0x0062 };
    uint32_t const ces[9] = { 0x522D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_194)
{
    // 131E4 0021;	
    // (𓇤) EGYPTIAN HIEROGLYPH M035	[522E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E4, 0x0021 };
    uint32_t const ces[9] = { 0x522E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_195)
{
    // 131E4 003F;	
    // (𓇤) EGYPTIAN HIEROGLYPH M035	[522E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E4, 0x003F };
    uint32_t const ces[9] = { 0x522E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_196)
{
    // 131E4 0061;	
    // (𓇤) EGYPTIAN HIEROGLYPH M035	[522E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E4, 0x0061 };
    uint32_t const ces[9] = { 0x522E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_197)
{
    // 131E4 0041;	
    // (𓇤) EGYPTIAN HIEROGLYPH M035	[522E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131E4, 0x0041 };
    uint32_t const ces[9] = { 0x522E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_198)
{
    // 131E4 0062;	
    // (𓇤) EGYPTIAN HIEROGLYPH M035	[522E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E4, 0x0062 };
    uint32_t const ces[9] = { 0x522E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_199)
{
    // 131E5 0021;	
    // (𓇥) EGYPTIAN HIEROGLYPH M036	[522F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E5, 0x0021 };
    uint32_t const ces[9] = { 0x522F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_200)
{
    // 131E5 003F;	
    // (𓇥) EGYPTIAN HIEROGLYPH M036	[522F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E5, 0x003F };
    uint32_t const ces[9] = { 0x522F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_201)
{
    // 131E5 0061;	
    // (𓇥) EGYPTIAN HIEROGLYPH M036	[522F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E5, 0x0061 };
    uint32_t const ces[9] = { 0x522F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_202)
{
    // 131E5 0041;	
    // (𓇥) EGYPTIAN HIEROGLYPH M036	[522F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131E5, 0x0041 };
    uint32_t const ces[9] = { 0x522F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_203)
{
    // 131E5 0062;	
    // (𓇥) EGYPTIAN HIEROGLYPH M036	[522F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E5, 0x0062 };
    uint32_t const ces[9] = { 0x522F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_204)
{
    // 131E6 0021;	
    // (𓇦) EGYPTIAN HIEROGLYPH M037	[5230 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E6, 0x0021 };
    uint32_t const ces[9] = { 0x5230, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_205)
{
    // 131E6 003F;	
    // (𓇦) EGYPTIAN HIEROGLYPH M037	[5230 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E6, 0x003F };
    uint32_t const ces[9] = { 0x5230, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_206)
{
    // 131E6 0061;	
    // (𓇦) EGYPTIAN HIEROGLYPH M037	[5230 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E6, 0x0061 };
    uint32_t const ces[9] = { 0x5230, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_207)
{
    // 131E6 0041;	
    // (𓇦) EGYPTIAN HIEROGLYPH M037	[5230 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131E6, 0x0041 };
    uint32_t const ces[9] = { 0x5230, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_208)
{
    // 131E6 0062;	
    // (𓇦) EGYPTIAN HIEROGLYPH M037	[5230 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E6, 0x0062 };
    uint32_t const ces[9] = { 0x5230, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_209)
{
    // 131E7 0021;	
    // (𓇧) EGYPTIAN HIEROGLYPH M038	[5231 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E7, 0x0021 };
    uint32_t const ces[9] = { 0x5231, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_210)
{
    // 131E7 003F;	
    // (𓇧) EGYPTIAN HIEROGLYPH M038	[5231 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E7, 0x003F };
    uint32_t const ces[9] = { 0x5231, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_211)
{
    // 131E7 0061;	
    // (𓇧) EGYPTIAN HIEROGLYPH M038	[5231 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E7, 0x0061 };
    uint32_t const ces[9] = { 0x5231, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_212)
{
    // 131E7 0041;	
    // (𓇧) EGYPTIAN HIEROGLYPH M038	[5231 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131E7, 0x0041 };
    uint32_t const ces[9] = { 0x5231, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_213)
{
    // 131E7 0062;	
    // (𓇧) EGYPTIAN HIEROGLYPH M038	[5231 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E7, 0x0062 };
    uint32_t const ces[9] = { 0x5231, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_214)
{
    // 131E8 0021;	
    // (𓇨) EGYPTIAN HIEROGLYPH M039	[5232 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E8, 0x0021 };
    uint32_t const ces[9] = { 0x5232, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_215)
{
    // 131E8 003F;	
    // (𓇨) EGYPTIAN HIEROGLYPH M039	[5232 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E8, 0x003F };
    uint32_t const ces[9] = { 0x5232, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_216)
{
    // 131E8 0061;	
    // (𓇨) EGYPTIAN HIEROGLYPH M039	[5232 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E8, 0x0061 };
    uint32_t const ces[9] = { 0x5232, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_217)
{
    // 131E8 0041;	
    // (𓇨) EGYPTIAN HIEROGLYPH M039	[5232 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131E8, 0x0041 };
    uint32_t const ces[9] = { 0x5232, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_218)
{
    // 131E8 0062;	
    // (𓇨) EGYPTIAN HIEROGLYPH M039	[5232 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E8, 0x0062 };
    uint32_t const ces[9] = { 0x5232, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_219)
{
    // 131E9 0021;	
    // (𓇩) EGYPTIAN HIEROGLYPH M040	[5233 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E9, 0x0021 };
    uint32_t const ces[9] = { 0x5233, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_220)
{
    // 131E9 003F;	
    // (𓇩) EGYPTIAN HIEROGLYPH M040	[5233 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E9, 0x003F };
    uint32_t const ces[9] = { 0x5233, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_221)
{
    // 131E9 0061;	
    // (𓇩) EGYPTIAN HIEROGLYPH M040	[5233 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E9, 0x0061 };
    uint32_t const ces[9] = { 0x5233, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_222)
{
    // 131E9 0041;	
    // (𓇩) EGYPTIAN HIEROGLYPH M040	[5233 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131E9, 0x0041 };
    uint32_t const ces[9] = { 0x5233, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_223)
{
    // 131E9 0062;	
    // (𓇩) EGYPTIAN HIEROGLYPH M040	[5233 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131E9, 0x0062 };
    uint32_t const ces[9] = { 0x5233, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_224)
{
    // 131EA 0021;	
    // (𓇪) EGYPTIAN HIEROGLYPH M040A	[5234 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131EA, 0x0021 };
    uint32_t const ces[9] = { 0x5234, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_225)
{
    // 131EA 003F;	
    // (𓇪) EGYPTIAN HIEROGLYPH M040A	[5234 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131EA, 0x003F };
    uint32_t const ces[9] = { 0x5234, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_226)
{
    // 131EA 0061;	
    // (𓇪) EGYPTIAN HIEROGLYPH M040A	[5234 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131EA, 0x0061 };
    uint32_t const ces[9] = { 0x5234, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_227)
{
    // 131EA 0041;	
    // (𓇪) EGYPTIAN HIEROGLYPH M040A	[5234 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131EA, 0x0041 };
    uint32_t const ces[9] = { 0x5234, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_228)
{
    // 131EA 0062;	
    // (𓇪) EGYPTIAN HIEROGLYPH M040A	[5234 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131EA, 0x0062 };
    uint32_t const ces[9] = { 0x5234, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_229)
{
    // 131EB 0021;	
    // (𓇫) EGYPTIAN HIEROGLYPH M041	[5235 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131EB, 0x0021 };
    uint32_t const ces[9] = { 0x5235, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_230)
{
    // 131EB 003F;	
    // (𓇫) EGYPTIAN HIEROGLYPH M041	[5235 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131EB, 0x003F };
    uint32_t const ces[9] = { 0x5235, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_231)
{
    // 131EB 0061;	
    // (𓇫) EGYPTIAN HIEROGLYPH M041	[5235 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131EB, 0x0061 };
    uint32_t const ces[9] = { 0x5235, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_232)
{
    // 131EB 0041;	
    // (𓇫) EGYPTIAN HIEROGLYPH M041	[5235 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131EB, 0x0041 };
    uint32_t const ces[9] = { 0x5235, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_233)
{
    // 131EB 0062;	
    // (𓇫) EGYPTIAN HIEROGLYPH M041	[5235 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131EB, 0x0062 };
    uint32_t const ces[9] = { 0x5235, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_234)
{
    // 131EC 0021;	
    // (𓇬) EGYPTIAN HIEROGLYPH M042	[5236 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131EC, 0x0021 };
    uint32_t const ces[9] = { 0x5236, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_235)
{
    // 131EC 003F;	
    // (𓇬) EGYPTIAN HIEROGLYPH M042	[5236 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131EC, 0x003F };
    uint32_t const ces[9] = { 0x5236, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_236)
{
    // 131EC 0061;	
    // (𓇬) EGYPTIAN HIEROGLYPH M042	[5236 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131EC, 0x0061 };
    uint32_t const ces[9] = { 0x5236, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_237)
{
    // 131EC 0041;	
    // (𓇬) EGYPTIAN HIEROGLYPH M042	[5236 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131EC, 0x0041 };
    uint32_t const ces[9] = { 0x5236, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_238)
{
    // 131EC 0062;	
    // (𓇬) EGYPTIAN HIEROGLYPH M042	[5236 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131EC, 0x0062 };
    uint32_t const ces[9] = { 0x5236, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_239)
{
    // 131ED 0021;	
    // (𓇭) EGYPTIAN HIEROGLYPH M043	[5237 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131ED, 0x0021 };
    uint32_t const ces[9] = { 0x5237, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_240)
{
    // 131ED 003F;	
    // (𓇭) EGYPTIAN HIEROGLYPH M043	[5237 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131ED, 0x003F };
    uint32_t const ces[9] = { 0x5237, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_241)
{
    // 131ED 0061;	
    // (𓇭) EGYPTIAN HIEROGLYPH M043	[5237 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131ED, 0x0061 };
    uint32_t const ces[9] = { 0x5237, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_242)
{
    // 131ED 0041;	
    // (𓇭) EGYPTIAN HIEROGLYPH M043	[5237 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131ED, 0x0041 };
    uint32_t const ces[9] = { 0x5237, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_243)
{
    // 131ED 0062;	
    // (𓇭) EGYPTIAN HIEROGLYPH M043	[5237 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131ED, 0x0062 };
    uint32_t const ces[9] = { 0x5237, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_244)
{
    // 131EE 0021;	
    // (𓇮) EGYPTIAN HIEROGLYPH M044	[5238 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131EE, 0x0021 };
    uint32_t const ces[9] = { 0x5238, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_245)
{
    // 131EE 003F;	
    // (𓇮) EGYPTIAN HIEROGLYPH M044	[5238 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131EE, 0x003F };
    uint32_t const ces[9] = { 0x5238, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_246)
{
    // 131EE 0061;	
    // (𓇮) EGYPTIAN HIEROGLYPH M044	[5238 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131EE, 0x0061 };
    uint32_t const ces[9] = { 0x5238, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_247)
{
    // 131EE 0041;	
    // (𓇮) EGYPTIAN HIEROGLYPH M044	[5238 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131EE, 0x0041 };
    uint32_t const ces[9] = { 0x5238, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_248)
{
    // 131EE 0062;	
    // (𓇮) EGYPTIAN HIEROGLYPH M044	[5238 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131EE, 0x0062 };
    uint32_t const ces[9] = { 0x5238, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_249)
{
    // 131EF 0021;	
    // (𓇯) EGYPTIAN HIEROGLYPH N001	[5239 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131EF, 0x0021 };
    uint32_t const ces[9] = { 0x5239, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_250)
{
    // 131EF 003F;	
    // (𓇯) EGYPTIAN HIEROGLYPH N001	[5239 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131EF, 0x003F };
    uint32_t const ces[9] = { 0x5239, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_251)
{
    // 131EF 0061;	
    // (𓇯) EGYPTIAN HIEROGLYPH N001	[5239 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131EF, 0x0061 };
    uint32_t const ces[9] = { 0x5239, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_252)
{
    // 131EF 0041;	
    // (𓇯) EGYPTIAN HIEROGLYPH N001	[5239 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131EF, 0x0041 };
    uint32_t const ces[9] = { 0x5239, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_253)
{
    // 131EF 0062;	
    // (𓇯) EGYPTIAN HIEROGLYPH N001	[5239 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131EF, 0x0062 };
    uint32_t const ces[9] = { 0x5239, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_254)
{
    // 131F0 0021;	
    // (𓇰) EGYPTIAN HIEROGLYPH N002	[523A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F0, 0x0021 };
    uint32_t const ces[9] = { 0x523A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_255)
{
    // 131F0 003F;	
    // (𓇰) EGYPTIAN HIEROGLYPH N002	[523A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F0, 0x003F };
    uint32_t const ces[9] = { 0x523A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_256)
{
    // 131F0 0061;	
    // (𓇰) EGYPTIAN HIEROGLYPH N002	[523A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F0, 0x0061 };
    uint32_t const ces[9] = { 0x523A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_257)
{
    // 131F0 0041;	
    // (𓇰) EGYPTIAN HIEROGLYPH N002	[523A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131F0, 0x0041 };
    uint32_t const ces[9] = { 0x523A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_258)
{
    // 131F0 0062;	
    // (𓇰) EGYPTIAN HIEROGLYPH N002	[523A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F0, 0x0062 };
    uint32_t const ces[9] = { 0x523A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_259)
{
    // 131F1 0021;	
    // (𓇱) EGYPTIAN HIEROGLYPH N003	[523B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F1, 0x0021 };
    uint32_t const ces[9] = { 0x523B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_260)
{
    // 131F1 003F;	
    // (𓇱) EGYPTIAN HIEROGLYPH N003	[523B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F1, 0x003F };
    uint32_t const ces[9] = { 0x523B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_261)
{
    // 131F1 0061;	
    // (𓇱) EGYPTIAN HIEROGLYPH N003	[523B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F1, 0x0061 };
    uint32_t const ces[9] = { 0x523B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_262)
{
    // 131F1 0041;	
    // (𓇱) EGYPTIAN HIEROGLYPH N003	[523B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131F1, 0x0041 };
    uint32_t const ces[9] = { 0x523B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_263)
{
    // 131F1 0062;	
    // (𓇱) EGYPTIAN HIEROGLYPH N003	[523B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F1, 0x0062 };
    uint32_t const ces[9] = { 0x523B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_264)
{
    // 131F2 0021;	
    // (𓇲) EGYPTIAN HIEROGLYPH N004	[523C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F2, 0x0021 };
    uint32_t const ces[9] = { 0x523C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_265)
{
    // 131F2 003F;	
    // (𓇲) EGYPTIAN HIEROGLYPH N004	[523C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F2, 0x003F };
    uint32_t const ces[9] = { 0x523C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_266)
{
    // 131F2 0061;	
    // (𓇲) EGYPTIAN HIEROGLYPH N004	[523C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F2, 0x0061 };
    uint32_t const ces[9] = { 0x523C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_267)
{
    // 131F2 0041;	
    // (𓇲) EGYPTIAN HIEROGLYPH N004	[523C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131F2, 0x0041 };
    uint32_t const ces[9] = { 0x523C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_268)
{
    // 131F2 0062;	
    // (𓇲) EGYPTIAN HIEROGLYPH N004	[523C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F2, 0x0062 };
    uint32_t const ces[9] = { 0x523C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_269)
{
    // 131F3 0021;	
    // (𓇳) EGYPTIAN HIEROGLYPH N005	[523D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F3, 0x0021 };
    uint32_t const ces[9] = { 0x523D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_270)
{
    // 131F3 003F;	
    // (𓇳) EGYPTIAN HIEROGLYPH N005	[523D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F3, 0x003F };
    uint32_t const ces[9] = { 0x523D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_271)
{
    // 131F3 0061;	
    // (𓇳) EGYPTIAN HIEROGLYPH N005	[523D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F3, 0x0061 };
    uint32_t const ces[9] = { 0x523D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_272)
{
    // 131F3 0041;	
    // (𓇳) EGYPTIAN HIEROGLYPH N005	[523D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131F3, 0x0041 };
    uint32_t const ces[9] = { 0x523D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_273)
{
    // 131F3 0062;	
    // (𓇳) EGYPTIAN HIEROGLYPH N005	[523D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F3, 0x0062 };
    uint32_t const ces[9] = { 0x523D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_274)
{
    // 131F4 0021;	
    // (𓇴) EGYPTIAN HIEROGLYPH N006	[523E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F4, 0x0021 };
    uint32_t const ces[9] = { 0x523E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_275)
{
    // 131F4 003F;	
    // (𓇴) EGYPTIAN HIEROGLYPH N006	[523E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F4, 0x003F };
    uint32_t const ces[9] = { 0x523E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_276)
{
    // 131F4 0061;	
    // (𓇴) EGYPTIAN HIEROGLYPH N006	[523E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F4, 0x0061 };
    uint32_t const ces[9] = { 0x523E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_277)
{
    // 131F4 0041;	
    // (𓇴) EGYPTIAN HIEROGLYPH N006	[523E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131F4, 0x0041 };
    uint32_t const ces[9] = { 0x523E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_278)
{
    // 131F4 0062;	
    // (𓇴) EGYPTIAN HIEROGLYPH N006	[523E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F4, 0x0062 };
    uint32_t const ces[9] = { 0x523E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_279)
{
    // 131F5 0021;	
    // (𓇵) EGYPTIAN HIEROGLYPH N007	[523F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F5, 0x0021 };
    uint32_t const ces[9] = { 0x523F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_280)
{
    // 131F5 003F;	
    // (𓇵) EGYPTIAN HIEROGLYPH N007	[523F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F5, 0x003F };
    uint32_t const ces[9] = { 0x523F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_281)
{
    // 131F5 0061;	
    // (𓇵) EGYPTIAN HIEROGLYPH N007	[523F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F5, 0x0061 };
    uint32_t const ces[9] = { 0x523F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_282)
{
    // 131F5 0041;	
    // (𓇵) EGYPTIAN HIEROGLYPH N007	[523F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131F5, 0x0041 };
    uint32_t const ces[9] = { 0x523F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_283)
{
    // 131F5 0062;	
    // (𓇵) EGYPTIAN HIEROGLYPH N007	[523F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F5, 0x0062 };
    uint32_t const ces[9] = { 0x523F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_284)
{
    // 131F6 0021;	
    // (𓇶) EGYPTIAN HIEROGLYPH N008	[5240 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F6, 0x0021 };
    uint32_t const ces[9] = { 0x5240, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_285)
{
    // 131F6 003F;	
    // (𓇶) EGYPTIAN HIEROGLYPH N008	[5240 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F6, 0x003F };
    uint32_t const ces[9] = { 0x5240, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_286)
{
    // 131F6 0061;	
    // (𓇶) EGYPTIAN HIEROGLYPH N008	[5240 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F6, 0x0061 };
    uint32_t const ces[9] = { 0x5240, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_287)
{
    // 131F6 0041;	
    // (𓇶) EGYPTIAN HIEROGLYPH N008	[5240 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131F6, 0x0041 };
    uint32_t const ces[9] = { 0x5240, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_288)
{
    // 131F6 0062;	
    // (𓇶) EGYPTIAN HIEROGLYPH N008	[5240 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F6, 0x0062 };
    uint32_t const ces[9] = { 0x5240, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_289)
{
    // 131F7 0021;	
    // (𓇷) EGYPTIAN HIEROGLYPH N009	[5241 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F7, 0x0021 };
    uint32_t const ces[9] = { 0x5241, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_290)
{
    // 131F7 003F;	
    // (𓇷) EGYPTIAN HIEROGLYPH N009	[5241 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F7, 0x003F };
    uint32_t const ces[9] = { 0x5241, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_291)
{
    // 131F7 0061;	
    // (𓇷) EGYPTIAN HIEROGLYPH N009	[5241 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F7, 0x0061 };
    uint32_t const ces[9] = { 0x5241, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_292)
{
    // 131F7 0041;	
    // (𓇷) EGYPTIAN HIEROGLYPH N009	[5241 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131F7, 0x0041 };
    uint32_t const ces[9] = { 0x5241, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_293)
{
    // 131F7 0062;	
    // (𓇷) EGYPTIAN HIEROGLYPH N009	[5241 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F7, 0x0062 };
    uint32_t const ces[9] = { 0x5241, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_294)
{
    // 131F8 0021;	
    // (𓇸) EGYPTIAN HIEROGLYPH N010	[5242 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F8, 0x0021 };
    uint32_t const ces[9] = { 0x5242, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_295)
{
    // 131F8 003F;	
    // (𓇸) EGYPTIAN HIEROGLYPH N010	[5242 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F8, 0x003F };
    uint32_t const ces[9] = { 0x5242, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_296)
{
    // 131F8 0061;	
    // (𓇸) EGYPTIAN HIEROGLYPH N010	[5242 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F8, 0x0061 };
    uint32_t const ces[9] = { 0x5242, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_297)
{
    // 131F8 0041;	
    // (𓇸) EGYPTIAN HIEROGLYPH N010	[5242 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131F8, 0x0041 };
    uint32_t const ces[9] = { 0x5242, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_298)
{
    // 131F8 0062;	
    // (𓇸) EGYPTIAN HIEROGLYPH N010	[5242 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F8, 0x0062 };
    uint32_t const ces[9] = { 0x5242, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_299)
{
    // 131F9 0021;	
    // (𓇹) EGYPTIAN HIEROGLYPH N011	[5243 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F9, 0x0021 };
    uint32_t const ces[9] = { 0x5243, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_300)
{
    // 131F9 003F;	
    // (𓇹) EGYPTIAN HIEROGLYPH N011	[5243 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F9, 0x003F };
    uint32_t const ces[9] = { 0x5243, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_301)
{
    // 131F9 0061;	
    // (𓇹) EGYPTIAN HIEROGLYPH N011	[5243 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F9, 0x0061 };
    uint32_t const ces[9] = { 0x5243, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_302)
{
    // 131F9 0041;	
    // (𓇹) EGYPTIAN HIEROGLYPH N011	[5243 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131F9, 0x0041 };
    uint32_t const ces[9] = { 0x5243, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_303)
{
    // 131F9 0062;	
    // (𓇹) EGYPTIAN HIEROGLYPH N011	[5243 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131F9, 0x0062 };
    uint32_t const ces[9] = { 0x5243, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_304)
{
    // 131FA 0021;	
    // (𓇺) EGYPTIAN HIEROGLYPH N012	[5244 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FA, 0x0021 };
    uint32_t const ces[9] = { 0x5244, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_305)
{
    // 131FA 003F;	
    // (𓇺) EGYPTIAN HIEROGLYPH N012	[5244 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FA, 0x003F };
    uint32_t const ces[9] = { 0x5244, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_306)
{
    // 131FA 0061;	
    // (𓇺) EGYPTIAN HIEROGLYPH N012	[5244 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FA, 0x0061 };
    uint32_t const ces[9] = { 0x5244, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_307)
{
    // 131FA 0041;	
    // (𓇺) EGYPTIAN HIEROGLYPH N012	[5244 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131FA, 0x0041 };
    uint32_t const ces[9] = { 0x5244, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_308)
{
    // 131FA 0062;	
    // (𓇺) EGYPTIAN HIEROGLYPH N012	[5244 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FA, 0x0062 };
    uint32_t const ces[9] = { 0x5244, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_309)
{
    // 131FB 0021;	
    // (𓇻) EGYPTIAN HIEROGLYPH N013	[5245 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FB, 0x0021 };
    uint32_t const ces[9] = { 0x5245, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_310)
{
    // 131FB 003F;	
    // (𓇻) EGYPTIAN HIEROGLYPH N013	[5245 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FB, 0x003F };
    uint32_t const ces[9] = { 0x5245, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_311)
{
    // 131FB 0061;	
    // (𓇻) EGYPTIAN HIEROGLYPH N013	[5245 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FB, 0x0061 };
    uint32_t const ces[9] = { 0x5245, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_312)
{
    // 131FB 0041;	
    // (𓇻) EGYPTIAN HIEROGLYPH N013	[5245 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131FB, 0x0041 };
    uint32_t const ces[9] = { 0x5245, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_313)
{
    // 131FB 0062;	
    // (𓇻) EGYPTIAN HIEROGLYPH N013	[5245 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FB, 0x0062 };
    uint32_t const ces[9] = { 0x5245, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_314)
{
    // 131FC 0021;	
    // (𓇼) EGYPTIAN HIEROGLYPH N014	[5246 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FC, 0x0021 };
    uint32_t const ces[9] = { 0x5246, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_315)
{
    // 131FC 003F;	
    // (𓇼) EGYPTIAN HIEROGLYPH N014	[5246 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FC, 0x003F };
    uint32_t const ces[9] = { 0x5246, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_316)
{
    // 131FC 0061;	
    // (𓇼) EGYPTIAN HIEROGLYPH N014	[5246 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FC, 0x0061 };
    uint32_t const ces[9] = { 0x5246, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_317)
{
    // 131FC 0041;	
    // (𓇼) EGYPTIAN HIEROGLYPH N014	[5246 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131FC, 0x0041 };
    uint32_t const ces[9] = { 0x5246, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_318)
{
    // 131FC 0062;	
    // (𓇼) EGYPTIAN HIEROGLYPH N014	[5246 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FC, 0x0062 };
    uint32_t const ces[9] = { 0x5246, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_319)
{
    // 131FD 0021;	
    // (𓇽) EGYPTIAN HIEROGLYPH N015	[5247 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FD, 0x0021 };
    uint32_t const ces[9] = { 0x5247, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_320)
{
    // 131FD 003F;	
    // (𓇽) EGYPTIAN HIEROGLYPH N015	[5247 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FD, 0x003F };
    uint32_t const ces[9] = { 0x5247, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_321)
{
    // 131FD 0061;	
    // (𓇽) EGYPTIAN HIEROGLYPH N015	[5247 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FD, 0x0061 };
    uint32_t const ces[9] = { 0x5247, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_322)
{
    // 131FD 0041;	
    // (𓇽) EGYPTIAN HIEROGLYPH N015	[5247 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131FD, 0x0041 };
    uint32_t const ces[9] = { 0x5247, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_323)
{
    // 131FD 0062;	
    // (𓇽) EGYPTIAN HIEROGLYPH N015	[5247 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FD, 0x0062 };
    uint32_t const ces[9] = { 0x5247, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_324)
{
    // 131FE 0021;	
    // (𓇾) EGYPTIAN HIEROGLYPH N016	[5248 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FE, 0x0021 };
    uint32_t const ces[9] = { 0x5248, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_325)
{
    // 131FE 003F;	
    // (𓇾) EGYPTIAN HIEROGLYPH N016	[5248 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FE, 0x003F };
    uint32_t const ces[9] = { 0x5248, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_326)
{
    // 131FE 0061;	
    // (𓇾) EGYPTIAN HIEROGLYPH N016	[5248 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FE, 0x0061 };
    uint32_t const ces[9] = { 0x5248, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_327)
{
    // 131FE 0041;	
    // (𓇾) EGYPTIAN HIEROGLYPH N016	[5248 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131FE, 0x0041 };
    uint32_t const ces[9] = { 0x5248, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_328)
{
    // 131FE 0062;	
    // (𓇾) EGYPTIAN HIEROGLYPH N016	[5248 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FE, 0x0062 };
    uint32_t const ces[9] = { 0x5248, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_329)
{
    // 131FF 0021;	
    // (𓇿) EGYPTIAN HIEROGLYPH N017	[5249 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FF, 0x0021 };
    uint32_t const ces[9] = { 0x5249, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_330)
{
    // 131FF 003F;	
    // (𓇿) EGYPTIAN HIEROGLYPH N017	[5249 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FF, 0x003F };
    uint32_t const ces[9] = { 0x5249, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_331)
{
    // 131FF 0061;	
    // (𓇿) EGYPTIAN HIEROGLYPH N017	[5249 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FF, 0x0061 };
    uint32_t const ces[9] = { 0x5249, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_332)
{
    // 131FF 0041;	
    // (𓇿) EGYPTIAN HIEROGLYPH N017	[5249 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x131FF, 0x0041 };
    uint32_t const ces[9] = { 0x5249, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_333)
{
    // 131FF 0062;	
    // (𓇿) EGYPTIAN HIEROGLYPH N017	[5249 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x131FF, 0x0062 };
    uint32_t const ces[9] = { 0x5249, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_334)
{
    // 13200 0021;	
    // (𓈀) EGYPTIAN HIEROGLYPH N018	[524A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13200, 0x0021 };
    uint32_t const ces[9] = { 0x524A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_335)
{
    // 13200 003F;	
    // (𓈀) EGYPTIAN HIEROGLYPH N018	[524A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13200, 0x003F };
    uint32_t const ces[9] = { 0x524A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_336)
{
    // 13200 0061;	
    // (𓈀) EGYPTIAN HIEROGLYPH N018	[524A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13200, 0x0061 };
    uint32_t const ces[9] = { 0x524A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_337)
{
    // 13200 0041;	
    // (𓈀) EGYPTIAN HIEROGLYPH N018	[524A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13200, 0x0041 };
    uint32_t const ces[9] = { 0x524A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_338)
{
    // 13200 0062;	
    // (𓈀) EGYPTIAN HIEROGLYPH N018	[524A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13200, 0x0062 };
    uint32_t const ces[9] = { 0x524A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_339)
{
    // 13201 0021;	
    // (𓈁) EGYPTIAN HIEROGLYPH N018A	[524B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13201, 0x0021 };
    uint32_t const ces[9] = { 0x524B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_340)
{
    // 13201 003F;	
    // (𓈁) EGYPTIAN HIEROGLYPH N018A	[524B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13201, 0x003F };
    uint32_t const ces[9] = { 0x524B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_341)
{
    // 13201 0061;	
    // (𓈁) EGYPTIAN HIEROGLYPH N018A	[524B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13201, 0x0061 };
    uint32_t const ces[9] = { 0x524B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_342)
{
    // 13201 0041;	
    // (𓈁) EGYPTIAN HIEROGLYPH N018A	[524B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13201, 0x0041 };
    uint32_t const ces[9] = { 0x524B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_343)
{
    // 13201 0062;	
    // (𓈁) EGYPTIAN HIEROGLYPH N018A	[524B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13201, 0x0062 };
    uint32_t const ces[9] = { 0x524B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_344)
{
    // 13202 0021;	
    // (𓈂) EGYPTIAN HIEROGLYPH N018B	[524C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13202, 0x0021 };
    uint32_t const ces[9] = { 0x524C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_345)
{
    // 13202 003F;	
    // (𓈂) EGYPTIAN HIEROGLYPH N018B	[524C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13202, 0x003F };
    uint32_t const ces[9] = { 0x524C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_346)
{
    // 13202 0061;	
    // (𓈂) EGYPTIAN HIEROGLYPH N018B	[524C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13202, 0x0061 };
    uint32_t const ces[9] = { 0x524C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_347)
{
    // 13202 0041;	
    // (𓈂) EGYPTIAN HIEROGLYPH N018B	[524C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13202, 0x0041 };
    uint32_t const ces[9] = { 0x524C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_348)
{
    // 13202 0062;	
    // (𓈂) EGYPTIAN HIEROGLYPH N018B	[524C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13202, 0x0062 };
    uint32_t const ces[9] = { 0x524C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_349)
{
    // 13203 0021;	
    // (𓈃) EGYPTIAN HIEROGLYPH N019	[524D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13203, 0x0021 };
    uint32_t const ces[9] = { 0x524D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_350)
{
    // 13203 003F;	
    // (𓈃) EGYPTIAN HIEROGLYPH N019	[524D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13203, 0x003F };
    uint32_t const ces[9] = { 0x524D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_351)
{
    // 13203 0061;	
    // (𓈃) EGYPTIAN HIEROGLYPH N019	[524D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13203, 0x0061 };
    uint32_t const ces[9] = { 0x524D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_352)
{
    // 13203 0041;	
    // (𓈃) EGYPTIAN HIEROGLYPH N019	[524D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13203, 0x0041 };
    uint32_t const ces[9] = { 0x524D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_353)
{
    // 13203 0062;	
    // (𓈃) EGYPTIAN HIEROGLYPH N019	[524D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13203, 0x0062 };
    uint32_t const ces[9] = { 0x524D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_354)
{
    // 13204 0021;	
    // (𓈄) EGYPTIAN HIEROGLYPH N020	[524E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13204, 0x0021 };
    uint32_t const ces[9] = { 0x524E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_355)
{
    // 13204 003F;	
    // (𓈄) EGYPTIAN HIEROGLYPH N020	[524E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13204, 0x003F };
    uint32_t const ces[9] = { 0x524E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_356)
{
    // 13204 0061;	
    // (𓈄) EGYPTIAN HIEROGLYPH N020	[524E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13204, 0x0061 };
    uint32_t const ces[9] = { 0x524E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_357)
{
    // 13204 0041;	
    // (𓈄) EGYPTIAN HIEROGLYPH N020	[524E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13204, 0x0041 };
    uint32_t const ces[9] = { 0x524E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_358)
{
    // 13204 0062;	
    // (𓈄) EGYPTIAN HIEROGLYPH N020	[524E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13204, 0x0062 };
    uint32_t const ces[9] = { 0x524E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_359)
{
    // 13205 0021;	
    // (𓈅) EGYPTIAN HIEROGLYPH N021	[524F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13205, 0x0021 };
    uint32_t const ces[9] = { 0x524F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_360)
{
    // 13205 003F;	
    // (𓈅) EGYPTIAN HIEROGLYPH N021	[524F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13205, 0x003F };
    uint32_t const ces[9] = { 0x524F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_361)
{
    // 13205 0061;	
    // (𓈅) EGYPTIAN HIEROGLYPH N021	[524F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13205, 0x0061 };
    uint32_t const ces[9] = { 0x524F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_362)
{
    // 13205 0041;	
    // (𓈅) EGYPTIAN HIEROGLYPH N021	[524F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13205, 0x0041 };
    uint32_t const ces[9] = { 0x524F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_363)
{
    // 13205 0062;	
    // (𓈅) EGYPTIAN HIEROGLYPH N021	[524F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13205, 0x0062 };
    uint32_t const ces[9] = { 0x524F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_364)
{
    // 13206 0021;	
    // (𓈆) EGYPTIAN HIEROGLYPH N022	[5250 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13206, 0x0021 };
    uint32_t const ces[9] = { 0x5250, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_365)
{
    // 13206 003F;	
    // (𓈆) EGYPTIAN HIEROGLYPH N022	[5250 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13206, 0x003F };
    uint32_t const ces[9] = { 0x5250, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_366)
{
    // 13206 0061;	
    // (𓈆) EGYPTIAN HIEROGLYPH N022	[5250 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13206, 0x0061 };
    uint32_t const ces[9] = { 0x5250, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_367)
{
    // 13206 0041;	
    // (𓈆) EGYPTIAN HIEROGLYPH N022	[5250 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13206, 0x0041 };
    uint32_t const ces[9] = { 0x5250, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_368)
{
    // 13206 0062;	
    // (𓈆) EGYPTIAN HIEROGLYPH N022	[5250 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13206, 0x0062 };
    uint32_t const ces[9] = { 0x5250, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_369)
{
    // 13207 0021;	
    // (𓈇) EGYPTIAN HIEROGLYPH N023	[5251 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13207, 0x0021 };
    uint32_t const ces[9] = { 0x5251, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_370)
{
    // 13207 003F;	
    // (𓈇) EGYPTIAN HIEROGLYPH N023	[5251 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13207, 0x003F };
    uint32_t const ces[9] = { 0x5251, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_371)
{
    // 13207 0061;	
    // (𓈇) EGYPTIAN HIEROGLYPH N023	[5251 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13207, 0x0061 };
    uint32_t const ces[9] = { 0x5251, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_372)
{
    // 13207 0041;	
    // (𓈇) EGYPTIAN HIEROGLYPH N023	[5251 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13207, 0x0041 };
    uint32_t const ces[9] = { 0x5251, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_373)
{
    // 13207 0062;	
    // (𓈇) EGYPTIAN HIEROGLYPH N023	[5251 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13207, 0x0062 };
    uint32_t const ces[9] = { 0x5251, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_374)
{
    // 13208 0021;	
    // (𓈈) EGYPTIAN HIEROGLYPH N024	[5252 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13208, 0x0021 };
    uint32_t const ces[9] = { 0x5252, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_375)
{
    // 13208 003F;	
    // (𓈈) EGYPTIAN HIEROGLYPH N024	[5252 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13208, 0x003F };
    uint32_t const ces[9] = { 0x5252, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_376)
{
    // 13208 0061;	
    // (𓈈) EGYPTIAN HIEROGLYPH N024	[5252 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13208, 0x0061 };
    uint32_t const ces[9] = { 0x5252, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_377)
{
    // 13208 0041;	
    // (𓈈) EGYPTIAN HIEROGLYPH N024	[5252 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13208, 0x0041 };
    uint32_t const ces[9] = { 0x5252, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_378)
{
    // 13208 0062;	
    // (𓈈) EGYPTIAN HIEROGLYPH N024	[5252 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13208, 0x0062 };
    uint32_t const ces[9] = { 0x5252, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_379)
{
    // 13209 0021;	
    // (𓈉) EGYPTIAN HIEROGLYPH N025	[5253 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13209, 0x0021 };
    uint32_t const ces[9] = { 0x5253, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_380)
{
    // 13209 003F;	
    // (𓈉) EGYPTIAN HIEROGLYPH N025	[5253 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13209, 0x003F };
    uint32_t const ces[9] = { 0x5253, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_381)
{
    // 13209 0061;	
    // (𓈉) EGYPTIAN HIEROGLYPH N025	[5253 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13209, 0x0061 };
    uint32_t const ces[9] = { 0x5253, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_382)
{
    // 13209 0041;	
    // (𓈉) EGYPTIAN HIEROGLYPH N025	[5253 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13209, 0x0041 };
    uint32_t const ces[9] = { 0x5253, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_383)
{
    // 13209 0062;	
    // (𓈉) EGYPTIAN HIEROGLYPH N025	[5253 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13209, 0x0062 };
    uint32_t const ces[9] = { 0x5253, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_384)
{
    // 1320A 0021;	
    // (𓈊) EGYPTIAN HIEROGLYPH N025A	[5254 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320A, 0x0021 };
    uint32_t const ces[9] = { 0x5254, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_385)
{
    // 1320A 003F;	
    // (𓈊) EGYPTIAN HIEROGLYPH N025A	[5254 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320A, 0x003F };
    uint32_t const ces[9] = { 0x5254, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_386)
{
    // 1320A 0061;	
    // (𓈊) EGYPTIAN HIEROGLYPH N025A	[5254 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320A, 0x0061 };
    uint32_t const ces[9] = { 0x5254, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_387)
{
    // 1320A 0041;	
    // (𓈊) EGYPTIAN HIEROGLYPH N025A	[5254 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1320A, 0x0041 };
    uint32_t const ces[9] = { 0x5254, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_388)
{
    // 1320A 0062;	
    // (𓈊) EGYPTIAN HIEROGLYPH N025A	[5254 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320A, 0x0062 };
    uint32_t const ces[9] = { 0x5254, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_389)
{
    // 1320B 0021;	
    // (𓈋) EGYPTIAN HIEROGLYPH N026	[5255 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320B, 0x0021 };
    uint32_t const ces[9] = { 0x5255, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_390)
{
    // 1320B 003F;	
    // (𓈋) EGYPTIAN HIEROGLYPH N026	[5255 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320B, 0x003F };
    uint32_t const ces[9] = { 0x5255, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_391)
{
    // 1320B 0061;	
    // (𓈋) EGYPTIAN HIEROGLYPH N026	[5255 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320B, 0x0061 };
    uint32_t const ces[9] = { 0x5255, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_392)
{
    // 1320B 0041;	
    // (𓈋) EGYPTIAN HIEROGLYPH N026	[5255 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1320B, 0x0041 };
    uint32_t const ces[9] = { 0x5255, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_393)
{
    // 1320B 0062;	
    // (𓈋) EGYPTIAN HIEROGLYPH N026	[5255 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320B, 0x0062 };
    uint32_t const ces[9] = { 0x5255, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_394)
{
    // 1320C 0021;	
    // (𓈌) EGYPTIAN HIEROGLYPH N027	[5256 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320C, 0x0021 };
    uint32_t const ces[9] = { 0x5256, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_395)
{
    // 1320C 003F;	
    // (𓈌) EGYPTIAN HIEROGLYPH N027	[5256 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320C, 0x003F };
    uint32_t const ces[9] = { 0x5256, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_396)
{
    // 1320C 0061;	
    // (𓈌) EGYPTIAN HIEROGLYPH N027	[5256 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320C, 0x0061 };
    uint32_t const ces[9] = { 0x5256, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_397)
{
    // 1320C 0041;	
    // (𓈌) EGYPTIAN HIEROGLYPH N027	[5256 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1320C, 0x0041 };
    uint32_t const ces[9] = { 0x5256, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_398)
{
    // 1320C 0062;	
    // (𓈌) EGYPTIAN HIEROGLYPH N027	[5256 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320C, 0x0062 };
    uint32_t const ces[9] = { 0x5256, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_399)
{
    // 1320D 0021;	
    // (𓈍) EGYPTIAN HIEROGLYPH N028	[5257 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320D, 0x0021 };
    uint32_t const ces[9] = { 0x5257, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_400)
{
    // 1320D 003F;	
    // (𓈍) EGYPTIAN HIEROGLYPH N028	[5257 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320D, 0x003F };
    uint32_t const ces[9] = { 0x5257, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_401)
{
    // 1320D 0061;	
    // (𓈍) EGYPTIAN HIEROGLYPH N028	[5257 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320D, 0x0061 };
    uint32_t const ces[9] = { 0x5257, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_402)
{
    // 1320D 0041;	
    // (𓈍) EGYPTIAN HIEROGLYPH N028	[5257 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1320D, 0x0041 };
    uint32_t const ces[9] = { 0x5257, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_403)
{
    // 1320D 0062;	
    // (𓈍) EGYPTIAN HIEROGLYPH N028	[5257 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320D, 0x0062 };
    uint32_t const ces[9] = { 0x5257, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_404)
{
    // 1320E 0021;	
    // (𓈎) EGYPTIAN HIEROGLYPH N029	[5258 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320E, 0x0021 };
    uint32_t const ces[9] = { 0x5258, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_405)
{
    // 1320E 003F;	
    // (𓈎) EGYPTIAN HIEROGLYPH N029	[5258 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320E, 0x003F };
    uint32_t const ces[9] = { 0x5258, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_406)
{
    // 1320E 0061;	
    // (𓈎) EGYPTIAN HIEROGLYPH N029	[5258 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320E, 0x0061 };
    uint32_t const ces[9] = { 0x5258, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_407)
{
    // 1320E 0041;	
    // (𓈎) EGYPTIAN HIEROGLYPH N029	[5258 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1320E, 0x0041 };
    uint32_t const ces[9] = { 0x5258, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_408)
{
    // 1320E 0062;	
    // (𓈎) EGYPTIAN HIEROGLYPH N029	[5258 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320E, 0x0062 };
    uint32_t const ces[9] = { 0x5258, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_409)
{
    // 1320F 0021;	
    // (𓈏) EGYPTIAN HIEROGLYPH N030	[5259 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320F, 0x0021 };
    uint32_t const ces[9] = { 0x5259, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_410)
{
    // 1320F 003F;	
    // (𓈏) EGYPTIAN HIEROGLYPH N030	[5259 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320F, 0x003F };
    uint32_t const ces[9] = { 0x5259, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_411)
{
    // 1320F 0061;	
    // (𓈏) EGYPTIAN HIEROGLYPH N030	[5259 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320F, 0x0061 };
    uint32_t const ces[9] = { 0x5259, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_412)
{
    // 1320F 0041;	
    // (𓈏) EGYPTIAN HIEROGLYPH N030	[5259 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1320F, 0x0041 };
    uint32_t const ces[9] = { 0x5259, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_413)
{
    // 1320F 0062;	
    // (𓈏) EGYPTIAN HIEROGLYPH N030	[5259 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1320F, 0x0062 };
    uint32_t const ces[9] = { 0x5259, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_414)
{
    // 13210 0021;	
    // (𓈐) EGYPTIAN HIEROGLYPH N031	[525A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13210, 0x0021 };
    uint32_t const ces[9] = { 0x525A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_415)
{
    // 13210 003F;	
    // (𓈐) EGYPTIAN HIEROGLYPH N031	[525A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13210, 0x003F };
    uint32_t const ces[9] = { 0x525A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_416)
{
    // 13210 0061;	
    // (𓈐) EGYPTIAN HIEROGLYPH N031	[525A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13210, 0x0061 };
    uint32_t const ces[9] = { 0x525A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_417)
{
    // 13210 0041;	
    // (𓈐) EGYPTIAN HIEROGLYPH N031	[525A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13210, 0x0041 };
    uint32_t const ces[9] = { 0x525A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_418)
{
    // 13210 0062;	
    // (𓈐) EGYPTIAN HIEROGLYPH N031	[525A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13210, 0x0062 };
    uint32_t const ces[9] = { 0x525A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_419)
{
    // 13211 0021;	
    // (𓈑) EGYPTIAN HIEROGLYPH N032	[525B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13211, 0x0021 };
    uint32_t const ces[9] = { 0x525B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_420)
{
    // 13211 003F;	
    // (𓈑) EGYPTIAN HIEROGLYPH N032	[525B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13211, 0x003F };
    uint32_t const ces[9] = { 0x525B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_421)
{
    // 13211 0061;	
    // (𓈑) EGYPTIAN HIEROGLYPH N032	[525B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13211, 0x0061 };
    uint32_t const ces[9] = { 0x525B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_422)
{
    // 13211 0041;	
    // (𓈑) EGYPTIAN HIEROGLYPH N032	[525B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13211, 0x0041 };
    uint32_t const ces[9] = { 0x525B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_423)
{
    // 13211 0062;	
    // (𓈑) EGYPTIAN HIEROGLYPH N032	[525B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13211, 0x0062 };
    uint32_t const ces[9] = { 0x525B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_424)
{
    // 13212 0021;	
    // (𓈒) EGYPTIAN HIEROGLYPH N033	[525C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13212, 0x0021 };
    uint32_t const ces[9] = { 0x525C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_425)
{
    // 13212 003F;	
    // (𓈒) EGYPTIAN HIEROGLYPH N033	[525C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13212, 0x003F };
    uint32_t const ces[9] = { 0x525C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_426)
{
    // 13212 0061;	
    // (𓈒) EGYPTIAN HIEROGLYPH N033	[525C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13212, 0x0061 };
    uint32_t const ces[9] = { 0x525C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_427)
{
    // 13212 0041;	
    // (𓈒) EGYPTIAN HIEROGLYPH N033	[525C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13212, 0x0041 };
    uint32_t const ces[9] = { 0x525C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_428)
{
    // 13212 0062;	
    // (𓈒) EGYPTIAN HIEROGLYPH N033	[525C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13212, 0x0062 };
    uint32_t const ces[9] = { 0x525C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_429)
{
    // 13213 0021;	
    // (𓈓) EGYPTIAN HIEROGLYPH N033A	[525D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13213, 0x0021 };
    uint32_t const ces[9] = { 0x525D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_430)
{
    // 13213 003F;	
    // (𓈓) EGYPTIAN HIEROGLYPH N033A	[525D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13213, 0x003F };
    uint32_t const ces[9] = { 0x525D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_431)
{
    // 13213 0061;	
    // (𓈓) EGYPTIAN HIEROGLYPH N033A	[525D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13213, 0x0061 };
    uint32_t const ces[9] = { 0x525D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_432)
{
    // 13213 0041;	
    // (𓈓) EGYPTIAN HIEROGLYPH N033A	[525D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13213, 0x0041 };
    uint32_t const ces[9] = { 0x525D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_433)
{
    // 13213 0062;	
    // (𓈓) EGYPTIAN HIEROGLYPH N033A	[525D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13213, 0x0062 };
    uint32_t const ces[9] = { 0x525D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_434)
{
    // 13214 0021;	
    // (𓈔) EGYPTIAN HIEROGLYPH N034	[525E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13214, 0x0021 };
    uint32_t const ces[9] = { 0x525E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_435)
{
    // 13214 003F;	
    // (𓈔) EGYPTIAN HIEROGLYPH N034	[525E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13214, 0x003F };
    uint32_t const ces[9] = { 0x525E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_436)
{
    // 13214 0061;	
    // (𓈔) EGYPTIAN HIEROGLYPH N034	[525E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13214, 0x0061 };
    uint32_t const ces[9] = { 0x525E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_437)
{
    // 13214 0041;	
    // (𓈔) EGYPTIAN HIEROGLYPH N034	[525E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13214, 0x0041 };
    uint32_t const ces[9] = { 0x525E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_438)
{
    // 13214 0062;	
    // (𓈔) EGYPTIAN HIEROGLYPH N034	[525E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13214, 0x0062 };
    uint32_t const ces[9] = { 0x525E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_439)
{
    // 13215 0021;	
    // (𓈕) EGYPTIAN HIEROGLYPH N034A	[525F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13215, 0x0021 };
    uint32_t const ces[9] = { 0x525F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_440)
{
    // 13215 003F;	
    // (𓈕) EGYPTIAN HIEROGLYPH N034A	[525F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13215, 0x003F };
    uint32_t const ces[9] = { 0x525F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_441)
{
    // 13215 0061;	
    // (𓈕) EGYPTIAN HIEROGLYPH N034A	[525F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13215, 0x0061 };
    uint32_t const ces[9] = { 0x525F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_442)
{
    // 13215 0041;	
    // (𓈕) EGYPTIAN HIEROGLYPH N034A	[525F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13215, 0x0041 };
    uint32_t const ces[9] = { 0x525F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_443)
{
    // 13215 0062;	
    // (𓈕) EGYPTIAN HIEROGLYPH N034A	[525F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13215, 0x0062 };
    uint32_t const ces[9] = { 0x525F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_444)
{
    // 13216 0021;	
    // (𓈖) EGYPTIAN HIEROGLYPH N035	[5260 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13216, 0x0021 };
    uint32_t const ces[9] = { 0x5260, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_445)
{
    // 13216 003F;	
    // (𓈖) EGYPTIAN HIEROGLYPH N035	[5260 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13216, 0x003F };
    uint32_t const ces[9] = { 0x5260, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_446)
{
    // 13216 0061;	
    // (𓈖) EGYPTIAN HIEROGLYPH N035	[5260 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13216, 0x0061 };
    uint32_t const ces[9] = { 0x5260, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_447)
{
    // 13216 0041;	
    // (𓈖) EGYPTIAN HIEROGLYPH N035	[5260 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13216, 0x0041 };
    uint32_t const ces[9] = { 0x5260, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_448)
{
    // 13216 0062;	
    // (𓈖) EGYPTIAN HIEROGLYPH N035	[5260 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13216, 0x0062 };
    uint32_t const ces[9] = { 0x5260, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_449)
{
    // 13217 0021;	
    // (𓈗) EGYPTIAN HIEROGLYPH N035A	[5261 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13217, 0x0021 };
    uint32_t const ces[9] = { 0x5261, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_450)
{
    // 13217 003F;	
    // (𓈗) EGYPTIAN HIEROGLYPH N035A	[5261 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13217, 0x003F };
    uint32_t const ces[9] = { 0x5261, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_451)
{
    // 13217 0061;	
    // (𓈗) EGYPTIAN HIEROGLYPH N035A	[5261 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13217, 0x0061 };
    uint32_t const ces[9] = { 0x5261, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_452)
{
    // 13217 0041;	
    // (𓈗) EGYPTIAN HIEROGLYPH N035A	[5261 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13217, 0x0041 };
    uint32_t const ces[9] = { 0x5261, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_453)
{
    // 13217 0062;	
    // (𓈗) EGYPTIAN HIEROGLYPH N035A	[5261 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13217, 0x0062 };
    uint32_t const ces[9] = { 0x5261, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_454)
{
    // 13218 0021;	
    // (𓈘) EGYPTIAN HIEROGLYPH N036	[5262 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13218, 0x0021 };
    uint32_t const ces[9] = { 0x5262, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_455)
{
    // 13218 003F;	
    // (𓈘) EGYPTIAN HIEROGLYPH N036	[5262 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13218, 0x003F };
    uint32_t const ces[9] = { 0x5262, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_456)
{
    // 13218 0061;	
    // (𓈘) EGYPTIAN HIEROGLYPH N036	[5262 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13218, 0x0061 };
    uint32_t const ces[9] = { 0x5262, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_457)
{
    // 13218 0041;	
    // (𓈘) EGYPTIAN HIEROGLYPH N036	[5262 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13218, 0x0041 };
    uint32_t const ces[9] = { 0x5262, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_458)
{
    // 13218 0062;	
    // (𓈘) EGYPTIAN HIEROGLYPH N036	[5262 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13218, 0x0062 };
    uint32_t const ces[9] = { 0x5262, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_459)
{
    // 13219 0021;	
    // (𓈙) EGYPTIAN HIEROGLYPH N037	[5263 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13219, 0x0021 };
    uint32_t const ces[9] = { 0x5263, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_460)
{
    // 13219 003F;	
    // (𓈙) EGYPTIAN HIEROGLYPH N037	[5263 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13219, 0x003F };
    uint32_t const ces[9] = { 0x5263, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_461)
{
    // 13219 0061;	
    // (𓈙) EGYPTIAN HIEROGLYPH N037	[5263 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13219, 0x0061 };
    uint32_t const ces[9] = { 0x5263, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_462)
{
    // 13219 0041;	
    // (𓈙) EGYPTIAN HIEROGLYPH N037	[5263 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13219, 0x0041 };
    uint32_t const ces[9] = { 0x5263, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_463)
{
    // 13219 0062;	
    // (𓈙) EGYPTIAN HIEROGLYPH N037	[5263 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13219, 0x0062 };
    uint32_t const ces[9] = { 0x5263, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_464)
{
    // 1321A 0021;	
    // (𓈚) EGYPTIAN HIEROGLYPH N037A	[5264 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321A, 0x0021 };
    uint32_t const ces[9] = { 0x5264, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_465)
{
    // 1321A 003F;	
    // (𓈚) EGYPTIAN HIEROGLYPH N037A	[5264 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321A, 0x003F };
    uint32_t const ces[9] = { 0x5264, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_466)
{
    // 1321A 0061;	
    // (𓈚) EGYPTIAN HIEROGLYPH N037A	[5264 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321A, 0x0061 };
    uint32_t const ces[9] = { 0x5264, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_467)
{
    // 1321A 0041;	
    // (𓈚) EGYPTIAN HIEROGLYPH N037A	[5264 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1321A, 0x0041 };
    uint32_t const ces[9] = { 0x5264, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_468)
{
    // 1321A 0062;	
    // (𓈚) EGYPTIAN HIEROGLYPH N037A	[5264 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321A, 0x0062 };
    uint32_t const ces[9] = { 0x5264, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_469)
{
    // 1321B 0021;	
    // (𓈛) EGYPTIAN HIEROGLYPH N038	[5265 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321B, 0x0021 };
    uint32_t const ces[9] = { 0x5265, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_470)
{
    // 1321B 003F;	
    // (𓈛) EGYPTIAN HIEROGLYPH N038	[5265 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321B, 0x003F };
    uint32_t const ces[9] = { 0x5265, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_471)
{
    // 1321B 0061;	
    // (𓈛) EGYPTIAN HIEROGLYPH N038	[5265 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321B, 0x0061 };
    uint32_t const ces[9] = { 0x5265, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_472)
{
    // 1321B 0041;	
    // (𓈛) EGYPTIAN HIEROGLYPH N038	[5265 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1321B, 0x0041 };
    uint32_t const ces[9] = { 0x5265, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_473)
{
    // 1321B 0062;	
    // (𓈛) EGYPTIAN HIEROGLYPH N038	[5265 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321B, 0x0062 };
    uint32_t const ces[9] = { 0x5265, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_474)
{
    // 1321C 0021;	
    // (𓈜) EGYPTIAN HIEROGLYPH N039	[5266 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321C, 0x0021 };
    uint32_t const ces[9] = { 0x5266, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_475)
{
    // 1321C 003F;	
    // (𓈜) EGYPTIAN HIEROGLYPH N039	[5266 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321C, 0x003F };
    uint32_t const ces[9] = { 0x5266, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_476)
{
    // 1321C 0061;	
    // (𓈜) EGYPTIAN HIEROGLYPH N039	[5266 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321C, 0x0061 };
    uint32_t const ces[9] = { 0x5266, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_477)
{
    // 1321C 0041;	
    // (𓈜) EGYPTIAN HIEROGLYPH N039	[5266 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1321C, 0x0041 };
    uint32_t const ces[9] = { 0x5266, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_478)
{
    // 1321C 0062;	
    // (𓈜) EGYPTIAN HIEROGLYPH N039	[5266 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321C, 0x0062 };
    uint32_t const ces[9] = { 0x5266, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_479)
{
    // 1321D 0021;	
    // (𓈝) EGYPTIAN HIEROGLYPH N040	[5267 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321D, 0x0021 };
    uint32_t const ces[9] = { 0x5267, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_480)
{
    // 1321D 003F;	
    // (𓈝) EGYPTIAN HIEROGLYPH N040	[5267 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321D, 0x003F };
    uint32_t const ces[9] = { 0x5267, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_481)
{
    // 1321D 0061;	
    // (𓈝) EGYPTIAN HIEROGLYPH N040	[5267 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321D, 0x0061 };
    uint32_t const ces[9] = { 0x5267, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_482)
{
    // 1321D 0041;	
    // (𓈝) EGYPTIAN HIEROGLYPH N040	[5267 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1321D, 0x0041 };
    uint32_t const ces[9] = { 0x5267, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_483)
{
    // 1321D 0062;	
    // (𓈝) EGYPTIAN HIEROGLYPH N040	[5267 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321D, 0x0062 };
    uint32_t const ces[9] = { 0x5267, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_484)
{
    // 1321E 0021;	
    // (𓈞) EGYPTIAN HIEROGLYPH N041	[5268 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321E, 0x0021 };
    uint32_t const ces[9] = { 0x5268, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_485)
{
    // 1321E 003F;	
    // (𓈞) EGYPTIAN HIEROGLYPH N041	[5268 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321E, 0x003F };
    uint32_t const ces[9] = { 0x5268, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_486)
{
    // 1321E 0061;	
    // (𓈞) EGYPTIAN HIEROGLYPH N041	[5268 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321E, 0x0061 };
    uint32_t const ces[9] = { 0x5268, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_487)
{
    // 1321E 0041;	
    // (𓈞) EGYPTIAN HIEROGLYPH N041	[5268 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1321E, 0x0041 };
    uint32_t const ces[9] = { 0x5268, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_488)
{
    // 1321E 0062;	
    // (𓈞) EGYPTIAN HIEROGLYPH N041	[5268 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321E, 0x0062 };
    uint32_t const ces[9] = { 0x5268, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_489)
{
    // 1321F 0021;	
    // (𓈟) EGYPTIAN HIEROGLYPH N042	[5269 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321F, 0x0021 };
    uint32_t const ces[9] = { 0x5269, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_490)
{
    // 1321F 003F;	
    // (𓈟) EGYPTIAN HIEROGLYPH N042	[5269 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321F, 0x003F };
    uint32_t const ces[9] = { 0x5269, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_491)
{
    // 1321F 0061;	
    // (𓈟) EGYPTIAN HIEROGLYPH N042	[5269 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321F, 0x0061 };
    uint32_t const ces[9] = { 0x5269, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_492)
{
    // 1321F 0041;	
    // (𓈟) EGYPTIAN HIEROGLYPH N042	[5269 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x1321F, 0x0041 };
    uint32_t const ces[9] = { 0x5269, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_493)
{
    // 1321F 0062;	
    // (𓈟) EGYPTIAN HIEROGLYPH N042	[5269 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x1321F, 0x0062 };
    uint32_t const ces[9] = { 0x5269, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_494)
{
    // 13220 0021;	
    // (𓈠) EGYPTIAN HIEROGLYPH NL001	[526A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13220, 0x0021 };
    uint32_t const ces[9] = { 0x526A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_495)
{
    // 13220 003F;	
    // (𓈠) EGYPTIAN HIEROGLYPH NL001	[526A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13220, 0x003F };
    uint32_t const ces[9] = { 0x526A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_496)
{
    // 13220 0061;	
    // (𓈠) EGYPTIAN HIEROGLYPH NL001	[526A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13220, 0x0061 };
    uint32_t const ces[9] = { 0x526A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_497)
{
    // 13220 0041;	
    // (𓈠) EGYPTIAN HIEROGLYPH NL001	[526A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x13220, 0x0041 };
    uint32_t const ces[9] = { 0x526A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_498)
{
    // 13220 0062;	
    // (𓈠) EGYPTIAN HIEROGLYPH NL001	[526A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13220, 0x0062 };
    uint32_t const ces[9] = { 0x526A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_301_499)
{
    // 13221 0021;	
    // (𓈡) EGYPTIAN HIEROGLYPH NL002	[526B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x13221, 0x0021 };
    uint32_t const ces[9] = { 0x526B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

