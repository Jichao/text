// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_382_000)
{
    // 495C 003F;	
    // (䥜) CJK UNIFIED IDEOGRAPH-495C	[FB80 C95C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC95C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_001)
{
    // 495C 0061;	
    // (䥜) CJK UNIFIED IDEOGRAPH-495C	[FB80 C95C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC95C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_002)
{
    // 495C 0041;	
    // (䥜) CJK UNIFIED IDEOGRAPH-495C	[FB80 C95C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x495C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC95C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_003)
{
    // 495C 0062;	
    // (䥜) CJK UNIFIED IDEOGRAPH-495C	[FB80 C95C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC95C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_004)
{
    // 495D 0021;	
    // (䥝) CJK UNIFIED IDEOGRAPH-495D	[FB80 C95D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC95D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_005)
{
    // 495D 003F;	
    // (䥝) CJK UNIFIED IDEOGRAPH-495D	[FB80 C95D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC95D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_006)
{
    // 495D 0061;	
    // (䥝) CJK UNIFIED IDEOGRAPH-495D	[FB80 C95D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC95D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_007)
{
    // 495D 0041;	
    // (䥝) CJK UNIFIED IDEOGRAPH-495D	[FB80 C95D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x495D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC95D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_008)
{
    // 495D 0062;	
    // (䥝) CJK UNIFIED IDEOGRAPH-495D	[FB80 C95D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC95D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_009)
{
    // 495E 0021;	
    // (䥞) CJK UNIFIED IDEOGRAPH-495E	[FB80 C95E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC95E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_010)
{
    // 495E 003F;	
    // (䥞) CJK UNIFIED IDEOGRAPH-495E	[FB80 C95E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC95E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_011)
{
    // 495E 0061;	
    // (䥞) CJK UNIFIED IDEOGRAPH-495E	[FB80 C95E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC95E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_012)
{
    // 495E 0041;	
    // (䥞) CJK UNIFIED IDEOGRAPH-495E	[FB80 C95E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x495E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC95E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_013)
{
    // 495E 0062;	
    // (䥞) CJK UNIFIED IDEOGRAPH-495E	[FB80 C95E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC95E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_014)
{
    // 495F 0021;	
    // (䥟) CJK UNIFIED IDEOGRAPH-495F	[FB80 C95F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC95F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_015)
{
    // 495F 003F;	
    // (䥟) CJK UNIFIED IDEOGRAPH-495F	[FB80 C95F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC95F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_016)
{
    // 495F 0061;	
    // (䥟) CJK UNIFIED IDEOGRAPH-495F	[FB80 C95F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC95F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_017)
{
    // 495F 0041;	
    // (䥟) CJK UNIFIED IDEOGRAPH-495F	[FB80 C95F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x495F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC95F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_018)
{
    // 495F 0062;	
    // (䥟) CJK UNIFIED IDEOGRAPH-495F	[FB80 C95F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x495F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC95F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_019)
{
    // 4960 0021;	
    // (䥠) CJK UNIFIED IDEOGRAPH-4960	[FB80 C960 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4960, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC960, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_020)
{
    // 4960 003F;	
    // (䥠) CJK UNIFIED IDEOGRAPH-4960	[FB80 C960 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4960, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC960, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_021)
{
    // 4960 0061;	
    // (䥠) CJK UNIFIED IDEOGRAPH-4960	[FB80 C960 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4960, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC960, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_022)
{
    // 4960 0041;	
    // (䥠) CJK UNIFIED IDEOGRAPH-4960	[FB80 C960 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4960, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC960, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_023)
{
    // 4960 0062;	
    // (䥠) CJK UNIFIED IDEOGRAPH-4960	[FB80 C960 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4960, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC960, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_024)
{
    // 4961 0021;	
    // (䥡) CJK UNIFIED IDEOGRAPH-4961	[FB80 C961 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4961, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC961, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_025)
{
    // 4961 003F;	
    // (䥡) CJK UNIFIED IDEOGRAPH-4961	[FB80 C961 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4961, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC961, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_026)
{
    // 4961 0061;	
    // (䥡) CJK UNIFIED IDEOGRAPH-4961	[FB80 C961 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4961, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC961, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_027)
{
    // 4961 0041;	
    // (䥡) CJK UNIFIED IDEOGRAPH-4961	[FB80 C961 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4961, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC961, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_028)
{
    // 4961 0062;	
    // (䥡) CJK UNIFIED IDEOGRAPH-4961	[FB80 C961 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4961, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC961, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_029)
{
    // 4962 0021;	
    // (䥢) CJK UNIFIED IDEOGRAPH-4962	[FB80 C962 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4962, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC962, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_030)
{
    // 4962 003F;	
    // (䥢) CJK UNIFIED IDEOGRAPH-4962	[FB80 C962 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4962, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC962, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_031)
{
    // 4962 0061;	
    // (䥢) CJK UNIFIED IDEOGRAPH-4962	[FB80 C962 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4962, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC962, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_032)
{
    // 4962 0041;	
    // (䥢) CJK UNIFIED IDEOGRAPH-4962	[FB80 C962 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4962, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC962, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_033)
{
    // 4962 0062;	
    // (䥢) CJK UNIFIED IDEOGRAPH-4962	[FB80 C962 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4962, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC962, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_034)
{
    // 4963 0021;	
    // (䥣) CJK UNIFIED IDEOGRAPH-4963	[FB80 C963 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4963, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC963, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_035)
{
    // 4963 003F;	
    // (䥣) CJK UNIFIED IDEOGRAPH-4963	[FB80 C963 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4963, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC963, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_036)
{
    // 4963 0061;	
    // (䥣) CJK UNIFIED IDEOGRAPH-4963	[FB80 C963 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4963, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC963, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_037)
{
    // 4963 0041;	
    // (䥣) CJK UNIFIED IDEOGRAPH-4963	[FB80 C963 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4963, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC963, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_038)
{
    // 4963 0062;	
    // (䥣) CJK UNIFIED IDEOGRAPH-4963	[FB80 C963 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4963, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC963, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_039)
{
    // 4964 0021;	
    // (䥤) CJK UNIFIED IDEOGRAPH-4964	[FB80 C964 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4964, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC964, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_040)
{
    // 4964 003F;	
    // (䥤) CJK UNIFIED IDEOGRAPH-4964	[FB80 C964 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4964, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC964, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_041)
{
    // 4964 0061;	
    // (䥤) CJK UNIFIED IDEOGRAPH-4964	[FB80 C964 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4964, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC964, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_042)
{
    // 4964 0041;	
    // (䥤) CJK UNIFIED IDEOGRAPH-4964	[FB80 C964 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4964, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC964, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_043)
{
    // 4964 0062;	
    // (䥤) CJK UNIFIED IDEOGRAPH-4964	[FB80 C964 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4964, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC964, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_044)
{
    // 4965 0021;	
    // (䥥) CJK UNIFIED IDEOGRAPH-4965	[FB80 C965 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4965, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC965, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_045)
{
    // 4965 003F;	
    // (䥥) CJK UNIFIED IDEOGRAPH-4965	[FB80 C965 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4965, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC965, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_046)
{
    // 4965 0061;	
    // (䥥) CJK UNIFIED IDEOGRAPH-4965	[FB80 C965 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4965, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC965, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_047)
{
    // 4965 0041;	
    // (䥥) CJK UNIFIED IDEOGRAPH-4965	[FB80 C965 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4965, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC965, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_048)
{
    // 4965 0062;	
    // (䥥) CJK UNIFIED IDEOGRAPH-4965	[FB80 C965 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4965, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC965, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_049)
{
    // 4966 0021;	
    // (䥦) CJK UNIFIED IDEOGRAPH-4966	[FB80 C966 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4966, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC966, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_050)
{
    // 4966 003F;	
    // (䥦) CJK UNIFIED IDEOGRAPH-4966	[FB80 C966 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4966, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC966, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_051)
{
    // 4966 0061;	
    // (䥦) CJK UNIFIED IDEOGRAPH-4966	[FB80 C966 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4966, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC966, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_052)
{
    // 4966 0041;	
    // (䥦) CJK UNIFIED IDEOGRAPH-4966	[FB80 C966 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4966, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC966, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_053)
{
    // 4966 0062;	
    // (䥦) CJK UNIFIED IDEOGRAPH-4966	[FB80 C966 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4966, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC966, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_054)
{
    // 4967 0021;	
    // (䥧) CJK UNIFIED IDEOGRAPH-4967	[FB80 C967 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4967, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC967, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_055)
{
    // 4967 003F;	
    // (䥧) CJK UNIFIED IDEOGRAPH-4967	[FB80 C967 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4967, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC967, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_056)
{
    // 4967 0061;	
    // (䥧) CJK UNIFIED IDEOGRAPH-4967	[FB80 C967 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4967, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC967, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_057)
{
    // 4967 0041;	
    // (䥧) CJK UNIFIED IDEOGRAPH-4967	[FB80 C967 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4967, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC967, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_058)
{
    // 4967 0062;	
    // (䥧) CJK UNIFIED IDEOGRAPH-4967	[FB80 C967 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4967, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC967, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_059)
{
    // 4968 0021;	
    // (䥨) CJK UNIFIED IDEOGRAPH-4968	[FB80 C968 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4968, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC968, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_060)
{
    // 4968 003F;	
    // (䥨) CJK UNIFIED IDEOGRAPH-4968	[FB80 C968 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4968, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC968, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_061)
{
    // 4968 0061;	
    // (䥨) CJK UNIFIED IDEOGRAPH-4968	[FB80 C968 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4968, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC968, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_062)
{
    // 4968 0041;	
    // (䥨) CJK UNIFIED IDEOGRAPH-4968	[FB80 C968 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4968, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC968, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_063)
{
    // 4968 0062;	
    // (䥨) CJK UNIFIED IDEOGRAPH-4968	[FB80 C968 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4968, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC968, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_064)
{
    // 4969 0021;	
    // (䥩) CJK UNIFIED IDEOGRAPH-4969	[FB80 C969 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4969, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC969, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_065)
{
    // 4969 003F;	
    // (䥩) CJK UNIFIED IDEOGRAPH-4969	[FB80 C969 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4969, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC969, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_066)
{
    // 4969 0061;	
    // (䥩) CJK UNIFIED IDEOGRAPH-4969	[FB80 C969 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4969, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC969, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_067)
{
    // 4969 0041;	
    // (䥩) CJK UNIFIED IDEOGRAPH-4969	[FB80 C969 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4969, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC969, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_068)
{
    // 4969 0062;	
    // (䥩) CJK UNIFIED IDEOGRAPH-4969	[FB80 C969 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4969, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC969, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_069)
{
    // 496A 0021;	
    // (䥪) CJK UNIFIED IDEOGRAPH-496A	[FB80 C96A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC96A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_070)
{
    // 496A 003F;	
    // (䥪) CJK UNIFIED IDEOGRAPH-496A	[FB80 C96A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC96A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_071)
{
    // 496A 0061;	
    // (䥪) CJK UNIFIED IDEOGRAPH-496A	[FB80 C96A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC96A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_072)
{
    // 496A 0041;	
    // (䥪) CJK UNIFIED IDEOGRAPH-496A	[FB80 C96A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x496A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC96A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_073)
{
    // 496A 0062;	
    // (䥪) CJK UNIFIED IDEOGRAPH-496A	[FB80 C96A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC96A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_074)
{
    // 496B 0021;	
    // (䥫) CJK UNIFIED IDEOGRAPH-496B	[FB80 C96B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC96B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_075)
{
    // 496B 003F;	
    // (䥫) CJK UNIFIED IDEOGRAPH-496B	[FB80 C96B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC96B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_076)
{
    // 496B 0061;	
    // (䥫) CJK UNIFIED IDEOGRAPH-496B	[FB80 C96B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC96B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_077)
{
    // 496B 0041;	
    // (䥫) CJK UNIFIED IDEOGRAPH-496B	[FB80 C96B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x496B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC96B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_078)
{
    // 496B 0062;	
    // (䥫) CJK UNIFIED IDEOGRAPH-496B	[FB80 C96B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC96B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_079)
{
    // 496C 0021;	
    // (䥬) CJK UNIFIED IDEOGRAPH-496C	[FB80 C96C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC96C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_080)
{
    // 496C 003F;	
    // (䥬) CJK UNIFIED IDEOGRAPH-496C	[FB80 C96C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC96C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_081)
{
    // 496C 0061;	
    // (䥬) CJK UNIFIED IDEOGRAPH-496C	[FB80 C96C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC96C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_082)
{
    // 496C 0041;	
    // (䥬) CJK UNIFIED IDEOGRAPH-496C	[FB80 C96C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x496C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC96C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_083)
{
    // 496C 0062;	
    // (䥬) CJK UNIFIED IDEOGRAPH-496C	[FB80 C96C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC96C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_084)
{
    // 496D 0021;	
    // (䥭) CJK UNIFIED IDEOGRAPH-496D	[FB80 C96D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC96D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_085)
{
    // 496D 003F;	
    // (䥭) CJK UNIFIED IDEOGRAPH-496D	[FB80 C96D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC96D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_086)
{
    // 496D 0061;	
    // (䥭) CJK UNIFIED IDEOGRAPH-496D	[FB80 C96D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC96D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_087)
{
    // 496D 0041;	
    // (䥭) CJK UNIFIED IDEOGRAPH-496D	[FB80 C96D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x496D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC96D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_088)
{
    // 496D 0062;	
    // (䥭) CJK UNIFIED IDEOGRAPH-496D	[FB80 C96D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC96D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_089)
{
    // 496E 0021;	
    // (䥮) CJK UNIFIED IDEOGRAPH-496E	[FB80 C96E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC96E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_090)
{
    // 496E 003F;	
    // (䥮) CJK UNIFIED IDEOGRAPH-496E	[FB80 C96E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC96E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_091)
{
    // 496E 0061;	
    // (䥮) CJK UNIFIED IDEOGRAPH-496E	[FB80 C96E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC96E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_092)
{
    // 496E 0041;	
    // (䥮) CJK UNIFIED IDEOGRAPH-496E	[FB80 C96E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x496E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC96E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_093)
{
    // 496E 0062;	
    // (䥮) CJK UNIFIED IDEOGRAPH-496E	[FB80 C96E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC96E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_094)
{
    // 496F 0021;	
    // (䥯) CJK UNIFIED IDEOGRAPH-496F	[FB80 C96F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC96F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_095)
{
    // 496F 003F;	
    // (䥯) CJK UNIFIED IDEOGRAPH-496F	[FB80 C96F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC96F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_096)
{
    // 496F 0061;	
    // (䥯) CJK UNIFIED IDEOGRAPH-496F	[FB80 C96F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC96F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_097)
{
    // 496F 0041;	
    // (䥯) CJK UNIFIED IDEOGRAPH-496F	[FB80 C96F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x496F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC96F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_098)
{
    // 496F 0062;	
    // (䥯) CJK UNIFIED IDEOGRAPH-496F	[FB80 C96F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x496F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC96F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_099)
{
    // 4970 0021;	
    // (䥰) CJK UNIFIED IDEOGRAPH-4970	[FB80 C970 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4970, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC970, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_100)
{
    // 4970 003F;	
    // (䥰) CJK UNIFIED IDEOGRAPH-4970	[FB80 C970 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4970, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC970, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_101)
{
    // 4970 0061;	
    // (䥰) CJK UNIFIED IDEOGRAPH-4970	[FB80 C970 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4970, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC970, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_102)
{
    // 4970 0041;	
    // (䥰) CJK UNIFIED IDEOGRAPH-4970	[FB80 C970 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4970, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC970, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_103)
{
    // 4970 0062;	
    // (䥰) CJK UNIFIED IDEOGRAPH-4970	[FB80 C970 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4970, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC970, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_104)
{
    // 4971 0021;	
    // (䥱) CJK UNIFIED IDEOGRAPH-4971	[FB80 C971 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4971, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC971, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_105)
{
    // 4971 003F;	
    // (䥱) CJK UNIFIED IDEOGRAPH-4971	[FB80 C971 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4971, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC971, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_106)
{
    // 4971 0061;	
    // (䥱) CJK UNIFIED IDEOGRAPH-4971	[FB80 C971 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4971, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC971, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_107)
{
    // 4971 0041;	
    // (䥱) CJK UNIFIED IDEOGRAPH-4971	[FB80 C971 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4971, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC971, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_108)
{
    // 4971 0062;	
    // (䥱) CJK UNIFIED IDEOGRAPH-4971	[FB80 C971 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4971, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC971, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_109)
{
    // 4972 0021;	
    // (䥲) CJK UNIFIED IDEOGRAPH-4972	[FB80 C972 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4972, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC972, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_110)
{
    // 4972 003F;	
    // (䥲) CJK UNIFIED IDEOGRAPH-4972	[FB80 C972 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4972, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC972, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_111)
{
    // 4972 0061;	
    // (䥲) CJK UNIFIED IDEOGRAPH-4972	[FB80 C972 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4972, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC972, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_112)
{
    // 4972 0041;	
    // (䥲) CJK UNIFIED IDEOGRAPH-4972	[FB80 C972 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4972, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC972, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_113)
{
    // 4972 0062;	
    // (䥲) CJK UNIFIED IDEOGRAPH-4972	[FB80 C972 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4972, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC972, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_114)
{
    // 4973 0021;	
    // (䥳) CJK UNIFIED IDEOGRAPH-4973	[FB80 C973 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4973, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC973, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_115)
{
    // 4973 003F;	
    // (䥳) CJK UNIFIED IDEOGRAPH-4973	[FB80 C973 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4973, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC973, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_116)
{
    // 4973 0061;	
    // (䥳) CJK UNIFIED IDEOGRAPH-4973	[FB80 C973 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4973, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC973, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_117)
{
    // 4973 0041;	
    // (䥳) CJK UNIFIED IDEOGRAPH-4973	[FB80 C973 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4973, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC973, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_118)
{
    // 4973 0062;	
    // (䥳) CJK UNIFIED IDEOGRAPH-4973	[FB80 C973 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4973, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC973, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_119)
{
    // 4974 0021;	
    // (䥴) CJK UNIFIED IDEOGRAPH-4974	[FB80 C974 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4974, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC974, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_120)
{
    // 4974 003F;	
    // (䥴) CJK UNIFIED IDEOGRAPH-4974	[FB80 C974 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4974, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC974, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_121)
{
    // 4974 0061;	
    // (䥴) CJK UNIFIED IDEOGRAPH-4974	[FB80 C974 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4974, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC974, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_122)
{
    // 4974 0041;	
    // (䥴) CJK UNIFIED IDEOGRAPH-4974	[FB80 C974 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4974, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC974, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_123)
{
    // 4974 0062;	
    // (䥴) CJK UNIFIED IDEOGRAPH-4974	[FB80 C974 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4974, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC974, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_124)
{
    // 4975 0021;	
    // (䥵) CJK UNIFIED IDEOGRAPH-4975	[FB80 C975 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4975, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC975, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_125)
{
    // 4975 003F;	
    // (䥵) CJK UNIFIED IDEOGRAPH-4975	[FB80 C975 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4975, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC975, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_126)
{
    // 4975 0061;	
    // (䥵) CJK UNIFIED IDEOGRAPH-4975	[FB80 C975 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4975, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC975, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_127)
{
    // 4975 0041;	
    // (䥵) CJK UNIFIED IDEOGRAPH-4975	[FB80 C975 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4975, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC975, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_128)
{
    // 4975 0062;	
    // (䥵) CJK UNIFIED IDEOGRAPH-4975	[FB80 C975 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4975, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC975, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_129)
{
    // 4976 0021;	
    // (䥶) CJK UNIFIED IDEOGRAPH-4976	[FB80 C976 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4976, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC976, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_130)
{
    // 4976 003F;	
    // (䥶) CJK UNIFIED IDEOGRAPH-4976	[FB80 C976 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4976, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC976, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_131)
{
    // 4976 0061;	
    // (䥶) CJK UNIFIED IDEOGRAPH-4976	[FB80 C976 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4976, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC976, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_132)
{
    // 4976 0041;	
    // (䥶) CJK UNIFIED IDEOGRAPH-4976	[FB80 C976 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4976, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC976, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_133)
{
    // 4976 0062;	
    // (䥶) CJK UNIFIED IDEOGRAPH-4976	[FB80 C976 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4976, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC976, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_134)
{
    // 4977 0021;	
    // (䥷) CJK UNIFIED IDEOGRAPH-4977	[FB80 C977 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4977, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC977, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_135)
{
    // 4977 003F;	
    // (䥷) CJK UNIFIED IDEOGRAPH-4977	[FB80 C977 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4977, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC977, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_136)
{
    // 4977 0061;	
    // (䥷) CJK UNIFIED IDEOGRAPH-4977	[FB80 C977 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4977, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC977, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_137)
{
    // 4977 0041;	
    // (䥷) CJK UNIFIED IDEOGRAPH-4977	[FB80 C977 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4977, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC977, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_138)
{
    // 4977 0062;	
    // (䥷) CJK UNIFIED IDEOGRAPH-4977	[FB80 C977 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4977, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC977, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_139)
{
    // 4978 0021;	
    // (䥸) CJK UNIFIED IDEOGRAPH-4978	[FB80 C978 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4978, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC978, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_140)
{
    // 4978 003F;	
    // (䥸) CJK UNIFIED IDEOGRAPH-4978	[FB80 C978 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4978, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC978, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_141)
{
    // 4978 0061;	
    // (䥸) CJK UNIFIED IDEOGRAPH-4978	[FB80 C978 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4978, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC978, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_142)
{
    // 4978 0041;	
    // (䥸) CJK UNIFIED IDEOGRAPH-4978	[FB80 C978 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4978, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC978, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_143)
{
    // 4978 0062;	
    // (䥸) CJK UNIFIED IDEOGRAPH-4978	[FB80 C978 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4978, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC978, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_144)
{
    // 4979 0021;	
    // (䥹) CJK UNIFIED IDEOGRAPH-4979	[FB80 C979 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4979, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC979, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_145)
{
    // 4979 003F;	
    // (䥹) CJK UNIFIED IDEOGRAPH-4979	[FB80 C979 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4979, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC979, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_146)
{
    // 4979 0061;	
    // (䥹) CJK UNIFIED IDEOGRAPH-4979	[FB80 C979 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4979, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC979, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_147)
{
    // 4979 0041;	
    // (䥹) CJK UNIFIED IDEOGRAPH-4979	[FB80 C979 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4979, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC979, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_148)
{
    // 4979 0062;	
    // (䥹) CJK UNIFIED IDEOGRAPH-4979	[FB80 C979 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4979, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC979, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_149)
{
    // 497A 0021;	
    // (䥺) CJK UNIFIED IDEOGRAPH-497A	[FB80 C97A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC97A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_150)
{
    // 497A 003F;	
    // (䥺) CJK UNIFIED IDEOGRAPH-497A	[FB80 C97A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC97A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_151)
{
    // 497A 0061;	
    // (䥺) CJK UNIFIED IDEOGRAPH-497A	[FB80 C97A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC97A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_152)
{
    // 497A 0041;	
    // (䥺) CJK UNIFIED IDEOGRAPH-497A	[FB80 C97A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x497A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC97A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_153)
{
    // 497A 0062;	
    // (䥺) CJK UNIFIED IDEOGRAPH-497A	[FB80 C97A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC97A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_154)
{
    // 497B 0021;	
    // (䥻) CJK UNIFIED IDEOGRAPH-497B	[FB80 C97B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC97B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_155)
{
    // 497B 003F;	
    // (䥻) CJK UNIFIED IDEOGRAPH-497B	[FB80 C97B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC97B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_156)
{
    // 497B 0061;	
    // (䥻) CJK UNIFIED IDEOGRAPH-497B	[FB80 C97B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC97B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_157)
{
    // 497B 0041;	
    // (䥻) CJK UNIFIED IDEOGRAPH-497B	[FB80 C97B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x497B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC97B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_158)
{
    // 497B 0062;	
    // (䥻) CJK UNIFIED IDEOGRAPH-497B	[FB80 C97B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC97B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_159)
{
    // 497C 0021;	
    // (䥼) CJK UNIFIED IDEOGRAPH-497C	[FB80 C97C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC97C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_160)
{
    // 497C 003F;	
    // (䥼) CJK UNIFIED IDEOGRAPH-497C	[FB80 C97C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC97C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_161)
{
    // 497C 0061;	
    // (䥼) CJK UNIFIED IDEOGRAPH-497C	[FB80 C97C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC97C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_162)
{
    // 497C 0041;	
    // (䥼) CJK UNIFIED IDEOGRAPH-497C	[FB80 C97C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x497C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC97C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_163)
{
    // 497C 0062;	
    // (䥼) CJK UNIFIED IDEOGRAPH-497C	[FB80 C97C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC97C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_164)
{
    // 497D 0021;	
    // (䥽) CJK UNIFIED IDEOGRAPH-497D	[FB80 C97D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC97D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_165)
{
    // 497D 003F;	
    // (䥽) CJK UNIFIED IDEOGRAPH-497D	[FB80 C97D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC97D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_166)
{
    // 497D 0061;	
    // (䥽) CJK UNIFIED IDEOGRAPH-497D	[FB80 C97D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC97D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_167)
{
    // 497D 0041;	
    // (䥽) CJK UNIFIED IDEOGRAPH-497D	[FB80 C97D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x497D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC97D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_168)
{
    // 497D 0062;	
    // (䥽) CJK UNIFIED IDEOGRAPH-497D	[FB80 C97D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC97D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_169)
{
    // 497E 0021;	
    // (䥾) CJK UNIFIED IDEOGRAPH-497E	[FB80 C97E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC97E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_170)
{
    // 497E 003F;	
    // (䥾) CJK UNIFIED IDEOGRAPH-497E	[FB80 C97E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC97E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_171)
{
    // 497E 0061;	
    // (䥾) CJK UNIFIED IDEOGRAPH-497E	[FB80 C97E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC97E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_172)
{
    // 497E 0041;	
    // (䥾) CJK UNIFIED IDEOGRAPH-497E	[FB80 C97E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x497E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC97E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_173)
{
    // 497E 0062;	
    // (䥾) CJK UNIFIED IDEOGRAPH-497E	[FB80 C97E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC97E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_174)
{
    // 497F 0021;	
    // (䥿) CJK UNIFIED IDEOGRAPH-497F	[FB80 C97F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC97F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_175)
{
    // 497F 003F;	
    // (䥿) CJK UNIFIED IDEOGRAPH-497F	[FB80 C97F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC97F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_176)
{
    // 497F 0061;	
    // (䥿) CJK UNIFIED IDEOGRAPH-497F	[FB80 C97F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC97F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_177)
{
    // 497F 0041;	
    // (䥿) CJK UNIFIED IDEOGRAPH-497F	[FB80 C97F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x497F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC97F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_178)
{
    // 497F 0062;	
    // (䥿) CJK UNIFIED IDEOGRAPH-497F	[FB80 C97F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x497F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC97F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_179)
{
    // 4980 0021;	
    // (䦀) CJK UNIFIED IDEOGRAPH-4980	[FB80 C980 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4980, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC980, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_180)
{
    // 4980 003F;	
    // (䦀) CJK UNIFIED IDEOGRAPH-4980	[FB80 C980 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4980, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC980, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_181)
{
    // 4980 0061;	
    // (䦀) CJK UNIFIED IDEOGRAPH-4980	[FB80 C980 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4980, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC980, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_182)
{
    // 4980 0041;	
    // (䦀) CJK UNIFIED IDEOGRAPH-4980	[FB80 C980 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4980, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC980, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_183)
{
    // 4980 0062;	
    // (䦀) CJK UNIFIED IDEOGRAPH-4980	[FB80 C980 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4980, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC980, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_184)
{
    // 4981 0021;	
    // (䦁) CJK UNIFIED IDEOGRAPH-4981	[FB80 C981 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4981, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC981, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_185)
{
    // 4981 003F;	
    // (䦁) CJK UNIFIED IDEOGRAPH-4981	[FB80 C981 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4981, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC981, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_186)
{
    // 4981 0061;	
    // (䦁) CJK UNIFIED IDEOGRAPH-4981	[FB80 C981 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4981, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC981, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_187)
{
    // 4981 0041;	
    // (䦁) CJK UNIFIED IDEOGRAPH-4981	[FB80 C981 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4981, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC981, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_188)
{
    // 4981 0062;	
    // (䦁) CJK UNIFIED IDEOGRAPH-4981	[FB80 C981 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4981, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC981, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_189)
{
    // 4982 0021;	
    // (䦂) CJK UNIFIED IDEOGRAPH-4982	[FB80 C982 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4982, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC982, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_190)
{
    // 4982 003F;	
    // (䦂) CJK UNIFIED IDEOGRAPH-4982	[FB80 C982 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4982, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC982, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_191)
{
    // 4982 0061;	
    // (䦂) CJK UNIFIED IDEOGRAPH-4982	[FB80 C982 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4982, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC982, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_192)
{
    // 4982 0041;	
    // (䦂) CJK UNIFIED IDEOGRAPH-4982	[FB80 C982 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4982, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC982, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_193)
{
    // 4982 0062;	
    // (䦂) CJK UNIFIED IDEOGRAPH-4982	[FB80 C982 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4982, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC982, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_194)
{
    // 4983 0021;	
    // (䦃) CJK UNIFIED IDEOGRAPH-4983	[FB80 C983 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4983, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC983, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_195)
{
    // 4983 003F;	
    // (䦃) CJK UNIFIED IDEOGRAPH-4983	[FB80 C983 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4983, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC983, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_196)
{
    // 4983 0061;	
    // (䦃) CJK UNIFIED IDEOGRAPH-4983	[FB80 C983 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4983, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC983, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_197)
{
    // 4983 0041;	
    // (䦃) CJK UNIFIED IDEOGRAPH-4983	[FB80 C983 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4983, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC983, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_198)
{
    // 4983 0062;	
    // (䦃) CJK UNIFIED IDEOGRAPH-4983	[FB80 C983 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4983, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC983, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_199)
{
    // 4984 0021;	
    // (䦄) CJK UNIFIED IDEOGRAPH-4984	[FB80 C984 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4984, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC984, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_200)
{
    // 4984 003F;	
    // (䦄) CJK UNIFIED IDEOGRAPH-4984	[FB80 C984 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4984, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC984, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_201)
{
    // 4984 0061;	
    // (䦄) CJK UNIFIED IDEOGRAPH-4984	[FB80 C984 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4984, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC984, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_202)
{
    // 4984 0041;	
    // (䦄) CJK UNIFIED IDEOGRAPH-4984	[FB80 C984 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4984, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC984, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_203)
{
    // 4984 0062;	
    // (䦄) CJK UNIFIED IDEOGRAPH-4984	[FB80 C984 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4984, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC984, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_204)
{
    // 4985 0021;	
    // (䦅) CJK UNIFIED IDEOGRAPH-4985	[FB80 C985 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4985, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC985, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_205)
{
    // 4985 003F;	
    // (䦅) CJK UNIFIED IDEOGRAPH-4985	[FB80 C985 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4985, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC985, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_206)
{
    // 4985 0061;	
    // (䦅) CJK UNIFIED IDEOGRAPH-4985	[FB80 C985 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4985, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC985, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_207)
{
    // 4985 0041;	
    // (䦅) CJK UNIFIED IDEOGRAPH-4985	[FB80 C985 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4985, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC985, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_208)
{
    // 4985 0062;	
    // (䦅) CJK UNIFIED IDEOGRAPH-4985	[FB80 C985 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4985, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC985, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_209)
{
    // 4986 0021;	
    // (䦆) CJK UNIFIED IDEOGRAPH-4986	[FB80 C986 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4986, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC986, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_210)
{
    // 4986 003F;	
    // (䦆) CJK UNIFIED IDEOGRAPH-4986	[FB80 C986 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4986, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC986, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_211)
{
    // 4986 0061;	
    // (䦆) CJK UNIFIED IDEOGRAPH-4986	[FB80 C986 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4986, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC986, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_212)
{
    // 4986 0041;	
    // (䦆) CJK UNIFIED IDEOGRAPH-4986	[FB80 C986 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4986, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC986, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_213)
{
    // 4986 0062;	
    // (䦆) CJK UNIFIED IDEOGRAPH-4986	[FB80 C986 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4986, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC986, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_214)
{
    // 4987 0021;	
    // (䦇) CJK UNIFIED IDEOGRAPH-4987	[FB80 C987 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4987, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC987, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_215)
{
    // 4987 003F;	
    // (䦇) CJK UNIFIED IDEOGRAPH-4987	[FB80 C987 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4987, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC987, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_216)
{
    // 4987 0061;	
    // (䦇) CJK UNIFIED IDEOGRAPH-4987	[FB80 C987 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4987, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC987, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_217)
{
    // 4987 0041;	
    // (䦇) CJK UNIFIED IDEOGRAPH-4987	[FB80 C987 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4987, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC987, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_218)
{
    // 4987 0062;	
    // (䦇) CJK UNIFIED IDEOGRAPH-4987	[FB80 C987 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4987, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC987, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_219)
{
    // 4988 0021;	
    // (䦈) CJK UNIFIED IDEOGRAPH-4988	[FB80 C988 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4988, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC988, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_220)
{
    // 4988 003F;	
    // (䦈) CJK UNIFIED IDEOGRAPH-4988	[FB80 C988 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4988, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC988, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_221)
{
    // 4988 0061;	
    // (䦈) CJK UNIFIED IDEOGRAPH-4988	[FB80 C988 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4988, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC988, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_222)
{
    // 4988 0041;	
    // (䦈) CJK UNIFIED IDEOGRAPH-4988	[FB80 C988 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4988, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC988, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_223)
{
    // 4988 0062;	
    // (䦈) CJK UNIFIED IDEOGRAPH-4988	[FB80 C988 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4988, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC988, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_224)
{
    // 4989 0021;	
    // (䦉) CJK UNIFIED IDEOGRAPH-4989	[FB80 C989 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4989, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC989, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_225)
{
    // 4989 003F;	
    // (䦉) CJK UNIFIED IDEOGRAPH-4989	[FB80 C989 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4989, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC989, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_226)
{
    // 4989 0061;	
    // (䦉) CJK UNIFIED IDEOGRAPH-4989	[FB80 C989 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4989, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC989, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_227)
{
    // 4989 0041;	
    // (䦉) CJK UNIFIED IDEOGRAPH-4989	[FB80 C989 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4989, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC989, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_228)
{
    // 4989 0062;	
    // (䦉) CJK UNIFIED IDEOGRAPH-4989	[FB80 C989 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4989, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC989, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_229)
{
    // 498A 0021;	
    // (䦊) CJK UNIFIED IDEOGRAPH-498A	[FB80 C98A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC98A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_230)
{
    // 498A 003F;	
    // (䦊) CJK UNIFIED IDEOGRAPH-498A	[FB80 C98A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC98A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_231)
{
    // 498A 0061;	
    // (䦊) CJK UNIFIED IDEOGRAPH-498A	[FB80 C98A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC98A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_232)
{
    // 498A 0041;	
    // (䦊) CJK UNIFIED IDEOGRAPH-498A	[FB80 C98A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x498A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC98A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_233)
{
    // 498A 0062;	
    // (䦊) CJK UNIFIED IDEOGRAPH-498A	[FB80 C98A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC98A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_234)
{
    // 498B 0021;	
    // (䦋) CJK UNIFIED IDEOGRAPH-498B	[FB80 C98B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC98B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_235)
{
    // 498B 003F;	
    // (䦋) CJK UNIFIED IDEOGRAPH-498B	[FB80 C98B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC98B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_236)
{
    // 498B 0061;	
    // (䦋) CJK UNIFIED IDEOGRAPH-498B	[FB80 C98B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC98B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_237)
{
    // 498B 0041;	
    // (䦋) CJK UNIFIED IDEOGRAPH-498B	[FB80 C98B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x498B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC98B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_238)
{
    // 498B 0062;	
    // (䦋) CJK UNIFIED IDEOGRAPH-498B	[FB80 C98B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC98B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_239)
{
    // 498C 0021;	
    // (䦌) CJK UNIFIED IDEOGRAPH-498C	[FB80 C98C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC98C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_240)
{
    // 498C 003F;	
    // (䦌) CJK UNIFIED IDEOGRAPH-498C	[FB80 C98C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC98C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_241)
{
    // 498C 0061;	
    // (䦌) CJK UNIFIED IDEOGRAPH-498C	[FB80 C98C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC98C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_242)
{
    // 498C 0041;	
    // (䦌) CJK UNIFIED IDEOGRAPH-498C	[FB80 C98C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x498C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC98C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_243)
{
    // 498C 0062;	
    // (䦌) CJK UNIFIED IDEOGRAPH-498C	[FB80 C98C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC98C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_244)
{
    // 498D 0021;	
    // (䦍) CJK UNIFIED IDEOGRAPH-498D	[FB80 C98D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC98D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_245)
{
    // 498D 003F;	
    // (䦍) CJK UNIFIED IDEOGRAPH-498D	[FB80 C98D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC98D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_246)
{
    // 498D 0061;	
    // (䦍) CJK UNIFIED IDEOGRAPH-498D	[FB80 C98D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC98D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_247)
{
    // 498D 0041;	
    // (䦍) CJK UNIFIED IDEOGRAPH-498D	[FB80 C98D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x498D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC98D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_248)
{
    // 498D 0062;	
    // (䦍) CJK UNIFIED IDEOGRAPH-498D	[FB80 C98D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC98D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_249)
{
    // 498E 0021;	
    // (䦎) CJK UNIFIED IDEOGRAPH-498E	[FB80 C98E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC98E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_250)
{
    // 498E 003F;	
    // (䦎) CJK UNIFIED IDEOGRAPH-498E	[FB80 C98E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC98E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_251)
{
    // 498E 0061;	
    // (䦎) CJK UNIFIED IDEOGRAPH-498E	[FB80 C98E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC98E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_252)
{
    // 498E 0041;	
    // (䦎) CJK UNIFIED IDEOGRAPH-498E	[FB80 C98E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x498E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC98E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_253)
{
    // 498E 0062;	
    // (䦎) CJK UNIFIED IDEOGRAPH-498E	[FB80 C98E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC98E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_254)
{
    // 498F 0021;	
    // (䦏) CJK UNIFIED IDEOGRAPH-498F	[FB80 C98F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC98F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_255)
{
    // 498F 003F;	
    // (䦏) CJK UNIFIED IDEOGRAPH-498F	[FB80 C98F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC98F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_256)
{
    // 498F 0061;	
    // (䦏) CJK UNIFIED IDEOGRAPH-498F	[FB80 C98F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC98F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_257)
{
    // 498F 0041;	
    // (䦏) CJK UNIFIED IDEOGRAPH-498F	[FB80 C98F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x498F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC98F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_258)
{
    // 498F 0062;	
    // (䦏) CJK UNIFIED IDEOGRAPH-498F	[FB80 C98F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x498F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC98F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_259)
{
    // 4990 0021;	
    // (䦐) CJK UNIFIED IDEOGRAPH-4990	[FB80 C990 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4990, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC990, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_260)
{
    // 4990 003F;	
    // (䦐) CJK UNIFIED IDEOGRAPH-4990	[FB80 C990 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4990, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC990, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_261)
{
    // 4990 0061;	
    // (䦐) CJK UNIFIED IDEOGRAPH-4990	[FB80 C990 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4990, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC990, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_262)
{
    // 4990 0041;	
    // (䦐) CJK UNIFIED IDEOGRAPH-4990	[FB80 C990 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4990, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC990, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_263)
{
    // 4990 0062;	
    // (䦐) CJK UNIFIED IDEOGRAPH-4990	[FB80 C990 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4990, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC990, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_264)
{
    // 4991 0021;	
    // (䦑) CJK UNIFIED IDEOGRAPH-4991	[FB80 C991 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4991, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC991, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_265)
{
    // 4991 003F;	
    // (䦑) CJK UNIFIED IDEOGRAPH-4991	[FB80 C991 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4991, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC991, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_266)
{
    // 4991 0061;	
    // (䦑) CJK UNIFIED IDEOGRAPH-4991	[FB80 C991 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4991, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC991, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_267)
{
    // 4991 0041;	
    // (䦑) CJK UNIFIED IDEOGRAPH-4991	[FB80 C991 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4991, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC991, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_268)
{
    // 4991 0062;	
    // (䦑) CJK UNIFIED IDEOGRAPH-4991	[FB80 C991 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4991, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC991, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_269)
{
    // 4992 0021;	
    // (䦒) CJK UNIFIED IDEOGRAPH-4992	[FB80 C992 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4992, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC992, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_270)
{
    // 4992 003F;	
    // (䦒) CJK UNIFIED IDEOGRAPH-4992	[FB80 C992 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4992, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC992, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_271)
{
    // 4992 0061;	
    // (䦒) CJK UNIFIED IDEOGRAPH-4992	[FB80 C992 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4992, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC992, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_272)
{
    // 4992 0041;	
    // (䦒) CJK UNIFIED IDEOGRAPH-4992	[FB80 C992 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4992, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC992, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_273)
{
    // 4992 0062;	
    // (䦒) CJK UNIFIED IDEOGRAPH-4992	[FB80 C992 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4992, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC992, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_274)
{
    // 4993 0021;	
    // (䦓) CJK UNIFIED IDEOGRAPH-4993	[FB80 C993 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4993, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC993, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_275)
{
    // 4993 003F;	
    // (䦓) CJK UNIFIED IDEOGRAPH-4993	[FB80 C993 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4993, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC993, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_276)
{
    // 4993 0061;	
    // (䦓) CJK UNIFIED IDEOGRAPH-4993	[FB80 C993 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4993, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC993, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_277)
{
    // 4993 0041;	
    // (䦓) CJK UNIFIED IDEOGRAPH-4993	[FB80 C993 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4993, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC993, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_278)
{
    // 4993 0062;	
    // (䦓) CJK UNIFIED IDEOGRAPH-4993	[FB80 C993 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4993, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC993, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_279)
{
    // 4994 0021;	
    // (䦔) CJK UNIFIED IDEOGRAPH-4994	[FB80 C994 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4994, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC994, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_280)
{
    // 4994 003F;	
    // (䦔) CJK UNIFIED IDEOGRAPH-4994	[FB80 C994 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4994, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC994, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_281)
{
    // 4994 0061;	
    // (䦔) CJK UNIFIED IDEOGRAPH-4994	[FB80 C994 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4994, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC994, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_282)
{
    // 4994 0041;	
    // (䦔) CJK UNIFIED IDEOGRAPH-4994	[FB80 C994 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4994, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC994, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_283)
{
    // 4994 0062;	
    // (䦔) CJK UNIFIED IDEOGRAPH-4994	[FB80 C994 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4994, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC994, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_284)
{
    // 4995 0021;	
    // (䦕) CJK UNIFIED IDEOGRAPH-4995	[FB80 C995 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4995, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC995, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_285)
{
    // 2F9EF 0021;	
    // (䦕) CJK COMPATIBILITY IDEOGRAPH-2F9EF	[FB80 C995 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9EF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC995, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_286)
{
    // 4995 003F;	
    // (䦕) CJK UNIFIED IDEOGRAPH-4995	[FB80 C995 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4995, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC995, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_287)
{
    // 2F9EF 003F;	
    // (䦕) CJK COMPATIBILITY IDEOGRAPH-2F9EF	[FB80 C995 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9EF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC995, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_288)
{
    // 4995 0061;	
    // (䦕) CJK UNIFIED IDEOGRAPH-4995	[FB80 C995 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4995, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC995, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_289)
{
    // 2F9EF 0061;	
    // (䦕) CJK COMPATIBILITY IDEOGRAPH-2F9EF	[FB80 C995 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9EF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC995, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_290)
{
    // 4995 0041;	
    // (䦕) CJK UNIFIED IDEOGRAPH-4995	[FB80 C995 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4995, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC995, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_291)
{
    // 2F9EF 0041;	
    // (䦕) CJK COMPATIBILITY IDEOGRAPH-2F9EF	[FB80 C995 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2F9EF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC995, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_292)
{
    // 4995 0062;	
    // (䦕) CJK UNIFIED IDEOGRAPH-4995	[FB80 C995 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4995, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC995, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_293)
{
    // 2F9EF 0062;	
    // (䦕) CJK COMPATIBILITY IDEOGRAPH-2F9EF	[FB80 C995 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2F9EF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC995, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_294)
{
    // 4996 0021;	
    // (䦖) CJK UNIFIED IDEOGRAPH-4996	[FB80 C996 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4996, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC996, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_295)
{
    // 4996 003F;	
    // (䦖) CJK UNIFIED IDEOGRAPH-4996	[FB80 C996 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4996, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC996, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_296)
{
    // 4996 0061;	
    // (䦖) CJK UNIFIED IDEOGRAPH-4996	[FB80 C996 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4996, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC996, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_297)
{
    // 4996 0041;	
    // (䦖) CJK UNIFIED IDEOGRAPH-4996	[FB80 C996 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4996, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC996, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_298)
{
    // 4996 0062;	
    // (䦖) CJK UNIFIED IDEOGRAPH-4996	[FB80 C996 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4996, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC996, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_299)
{
    // 4997 0021;	
    // (䦗) CJK UNIFIED IDEOGRAPH-4997	[FB80 C997 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4997, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC997, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_300)
{
    // 4997 003F;	
    // (䦗) CJK UNIFIED IDEOGRAPH-4997	[FB80 C997 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4997, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC997, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_301)
{
    // 4997 0061;	
    // (䦗) CJK UNIFIED IDEOGRAPH-4997	[FB80 C997 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4997, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC997, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_302)
{
    // 4997 0041;	
    // (䦗) CJK UNIFIED IDEOGRAPH-4997	[FB80 C997 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4997, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC997, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_303)
{
    // 4997 0062;	
    // (䦗) CJK UNIFIED IDEOGRAPH-4997	[FB80 C997 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4997, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC997, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_304)
{
    // 4998 0021;	
    // (䦘) CJK UNIFIED IDEOGRAPH-4998	[FB80 C998 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4998, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC998, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_305)
{
    // 4998 003F;	
    // (䦘) CJK UNIFIED IDEOGRAPH-4998	[FB80 C998 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4998, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC998, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_306)
{
    // 4998 0061;	
    // (䦘) CJK UNIFIED IDEOGRAPH-4998	[FB80 C998 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4998, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC998, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_307)
{
    // 4998 0041;	
    // (䦘) CJK UNIFIED IDEOGRAPH-4998	[FB80 C998 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4998, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC998, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_308)
{
    // 4998 0062;	
    // (䦘) CJK UNIFIED IDEOGRAPH-4998	[FB80 C998 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4998, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC998, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_309)
{
    // 4999 0021;	
    // (䦙) CJK UNIFIED IDEOGRAPH-4999	[FB80 C999 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4999, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC999, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_310)
{
    // 4999 003F;	
    // (䦙) CJK UNIFIED IDEOGRAPH-4999	[FB80 C999 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4999, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC999, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_311)
{
    // 4999 0061;	
    // (䦙) CJK UNIFIED IDEOGRAPH-4999	[FB80 C999 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4999, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC999, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_312)
{
    // 4999 0041;	
    // (䦙) CJK UNIFIED IDEOGRAPH-4999	[FB80 C999 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x4999, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC999, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_313)
{
    // 4999 0062;	
    // (䦙) CJK UNIFIED IDEOGRAPH-4999	[FB80 C999 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x4999, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC999, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_314)
{
    // 499A 0021;	
    // (䦚) CJK UNIFIED IDEOGRAPH-499A	[FB80 C99A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499A, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC99A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_315)
{
    // 499A 003F;	
    // (䦚) CJK UNIFIED IDEOGRAPH-499A	[FB80 C99A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499A, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC99A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_316)
{
    // 499A 0061;	
    // (䦚) CJK UNIFIED IDEOGRAPH-499A	[FB80 C99A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499A, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC99A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_317)
{
    // 499A 0041;	
    // (䦚) CJK UNIFIED IDEOGRAPH-499A	[FB80 C99A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x499A, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC99A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_318)
{
    // 499A 0062;	
    // (䦚) CJK UNIFIED IDEOGRAPH-499A	[FB80 C99A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499A, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC99A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_319)
{
    // 499B 0021;	
    // (䦛) CJK UNIFIED IDEOGRAPH-499B	[FB80 C99B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499B, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC99B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_320)
{
    // 499B 003F;	
    // (䦛) CJK UNIFIED IDEOGRAPH-499B	[FB80 C99B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499B, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC99B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_321)
{
    // 499B 0061;	
    // (䦛) CJK UNIFIED IDEOGRAPH-499B	[FB80 C99B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499B, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC99B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_322)
{
    // 499B 0041;	
    // (䦛) CJK UNIFIED IDEOGRAPH-499B	[FB80 C99B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x499B, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC99B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_323)
{
    // 499B 0062;	
    // (䦛) CJK UNIFIED IDEOGRAPH-499B	[FB80 C99B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499B, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC99B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_324)
{
    // 499C 0021;	
    // (䦜) CJK UNIFIED IDEOGRAPH-499C	[FB80 C99C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499C, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC99C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_325)
{
    // 499C 003F;	
    // (䦜) CJK UNIFIED IDEOGRAPH-499C	[FB80 C99C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499C, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC99C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_326)
{
    // 499C 0061;	
    // (䦜) CJK UNIFIED IDEOGRAPH-499C	[FB80 C99C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499C, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC99C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_327)
{
    // 499C 0041;	
    // (䦜) CJK UNIFIED IDEOGRAPH-499C	[FB80 C99C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x499C, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC99C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_328)
{
    // 499C 0062;	
    // (䦜) CJK UNIFIED IDEOGRAPH-499C	[FB80 C99C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499C, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC99C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_329)
{
    // 499D 0021;	
    // (䦝) CJK UNIFIED IDEOGRAPH-499D	[FB80 C99D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499D, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC99D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_330)
{
    // 499D 003F;	
    // (䦝) CJK UNIFIED IDEOGRAPH-499D	[FB80 C99D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499D, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC99D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_331)
{
    // 499D 0061;	
    // (䦝) CJK UNIFIED IDEOGRAPH-499D	[FB80 C99D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499D, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC99D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_332)
{
    // 499D 0041;	
    // (䦝) CJK UNIFIED IDEOGRAPH-499D	[FB80 C99D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x499D, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC99D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_333)
{
    // 499D 0062;	
    // (䦝) CJK UNIFIED IDEOGRAPH-499D	[FB80 C99D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499D, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC99D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_334)
{
    // 499E 0021;	
    // (䦞) CJK UNIFIED IDEOGRAPH-499E	[FB80 C99E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499E, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC99E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_335)
{
    // 499E 003F;	
    // (䦞) CJK UNIFIED IDEOGRAPH-499E	[FB80 C99E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499E, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC99E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_336)
{
    // 499E 0061;	
    // (䦞) CJK UNIFIED IDEOGRAPH-499E	[FB80 C99E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499E, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC99E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_337)
{
    // 499E 0041;	
    // (䦞) CJK UNIFIED IDEOGRAPH-499E	[FB80 C99E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x499E, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC99E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_338)
{
    // 499E 0062;	
    // (䦞) CJK UNIFIED IDEOGRAPH-499E	[FB80 C99E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499E, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC99E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_339)
{
    // 499F 0021;	
    // (䦟) CJK UNIFIED IDEOGRAPH-499F	[FB80 C99F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499F, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC99F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_340)
{
    // 499F 003F;	
    // (䦟) CJK UNIFIED IDEOGRAPH-499F	[FB80 C99F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499F, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC99F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_341)
{
    // 499F 0061;	
    // (䦟) CJK UNIFIED IDEOGRAPH-499F	[FB80 C99F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499F, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC99F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_342)
{
    // 499F 0041;	
    // (䦟) CJK UNIFIED IDEOGRAPH-499F	[FB80 C99F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x499F, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC99F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_343)
{
    // 499F 0062;	
    // (䦟) CJK UNIFIED IDEOGRAPH-499F	[FB80 C99F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x499F, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC99F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_344)
{
    // 49A0 0021;	
    // (䦠) CJK UNIFIED IDEOGRAPH-49A0	[FB80 C9A0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_345)
{
    // 49A0 003F;	
    // (䦠) CJK UNIFIED IDEOGRAPH-49A0	[FB80 C9A0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9A0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_346)
{
    // 49A0 0061;	
    // (䦠) CJK UNIFIED IDEOGRAPH-49A0	[FB80 C9A0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_347)
{
    // 49A0 0041;	
    // (䦠) CJK UNIFIED IDEOGRAPH-49A0	[FB80 C9A0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49A0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_348)
{
    // 49A0 0062;	
    // (䦠) CJK UNIFIED IDEOGRAPH-49A0	[FB80 C9A0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_349)
{
    // 49A1 0021;	
    // (䦡) CJK UNIFIED IDEOGRAPH-49A1	[FB80 C9A1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_350)
{
    // 49A1 003F;	
    // (䦡) CJK UNIFIED IDEOGRAPH-49A1	[FB80 C9A1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9A1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_351)
{
    // 49A1 0061;	
    // (䦡) CJK UNIFIED IDEOGRAPH-49A1	[FB80 C9A1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_352)
{
    // 49A1 0041;	
    // (䦡) CJK UNIFIED IDEOGRAPH-49A1	[FB80 C9A1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49A1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_353)
{
    // 49A1 0062;	
    // (䦡) CJK UNIFIED IDEOGRAPH-49A1	[FB80 C9A1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_354)
{
    // 49A2 0021;	
    // (䦢) CJK UNIFIED IDEOGRAPH-49A2	[FB80 C9A2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_355)
{
    // 49A2 003F;	
    // (䦢) CJK UNIFIED IDEOGRAPH-49A2	[FB80 C9A2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9A2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_356)
{
    // 49A2 0061;	
    // (䦢) CJK UNIFIED IDEOGRAPH-49A2	[FB80 C9A2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_357)
{
    // 49A2 0041;	
    // (䦢) CJK UNIFIED IDEOGRAPH-49A2	[FB80 C9A2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49A2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_358)
{
    // 49A2 0062;	
    // (䦢) CJK UNIFIED IDEOGRAPH-49A2	[FB80 C9A2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_359)
{
    // 49A3 0021;	
    // (䦣) CJK UNIFIED IDEOGRAPH-49A3	[FB80 C9A3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_360)
{
    // 49A3 003F;	
    // (䦣) CJK UNIFIED IDEOGRAPH-49A3	[FB80 C9A3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9A3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_361)
{
    // 49A3 0061;	
    // (䦣) CJK UNIFIED IDEOGRAPH-49A3	[FB80 C9A3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_362)
{
    // 49A3 0041;	
    // (䦣) CJK UNIFIED IDEOGRAPH-49A3	[FB80 C9A3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49A3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_363)
{
    // 49A3 0062;	
    // (䦣) CJK UNIFIED IDEOGRAPH-49A3	[FB80 C9A3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_364)
{
    // 49A4 0021;	
    // (䦤) CJK UNIFIED IDEOGRAPH-49A4	[FB80 C9A4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_365)
{
    // 49A4 003F;	
    // (䦤) CJK UNIFIED IDEOGRAPH-49A4	[FB80 C9A4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9A4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_366)
{
    // 49A4 0061;	
    // (䦤) CJK UNIFIED IDEOGRAPH-49A4	[FB80 C9A4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_367)
{
    // 49A4 0041;	
    // (䦤) CJK UNIFIED IDEOGRAPH-49A4	[FB80 C9A4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49A4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_368)
{
    // 49A4 0062;	
    // (䦤) CJK UNIFIED IDEOGRAPH-49A4	[FB80 C9A4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_369)
{
    // 49A5 0021;	
    // (䦥) CJK UNIFIED IDEOGRAPH-49A5	[FB80 C9A5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_370)
{
    // 49A5 003F;	
    // (䦥) CJK UNIFIED IDEOGRAPH-49A5	[FB80 C9A5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9A5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_371)
{
    // 49A5 0061;	
    // (䦥) CJK UNIFIED IDEOGRAPH-49A5	[FB80 C9A5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_372)
{
    // 49A5 0041;	
    // (䦥) CJK UNIFIED IDEOGRAPH-49A5	[FB80 C9A5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49A5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_373)
{
    // 49A5 0062;	
    // (䦥) CJK UNIFIED IDEOGRAPH-49A5	[FB80 C9A5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_374)
{
    // 49A6 0021;	
    // (䦦) CJK UNIFIED IDEOGRAPH-49A6	[FB80 C9A6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_375)
{
    // 49A6 003F;	
    // (䦦) CJK UNIFIED IDEOGRAPH-49A6	[FB80 C9A6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9A6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_376)
{
    // 49A6 0061;	
    // (䦦) CJK UNIFIED IDEOGRAPH-49A6	[FB80 C9A6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_377)
{
    // 49A6 0041;	
    // (䦦) CJK UNIFIED IDEOGRAPH-49A6	[FB80 C9A6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49A6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_378)
{
    // 49A6 0062;	
    // (䦦) CJK UNIFIED IDEOGRAPH-49A6	[FB80 C9A6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_379)
{
    // 49A7 0021;	
    // (䦧) CJK UNIFIED IDEOGRAPH-49A7	[FB80 C9A7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_380)
{
    // 49A7 003F;	
    // (䦧) CJK UNIFIED IDEOGRAPH-49A7	[FB80 C9A7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9A7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_381)
{
    // 49A7 0061;	
    // (䦧) CJK UNIFIED IDEOGRAPH-49A7	[FB80 C9A7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_382)
{
    // 49A7 0041;	
    // (䦧) CJK UNIFIED IDEOGRAPH-49A7	[FB80 C9A7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49A7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_383)
{
    // 49A7 0062;	
    // (䦧) CJK UNIFIED IDEOGRAPH-49A7	[FB80 C9A7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_384)
{
    // 49A8 0021;	
    // (䦨) CJK UNIFIED IDEOGRAPH-49A8	[FB80 C9A8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_385)
{
    // 49A8 003F;	
    // (䦨) CJK UNIFIED IDEOGRAPH-49A8	[FB80 C9A8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9A8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_386)
{
    // 49A8 0061;	
    // (䦨) CJK UNIFIED IDEOGRAPH-49A8	[FB80 C9A8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_387)
{
    // 49A8 0041;	
    // (䦨) CJK UNIFIED IDEOGRAPH-49A8	[FB80 C9A8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49A8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_388)
{
    // 49A8 0062;	
    // (䦨) CJK UNIFIED IDEOGRAPH-49A8	[FB80 C9A8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_389)
{
    // 49A9 0021;	
    // (䦩) CJK UNIFIED IDEOGRAPH-49A9	[FB80 C9A9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_390)
{
    // 49A9 003F;	
    // (䦩) CJK UNIFIED IDEOGRAPH-49A9	[FB80 C9A9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9A9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_391)
{
    // 49A9 0061;	
    // (䦩) CJK UNIFIED IDEOGRAPH-49A9	[FB80 C9A9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_392)
{
    // 49A9 0041;	
    // (䦩) CJK UNIFIED IDEOGRAPH-49A9	[FB80 C9A9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49A9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_393)
{
    // 49A9 0062;	
    // (䦩) CJK UNIFIED IDEOGRAPH-49A9	[FB80 C9A9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49A9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9A9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_394)
{
    // 49AA 0021;	
    // (䦪) CJK UNIFIED IDEOGRAPH-49AA	[FB80 C9AA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_395)
{
    // 49AA 003F;	
    // (䦪) CJK UNIFIED IDEOGRAPH-49AA	[FB80 C9AA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9AA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_396)
{
    // 49AA 0061;	
    // (䦪) CJK UNIFIED IDEOGRAPH-49AA	[FB80 C9AA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_397)
{
    // 49AA 0041;	
    // (䦪) CJK UNIFIED IDEOGRAPH-49AA	[FB80 C9AA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49AA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_398)
{
    // 49AA 0062;	
    // (䦪) CJK UNIFIED IDEOGRAPH-49AA	[FB80 C9AA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_399)
{
    // 49AB 0021;	
    // (䦫) CJK UNIFIED IDEOGRAPH-49AB	[FB80 C9AB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_400)
{
    // 49AB 003F;	
    // (䦫) CJK UNIFIED IDEOGRAPH-49AB	[FB80 C9AB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9AB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_401)
{
    // 49AB 0061;	
    // (䦫) CJK UNIFIED IDEOGRAPH-49AB	[FB80 C9AB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_402)
{
    // 49AB 0041;	
    // (䦫) CJK UNIFIED IDEOGRAPH-49AB	[FB80 C9AB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49AB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_403)
{
    // 49AB 0062;	
    // (䦫) CJK UNIFIED IDEOGRAPH-49AB	[FB80 C9AB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_404)
{
    // 49AC 0021;	
    // (䦬) CJK UNIFIED IDEOGRAPH-49AC	[FB80 C9AC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_405)
{
    // 49AC 003F;	
    // (䦬) CJK UNIFIED IDEOGRAPH-49AC	[FB80 C9AC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9AC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_406)
{
    // 49AC 0061;	
    // (䦬) CJK UNIFIED IDEOGRAPH-49AC	[FB80 C9AC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_407)
{
    // 49AC 0041;	
    // (䦬) CJK UNIFIED IDEOGRAPH-49AC	[FB80 C9AC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49AC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_408)
{
    // 49AC 0062;	
    // (䦬) CJK UNIFIED IDEOGRAPH-49AC	[FB80 C9AC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_409)
{
    // 49AD 0021;	
    // (䦭) CJK UNIFIED IDEOGRAPH-49AD	[FB80 C9AD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_410)
{
    // 49AD 003F;	
    // (䦭) CJK UNIFIED IDEOGRAPH-49AD	[FB80 C9AD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9AD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_411)
{
    // 49AD 0061;	
    // (䦭) CJK UNIFIED IDEOGRAPH-49AD	[FB80 C9AD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_412)
{
    // 49AD 0041;	
    // (䦭) CJK UNIFIED IDEOGRAPH-49AD	[FB80 C9AD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49AD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_413)
{
    // 49AD 0062;	
    // (䦭) CJK UNIFIED IDEOGRAPH-49AD	[FB80 C9AD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_414)
{
    // 49AE 0021;	
    // (䦮) CJK UNIFIED IDEOGRAPH-49AE	[FB80 C9AE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_415)
{
    // 49AE 003F;	
    // (䦮) CJK UNIFIED IDEOGRAPH-49AE	[FB80 C9AE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9AE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_416)
{
    // 49AE 0061;	
    // (䦮) CJK UNIFIED IDEOGRAPH-49AE	[FB80 C9AE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_417)
{
    // 49AE 0041;	
    // (䦮) CJK UNIFIED IDEOGRAPH-49AE	[FB80 C9AE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49AE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_418)
{
    // 49AE 0062;	
    // (䦮) CJK UNIFIED IDEOGRAPH-49AE	[FB80 C9AE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_419)
{
    // 49AF 0021;	
    // (䦯) CJK UNIFIED IDEOGRAPH-49AF	[FB80 C9AF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_420)
{
    // 49AF 003F;	
    // (䦯) CJK UNIFIED IDEOGRAPH-49AF	[FB80 C9AF 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AF, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9AF, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_421)
{
    // 49AF 0061;	
    // (䦯) CJK UNIFIED IDEOGRAPH-49AF	[FB80 C9AF 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AF, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_422)
{
    // 49AF 0041;	
    // (䦯) CJK UNIFIED IDEOGRAPH-49AF	[FB80 C9AF 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49AF, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AF, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_423)
{
    // 49AF 0062;	
    // (䦯) CJK UNIFIED IDEOGRAPH-49AF	[FB80 C9AF 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49AF, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9AF, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_424)
{
    // 49B0 0021;	
    // (䦰) CJK UNIFIED IDEOGRAPH-49B0	[FB80 C9B0 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B0, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B0, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_425)
{
    // 49B0 003F;	
    // (䦰) CJK UNIFIED IDEOGRAPH-49B0	[FB80 C9B0 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B0, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9B0, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_426)
{
    // 49B0 0061;	
    // (䦰) CJK UNIFIED IDEOGRAPH-49B0	[FB80 C9B0 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B0, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_427)
{
    // 49B0 0041;	
    // (䦰) CJK UNIFIED IDEOGRAPH-49B0	[FB80 C9B0 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49B0, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B0, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_428)
{
    // 49B0 0062;	
    // (䦰) CJK UNIFIED IDEOGRAPH-49B0	[FB80 C9B0 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B0, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B0, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_429)
{
    // 49B1 0021;	
    // (䦱) CJK UNIFIED IDEOGRAPH-49B1	[FB80 C9B1 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B1, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B1, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_430)
{
    // 49B1 003F;	
    // (䦱) CJK UNIFIED IDEOGRAPH-49B1	[FB80 C9B1 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B1, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9B1, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_431)
{
    // 49B1 0061;	
    // (䦱) CJK UNIFIED IDEOGRAPH-49B1	[FB80 C9B1 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B1, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_432)
{
    // 49B1 0041;	
    // (䦱) CJK UNIFIED IDEOGRAPH-49B1	[FB80 C9B1 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49B1, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B1, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_433)
{
    // 49B1 0062;	
    // (䦱) CJK UNIFIED IDEOGRAPH-49B1	[FB80 C9B1 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B1, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B1, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_434)
{
    // 49B2 0021;	
    // (䦲) CJK UNIFIED IDEOGRAPH-49B2	[FB80 C9B2 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B2, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B2, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_435)
{
    // 49B2 003F;	
    // (䦲) CJK UNIFIED IDEOGRAPH-49B2	[FB80 C9B2 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B2, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9B2, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_436)
{
    // 49B2 0061;	
    // (䦲) CJK UNIFIED IDEOGRAPH-49B2	[FB80 C9B2 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B2, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_437)
{
    // 49B2 0041;	
    // (䦲) CJK UNIFIED IDEOGRAPH-49B2	[FB80 C9B2 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49B2, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B2, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_438)
{
    // 49B2 0062;	
    // (䦲) CJK UNIFIED IDEOGRAPH-49B2	[FB80 C9B2 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B2, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B2, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_439)
{
    // 49B3 0021;	
    // (䦳) CJK UNIFIED IDEOGRAPH-49B3	[FB80 C9B3 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B3, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B3, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_440)
{
    // 49B3 003F;	
    // (䦳) CJK UNIFIED IDEOGRAPH-49B3	[FB80 C9B3 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B3, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9B3, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_441)
{
    // 49B3 0061;	
    // (䦳) CJK UNIFIED IDEOGRAPH-49B3	[FB80 C9B3 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B3, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_442)
{
    // 49B3 0041;	
    // (䦳) CJK UNIFIED IDEOGRAPH-49B3	[FB80 C9B3 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49B3, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B3, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_443)
{
    // 49B3 0062;	
    // (䦳) CJK UNIFIED IDEOGRAPH-49B3	[FB80 C9B3 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B3, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B3, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_444)
{
    // 49B4 0021;	
    // (䦴) CJK UNIFIED IDEOGRAPH-49B4	[FB80 C9B4 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B4, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B4, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_445)
{
    // 49B4 003F;	
    // (䦴) CJK UNIFIED IDEOGRAPH-49B4	[FB80 C9B4 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B4, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9B4, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_446)
{
    // 49B4 0061;	
    // (䦴) CJK UNIFIED IDEOGRAPH-49B4	[FB80 C9B4 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B4, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_447)
{
    // 49B4 0041;	
    // (䦴) CJK UNIFIED IDEOGRAPH-49B4	[FB80 C9B4 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49B4, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B4, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_448)
{
    // 49B4 0062;	
    // (䦴) CJK UNIFIED IDEOGRAPH-49B4	[FB80 C9B4 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B4, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B4, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_449)
{
    // 49B5 0021;	
    // (䦵) CJK UNIFIED IDEOGRAPH-49B5	[FB80 C9B5 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B5, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B5, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_450)
{
    // 49B5 003F;	
    // (䦵) CJK UNIFIED IDEOGRAPH-49B5	[FB80 C9B5 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B5, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9B5, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_451)
{
    // 49B5 0061;	
    // (䦵) CJK UNIFIED IDEOGRAPH-49B5	[FB80 C9B5 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B5, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_452)
{
    // 49B5 0041;	
    // (䦵) CJK UNIFIED IDEOGRAPH-49B5	[FB80 C9B5 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49B5, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B5, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_453)
{
    // 49B5 0062;	
    // (䦵) CJK UNIFIED IDEOGRAPH-49B5	[FB80 C9B5 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B5, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B5, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_454)
{
    // 49B6 0021;	
    // (䦶) CJK UNIFIED IDEOGRAPH-49B6	[FB80 C9B6 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B6, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B6, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_455)
{
    // 49B6 003F;	
    // (䦶) CJK UNIFIED IDEOGRAPH-49B6	[FB80 C9B6 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B6, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9B6, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_456)
{
    // 49B6 0061;	
    // (䦶) CJK UNIFIED IDEOGRAPH-49B6	[FB80 C9B6 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B6, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_457)
{
    // 49B6 0041;	
    // (䦶) CJK UNIFIED IDEOGRAPH-49B6	[FB80 C9B6 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49B6, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B6, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_458)
{
    // 49B6 0062;	
    // (䦶) CJK UNIFIED IDEOGRAPH-49B6	[FB80 C9B6 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B6, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B6, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_459)
{
    // 49B7 0021;	
    // (䦷) CJK UNIFIED IDEOGRAPH-49B7	[FB80 C9B7 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B7, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B7, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_460)
{
    // 49B7 003F;	
    // (䦷) CJK UNIFIED IDEOGRAPH-49B7	[FB80 C9B7 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B7, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9B7, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_461)
{
    // 49B7 0061;	
    // (䦷) CJK UNIFIED IDEOGRAPH-49B7	[FB80 C9B7 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B7, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_462)
{
    // 49B7 0041;	
    // (䦷) CJK UNIFIED IDEOGRAPH-49B7	[FB80 C9B7 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49B7, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B7, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_463)
{
    // 49B7 0062;	
    // (䦷) CJK UNIFIED IDEOGRAPH-49B7	[FB80 C9B7 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B7, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B7, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_464)
{
    // 49B8 0021;	
    // (䦸) CJK UNIFIED IDEOGRAPH-49B8	[FB80 C9B8 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B8, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B8, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_465)
{
    // 49B8 003F;	
    // (䦸) CJK UNIFIED IDEOGRAPH-49B8	[FB80 C9B8 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B8, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9B8, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_466)
{
    // 49B8 0061;	
    // (䦸) CJK UNIFIED IDEOGRAPH-49B8	[FB80 C9B8 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B8, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_467)
{
    // 49B8 0041;	
    // (䦸) CJK UNIFIED IDEOGRAPH-49B8	[FB80 C9B8 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49B8, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B8, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_468)
{
    // 49B8 0062;	
    // (䦸) CJK UNIFIED IDEOGRAPH-49B8	[FB80 C9B8 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B8, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B8, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_469)
{
    // 49B9 0021;	
    // (䦹) CJK UNIFIED IDEOGRAPH-49B9	[FB80 C9B9 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B9, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B9, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_470)
{
    // 49B9 003F;	
    // (䦹) CJK UNIFIED IDEOGRAPH-49B9	[FB80 C9B9 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B9, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9B9, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_471)
{
    // 49B9 0061;	
    // (䦹) CJK UNIFIED IDEOGRAPH-49B9	[FB80 C9B9 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B9, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_472)
{
    // 49B9 0041;	
    // (䦹) CJK UNIFIED IDEOGRAPH-49B9	[FB80 C9B9 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49B9, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B9, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_473)
{
    // 49B9 0062;	
    // (䦹) CJK UNIFIED IDEOGRAPH-49B9	[FB80 C9B9 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49B9, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9B9, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_474)
{
    // 49BA 0021;	
    // (䦺) CJK UNIFIED IDEOGRAPH-49BA	[FB80 C9BA 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BA, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BA, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_475)
{
    // 49BA 003F;	
    // (䦺) CJK UNIFIED IDEOGRAPH-49BA	[FB80 C9BA 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BA, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9BA, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_476)
{
    // 49BA 0061;	
    // (䦺) CJK UNIFIED IDEOGRAPH-49BA	[FB80 C9BA 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BA, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_477)
{
    // 49BA 0041;	
    // (䦺) CJK UNIFIED IDEOGRAPH-49BA	[FB80 C9BA 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49BA, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BA, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_478)
{
    // 49BA 0062;	
    // (䦺) CJK UNIFIED IDEOGRAPH-49BA	[FB80 C9BA 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BA, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BA, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_479)
{
    // 49BB 0021;	
    // (䦻) CJK UNIFIED IDEOGRAPH-49BB	[FB80 C9BB 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BB, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BB, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_480)
{
    // 49BB 003F;	
    // (䦻) CJK UNIFIED IDEOGRAPH-49BB	[FB80 C9BB 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BB, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9BB, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_481)
{
    // 49BB 0061;	
    // (䦻) CJK UNIFIED IDEOGRAPH-49BB	[FB80 C9BB 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BB, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_482)
{
    // 49BB 0041;	
    // (䦻) CJK UNIFIED IDEOGRAPH-49BB	[FB80 C9BB 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49BB, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BB, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_483)
{
    // 49BB 0062;	
    // (䦻) CJK UNIFIED IDEOGRAPH-49BB	[FB80 C9BB 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BB, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BB, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_484)
{
    // 49BC 0021;	
    // (䦼) CJK UNIFIED IDEOGRAPH-49BC	[FB80 C9BC 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BC, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BC, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_485)
{
    // 49BC 003F;	
    // (䦼) CJK UNIFIED IDEOGRAPH-49BC	[FB80 C9BC 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BC, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9BC, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_486)
{
    // 49BC 0061;	
    // (䦼) CJK UNIFIED IDEOGRAPH-49BC	[FB80 C9BC 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BC, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_487)
{
    // 49BC 0041;	
    // (䦼) CJK UNIFIED IDEOGRAPH-49BC	[FB80 C9BC 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49BC, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BC, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_488)
{
    // 49BC 0062;	
    // (䦼) CJK UNIFIED IDEOGRAPH-49BC	[FB80 C9BC 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BC, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BC, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_489)
{
    // 49BD 0021;	
    // (䦽) CJK UNIFIED IDEOGRAPH-49BD	[FB80 C9BD 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BD, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BD, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_490)
{
    // 49BD 003F;	
    // (䦽) CJK UNIFIED IDEOGRAPH-49BD	[FB80 C9BD 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BD, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9BD, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_491)
{
    // 49BD 0061;	
    // (䦽) CJK UNIFIED IDEOGRAPH-49BD	[FB80 C9BD 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BD, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_492)
{
    // 49BD 0041;	
    // (䦽) CJK UNIFIED IDEOGRAPH-49BD	[FB80 C9BD 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49BD, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BD, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_493)
{
    // 49BD 0062;	
    // (䦽) CJK UNIFIED IDEOGRAPH-49BD	[FB80 C9BD 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BD, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BD, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_494)
{
    // 49BE 0021;	
    // (䦾) CJK UNIFIED IDEOGRAPH-49BE	[FB80 C9BE 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BE, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BE, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_495)
{
    // 49BE 003F;	
    // (䦾) CJK UNIFIED IDEOGRAPH-49BE	[FB80 C9BE 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BE, 0x003F };
    uint32_t const ces[10] = { 0xFB80, 0xC9BE, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_496)
{
    // 49BE 0061;	
    // (䦾) CJK UNIFIED IDEOGRAPH-49BE	[FB80 C9BE 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BE, 0x0061 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_497)
{
    // 49BE 0041;	
    // (䦾) CJK UNIFIED IDEOGRAPH-49BE	[FB80 C9BE 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x49BE, 0x0041 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BE, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_498)
{
    // 49BE 0062;	
    // (䦾) CJK UNIFIED IDEOGRAPH-49BE	[FB80 C9BE 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BE, 0x0062 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BE, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_382_499)
{
    // 49BF 0021;	
    // (䦿) CJK UNIFIED IDEOGRAPH-49BF	[FB80 C9BF 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x49BF, 0x0021 };
    uint32_t const ces[10] = { 0xFB80, 0xC9BF, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

