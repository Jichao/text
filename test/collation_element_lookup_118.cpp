// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_118_000)
{
    // 10144 ; [*1B73.0020.0002] 
    // GREEK ACROPHONIC ATTIC FIFTY

    uint32_t const cps[1] = { 0x10144 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b73), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_001)
{
    // 10145 ; [*1B74.0020.0002] 
    // GREEK ACROPHONIC ATTIC FIVE HUNDRED

    uint32_t const cps[1] = { 0x10145 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b74), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_002)
{
    // 10146 ; [*1B75.0020.0002] 
    // GREEK ACROPHONIC ATTIC FIVE THOUSAND

    uint32_t const cps[1] = { 0x10146 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b75), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_003)
{
    // 10147 ; [*1B76.0020.0002] 
    // GREEK ACROPHONIC ATTIC FIFTY THOUSAND

    uint32_t const cps[1] = { 0x10147 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b76), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_004)
{
    // 10148 ; [.1CA8.0020.0002] 
    // GREEK ACROPHONIC ATTIC FIVE TALENTS

    uint32_t const cps[1] = { 0x10148 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_005)
{
    // 10149 ; [*1B77.0020.0002] 
    // GREEK ACROPHONIC ATTIC TEN TALENTS

    uint32_t const cps[1] = { 0x10149 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b77), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_006)
{
    // 1014A ; [*1B78.0020.0002] 
    // GREEK ACROPHONIC ATTIC FIFTY TALENTS

    uint32_t const cps[1] = { 0x1014a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b78), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_007)
{
    // 1014B ; [*1B79.0020.0002] 
    // GREEK ACROPHONIC ATTIC ONE HUNDRED TALENTS

    uint32_t const cps[1] = { 0x1014b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b79), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_008)
{
    // 1014C ; [*1B7A.0020.0002] 
    // GREEK ACROPHONIC ATTIC FIVE HUNDRED TALENTS

    uint32_t const cps[1] = { 0x1014c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b7a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_009)
{
    // 1014D ; [*1B7B.0020.0002] 
    // GREEK ACROPHONIC ATTIC ONE THOUSAND TALENTS

    uint32_t const cps[1] = { 0x1014d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b7b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_010)
{
    // 1014E ; [*1B7C.0020.0002] 
    // GREEK ACROPHONIC ATTIC FIVE THOUSAND TALENTS

    uint32_t const cps[1] = { 0x1014e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b7c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_011)
{
    // 1014F ; [.1CA8.0020.0002] 
    // GREEK ACROPHONIC ATTIC FIVE STATERS

    uint32_t const cps[1] = { 0x1014f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_012)
{
    // 10150 ; [*1B7D.0020.0002] 
    // GREEK ACROPHONIC ATTIC TEN STATERS

    uint32_t const cps[1] = { 0x10150 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b7d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_013)
{
    // 10151 ; [*1B7E.0020.0002] 
    // GREEK ACROPHONIC ATTIC FIFTY STATERS

    uint32_t const cps[1] = { 0x10151 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b7e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_014)
{
    // 10152 ; [*1B7F.0020.0002] 
    // GREEK ACROPHONIC ATTIC ONE HUNDRED STATERS

    uint32_t const cps[1] = { 0x10152 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b7f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_015)
{
    // 10153 ; [*1B80.0020.0002] 
    // GREEK ACROPHONIC ATTIC FIVE HUNDRED STATERS

    uint32_t const cps[1] = { 0x10153 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b80), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_016)
{
    // 10154 ; [*1B81.0020.0002] 
    // GREEK ACROPHONIC ATTIC ONE THOUSAND STATERS

    uint32_t const cps[1] = { 0x10154 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b81), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_017)
{
    // 10155 ; [*1B82.0020.0002] 
    // GREEK ACROPHONIC ATTIC TEN THOUSAND STATERS

    uint32_t const cps[1] = { 0x10155 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b82), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_018)
{
    // 10156 ; [*1B83.0020.0002] 
    // GREEK ACROPHONIC ATTIC FIFTY THOUSAND STATERS

    uint32_t const cps[1] = { 0x10156 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b83), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_019)
{
    // 10157 ; [*1B84.0020.0002] 
    // GREEK ACROPHONIC ATTIC TEN MNAS

    uint32_t const cps[1] = { 0x10157 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b84), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_020)
{
    // 10158 ; [.1CA4.0020.0002] 
    // GREEK ACROPHONIC HERAEUM ONE PLETHRON

    uint32_t const cps[1] = { 0x10158 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_021)
{
    // 10159 ; [.1CA4.0020.0002] 
    // GREEK ACROPHONIC THESPIAN ONE

    uint32_t const cps[1] = { 0x10159 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_022)
{
    // 1015A ; [.1CA4.0020.0002] 
    // GREEK ACROPHONIC HERMIONIAN ONE

    uint32_t const cps[1] = { 0x1015a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_023)
{
    // 1015B ; [.1CA5.0020.0002] 
    // GREEK ACROPHONIC EPIDAUREAN TWO

    uint32_t const cps[1] = { 0x1015b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_024)
{
    // 1015C ; [.1CA5.0020.0002] 
    // GREEK ACROPHONIC THESPIAN TWO

    uint32_t const cps[1] = { 0x1015c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_025)
{
    // 1015D ; [.1CA5.0020.0002] 
    // GREEK ACROPHONIC CYRENAIC TWO DRACHMAS

    uint32_t const cps[1] = { 0x1015d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_026)
{
    // 1015E ; [.1CA5.0020.0002] 
    // GREEK ACROPHONIC EPIDAUREAN TWO DRACHMAS

    uint32_t const cps[1] = { 0x1015e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_027)
{
    // 1015F ; [.1CA8.0020.0002] 
    // GREEK ACROPHONIC TROEZENIAN FIVE

    uint32_t const cps[1] = { 0x1015f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_028)
{
    // 10160 ; [*1B85.0020.0002] 
    // GREEK ACROPHONIC TROEZENIAN TEN

    uint32_t const cps[1] = { 0x10160 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b85), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_029)
{
    // 10161 ; [*1B86.0020.0002] 
    // GREEK ACROPHONIC TROEZENIAN TEN ALTERNATE FORM

    uint32_t const cps[1] = { 0x10161 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b86), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_030)
{
    // 10162 ; [*1B87.0020.0002] 
    // GREEK ACROPHONIC HERMIONIAN TEN

    uint32_t const cps[1] = { 0x10162 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b87), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_031)
{
    // 10163 ; [*1B88.0020.0002] 
    // GREEK ACROPHONIC MESSENIAN TEN

    uint32_t const cps[1] = { 0x10163 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b88), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_032)
{
    // 10164 ; [*1B89.0020.0002] 
    // GREEK ACROPHONIC THESPIAN TEN

    uint32_t const cps[1] = { 0x10164 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b89), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_033)
{
    // 10165 ; [*1B8A.0020.0002] 
    // GREEK ACROPHONIC THESPIAN THIRTY

    uint32_t const cps[1] = { 0x10165 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b8a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_034)
{
    // 10166 ; [*1B8B.0020.0002] 
    // GREEK ACROPHONIC TROEZENIAN FIFTY

    uint32_t const cps[1] = { 0x10166 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b8b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_035)
{
    // 10167 ; [*1B8C.0020.0002] 
    // GREEK ACROPHONIC TROEZENIAN FIFTY ALTERNATE FORM

    uint32_t const cps[1] = { 0x10167 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b8c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_036)
{
    // 10168 ; [*1B8D.0020.0002] 
    // GREEK ACROPHONIC HERMIONIAN FIFTY

    uint32_t const cps[1] = { 0x10168 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b8d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_037)
{
    // 10169 ; [*1B8E.0020.0002] 
    // GREEK ACROPHONIC THESPIAN FIFTY

    uint32_t const cps[1] = { 0x10169 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b8e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_038)
{
    // 1016A ; [*1B8F.0020.0002] 
    // GREEK ACROPHONIC THESPIAN ONE HUNDRED

    uint32_t const cps[1] = { 0x1016a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b8f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_039)
{
    // 1016B ; [*1B90.0020.0002] 
    // GREEK ACROPHONIC THESPIAN THREE HUNDRED

    uint32_t const cps[1] = { 0x1016b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b90), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_040)
{
    // 1016C ; [*1B91.0020.0002] 
    // GREEK ACROPHONIC EPIDAUREAN FIVE HUNDRED

    uint32_t const cps[1] = { 0x1016c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b91), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_041)
{
    // 1016D ; [*1B92.0020.0002] 
    // GREEK ACROPHONIC TROEZENIAN FIVE HUNDRED

    uint32_t const cps[1] = { 0x1016d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b92), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_042)
{
    // 1016E ; [*1B93.0020.0002] 
    // GREEK ACROPHONIC THESPIAN FIVE HUNDRED

    uint32_t const cps[1] = { 0x1016e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b93), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_043)
{
    // 1016F ; [*1B94.0020.0002] 
    // GREEK ACROPHONIC CARYSTIAN FIVE HUNDRED

    uint32_t const cps[1] = { 0x1016f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b94), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_044)
{
    // 10170 ; [*1B95.0020.0002] 
    // GREEK ACROPHONIC NAXIAN FIVE HUNDRED

    uint32_t const cps[1] = { 0x10170 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b95), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_045)
{
    // 10171 ; [*1B96.0020.0002] 
    // GREEK ACROPHONIC THESPIAN ONE THOUSAND

    uint32_t const cps[1] = { 0x10171 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b96), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_046)
{
    // 10172 ; [*1B97.0020.0002] 
    // GREEK ACROPHONIC THESPIAN FIVE THOUSAND

    uint32_t const cps[1] = { 0x10172 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b97), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_047)
{
    // 10173 ; [.1CA8.0020.0002] 
    // GREEK ACROPHONIC DELPHIC FIVE MNAS

    uint32_t const cps[1] = { 0x10173 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_048)
{
    // 10174 ; [*1B98.0020.0002] 
    // GREEK ACROPHONIC STRATIAN FIFTY MNAS

    uint32_t const cps[1] = { 0x10174 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b98), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_049)
{
    // 10175 ; [*1B99.0020.0002] 
    // GREEK ONE HALF SIGN

    uint32_t const cps[1] = { 0x10175 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b99), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_050)
{
    // 10176 ; [*1B9A.0020.0002] 
    // GREEK ONE HALF SIGN ALTERNATE FORM

    uint32_t const cps[1] = { 0x10176 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b9a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_051)
{
    // 10177 ; [*1B9B.0020.0002] 
    // GREEK TWO THIRDS SIGN

    uint32_t const cps[1] = { 0x10177 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b9b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_052)
{
    // 10178 ; [*1B9C.0020.0002] 
    // GREEK THREE QUARTERS SIGN

    uint32_t const cps[1] = { 0x10178 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b9c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_053)
{
    // 10179 ; [*0F99.0020.0002] 
    // GREEK YEAR SIGN

    uint32_t const cps[1] = { 0x10179 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf99), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_054)
{
    // 1017A ; [*0F9A.0020.0002] 
    // GREEK TALENT SIGN

    uint32_t const cps[1] = { 0x1017a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf9a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_055)
{
    // 1017B ; [*0F9B.0020.0002] 
    // GREEK DRACHMA SIGN

    uint32_t const cps[1] = { 0x1017b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf9b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_056)
{
    // 1017C ; [*0F9C.0020.0002] 
    // GREEK OBOL SIGN

    uint32_t const cps[1] = { 0x1017c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf9c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_057)
{
    // 1017D ; [*0F9D.0020.0002] 
    // GREEK TWO OBOLS SIGN

    uint32_t const cps[1] = { 0x1017d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf9d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_058)
{
    // 1017E ; [*0F9E.0020.0002] 
    // GREEK THREE OBOLS SIGN

    uint32_t const cps[1] = { 0x1017e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf9e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_059)
{
    // 1017F ; [*0F9F.0020.0002] 
    // GREEK FOUR OBOLS SIGN

    uint32_t const cps[1] = { 0x1017f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xf9f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_060)
{
    // 10180 ; [*0FA0.0020.0002] 
    // GREEK FIVE OBOLS SIGN

    uint32_t const cps[1] = { 0x10180 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfa0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_061)
{
    // 10181 ; [*0FA1.0020.0002] 
    // GREEK METRETES SIGN

    uint32_t const cps[1] = { 0x10181 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfa1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_062)
{
    // 10182 ; [*0FA2.0020.0002] 
    // GREEK KYATHOS BASE SIGN

    uint32_t const cps[1] = { 0x10182 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfa2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_063)
{
    // 10183 ; [*0FA3.0020.0002] 
    // GREEK LITRA SIGN

    uint32_t const cps[1] = { 0x10183 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfa3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_064)
{
    // 10184 ; [*0FA4.0020.0002] 
    // GREEK OUNKIA SIGN

    uint32_t const cps[1] = { 0x10184 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfa4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_065)
{
    // 10185 ; [*0FA5.0020.0002] 
    // GREEK XESTES SIGN

    uint32_t const cps[1] = { 0x10185 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfa5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_066)
{
    // 10186 ; [*0FA6.0020.0002] 
    // GREEK ARTABE SIGN

    uint32_t const cps[1] = { 0x10186 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfa6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_067)
{
    // 10187 ; [*0FA7.0020.0002] 
    // GREEK AROURA SIGN

    uint32_t const cps[1] = { 0x10187 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfa7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_068)
{
    // 10188 ; [*0FA8.0020.0002] 
    // GREEK GRAMMA SIGN

    uint32_t const cps[1] = { 0x10188 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfa8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_069)
{
    // 10189 ; [*0FA9.0020.0002] 
    // GREEK TRYBLION BASE SIGN

    uint32_t const cps[1] = { 0x10189 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfa9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_070)
{
    // 1018A ; [.1CA3.0020.0002] 
    // GREEK ZERO SIGN

    uint32_t const cps[1] = { 0x1018a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_071)
{
    // 1018B ; [*1B9D.0020.0002] 
    // GREEK ONE QUARTER SIGN

    uint32_t const cps[1] = { 0x1018b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1b9d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_072)
{
    // 1018C ; [*0FAA.0020.0002] 
    // GREEK SINUSOID SIGN

    uint32_t const cps[1] = { 0x1018c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfaa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_073)
{
    // 1018D ; [*0FAB.0020.0002] 
    // GREEK INDICTION SIGN

    uint32_t const cps[1] = { 0x1018d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_074)
{
    // 1018E ; [*0FAC.0020.0002] 
    // NOMISMA SIGN

    uint32_t const cps[1] = { 0x1018e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_075)
{
    // 10190 ; [*0FAD.0020.0002] 
    // ROMAN SEXTANS SIGN

    uint32_t const cps[1] = { 0x10190 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfad), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_076)
{
    // 10191 ; [*0FAE.0020.0002] 
    // ROMAN UNCIA SIGN

    uint32_t const cps[1] = { 0x10191 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfae), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_077)
{
    // 10192 ; [*0FAF.0020.0002] 
    // ROMAN SEMUNCIA SIGN

    uint32_t const cps[1] = { 0x10192 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfaf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_078)
{
    // 10193 ; [*0FB0.0020.0002] 
    // ROMAN SEXTULA SIGN

    uint32_t const cps[1] = { 0x10193 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfb0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_079)
{
    // 10194 ; [*0FB1.0020.0002] 
    // ROMAN DIMIDIA SEXTULA SIGN

    uint32_t const cps[1] = { 0x10194 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfb1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_080)
{
    // 10195 ; [*0FB2.0020.0002] 
    // ROMAN SILIQUA SIGN

    uint32_t const cps[1] = { 0x10195 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfb2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_081)
{
    // 10196 ; [*0FB3.0020.0002] 
    // ROMAN DENARIUS SIGN

    uint32_t const cps[1] = { 0x10196 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfb3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_082)
{
    // 10197 ; [*0FB4.0020.0002] 
    // ROMAN QUINARIUS SIGN

    uint32_t const cps[1] = { 0x10197 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfb4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_083)
{
    // 10198 ; [*0FB5.0020.0002] 
    // ROMAN SESTERTIUS SIGN

    uint32_t const cps[1] = { 0x10198 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfb5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_084)
{
    // 10199 ; [*0FB6.0020.0002] 
    // ROMAN DUPONDIUS SIGN

    uint32_t const cps[1] = { 0x10199 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfb6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_085)
{
    // 1019A ; [*0FB7.0020.0002] 
    // ROMAN AS SIGN

    uint32_t const cps[1] = { 0x1019a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfb7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_086)
{
    // 1019B ; [*0FB8.0020.0002] 
    // ROMAN CENTURIAL SIGN

    uint32_t const cps[1] = { 0x1019b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfb8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_087)
{
    // 101A0 ; [*0FB9.0020.0002] 
    // GREEK SYMBOL TAU RHO

    uint32_t const cps[1] = { 0x101a0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfb9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_088)
{
    // 101D0 ; [*0FBA.0020.0002] 
    // PHAISTOS DISC SIGN PEDESTRIAN

    uint32_t const cps[1] = { 0x101d0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfba), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_089)
{
    // 101D1 ; [*0FBB.0020.0002] 
    // PHAISTOS DISC SIGN PLUMED HEAD

    uint32_t const cps[1] = { 0x101d1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfbb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_090)
{
    // 101D2 ; [*0FBC.0020.0002] 
    // PHAISTOS DISC SIGN TATTOOED HEAD

    uint32_t const cps[1] = { 0x101d2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfbc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_091)
{
    // 101D3 ; [*0FBD.0020.0002] 
    // PHAISTOS DISC SIGN CAPTIVE

    uint32_t const cps[1] = { 0x101d3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfbd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_092)
{
    // 101D4 ; [*0FBE.0020.0002] 
    // PHAISTOS DISC SIGN CHILD

    uint32_t const cps[1] = { 0x101d4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfbe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_093)
{
    // 101D5 ; [*0FBF.0020.0002] 
    // PHAISTOS DISC SIGN WOMAN

    uint32_t const cps[1] = { 0x101d5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfbf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_094)
{
    // 101D6 ; [*0FC0.0020.0002] 
    // PHAISTOS DISC SIGN HELMET

    uint32_t const cps[1] = { 0x101d6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfc0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_095)
{
    // 101D7 ; [*0FC1.0020.0002] 
    // PHAISTOS DISC SIGN GAUNTLET

    uint32_t const cps[1] = { 0x101d7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfc1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_096)
{
    // 101D8 ; [*0FC2.0020.0002] 
    // PHAISTOS DISC SIGN TIARA

    uint32_t const cps[1] = { 0x101d8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfc2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_097)
{
    // 101D9 ; [*0FC3.0020.0002] 
    // PHAISTOS DISC SIGN ARROW

    uint32_t const cps[1] = { 0x101d9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfc3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_098)
{
    // 101DA ; [*0FC4.0020.0002] 
    // PHAISTOS DISC SIGN BOW

    uint32_t const cps[1] = { 0x101da };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfc4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_099)
{
    // 101DB ; [*0FC5.0020.0002] 
    // PHAISTOS DISC SIGN SHIELD

    uint32_t const cps[1] = { 0x101db };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfc5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_100)
{
    // 101DC ; [*0FC6.0020.0002] 
    // PHAISTOS DISC SIGN CLUB

    uint32_t const cps[1] = { 0x101dc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfc6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_101)
{
    // 101DD ; [*0FC7.0020.0002] 
    // PHAISTOS DISC SIGN MANACLES

    uint32_t const cps[1] = { 0x101dd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfc7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_102)
{
    // 101DE ; [*0FC8.0020.0002] 
    // PHAISTOS DISC SIGN MATTOCK

    uint32_t const cps[1] = { 0x101de };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfc8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_103)
{
    // 101DF ; [*0FC9.0020.0002] 
    // PHAISTOS DISC SIGN SAW

    uint32_t const cps[1] = { 0x101df };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfc9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_104)
{
    // 101E0 ; [*0FCA.0020.0002] 
    // PHAISTOS DISC SIGN LID

    uint32_t const cps[1] = { 0x101e0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_105)
{
    // 101E1 ; [*0FCB.0020.0002] 
    // PHAISTOS DISC SIGN BOOMERANG

    uint32_t const cps[1] = { 0x101e1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfcb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_106)
{
    // 101E2 ; [*0FCC.0020.0002] 
    // PHAISTOS DISC SIGN CARPENTRY PLANE

    uint32_t const cps[1] = { 0x101e2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfcc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_107)
{
    // 101E3 ; [*0FCD.0020.0002] 
    // PHAISTOS DISC SIGN DOLIUM

    uint32_t const cps[1] = { 0x101e3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfcd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_108)
{
    // 101E4 ; [*0FCE.0020.0002] 
    // PHAISTOS DISC SIGN COMB

    uint32_t const cps[1] = { 0x101e4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_109)
{
    // 101E5 ; [*0FCF.0020.0002] 
    // PHAISTOS DISC SIGN SLING

    uint32_t const cps[1] = { 0x101e5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfcf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_110)
{
    // 101E6 ; [*0FD0.0020.0002] 
    // PHAISTOS DISC SIGN COLUMN

    uint32_t const cps[1] = { 0x101e6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfd0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_111)
{
    // 101E7 ; [*0FD1.0020.0002] 
    // PHAISTOS DISC SIGN BEEHIVE

    uint32_t const cps[1] = { 0x101e7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfd1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_112)
{
    // 101E8 ; [*0FD2.0020.0002] 
    // PHAISTOS DISC SIGN SHIP

    uint32_t const cps[1] = { 0x101e8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfd2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_113)
{
    // 101E9 ; [*0FD3.0020.0002] 
    // PHAISTOS DISC SIGN HORN

    uint32_t const cps[1] = { 0x101e9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfd3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_114)
{
    // 101EA ; [*0FD4.0020.0002] 
    // PHAISTOS DISC SIGN HIDE

    uint32_t const cps[1] = { 0x101ea };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfd4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_115)
{
    // 101EB ; [*0FD5.0020.0002] 
    // PHAISTOS DISC SIGN BULLS LEG

    uint32_t const cps[1] = { 0x101eb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfd5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_116)
{
    // 101EC ; [*0FD6.0020.0002] 
    // PHAISTOS DISC SIGN CAT

    uint32_t const cps[1] = { 0x101ec };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfd6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_117)
{
    // 101ED ; [*0FD7.0020.0002] 
    // PHAISTOS DISC SIGN RAM

    uint32_t const cps[1] = { 0x101ed };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfd7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_118)
{
    // 101EE ; [*0FD8.0020.0002] 
    // PHAISTOS DISC SIGN EAGLE

    uint32_t const cps[1] = { 0x101ee };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfd8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_119)
{
    // 101EF ; [*0FD9.0020.0002] 
    // PHAISTOS DISC SIGN DOVE

    uint32_t const cps[1] = { 0x101ef };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfd9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_120)
{
    // 101F0 ; [*0FDA.0020.0002] 
    // PHAISTOS DISC SIGN TUNNY

    uint32_t const cps[1] = { 0x101f0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfda), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_121)
{
    // 101F1 ; [*0FDB.0020.0002] 
    // PHAISTOS DISC SIGN BEE

    uint32_t const cps[1] = { 0x101f1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfdb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_122)
{
    // 101F2 ; [*0FDC.0020.0002] 
    // PHAISTOS DISC SIGN PLANE TREE

    uint32_t const cps[1] = { 0x101f2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfdc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_123)
{
    // 101F3 ; [*0FDD.0020.0002] 
    // PHAISTOS DISC SIGN VINE

    uint32_t const cps[1] = { 0x101f3 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfdd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_124)
{
    // 101F4 ; [*0FDE.0020.0002] 
    // PHAISTOS DISC SIGN PAPYRUS

    uint32_t const cps[1] = { 0x101f4 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfde), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_125)
{
    // 101F5 ; [*0FDF.0020.0002] 
    // PHAISTOS DISC SIGN ROSETTE

    uint32_t const cps[1] = { 0x101f5 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfdf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_126)
{
    // 101F6 ; [*0FE0.0020.0002] 
    // PHAISTOS DISC SIGN LILY

    uint32_t const cps[1] = { 0x101f6 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfe0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_127)
{
    // 101F7 ; [*0FE1.0020.0002] 
    // PHAISTOS DISC SIGN OX BACK

    uint32_t const cps[1] = { 0x101f7 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfe1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_128)
{
    // 101F8 ; [*0FE2.0020.0002] 
    // PHAISTOS DISC SIGN FLUTE

    uint32_t const cps[1] = { 0x101f8 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfe2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_129)
{
    // 101F9 ; [*0FE3.0020.0002] 
    // PHAISTOS DISC SIGN GRATER

    uint32_t const cps[1] = { 0x101f9 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfe3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_130)
{
    // 101FA ; [*0FE4.0020.0002] 
    // PHAISTOS DISC SIGN STRAINER

    uint32_t const cps[1] = { 0x101fa };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfe4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_131)
{
    // 101FB ; [*0FE5.0020.0002] 
    // PHAISTOS DISC SIGN SMALL AXE

    uint32_t const cps[1] = { 0x101fb };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfe5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_132)
{
    // 101FC ; [*0FE6.0020.0002] 
    // PHAISTOS DISC SIGN WAVY BAND

    uint32_t const cps[1] = { 0x101fc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0xfe6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_133)
{
    // 101FD ; [.0000.0110.0002] 
    // PHAISTOS DISC SIGN COMBINING OBLIQUE STROKE

    uint32_t const cps[1] = { 0x101fd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xf0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_134)
{
    // 10280 ; [.45E3.0020.0002] 
    // LYCIAN LETTER A

    uint32_t const cps[1] = { 0x10280 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x45e3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_135)
{
    // 10281 ; [.45E4.0020.0002] 
    // LYCIAN LETTER E

    uint32_t const cps[1] = { 0x10281 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x45e4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_136)
{
    // 10282 ; [.45E5.0020.0002] 
    // LYCIAN LETTER B

    uint32_t const cps[1] = { 0x10282 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x45e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_137)
{
    // 10283 ; [.45E6.0020.0002] 
    // LYCIAN LETTER BH

    uint32_t const cps[1] = { 0x10283 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x45e6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_138)
{
    // 10284 ; [.45E7.0020.0002] 
    // LYCIAN LETTER G

    uint32_t const cps[1] = { 0x10284 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x45e7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_139)
{
    // 10285 ; [.45E8.0020.0002] 
    // LYCIAN LETTER D

    uint32_t const cps[1] = { 0x10285 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x45e8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_140)
{
    // 10286 ; [.45E9.0020.0002] 
    // LYCIAN LETTER I

    uint32_t const cps[1] = { 0x10286 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x45e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_141)
{
    // 10287 ; [.45EA.0020.0002] 
    // LYCIAN LETTER W

    uint32_t const cps[1] = { 0x10287 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x45ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_142)
{
    // 10288 ; [.45EB.0020.0002] 
    // LYCIAN LETTER Z

    uint32_t const cps[1] = { 0x10288 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x45eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_143)
{
    // 10289 ; [.45EC.0020.0002] 
    // LYCIAN LETTER TH

    uint32_t const cps[1] = { 0x10289 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x45ec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_144)
{
    // 1028A ; [.45ED.0020.0002] 
    // LYCIAN LETTER J

    uint32_t const cps[1] = { 0x1028a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x45ed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_145)
{
    // 1028B ; [.45EE.0020.0002] 
    // LYCIAN LETTER K

    uint32_t const cps[1] = { 0x1028b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x45ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_146)
{
    // 1028C ; [.45EF.0020.0002] 
    // LYCIAN LETTER Q

    uint32_t const cps[1] = { 0x1028c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x45ef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_147)
{
    // 1028D ; [.45F0.0020.0002] 
    // LYCIAN LETTER L

    uint32_t const cps[1] = { 0x1028d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x45f0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_148)
{
    // 1028E ; [.45F1.0020.0002] 
    // LYCIAN LETTER M

    uint32_t const cps[1] = { 0x1028e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x45f1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_118_149)
{
    // 1028F ; [.45F2.0020.0002] 
    // LYCIAN LETTER N

    uint32_t const cps[1] = { 0x1028f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x45f2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

