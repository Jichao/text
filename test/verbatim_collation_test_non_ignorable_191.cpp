// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_191_000)
{
    // 0EC2 0EDC 003F;	
    // (ໂໜ) LAO VOWEL SIGN O, LAO HO NO	[2E7A 2E6E 2E8D 0267 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EDC, 0x003F };
    uint32_t const ces[15] = { 0x2E7A, 0x2E6E, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_001)
{
    // 0EC2 0EDC 0061;	
    // (ໂໜ) LAO VOWEL SIGN O, LAO HO NO	[2E7A 2E6E 2E8D 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EDC, 0x0061 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E6E, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_002)
{
    // 0EC2 0EDC 0041;	
    // (ໂໜ) LAO VOWEL SIGN O, LAO HO NO	[2E7A 2E6E 2E8D 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0008 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EDC, 0x0041 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E6E, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_003)
{
    // 0EC2 0EDC 0062;	
    // (ໂໜ) LAO VOWEL SIGN O, LAO HO NO	[2E7A 2E6E 2E8D 1CC6 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EDC, 0x0062 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E6E, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_004)
{
    // 0EC3 0EDC 0021;	
    // (ໃໜ) LAO VOWEL SIGN AY, LAO HO NO	[2E7A 2E6E 2E8E 0261 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EDC, 0x0021 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E6E, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_005)
{
    // 0EC3 0EDC 003F;	
    // (ໃໜ) LAO VOWEL SIGN AY, LAO HO NO	[2E7A 2E6E 2E8E 0267 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EDC, 0x003F };
    uint32_t const ces[15] = { 0x2E7A, 0x2E6E, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_006)
{
    // 0EC3 0EDC 0061;	
    // (ໃໜ) LAO VOWEL SIGN AY, LAO HO NO	[2E7A 2E6E 2E8E 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EDC, 0x0061 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E6E, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_007)
{
    // 0EC3 0EDC 0041;	
    // (ໃໜ) LAO VOWEL SIGN AY, LAO HO NO	[2E7A 2E6E 2E8E 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0008 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EDC, 0x0041 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E6E, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_008)
{
    // 0EC3 0EDC 0062;	
    // (ໃໜ) LAO VOWEL SIGN AY, LAO HO NO	[2E7A 2E6E 2E8E 1CC6 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EDC, 0x0062 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E6E, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_009)
{
    // 0EC4 0EDC 0021;	
    // (ໄໜ) LAO VOWEL SIGN AI, LAO HO NO	[2E7A 2E6E 2E8F 0261 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EDC, 0x0021 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E6E, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_010)
{
    // 0EC4 0EDC 003F;	
    // (ໄໜ) LAO VOWEL SIGN AI, LAO HO NO	[2E7A 2E6E 2E8F 0267 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EDC, 0x003F };
    uint32_t const ces[15] = { 0x2E7A, 0x2E6E, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_011)
{
    // 0EC4 0EDC 0061;	
    // (ໄໜ) LAO VOWEL SIGN AI, LAO HO NO	[2E7A 2E6E 2E8F 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EDC, 0x0061 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E6E, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_012)
{
    // 0EC4 0EDC 0041;	
    // (ໄໜ) LAO VOWEL SIGN AI, LAO HO NO	[2E7A 2E6E 2E8F 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0008 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EDC, 0x0041 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E6E, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_013)
{
    // 0EC4 0EDC 0062;	
    // (ໄໜ) LAO VOWEL SIGN AI, LAO HO NO	[2E7A 2E6E 2E8F 1CC6 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EDC, 0x0062 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E6E, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_014)
{
    // 0EDD 0021;	
    // (ໝ) LAO HO MO	[2E7A 2E75 0261 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0EDD, 0x0021 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E75, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_015)
{
    // 0EDD 003F;	
    // (ໝ) LAO HO MO	[2E7A 2E75 0267 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0EDD, 0x003F };
    uint32_t const ces[12] = { 0x2E7A, 0x2E75, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_016)
{
    // 0EDD 0061;	
    // (ໝ) LAO HO MO	[2E7A 2E75 1CAD | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0EDD, 0x0061 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_017)
{
    // 0EDD 0041;	
    // (ໝ) LAO HO MO	[2E7A 2E75 1CAD | 0020 0020 0020 | 0004 0004 0008 |]

    uint32_t cps[2] = { 0x0EDD, 0x0041 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_018)
{
    // 0EDD 0062;	
    // (ໝ) LAO HO MO	[2E7A 2E75 1CC6 | 0020 0020 0020 | 0004 0004 0002 |]

    uint32_t cps[2] = { 0x0EDD, 0x0062 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E75, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_019)
{
    // 0EC0 0EDD 0021;	
    // (ເໝ) LAO VOWEL SIGN E, LAO HO MO	[2E7A 2E75 2E8B 0261 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EDD, 0x0021 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_020)
{
    // 0EC0 0EDD 003F;	
    // (ເໝ) LAO VOWEL SIGN E, LAO HO MO	[2E7A 2E75 2E8B 0267 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EDD, 0x003F };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_021)
{
    // 0EC0 0EDD 0061;	
    // (ເໝ) LAO VOWEL SIGN E, LAO HO MO	[2E7A 2E75 2E8B 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EDD, 0x0061 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_022)
{
    // 0EC0 0EDD 0041;	
    // (ເໝ) LAO VOWEL SIGN E, LAO HO MO	[2E7A 2E75 2E8B 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0008 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EDD, 0x0041 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_023)
{
    // 0EC0 0EDD 0062;	
    // (ເໝ) LAO VOWEL SIGN E, LAO HO MO	[2E7A 2E75 2E8B 1CC6 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EDD, 0x0062 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_024)
{
    // 0EC1 0EDD 0021;	
    // (ແໝ) LAO VOWEL SIGN EI, LAO HO MO	[2E7A 2E75 2E8C 0261 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EDD, 0x0021 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_025)
{
    // 0EC1 0EDD 003F;	
    // (ແໝ) LAO VOWEL SIGN EI, LAO HO MO	[2E7A 2E75 2E8C 0267 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EDD, 0x003F };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_026)
{
    // 0EC1 0EDD 0061;	
    // (ແໝ) LAO VOWEL SIGN EI, LAO HO MO	[2E7A 2E75 2E8C 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EDD, 0x0061 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_027)
{
    // 0EC1 0EDD 0041;	
    // (ແໝ) LAO VOWEL SIGN EI, LAO HO MO	[2E7A 2E75 2E8C 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0008 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EDD, 0x0041 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_028)
{
    // 0EC1 0EDD 0062;	
    // (ແໝ) LAO VOWEL SIGN EI, LAO HO MO	[2E7A 2E75 2E8C 1CC6 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EDD, 0x0062 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_029)
{
    // 0EC2 0EDD 0021;	
    // (ໂໝ) LAO VOWEL SIGN O, LAO HO MO	[2E7A 2E75 2E8D 0261 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EDD, 0x0021 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_030)
{
    // 0EC2 0EDD 003F;	
    // (ໂໝ) LAO VOWEL SIGN O, LAO HO MO	[2E7A 2E75 2E8D 0267 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EDD, 0x003F };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_031)
{
    // 0EC2 0EDD 0061;	
    // (ໂໝ) LAO VOWEL SIGN O, LAO HO MO	[2E7A 2E75 2E8D 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EDD, 0x0061 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_032)
{
    // 0EC2 0EDD 0041;	
    // (ໂໝ) LAO VOWEL SIGN O, LAO HO MO	[2E7A 2E75 2E8D 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0008 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EDD, 0x0041 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_033)
{
    // 0EC2 0EDD 0062;	
    // (ໂໝ) LAO VOWEL SIGN O, LAO HO MO	[2E7A 2E75 2E8D 1CC6 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EDD, 0x0062 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_034)
{
    // 0EC3 0EDD 0021;	
    // (ໃໝ) LAO VOWEL SIGN AY, LAO HO MO	[2E7A 2E75 2E8E 0261 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EDD, 0x0021 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_035)
{
    // 0EC3 0EDD 003F;	
    // (ໃໝ) LAO VOWEL SIGN AY, LAO HO MO	[2E7A 2E75 2E8E 0267 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EDD, 0x003F };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_036)
{
    // 0EC3 0EDD 0061;	
    // (ໃໝ) LAO VOWEL SIGN AY, LAO HO MO	[2E7A 2E75 2E8E 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EDD, 0x0061 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_037)
{
    // 0EC3 0EDD 0041;	
    // (ໃໝ) LAO VOWEL SIGN AY, LAO HO MO	[2E7A 2E75 2E8E 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0008 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EDD, 0x0041 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_038)
{
    // 0EC3 0EDD 0062;	
    // (ໃໝ) LAO VOWEL SIGN AY, LAO HO MO	[2E7A 2E75 2E8E 1CC6 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EDD, 0x0062 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_039)
{
    // 0EC4 0EDD 0021;	
    // (ໄໝ) LAO VOWEL SIGN AI, LAO HO MO	[2E7A 2E75 2E8F 0261 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EDD, 0x0021 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_040)
{
    // 0EC4 0EDD 003F;	
    // (ໄໝ) LAO VOWEL SIGN AI, LAO HO MO	[2E7A 2E75 2E8F 0267 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EDD, 0x003F };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_041)
{
    // 0EC4 0EDD 0061;	
    // (ໄໝ) LAO VOWEL SIGN AI, LAO HO MO	[2E7A 2E75 2E8F 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EDD, 0x0061 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_042)
{
    // 0EC4 0EDD 0041;	
    // (ໄໝ) LAO VOWEL SIGN AI, LAO HO MO	[2E7A 2E75 2E8F 1CAD | 0020 0020 0020 0020 | 0004 0004 0002 0008 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EDD, 0x0041 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_043)
{
    // 0EC4 0EDD 0062;	
    // (ໄໝ) LAO VOWEL SIGN AI, LAO HO MO	[2E7A 2E75 2E8F 1CC6 | 0020 0020 0020 0020 | 0004 0004 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EDD, 0x0062 };
    uint32_t const ces[15] = { 0x2E7A, 0x2E75, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_044)
{
    // 0EC0 0EAB 0021;	
    // (ເຫ) LAO VOWEL SIGN E, LAO LETTER HO SUNG	[2E7A 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EAB, 0x0021 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_045)
{
    // 0EC0 0EAB 003F;	
    // (ເຫ) LAO VOWEL SIGN E, LAO LETTER HO SUNG	[2E7A 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EAB, 0x003F };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_046)
{
    // 0EC0 0EAB 0061;	
    // (ເຫ) LAO VOWEL SIGN E, LAO LETTER HO SUNG	[2E7A 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EAB, 0x0061 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_047)
{
    // 0EC0 0EAB 0041;	
    // (ເຫ) LAO VOWEL SIGN E, LAO LETTER HO SUNG	[2E7A 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EAB, 0x0041 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_048)
{
    // 0EC0 0EAB 0062;	
    // (ເຫ) LAO VOWEL SIGN E, LAO LETTER HO SUNG	[2E7A 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EAB, 0x0062 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_049)
{
    // 0EC1 0EAB 0021;	
    // (ແຫ) LAO VOWEL SIGN EI, LAO LETTER HO SUNG	[2E7A 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EAB, 0x0021 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_050)
{
    // 0EC1 0EAB 003F;	
    // (ແຫ) LAO VOWEL SIGN EI, LAO LETTER HO SUNG	[2E7A 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EAB, 0x003F };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_051)
{
    // 0EC1 0EAB 0061;	
    // (ແຫ) LAO VOWEL SIGN EI, LAO LETTER HO SUNG	[2E7A 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EAB, 0x0061 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_052)
{
    // 0EC1 0EAB 0041;	
    // (ແຫ) LAO VOWEL SIGN EI, LAO LETTER HO SUNG	[2E7A 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EAB, 0x0041 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_053)
{
    // 0EC1 0EAB 0062;	
    // (ແຫ) LAO VOWEL SIGN EI, LAO LETTER HO SUNG	[2E7A 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EAB, 0x0062 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_054)
{
    // 0EC2 0EAB 0021;	
    // (ໂຫ) LAO VOWEL SIGN O, LAO LETTER HO SUNG	[2E7A 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EAB, 0x0021 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_055)
{
    // 0EC2 0EAB 003F;	
    // (ໂຫ) LAO VOWEL SIGN O, LAO LETTER HO SUNG	[2E7A 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EAB, 0x003F };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_056)
{
    // 0EC2 0EAB 0061;	
    // (ໂຫ) LAO VOWEL SIGN O, LAO LETTER HO SUNG	[2E7A 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EAB, 0x0061 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_057)
{
    // 0EC2 0EAB 0041;	
    // (ໂຫ) LAO VOWEL SIGN O, LAO LETTER HO SUNG	[2E7A 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EAB, 0x0041 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_058)
{
    // 0EC2 0EAB 0062;	
    // (ໂຫ) LAO VOWEL SIGN O, LAO LETTER HO SUNG	[2E7A 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EAB, 0x0062 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_059)
{
    // 0EC3 0EAB 0021;	
    // (ໃຫ) LAO VOWEL SIGN AY, LAO LETTER HO SUNG	[2E7A 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EAB, 0x0021 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_060)
{
    // 0EC3 0EAB 003F;	
    // (ໃຫ) LAO VOWEL SIGN AY, LAO LETTER HO SUNG	[2E7A 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EAB, 0x003F };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_061)
{
    // 0EC3 0EAB 0061;	
    // (ໃຫ) LAO VOWEL SIGN AY, LAO LETTER HO SUNG	[2E7A 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EAB, 0x0061 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_062)
{
    // 0EC3 0EAB 0041;	
    // (ໃຫ) LAO VOWEL SIGN AY, LAO LETTER HO SUNG	[2E7A 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EAB, 0x0041 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_063)
{
    // 0EC3 0EAB 0062;	
    // (ໃຫ) LAO VOWEL SIGN AY, LAO LETTER HO SUNG	[2E7A 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EAB, 0x0062 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_064)
{
    // 0EC4 0EAB 0021;	
    // (ໄຫ) LAO VOWEL SIGN AI, LAO LETTER HO SUNG	[2E7A 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EAB, 0x0021 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_065)
{
    // 0EC4 0EAB 003F;	
    // (ໄຫ) LAO VOWEL SIGN AI, LAO LETTER HO SUNG	[2E7A 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EAB, 0x003F };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_066)
{
    // 0EC4 0EAB 0061;	
    // (ໄຫ) LAO VOWEL SIGN AI, LAO LETTER HO SUNG	[2E7A 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EAB, 0x0061 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_067)
{
    // 0EC4 0EAB 0041;	
    // (ໄຫ) LAO VOWEL SIGN AI, LAO LETTER HO SUNG	[2E7A 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EAB, 0x0041 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_068)
{
    // 0EC4 0EAB 0062;	
    // (ໄຫ) LAO VOWEL SIGN AI, LAO LETTER HO SUNG	[2E7A 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EAB, 0x0062 };
    uint32_t const ces[12] = { 0x2E7A, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_069)
{
    // 0EAD 0021;	
    // (ອ) LAO LETTER O	[2E7B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EAD, 0x0021 };
    uint32_t const ces[9] = { 0x2E7B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_070)
{
    // 0EAD 003F;	
    // (ອ) LAO LETTER O	[2E7B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EAD, 0x003F };
    uint32_t const ces[9] = { 0x2E7B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_071)
{
    // 0EAD 0061;	
    // (ອ) LAO LETTER O	[2E7B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EAD, 0x0061 };
    uint32_t const ces[9] = { 0x2E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_072)
{
    // 0EAD 0041;	
    // (ອ) LAO LETTER O	[2E7B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EAD, 0x0041 };
    uint32_t const ces[9] = { 0x2E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_073)
{
    // 0EAD 0062;	
    // (ອ) LAO LETTER O	[2E7B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EAD, 0x0062 };
    uint32_t const ces[9] = { 0x2E7B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_074)
{
    // 0EC0 0EAD 0021;	
    // (ເອ) LAO VOWEL SIGN E, LAO LETTER O	[2E7B 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EAD, 0x0021 };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_075)
{
    // 0EC0 0EAD 003F;	
    // (ເອ) LAO VOWEL SIGN E, LAO LETTER O	[2E7B 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EAD, 0x003F };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_076)
{
    // 0EC0 0EAD 0061;	
    // (ເອ) LAO VOWEL SIGN E, LAO LETTER O	[2E7B 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EAD, 0x0061 };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_077)
{
    // 0EC0 0EAD 0041;	
    // (ເອ) LAO VOWEL SIGN E, LAO LETTER O	[2E7B 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EAD, 0x0041 };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_078)
{
    // 0EC0 0EAD 0062;	
    // (ເອ) LAO VOWEL SIGN E, LAO LETTER O	[2E7B 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EAD, 0x0062 };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_079)
{
    // 0EC1 0EAD 0021;	
    // (ແອ) LAO VOWEL SIGN EI, LAO LETTER O	[2E7B 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EAD, 0x0021 };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_080)
{
    // 0EC1 0EAD 003F;	
    // (ແອ) LAO VOWEL SIGN EI, LAO LETTER O	[2E7B 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EAD, 0x003F };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_081)
{
    // 0EC1 0EAD 0061;	
    // (ແອ) LAO VOWEL SIGN EI, LAO LETTER O	[2E7B 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EAD, 0x0061 };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_082)
{
    // 0EC1 0EAD 0041;	
    // (ແອ) LAO VOWEL SIGN EI, LAO LETTER O	[2E7B 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EAD, 0x0041 };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_083)
{
    // 0EC1 0EAD 0062;	
    // (ແອ) LAO VOWEL SIGN EI, LAO LETTER O	[2E7B 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EAD, 0x0062 };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_084)
{
    // 0EC2 0EAD 0021;	
    // (ໂອ) LAO VOWEL SIGN O, LAO LETTER O	[2E7B 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EAD, 0x0021 };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_085)
{
    // 0EC2 0EAD 003F;	
    // (ໂອ) LAO VOWEL SIGN O, LAO LETTER O	[2E7B 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EAD, 0x003F };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_086)
{
    // 0EC2 0EAD 0061;	
    // (ໂອ) LAO VOWEL SIGN O, LAO LETTER O	[2E7B 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EAD, 0x0061 };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_087)
{
    // 0EC2 0EAD 0041;	
    // (ໂອ) LAO VOWEL SIGN O, LAO LETTER O	[2E7B 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EAD, 0x0041 };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_088)
{
    // 0EC2 0EAD 0062;	
    // (ໂອ) LAO VOWEL SIGN O, LAO LETTER O	[2E7B 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EAD, 0x0062 };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_089)
{
    // 0EC3 0EAD 0021;	
    // (ໃອ) LAO VOWEL SIGN AY, LAO LETTER O	[2E7B 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EAD, 0x0021 };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_090)
{
    // 0EC3 0EAD 003F;	
    // (ໃອ) LAO VOWEL SIGN AY, LAO LETTER O	[2E7B 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EAD, 0x003F };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_091)
{
    // 0EC3 0EAD 0061;	
    // (ໃອ) LAO VOWEL SIGN AY, LAO LETTER O	[2E7B 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EAD, 0x0061 };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_092)
{
    // 0EC3 0EAD 0041;	
    // (ໃອ) LAO VOWEL SIGN AY, LAO LETTER O	[2E7B 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EAD, 0x0041 };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_093)
{
    // 0EC3 0EAD 0062;	
    // (ໃອ) LAO VOWEL SIGN AY, LAO LETTER O	[2E7B 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EAD, 0x0062 };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_094)
{
    // 0EC4 0EAD 0021;	
    // (ໄອ) LAO VOWEL SIGN AI, LAO LETTER O	[2E7B 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EAD, 0x0021 };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_095)
{
    // 0EC4 0EAD 003F;	
    // (ໄອ) LAO VOWEL SIGN AI, LAO LETTER O	[2E7B 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EAD, 0x003F };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_096)
{
    // 0EC4 0EAD 0061;	
    // (ໄອ) LAO VOWEL SIGN AI, LAO LETTER O	[2E7B 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EAD, 0x0061 };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_097)
{
    // 0EC4 0EAD 0041;	
    // (ໄອ) LAO VOWEL SIGN AI, LAO LETTER O	[2E7B 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EAD, 0x0041 };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_098)
{
    // 0EC4 0EAD 0062;	
    // (ໄອ) LAO VOWEL SIGN AI, LAO LETTER O	[2E7B 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EAD, 0x0062 };
    uint32_t const ces[12] = { 0x2E7B, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_099)
{
    // 0EAE 0021;	
    // (ຮ) LAO LETTER HO TAM	[2E7C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EAE, 0x0021 };
    uint32_t const ces[9] = { 0x2E7C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_100)
{
    // 0EAE 003F;	
    // (ຮ) LAO LETTER HO TAM	[2E7C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EAE, 0x003F };
    uint32_t const ces[9] = { 0x2E7C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_101)
{
    // 0EAE 0061;	
    // (ຮ) LAO LETTER HO TAM	[2E7C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EAE, 0x0061 };
    uint32_t const ces[9] = { 0x2E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_102)
{
    // 0EAE 0041;	
    // (ຮ) LAO LETTER HO TAM	[2E7C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EAE, 0x0041 };
    uint32_t const ces[9] = { 0x2E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_103)
{
    // 0EAE 0062;	
    // (ຮ) LAO LETTER HO TAM	[2E7C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EAE, 0x0062 };
    uint32_t const ces[9] = { 0x2E7C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_104)
{
    // 0EC0 0EAE 0021;	
    // (ເຮ) LAO VOWEL SIGN E, LAO LETTER HO TAM	[2E7C 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EAE, 0x0021 };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_105)
{
    // 0EC0 0EAE 003F;	
    // (ເຮ) LAO VOWEL SIGN E, LAO LETTER HO TAM	[2E7C 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EAE, 0x003F };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_106)
{
    // 0EC0 0EAE 0061;	
    // (ເຮ) LAO VOWEL SIGN E, LAO LETTER HO TAM	[2E7C 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EAE, 0x0061 };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_107)
{
    // 0EC0 0EAE 0041;	
    // (ເຮ) LAO VOWEL SIGN E, LAO LETTER HO TAM	[2E7C 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EAE, 0x0041 };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_108)
{
    // 0EC0 0EAE 0062;	
    // (ເຮ) LAO VOWEL SIGN E, LAO LETTER HO TAM	[2E7C 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EAE, 0x0062 };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_109)
{
    // 0EC1 0EAE 0021;	
    // (ແຮ) LAO VOWEL SIGN EI, LAO LETTER HO TAM	[2E7C 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EAE, 0x0021 };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_110)
{
    // 0EC1 0EAE 003F;	
    // (ແຮ) LAO VOWEL SIGN EI, LAO LETTER HO TAM	[2E7C 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EAE, 0x003F };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_111)
{
    // 0EC1 0EAE 0061;	
    // (ແຮ) LAO VOWEL SIGN EI, LAO LETTER HO TAM	[2E7C 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EAE, 0x0061 };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_112)
{
    // 0EC1 0EAE 0041;	
    // (ແຮ) LAO VOWEL SIGN EI, LAO LETTER HO TAM	[2E7C 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EAE, 0x0041 };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_113)
{
    // 0EC1 0EAE 0062;	
    // (ແຮ) LAO VOWEL SIGN EI, LAO LETTER HO TAM	[2E7C 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EAE, 0x0062 };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_114)
{
    // 0EC2 0EAE 0021;	
    // (ໂຮ) LAO VOWEL SIGN O, LAO LETTER HO TAM	[2E7C 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EAE, 0x0021 };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_115)
{
    // 0EC2 0EAE 003F;	
    // (ໂຮ) LAO VOWEL SIGN O, LAO LETTER HO TAM	[2E7C 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EAE, 0x003F };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_116)
{
    // 0EC2 0EAE 0061;	
    // (ໂຮ) LAO VOWEL SIGN O, LAO LETTER HO TAM	[2E7C 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EAE, 0x0061 };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_117)
{
    // 0EC2 0EAE 0041;	
    // (ໂຮ) LAO VOWEL SIGN O, LAO LETTER HO TAM	[2E7C 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EAE, 0x0041 };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_118)
{
    // 0EC2 0EAE 0062;	
    // (ໂຮ) LAO VOWEL SIGN O, LAO LETTER HO TAM	[2E7C 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EAE, 0x0062 };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_119)
{
    // 0EC3 0EAE 0021;	
    // (ໃຮ) LAO VOWEL SIGN AY, LAO LETTER HO TAM	[2E7C 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EAE, 0x0021 };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_120)
{
    // 0EC3 0EAE 003F;	
    // (ໃຮ) LAO VOWEL SIGN AY, LAO LETTER HO TAM	[2E7C 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EAE, 0x003F };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_121)
{
    // 0EC3 0EAE 0061;	
    // (ໃຮ) LAO VOWEL SIGN AY, LAO LETTER HO TAM	[2E7C 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EAE, 0x0061 };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_122)
{
    // 0EC3 0EAE 0041;	
    // (ໃຮ) LAO VOWEL SIGN AY, LAO LETTER HO TAM	[2E7C 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EAE, 0x0041 };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_123)
{
    // 0EC3 0EAE 0062;	
    // (ໃຮ) LAO VOWEL SIGN AY, LAO LETTER HO TAM	[2E7C 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EAE, 0x0062 };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_124)
{
    // 0EC4 0EAE 0021;	
    // (ໄຮ) LAO VOWEL SIGN AI, LAO LETTER HO TAM	[2E7C 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EAE, 0x0021 };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_125)
{
    // 0EC4 0EAE 003F;	
    // (ໄຮ) LAO VOWEL SIGN AI, LAO LETTER HO TAM	[2E7C 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EAE, 0x003F };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_126)
{
    // 0EC4 0EAE 0061;	
    // (ໄຮ) LAO VOWEL SIGN AI, LAO LETTER HO TAM	[2E7C 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EAE, 0x0061 };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_127)
{
    // 0EC4 0EAE 0041;	
    // (ໄຮ) LAO VOWEL SIGN AI, LAO LETTER HO TAM	[2E7C 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EAE, 0x0041 };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_128)
{
    // 0EC4 0EAE 0062;	
    // (ໄຮ) LAO VOWEL SIGN AI, LAO LETTER HO TAM	[2E7C 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EAE, 0x0062 };
    uint32_t const ces[12] = { 0x2E7C, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_129)
{
    // 0EAF 0021;	
    // (ຯ) LAO ELLIPSIS	[2E7D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EAF, 0x0021 };
    uint32_t const ces[9] = { 0x2E7D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_130)
{
    // 0EAF 003F;	
    // (ຯ) LAO ELLIPSIS	[2E7D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EAF, 0x003F };
    uint32_t const ces[9] = { 0x2E7D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_131)
{
    // 0EAF 0061;	
    // (ຯ) LAO ELLIPSIS	[2E7D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EAF, 0x0061 };
    uint32_t const ces[9] = { 0x2E7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_132)
{
    // 0EAF 0041;	
    // (ຯ) LAO ELLIPSIS	[2E7D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EAF, 0x0041 };
    uint32_t const ces[9] = { 0x2E7D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_133)
{
    // 0EAF 0062;	
    // (ຯ) LAO ELLIPSIS	[2E7D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EAF, 0x0062 };
    uint32_t const ces[9] = { 0x2E7D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_134)
{
    // 0EB0 0021;	
    // (ະ) LAO VOWEL SIGN A	[2E7E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB0, 0x0021 };
    uint32_t const ces[9] = { 0x2E7E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_135)
{
    // 0EB0 003F;	
    // (ະ) LAO VOWEL SIGN A	[2E7E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB0, 0x003F };
    uint32_t const ces[9] = { 0x2E7E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_136)
{
    // 0EB0 0061;	
    // (ະ) LAO VOWEL SIGN A	[2E7E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB0, 0x0061 };
    uint32_t const ces[9] = { 0x2E7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_137)
{
    // 0EB0 0041;	
    // (ະ) LAO VOWEL SIGN A	[2E7E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EB0, 0x0041 };
    uint32_t const ces[9] = { 0x2E7E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_138)
{
    // 0EB0 0062;	
    // (ະ) LAO VOWEL SIGN A	[2E7E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB0, 0x0062 };
    uint32_t const ces[9] = { 0x2E7E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_139)
{
    // 0EB1 0021;	
    // (ັ) LAO VOWEL SIGN MAI KAN	[2E7F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB1, 0x0021 };
    uint32_t const ces[9] = { 0x2E7F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_140)
{
    // 0EB1 003F;	
    // (ັ) LAO VOWEL SIGN MAI KAN	[2E7F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB1, 0x003F };
    uint32_t const ces[9] = { 0x2E7F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_141)
{
    // 0EB1 0061;	
    // (ັ) LAO VOWEL SIGN MAI KAN	[2E7F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB1, 0x0061 };
    uint32_t const ces[9] = { 0x2E7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_142)
{
    // 0EB1 0041;	
    // (ັ) LAO VOWEL SIGN MAI KAN	[2E7F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EB1, 0x0041 };
    uint32_t const ces[9] = { 0x2E7F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_143)
{
    // 0EB1 0062;	
    // (ັ) LAO VOWEL SIGN MAI KAN	[2E7F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB1, 0x0062 };
    uint32_t const ces[9] = { 0x2E7F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_144)
{
    // 0EB2 0021;	
    // (າ) LAO VOWEL SIGN AA	[2E80 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB2, 0x0021 };
    uint32_t const ces[9] = { 0x2E80, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_145)
{
    // 0EB2 003F;	
    // (າ) LAO VOWEL SIGN AA	[2E80 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB2, 0x003F };
    uint32_t const ces[9] = { 0x2E80, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_146)
{
    // 0EB2 0061;	
    // (າ) LAO VOWEL SIGN AA	[2E80 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB2, 0x0061 };
    uint32_t const ces[9] = { 0x2E80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_147)
{
    // 0EB2 0041;	
    // (າ) LAO VOWEL SIGN AA	[2E80 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EB2, 0x0041 };
    uint32_t const ces[9] = { 0x2E80, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_148)
{
    // 0ECD 0001 0EB2 0061;	
    // (ໍ'\u0001'າ) LAO NIGGAHITA, <START OF HEADING>, LAO VOWEL SIGN AA	[2E80 1CAD | 00DF 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0ECD, 0x0001, 0x0EB2, 0x0061 };
    uint32_t const ces[11] = { 0x2E80, 0x1CAD, 0x0000, 0x00DF, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_149)
{
    // 0ECD 0591 0EB2 0061;	
    // (ໍ֑າ) LAO NIGGAHITA, HEBREW ACCENT ETNAHTA, LAO VOWEL SIGN AA	[2E80 1CAD | 00DF 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0ECD, 0x0591, 0x0EB2, 0x0061 };
    uint32_t const ces[11] = { 0x2E80, 0x1CAD, 0x0000, 0x00DF, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_150)
{
    // 0ECD 1D165 0EB2 0061;	
    // (ໍ𝅥າ) LAO NIGGAHITA, MUSICAL SYMBOL COMBINING STEM, LAO VOWEL SIGN AA	[2E80 1CAD | 00DF 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0ECD, 0x1D165, 0x0EB2, 0x0061 };
    uint32_t const ces[11] = { 0x2E80, 0x1CAD, 0x0000, 0x00DF, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_151)
{
    // 0EB2 0062;	
    // (າ) LAO VOWEL SIGN AA	[2E80 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB2, 0x0062 };
    uint32_t const ces[9] = { 0x2E80, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_152)
{
    // 0EB3 0021;	
    // (ຳ) LAO VOWEL SIGN AM	[2E81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB3, 0x0021 };
    uint32_t const ces[9] = { 0x2E81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_153)
{
    // 0ECD 0EB2 0021;	
    // (ໍາ) LAO NIGGAHITA, LAO VOWEL SIGN AA	[2E81 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0ECD, 0x0EB2, 0x0021 };
    uint32_t const ces[9] = { 0x2E81, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_154)
{
    // 0EB3 003F;	
    // (ຳ) LAO VOWEL SIGN AM	[2E81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB3, 0x003F };
    uint32_t const ces[9] = { 0x2E81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_155)
{
    // 0ECD 0EB2 003F;	
    // (ໍາ) LAO NIGGAHITA, LAO VOWEL SIGN AA	[2E81 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0ECD, 0x0EB2, 0x003F };
    uint32_t const ces[9] = { 0x2E81, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_156)
{
    // 0EB3 0061;	
    // (ຳ) LAO VOWEL SIGN AM	[2E81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB3, 0x0061 };
    uint32_t const ces[9] = { 0x2E81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_157)
{
    // 0ECD 0EB2 0061;	
    // (ໍາ) LAO NIGGAHITA, LAO VOWEL SIGN AA	[2E81 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0ECD, 0x0EB2, 0x0061 };
    uint32_t const ces[9] = { 0x2E81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_158)
{
    // 0EB3 0041;	
    // (ຳ) LAO VOWEL SIGN AM	[2E81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EB3, 0x0041 };
    uint32_t const ces[9] = { 0x2E81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_159)
{
    // 0ECD 0EB2 0041;	
    // (ໍາ) LAO NIGGAHITA, LAO VOWEL SIGN AA	[2E81 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[3] = { 0x0ECD, 0x0EB2, 0x0041 };
    uint32_t const ces[9] = { 0x2E81, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_160)
{
    // 0EB3 0062;	
    // (ຳ) LAO VOWEL SIGN AM	[2E81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB3, 0x0062 };
    uint32_t const ces[9] = { 0x2E81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_161)
{
    // 0ECD 0EB2 0062;	
    // (ໍາ) LAO NIGGAHITA, LAO VOWEL SIGN AA	[2E81 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[3] = { 0x0ECD, 0x0EB2, 0x0062 };
    uint32_t const ces[9] = { 0x2E81, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_162)
{
    // 0EB4 0021;	
    // (ິ) LAO VOWEL SIGN I	[2E82 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB4, 0x0021 };
    uint32_t const ces[9] = { 0x2E82, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_163)
{
    // 0EB4 003F;	
    // (ິ) LAO VOWEL SIGN I	[2E82 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB4, 0x003F };
    uint32_t const ces[9] = { 0x2E82, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_164)
{
    // 0EB4 0061;	
    // (ິ) LAO VOWEL SIGN I	[2E82 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB4, 0x0061 };
    uint32_t const ces[9] = { 0x2E82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_165)
{
    // 0EB4 0041;	
    // (ິ) LAO VOWEL SIGN I	[2E82 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EB4, 0x0041 };
    uint32_t const ces[9] = { 0x2E82, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_166)
{
    // 0EB4 0062;	
    // (ິ) LAO VOWEL SIGN I	[2E82 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB4, 0x0062 };
    uint32_t const ces[9] = { 0x2E82, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_167)
{
    // 0EB5 0021;	
    // (ີ) LAO VOWEL SIGN II	[2E83 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB5, 0x0021 };
    uint32_t const ces[9] = { 0x2E83, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_168)
{
    // 0EB5 003F;	
    // (ີ) LAO VOWEL SIGN II	[2E83 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB5, 0x003F };
    uint32_t const ces[9] = { 0x2E83, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_169)
{
    // 0EB5 0061;	
    // (ີ) LAO VOWEL SIGN II	[2E83 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB5, 0x0061 };
    uint32_t const ces[9] = { 0x2E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_170)
{
    // 0EB5 0041;	
    // (ີ) LAO VOWEL SIGN II	[2E83 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EB5, 0x0041 };
    uint32_t const ces[9] = { 0x2E83, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_171)
{
    // 0EB5 0062;	
    // (ີ) LAO VOWEL SIGN II	[2E83 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB5, 0x0062 };
    uint32_t const ces[9] = { 0x2E83, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_172)
{
    // 0EB6 0021;	
    // (ຶ) LAO VOWEL SIGN Y	[2E84 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB6, 0x0021 };
    uint32_t const ces[9] = { 0x2E84, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_173)
{
    // 0EB6 003F;	
    // (ຶ) LAO VOWEL SIGN Y	[2E84 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB6, 0x003F };
    uint32_t const ces[9] = { 0x2E84, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_174)
{
    // 0EB6 0061;	
    // (ຶ) LAO VOWEL SIGN Y	[2E84 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB6, 0x0061 };
    uint32_t const ces[9] = { 0x2E84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_175)
{
    // 0EB6 0041;	
    // (ຶ) LAO VOWEL SIGN Y	[2E84 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EB6, 0x0041 };
    uint32_t const ces[9] = { 0x2E84, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_176)
{
    // 0EB6 0062;	
    // (ຶ) LAO VOWEL SIGN Y	[2E84 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB6, 0x0062 };
    uint32_t const ces[9] = { 0x2E84, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_177)
{
    // 0EB7 0021;	
    // (ື) LAO VOWEL SIGN YY	[2E85 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB7, 0x0021 };
    uint32_t const ces[9] = { 0x2E85, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_178)
{
    // 0EB7 003F;	
    // (ື) LAO VOWEL SIGN YY	[2E85 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB7, 0x003F };
    uint32_t const ces[9] = { 0x2E85, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_179)
{
    // 0EB7 0061;	
    // (ື) LAO VOWEL SIGN YY	[2E85 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB7, 0x0061 };
    uint32_t const ces[9] = { 0x2E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_180)
{
    // 0EB7 0041;	
    // (ື) LAO VOWEL SIGN YY	[2E85 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EB7, 0x0041 };
    uint32_t const ces[9] = { 0x2E85, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_181)
{
    // 0EB7 0062;	
    // (ື) LAO VOWEL SIGN YY	[2E85 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB7, 0x0062 };
    uint32_t const ces[9] = { 0x2E85, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_182)
{
    // 0334 0EB8;	
    // (ຸ) LAO VOWEL SIGN U	[2E86 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0EB8 };
    uint32_t const ces[8] = { 0x2E86, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_183)
{
    // 0EB8 0334;	
    // (ຸ) LAO VOWEL SIGN U	[2E86 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB8, 0x0334 };
    uint32_t const ces[8] = { 0x2E86, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_184)
{
    // 0EB8 0021;	
    // (ຸ) LAO VOWEL SIGN U	[2E86 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB8, 0x0021 };
    uint32_t const ces[9] = { 0x2E86, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_185)
{
    // 0EB8 003F;	
    // (ຸ) LAO VOWEL SIGN U	[2E86 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB8, 0x003F };
    uint32_t const ces[9] = { 0x2E86, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_186)
{
    // 0EB8 0061;	
    // (ຸ) LAO VOWEL SIGN U	[2E86 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB8, 0x0061 };
    uint32_t const ces[9] = { 0x2E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_187)
{
    // 0EB8 0041;	
    // (ຸ) LAO VOWEL SIGN U	[2E86 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EB8, 0x0041 };
    uint32_t const ces[9] = { 0x2E86, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_188)
{
    // 0EB8 0062;	
    // (ຸ) LAO VOWEL SIGN U	[2E86 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB8, 0x0062 };
    uint32_t const ces[9] = { 0x2E86, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_189)
{
    // 0334 0EB9;	
    // (ູ) LAO VOWEL SIGN UU	[2E87 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0334, 0x0EB9 };
    uint32_t const ces[8] = { 0x2E87, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_190)
{
    // 0EB9 0334;	
    // (ູ) LAO VOWEL SIGN UU	[2E87 | 004A 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB9, 0x0334 };
    uint32_t const ces[8] = { 0x2E87, 0x0000, 0x004A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 8);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 8))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_191)
{
    // 0EB9 0021;	
    // (ູ) LAO VOWEL SIGN UU	[2E87 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB9, 0x0021 };
    uint32_t const ces[9] = { 0x2E87, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_192)
{
    // 0EB9 003F;	
    // (ູ) LAO VOWEL SIGN UU	[2E87 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB9, 0x003F };
    uint32_t const ces[9] = { 0x2E87, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_193)
{
    // 0EB9 0061;	
    // (ູ) LAO VOWEL SIGN UU	[2E87 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB9, 0x0061 };
    uint32_t const ces[9] = { 0x2E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_194)
{
    // 0EB9 0041;	
    // (ູ) LAO VOWEL SIGN UU	[2E87 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EB9, 0x0041 };
    uint32_t const ces[9] = { 0x2E87, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_195)
{
    // 0EB9 0062;	
    // (ູ) LAO VOWEL SIGN UU	[2E87 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EB9, 0x0062 };
    uint32_t const ces[9] = { 0x2E87, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_196)
{
    // 0EBB 0021;	
    // (ົ) LAO VOWEL SIGN MAI KON	[2E88 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EBB, 0x0021 };
    uint32_t const ces[9] = { 0x2E88, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_197)
{
    // 0EBB 003F;	
    // (ົ) LAO VOWEL SIGN MAI KON	[2E88 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EBB, 0x003F };
    uint32_t const ces[9] = { 0x2E88, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_198)
{
    // 0EBB 0061;	
    // (ົ) LAO VOWEL SIGN MAI KON	[2E88 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EBB, 0x0061 };
    uint32_t const ces[9] = { 0x2E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_199)
{
    // 0EBB 0041;	
    // (ົ) LAO VOWEL SIGN MAI KON	[2E88 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EBB, 0x0041 };
    uint32_t const ces[9] = { 0x2E88, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_200)
{
    // 0EBB 0062;	
    // (ົ) LAO VOWEL SIGN MAI KON	[2E88 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EBB, 0x0062 };
    uint32_t const ces[9] = { 0x2E88, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_201)
{
    // 0EBC 0021;	
    // (ຼ) LAO SEMIVOWEL SIGN LO	[2E89 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EBC, 0x0021 };
    uint32_t const ces[9] = { 0x2E89, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_202)
{
    // 0EBC 003F;	
    // (ຼ) LAO SEMIVOWEL SIGN LO	[2E89 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EBC, 0x003F };
    uint32_t const ces[9] = { 0x2E89, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_203)
{
    // 0EBC 0061;	
    // (ຼ) LAO SEMIVOWEL SIGN LO	[2E89 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EBC, 0x0061 };
    uint32_t const ces[9] = { 0x2E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_204)
{
    // 0EBC 0041;	
    // (ຼ) LAO SEMIVOWEL SIGN LO	[2E89 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EBC, 0x0041 };
    uint32_t const ces[9] = { 0x2E89, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_205)
{
    // 0EBC 0062;	
    // (ຼ) LAO SEMIVOWEL SIGN LO	[2E89 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EBC, 0x0062 };
    uint32_t const ces[9] = { 0x2E89, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_206)
{
    // 0EBD 0021;	
    // (ຽ) LAO SEMIVOWEL SIGN NYO	[2E8A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EBD, 0x0021 };
    uint32_t const ces[9] = { 0x2E8A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_207)
{
    // 0EBD 003F;	
    // (ຽ) LAO SEMIVOWEL SIGN NYO	[2E8A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EBD, 0x003F };
    uint32_t const ces[9] = { 0x2E8A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_208)
{
    // 0EBD 0061;	
    // (ຽ) LAO SEMIVOWEL SIGN NYO	[2E8A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EBD, 0x0061 };
    uint32_t const ces[9] = { 0x2E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_209)
{
    // 0EBD 0041;	
    // (ຽ) LAO SEMIVOWEL SIGN NYO	[2E8A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EBD, 0x0041 };
    uint32_t const ces[9] = { 0x2E8A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_210)
{
    // 0EBD 0062;	
    // (ຽ) LAO SEMIVOWEL SIGN NYO	[2E8A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EBD, 0x0062 };
    uint32_t const ces[9] = { 0x2E8A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_211)
{
    // 0EC0 0021;	
    // (ເ) LAO VOWEL SIGN E	[2E8B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC0, 0x0021 };
    uint32_t const ces[9] = { 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_212)
{
    // 0EC0 003F;	
    // (ເ) LAO VOWEL SIGN E	[2E8B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC0, 0x003F };
    uint32_t const ces[9] = { 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_213)
{
    // 0EC0 0061;	
    // (ເ) LAO VOWEL SIGN E	[2E8B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC0, 0x0061 };
    uint32_t const ces[9] = { 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_214)
{
    // 0EC0 0041;	
    // (ເ) LAO VOWEL SIGN E	[2E8B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EC0, 0x0041 };
    uint32_t const ces[9] = { 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_215)
{
    // 0EC0 0062;	
    // (ເ) LAO VOWEL SIGN E	[2E8B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC0, 0x0062 };
    uint32_t const ces[9] = { 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_216)
{
    // 0EC0 0001 0EDE 0061;	
    // (ເ'\u0001'ໞ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER KHMU GO	[2E8B 2E60 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0EDE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_217)
{
    // 0EC0 0591 0EDE 0061;	
    // (ເ֑ໞ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER KHMU GO	[2E8B 2E60 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0EDE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_218)
{
    // 0EC0 1D165 0EDE 0061;	
    // (ເ𝅥ໞ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KHMU GO	[2E8B 2E60 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0EDE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_219)
{
    // 0EC0 0001 0E81 0061;	
    // (ເ'\u0001'ກ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER KO	[2E8B 2E61 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0E81, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_220)
{
    // 0EC0 0591 0E81 0061;	
    // (ເ֑ກ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER KO	[2E8B 2E61 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0E81, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_221)
{
    // 0EC0 1D165 0E81 0061;	
    // (ເ𝅥ກ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KO	[2E8B 2E61 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0E81, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_222)
{
    // 0EC0 0001 0E82 0061;	
    // (ເ'\u0001'ຂ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER KHO SUNG	[2E8B 2E62 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0E82, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_223)
{
    // 0EC0 0591 0E82 0061;	
    // (ເ֑ຂ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER KHO SUNG	[2E8B 2E62 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0E82, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_224)
{
    // 0EC0 1D165 0E82 0061;	
    // (ເ𝅥ຂ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KHO SUNG	[2E8B 2E62 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0E82, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_225)
{
    // 0EC0 0001 0E84 0061;	
    // (ເ'\u0001'ຄ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER KHO TAM	[2E8B 2E63 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0E84, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_226)
{
    // 0EC0 0591 0E84 0061;	
    // (ເ֑ຄ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER KHO TAM	[2E8B 2E63 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0E84, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_227)
{
    // 0EC0 1D165 0E84 0061;	
    // (ເ𝅥ຄ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KHO TAM	[2E8B 2E63 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0E84, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_228)
{
    // 0EC0 0001 0E87 0061;	
    // (ເ'\u0001'ງ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER NGO	[2E8B 2E64 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0E87, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_229)
{
    // 0EC0 0591 0E87 0061;	
    // (ເ֑ງ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER NGO	[2E8B 2E64 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0E87, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_230)
{
    // 0EC0 1D165 0E87 0061;	
    // (ເ𝅥ງ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER NGO	[2E8B 2E64 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0E87, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_231)
{
    // 0EC0 0001 0E88 0061;	
    // (ເ'\u0001'ຈ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER CO	[2E8B 2E65 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0E88, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_232)
{
    // 0EC0 0591 0E88 0061;	
    // (ເ֑ຈ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER CO	[2E8B 2E65 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0E88, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_233)
{
    // 0EC0 1D165 0E88 0061;	
    // (ເ𝅥ຈ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER CO	[2E8B 2E65 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0E88, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_234)
{
    // 0EC0 0001 0EAA 0061;	
    // (ເ'\u0001'ສ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER SO SUNG	[2E8B 2E66 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0EAA, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_235)
{
    // 0EC0 0591 0EAA 0061;	
    // (ເ֑ສ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER SO SUNG	[2E8B 2E66 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0EAA, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_236)
{
    // 0EC0 1D165 0EAA 0061;	
    // (ເ𝅥ສ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER SO SUNG	[2E8B 2E66 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0EAA, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_237)
{
    // 0EC0 0001 0E8A 0061;	
    // (ເ'\u0001'ຊ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER SO TAM	[2E8B 2E67 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0E8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_238)
{
    // 0EC0 0591 0E8A 0061;	
    // (ເ֑ຊ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER SO TAM	[2E8B 2E67 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0E8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_239)
{
    // 0EC0 1D165 0E8A 0061;	
    // (ເ𝅥ຊ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER SO TAM	[2E8B 2E67 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0E8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_240)
{
    // 0EC0 0001 0EDF 0061;	
    // (ເ'\u0001'ໟ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER KHMU NYO	[2E8B 2E68 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0EDF, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_241)
{
    // 0EC0 0591 0EDF 0061;	
    // (ເ֑ໟ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER KHMU NYO	[2E8B 2E68 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0EDF, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_242)
{
    // 0EC0 1D165 0EDF 0061;	
    // (ເ𝅥ໟ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KHMU NYO	[2E8B 2E68 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0EDF, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_243)
{
    // 0EC0 0001 0E8D 0061;	
    // (ເ'\u0001'ຍ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER NYO	[2E8B 2E69 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0E8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_244)
{
    // 0EC0 0591 0E8D 0061;	
    // (ເ֑ຍ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER NYO	[2E8B 2E69 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0E8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_245)
{
    // 0EC0 1D165 0E8D 0061;	
    // (ເ𝅥ຍ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER NYO	[2E8B 2E69 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0E8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_246)
{
    // 0EC0 0001 0E94 0061;	
    // (ເ'\u0001'ດ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER DO	[2E8B 2E6A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0E94, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_247)
{
    // 0EC0 0591 0E94 0061;	
    // (ເ֑ດ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER DO	[2E8B 2E6A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0E94, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_248)
{
    // 0EC0 1D165 0E94 0061;	
    // (ເ𝅥ດ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER DO	[2E8B 2E6A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0E94, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_249)
{
    // 0EC0 0001 0E95 0061;	
    // (ເ'\u0001'ຕ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER TO	[2E8B 2E6B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0E95, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_250)
{
    // 0EC0 0591 0E95 0061;	
    // (ເ֑ຕ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER TO	[2E8B 2E6B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0E95, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_251)
{
    // 0EC0 1D165 0E95 0061;	
    // (ເ𝅥ຕ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER TO	[2E8B 2E6B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0E95, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_252)
{
    // 0EC0 0001 0E96 0061;	
    // (ເ'\u0001'ຖ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER THO SUNG	[2E8B 2E6C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0E96, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_253)
{
    // 0EC0 0591 0E96 0061;	
    // (ເ֑ຖ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER THO SUNG	[2E8B 2E6C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0E96, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_254)
{
    // 0EC0 1D165 0E96 0061;	
    // (ເ𝅥ຖ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER THO SUNG	[2E8B 2E6C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0E96, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_255)
{
    // 0EC0 0001 0E97 0061;	
    // (ເ'\u0001'ທ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER THO TAM	[2E8B 2E6D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0E97, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_256)
{
    // 0EC0 0591 0E97 0061;	
    // (ເ֑ທ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER THO TAM	[2E8B 2E6D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0E97, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_257)
{
    // 0EC0 1D165 0E97 0061;	
    // (ເ𝅥ທ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER THO TAM	[2E8B 2E6D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0E97, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_258)
{
    // 0EC0 0001 0E99 0061;	
    // (ເ'\u0001'ນ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER NO	[2E8B 2E6E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0E99, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_259)
{
    // 0EC0 0591 0E99 0061;	
    // (ເ֑ນ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER NO	[2E8B 2E6E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0E99, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_260)
{
    // 0EC0 1D165 0E99 0061;	
    // (ເ𝅥ນ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER NO	[2E8B 2E6E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0E99, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_261)
{
    // 0EC0 0001 0E9A 0061;	
    // (ເ'\u0001'ບ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER BO	[2E8B 2E6F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0E9A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_262)
{
    // 0EC0 0591 0E9A 0061;	
    // (ເ֑ບ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER BO	[2E8B 2E6F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0E9A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_263)
{
    // 0EC0 1D165 0E9A 0061;	
    // (ເ𝅥ບ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER BO	[2E8B 2E6F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0E9A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_264)
{
    // 0EC0 0001 0E9B 0061;	
    // (ເ'\u0001'ປ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER PO	[2E8B 2E70 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0E9B, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_265)
{
    // 0EC0 0591 0E9B 0061;	
    // (ເ֑ປ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER PO	[2E8B 2E70 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0E9B, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_266)
{
    // 0EC0 1D165 0E9B 0061;	
    // (ເ𝅥ປ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER PO	[2E8B 2E70 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0E9B, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_267)
{
    // 0EC0 0001 0E9C 0061;	
    // (ເ'\u0001'ຜ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER PHO SUNG	[2E8B 2E71 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0E9C, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_268)
{
    // 0EC0 0591 0E9C 0061;	
    // (ເ֑ຜ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER PHO SUNG	[2E8B 2E71 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0E9C, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_269)
{
    // 0EC0 1D165 0E9C 0061;	
    // (ເ𝅥ຜ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER PHO SUNG	[2E8B 2E71 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0E9C, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_270)
{
    // 0EC0 0001 0E9D 0061;	
    // (ເ'\u0001'ຝ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER FO TAM	[2E8B 2E72 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0E9D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_271)
{
    // 0EC0 0591 0E9D 0061;	
    // (ເ֑ຝ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER FO TAM	[2E8B 2E72 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0E9D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_272)
{
    // 0EC0 1D165 0E9D 0061;	
    // (ເ𝅥ຝ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER FO TAM	[2E8B 2E72 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0E9D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_273)
{
    // 0EC0 0001 0E9E 0061;	
    // (ເ'\u0001'ພ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER PHO TAM	[2E8B 2E73 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0E9E, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_274)
{
    // 0EC0 0591 0E9E 0061;	
    // (ເ֑ພ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER PHO TAM	[2E8B 2E73 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0E9E, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_275)
{
    // 0EC0 1D165 0E9E 0061;	
    // (ເ𝅥ພ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER PHO TAM	[2E8B 2E73 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0E9E, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_276)
{
    // 0EC0 0001 0E9F 0061;	
    // (ເ'\u0001'ຟ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER FO SUNG	[2E8B 2E74 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0E9F, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_277)
{
    // 0EC0 0591 0E9F 0061;	
    // (ເ֑ຟ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER FO SUNG	[2E8B 2E74 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0E9F, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_278)
{
    // 0EC0 1D165 0E9F 0061;	
    // (ເ𝅥ຟ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER FO SUNG	[2E8B 2E74 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0E9F, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_279)
{
    // 0EC0 0001 0EA1 0061;	
    // (ເ'\u0001'ມ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER MO	[2E8B 2E75 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0EA1, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_280)
{
    // 0EC0 0591 0EA1 0061;	
    // (ເ֑ມ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER MO	[2E8B 2E75 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0EA1, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_281)
{
    // 0EC0 1D165 0EA1 0061;	
    // (ເ𝅥ມ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER MO	[2E8B 2E75 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0EA1, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_282)
{
    // 0EC0 0001 0EA2 0061;	
    // (ເ'\u0001'ຢ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER YO	[2E8B 2E76 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0EA2, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_283)
{
    // 0EC0 0591 0EA2 0061;	
    // (ເ֑ຢ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER YO	[2E8B 2E76 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0EA2, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_284)
{
    // 0EC0 1D165 0EA2 0061;	
    // (ເ𝅥ຢ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER YO	[2E8B 2E76 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0EA2, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_285)
{
    // 0EC0 0001 0EA3 0061;	
    // (ເ'\u0001'ຣ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER LO LING	[2E8B 2E77 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0EA3, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_286)
{
    // 0EC0 0591 0EA3 0061;	
    // (ເ֑ຣ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER LO LING	[2E8B 2E77 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0EA3, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_287)
{
    // 0EC0 1D165 0EA3 0061;	
    // (ເ𝅥ຣ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER LO LING	[2E8B 2E77 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0EA3, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_288)
{
    // 0EC0 0001 0EA5 0061;	
    // (ເ'\u0001'ລ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER LO LOOT	[2E8B 2E78 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0EA5, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_289)
{
    // 0EC0 0591 0EA5 0061;	
    // (ເ֑ລ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER LO LOOT	[2E8B 2E78 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0EA5, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_290)
{
    // 0EC0 1D165 0EA5 0061;	
    // (ເ𝅥ລ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER LO LOOT	[2E8B 2E78 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0EA5, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_291)
{
    // 0EC0 0001 0EA7 0061;	
    // (ເ'\u0001'ວ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER WO	[2E8B 2E79 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0EA7, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_292)
{
    // 0EC0 0591 0EA7 0061;	
    // (ເ֑ວ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER WO	[2E8B 2E79 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0EA7, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_293)
{
    // 0EC0 1D165 0EA7 0061;	
    // (ເ𝅥ວ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER WO	[2E8B 2E79 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0EA7, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_294)
{
    // 0EC0 0001 0EAB 0061;	
    // (ເ'\u0001'ຫ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER HO SUNG	[2E8B 2E7A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0EAB, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_295)
{
    // 0EC0 0591 0EAB 0061;	
    // (ເ֑ຫ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER HO SUNG	[2E8B 2E7A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0EAB, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_296)
{
    // 0EC0 1D165 0EAB 0061;	
    // (ເ𝅥ຫ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER HO SUNG	[2E8B 2E7A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0EAB, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_297)
{
    // 0EC0 0001 0EDC 0061;	
    // (ເ'\u0001'ໜ) LAO VOWEL SIGN E, <START OF HEADING>, LAO HO NO	[2E8B 2E7A 2E6E 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0EDC, 0x0061 };
    uint32_t const ces[15] = { 0x2E8B, 0x2E7A, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_298)
{
    // 0EC0 0591 0EDC 0061;	
    // (ເ֑ໜ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO HO NO	[2E8B 2E7A 2E6E 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0EDC, 0x0061 };
    uint32_t const ces[15] = { 0x2E8B, 0x2E7A, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_299)
{
    // 0EC0 1D165 0EDC 0061;	
    // (ເ𝅥ໜ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO HO NO	[2E8B 2E7A 2E6E 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0EDC, 0x0061 };
    uint32_t const ces[15] = { 0x2E8B, 0x2E7A, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_300)
{
    // 0EC0 0001 0EDD 0061;	
    // (ເ'\u0001'ໝ) LAO VOWEL SIGN E, <START OF HEADING>, LAO HO MO	[2E8B 2E7A 2E75 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0EDD, 0x0061 };
    uint32_t const ces[15] = { 0x2E8B, 0x2E7A, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_301)
{
    // 0EC0 0591 0EDD 0061;	
    // (ເ֑ໝ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO HO MO	[2E8B 2E7A 2E75 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0EDD, 0x0061 };
    uint32_t const ces[15] = { 0x2E8B, 0x2E7A, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_302)
{
    // 0EC0 1D165 0EDD 0061;	
    // (ເ𝅥ໝ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO HO MO	[2E8B 2E7A 2E75 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0EDD, 0x0061 };
    uint32_t const ces[15] = { 0x2E8B, 0x2E7A, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_303)
{
    // 0EC0 0001 0EAD 0061;	
    // (ເ'\u0001'ອ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER O	[2E8B 2E7B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0EAD, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_304)
{
    // 0EC0 0591 0EAD 0061;	
    // (ເ֑ອ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER O	[2E8B 2E7B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0EAD, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_305)
{
    // 0EC0 1D165 0EAD 0061;	
    // (ເ𝅥ອ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER O	[2E8B 2E7B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0EAD, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_306)
{
    // 0EC0 0001 0EAE 0061;	
    // (ເ'\u0001'ຮ) LAO VOWEL SIGN E, <START OF HEADING>, LAO LETTER HO TAM	[2E8B 2E7C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0001, 0x0EAE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_307)
{
    // 0EC0 0591 0EAE 0061;	
    // (ເ֑ຮ) LAO VOWEL SIGN E, HEBREW ACCENT ETNAHTA, LAO LETTER HO TAM	[2E8B 2E7C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x0591, 0x0EAE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_308)
{
    // 0EC0 1D165 0EAE 0061;	
    // (ເ𝅥ຮ) LAO VOWEL SIGN E, MUSICAL SYMBOL COMBINING STEM, LAO LETTER HO TAM	[2E8B 2E7C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC0, 0x1D165, 0x0EAE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8B, 0x2E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_309)
{
    // 0EC1 0021;	
    // (ແ) LAO VOWEL SIGN EI	[2E8C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC1, 0x0021 };
    uint32_t const ces[9] = { 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_310)
{
    // 0EC1 003F;	
    // (ແ) LAO VOWEL SIGN EI	[2E8C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC1, 0x003F };
    uint32_t const ces[9] = { 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_311)
{
    // 0EC1 0061;	
    // (ແ) LAO VOWEL SIGN EI	[2E8C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC1, 0x0061 };
    uint32_t const ces[9] = { 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_312)
{
    // 0EC1 0041;	
    // (ແ) LAO VOWEL SIGN EI	[2E8C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EC1, 0x0041 };
    uint32_t const ces[9] = { 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_313)
{
    // 0EC1 0062;	
    // (ແ) LAO VOWEL SIGN EI	[2E8C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC1, 0x0062 };
    uint32_t const ces[9] = { 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_314)
{
    // 0EC1 0001 0EDE 0061;	
    // (ແ'\u0001'ໞ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER KHMU GO	[2E8C 2E60 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0EDE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_315)
{
    // 0EC1 0591 0EDE 0061;	
    // (ແ֑ໞ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER KHMU GO	[2E8C 2E60 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0EDE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_316)
{
    // 0EC1 1D165 0EDE 0061;	
    // (ແ𝅥ໞ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KHMU GO	[2E8C 2E60 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0EDE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_317)
{
    // 0EC1 0001 0E81 0061;	
    // (ແ'\u0001'ກ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER KO	[2E8C 2E61 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0E81, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_318)
{
    // 0EC1 0591 0E81 0061;	
    // (ແ֑ກ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER KO	[2E8C 2E61 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0E81, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_319)
{
    // 0EC1 1D165 0E81 0061;	
    // (ແ𝅥ກ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KO	[2E8C 2E61 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0E81, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_320)
{
    // 0EC1 0001 0E82 0061;	
    // (ແ'\u0001'ຂ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER KHO SUNG	[2E8C 2E62 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0E82, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_321)
{
    // 0EC1 0591 0E82 0061;	
    // (ແ֑ຂ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER KHO SUNG	[2E8C 2E62 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0E82, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_322)
{
    // 0EC1 1D165 0E82 0061;	
    // (ແ𝅥ຂ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KHO SUNG	[2E8C 2E62 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0E82, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_323)
{
    // 0EC1 0001 0E84 0061;	
    // (ແ'\u0001'ຄ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER KHO TAM	[2E8C 2E63 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0E84, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_324)
{
    // 0EC1 0591 0E84 0061;	
    // (ແ֑ຄ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER KHO TAM	[2E8C 2E63 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0E84, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_325)
{
    // 0EC1 1D165 0E84 0061;	
    // (ແ𝅥ຄ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KHO TAM	[2E8C 2E63 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0E84, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_326)
{
    // 0EC1 0001 0E87 0061;	
    // (ແ'\u0001'ງ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER NGO	[2E8C 2E64 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0E87, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_327)
{
    // 0EC1 0591 0E87 0061;	
    // (ແ֑ງ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER NGO	[2E8C 2E64 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0E87, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_328)
{
    // 0EC1 1D165 0E87 0061;	
    // (ແ𝅥ງ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER NGO	[2E8C 2E64 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0E87, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_329)
{
    // 0EC1 0001 0E88 0061;	
    // (ແ'\u0001'ຈ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER CO	[2E8C 2E65 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0E88, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_330)
{
    // 0EC1 0591 0E88 0061;	
    // (ແ֑ຈ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER CO	[2E8C 2E65 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0E88, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_331)
{
    // 0EC1 1D165 0E88 0061;	
    // (ແ𝅥ຈ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER CO	[2E8C 2E65 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0E88, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_332)
{
    // 0EC1 0001 0EAA 0061;	
    // (ແ'\u0001'ສ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER SO SUNG	[2E8C 2E66 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0EAA, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_333)
{
    // 0EC1 0591 0EAA 0061;	
    // (ແ֑ສ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER SO SUNG	[2E8C 2E66 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0EAA, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_334)
{
    // 0EC1 1D165 0EAA 0061;	
    // (ແ𝅥ສ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER SO SUNG	[2E8C 2E66 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0EAA, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_335)
{
    // 0EC1 0001 0E8A 0061;	
    // (ແ'\u0001'ຊ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER SO TAM	[2E8C 2E67 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0E8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_336)
{
    // 0EC1 0591 0E8A 0061;	
    // (ແ֑ຊ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER SO TAM	[2E8C 2E67 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0E8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_337)
{
    // 0EC1 1D165 0E8A 0061;	
    // (ແ𝅥ຊ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER SO TAM	[2E8C 2E67 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0E8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_338)
{
    // 0EC1 0001 0EDF 0061;	
    // (ແ'\u0001'ໟ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER KHMU NYO	[2E8C 2E68 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0EDF, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_339)
{
    // 0EC1 0591 0EDF 0061;	
    // (ແ֑ໟ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER KHMU NYO	[2E8C 2E68 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0EDF, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_340)
{
    // 0EC1 1D165 0EDF 0061;	
    // (ແ𝅥ໟ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KHMU NYO	[2E8C 2E68 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0EDF, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_341)
{
    // 0EC1 0001 0E8D 0061;	
    // (ແ'\u0001'ຍ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER NYO	[2E8C 2E69 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0E8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_342)
{
    // 0EC1 0591 0E8D 0061;	
    // (ແ֑ຍ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER NYO	[2E8C 2E69 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0E8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_343)
{
    // 0EC1 1D165 0E8D 0061;	
    // (ແ𝅥ຍ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER NYO	[2E8C 2E69 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0E8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_344)
{
    // 0EC1 0001 0E94 0061;	
    // (ແ'\u0001'ດ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER DO	[2E8C 2E6A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0E94, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_345)
{
    // 0EC1 0591 0E94 0061;	
    // (ແ֑ດ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER DO	[2E8C 2E6A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0E94, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_346)
{
    // 0EC1 1D165 0E94 0061;	
    // (ແ𝅥ດ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER DO	[2E8C 2E6A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0E94, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_347)
{
    // 0EC1 0001 0E95 0061;	
    // (ແ'\u0001'ຕ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER TO	[2E8C 2E6B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0E95, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_348)
{
    // 0EC1 0591 0E95 0061;	
    // (ແ֑ຕ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER TO	[2E8C 2E6B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0E95, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_349)
{
    // 0EC1 1D165 0E95 0061;	
    // (ແ𝅥ຕ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER TO	[2E8C 2E6B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0E95, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_350)
{
    // 0EC1 0001 0E96 0061;	
    // (ແ'\u0001'ຖ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER THO SUNG	[2E8C 2E6C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0E96, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_351)
{
    // 0EC1 0591 0E96 0061;	
    // (ແ֑ຖ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER THO SUNG	[2E8C 2E6C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0E96, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_352)
{
    // 0EC1 1D165 0E96 0061;	
    // (ແ𝅥ຖ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER THO SUNG	[2E8C 2E6C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0E96, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_353)
{
    // 0EC1 0001 0E97 0061;	
    // (ແ'\u0001'ທ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER THO TAM	[2E8C 2E6D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0E97, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_354)
{
    // 0EC1 0591 0E97 0061;	
    // (ແ֑ທ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER THO TAM	[2E8C 2E6D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0E97, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_355)
{
    // 0EC1 1D165 0E97 0061;	
    // (ແ𝅥ທ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER THO TAM	[2E8C 2E6D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0E97, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_356)
{
    // 0EC1 0001 0E99 0061;	
    // (ແ'\u0001'ນ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER NO	[2E8C 2E6E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0E99, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_357)
{
    // 0EC1 0591 0E99 0061;	
    // (ແ֑ນ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER NO	[2E8C 2E6E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0E99, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_358)
{
    // 0EC1 1D165 0E99 0061;	
    // (ແ𝅥ນ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER NO	[2E8C 2E6E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0E99, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_359)
{
    // 0EC1 0001 0E9A 0061;	
    // (ແ'\u0001'ບ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER BO	[2E8C 2E6F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0E9A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_360)
{
    // 0EC1 0591 0E9A 0061;	
    // (ແ֑ບ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER BO	[2E8C 2E6F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0E9A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_361)
{
    // 0EC1 1D165 0E9A 0061;	
    // (ແ𝅥ບ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER BO	[2E8C 2E6F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0E9A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_362)
{
    // 0EC1 0001 0E9B 0061;	
    // (ແ'\u0001'ປ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER PO	[2E8C 2E70 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0E9B, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_363)
{
    // 0EC1 0591 0E9B 0061;	
    // (ແ֑ປ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER PO	[2E8C 2E70 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0E9B, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_364)
{
    // 0EC1 1D165 0E9B 0061;	
    // (ແ𝅥ປ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER PO	[2E8C 2E70 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0E9B, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_365)
{
    // 0EC1 0001 0E9C 0061;	
    // (ແ'\u0001'ຜ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER PHO SUNG	[2E8C 2E71 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0E9C, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_366)
{
    // 0EC1 0591 0E9C 0061;	
    // (ແ֑ຜ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER PHO SUNG	[2E8C 2E71 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0E9C, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_367)
{
    // 0EC1 1D165 0E9C 0061;	
    // (ແ𝅥ຜ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER PHO SUNG	[2E8C 2E71 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0E9C, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_368)
{
    // 0EC1 0001 0E9D 0061;	
    // (ແ'\u0001'ຝ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER FO TAM	[2E8C 2E72 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0E9D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_369)
{
    // 0EC1 0591 0E9D 0061;	
    // (ແ֑ຝ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER FO TAM	[2E8C 2E72 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0E9D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_370)
{
    // 0EC1 1D165 0E9D 0061;	
    // (ແ𝅥ຝ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER FO TAM	[2E8C 2E72 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0E9D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_371)
{
    // 0EC1 0001 0E9E 0061;	
    // (ແ'\u0001'ພ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER PHO TAM	[2E8C 2E73 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0E9E, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_372)
{
    // 0EC1 0591 0E9E 0061;	
    // (ແ֑ພ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER PHO TAM	[2E8C 2E73 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0E9E, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_373)
{
    // 0EC1 1D165 0E9E 0061;	
    // (ແ𝅥ພ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER PHO TAM	[2E8C 2E73 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0E9E, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_374)
{
    // 0EC1 0001 0E9F 0061;	
    // (ແ'\u0001'ຟ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER FO SUNG	[2E8C 2E74 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0E9F, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_375)
{
    // 0EC1 0591 0E9F 0061;	
    // (ແ֑ຟ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER FO SUNG	[2E8C 2E74 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0E9F, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_376)
{
    // 0EC1 1D165 0E9F 0061;	
    // (ແ𝅥ຟ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER FO SUNG	[2E8C 2E74 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0E9F, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_377)
{
    // 0EC1 0001 0EA1 0061;	
    // (ແ'\u0001'ມ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER MO	[2E8C 2E75 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0EA1, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_378)
{
    // 0EC1 0591 0EA1 0061;	
    // (ແ֑ມ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER MO	[2E8C 2E75 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0EA1, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_379)
{
    // 0EC1 1D165 0EA1 0061;	
    // (ແ𝅥ມ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER MO	[2E8C 2E75 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0EA1, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_380)
{
    // 0EC1 0001 0EA2 0061;	
    // (ແ'\u0001'ຢ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER YO	[2E8C 2E76 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0EA2, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_381)
{
    // 0EC1 0591 0EA2 0061;	
    // (ແ֑ຢ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER YO	[2E8C 2E76 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0EA2, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_382)
{
    // 0EC1 1D165 0EA2 0061;	
    // (ແ𝅥ຢ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER YO	[2E8C 2E76 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0EA2, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_383)
{
    // 0EC1 0001 0EA3 0061;	
    // (ແ'\u0001'ຣ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER LO LING	[2E8C 2E77 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0EA3, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_384)
{
    // 0EC1 0591 0EA3 0061;	
    // (ແ֑ຣ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER LO LING	[2E8C 2E77 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0EA3, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_385)
{
    // 0EC1 1D165 0EA3 0061;	
    // (ແ𝅥ຣ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER LO LING	[2E8C 2E77 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0EA3, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_386)
{
    // 0EC1 0001 0EA5 0061;	
    // (ແ'\u0001'ລ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER LO LOOT	[2E8C 2E78 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0EA5, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_387)
{
    // 0EC1 0591 0EA5 0061;	
    // (ແ֑ລ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER LO LOOT	[2E8C 2E78 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0EA5, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_388)
{
    // 0EC1 1D165 0EA5 0061;	
    // (ແ𝅥ລ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER LO LOOT	[2E8C 2E78 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0EA5, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_389)
{
    // 0EC1 0001 0EA7 0061;	
    // (ແ'\u0001'ວ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER WO	[2E8C 2E79 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0EA7, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_390)
{
    // 0EC1 0591 0EA7 0061;	
    // (ແ֑ວ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER WO	[2E8C 2E79 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0EA7, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_391)
{
    // 0EC1 1D165 0EA7 0061;	
    // (ແ𝅥ວ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER WO	[2E8C 2E79 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0EA7, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_392)
{
    // 0EC1 0001 0EAB 0061;	
    // (ແ'\u0001'ຫ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER HO SUNG	[2E8C 2E7A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0EAB, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_393)
{
    // 0EC1 0591 0EAB 0061;	
    // (ແ֑ຫ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER HO SUNG	[2E8C 2E7A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0EAB, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_394)
{
    // 0EC1 1D165 0EAB 0061;	
    // (ແ𝅥ຫ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER HO SUNG	[2E8C 2E7A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0EAB, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_395)
{
    // 0EC1 0001 0EDC 0061;	
    // (ແ'\u0001'ໜ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO HO NO	[2E8C 2E7A 2E6E 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0EDC, 0x0061 };
    uint32_t const ces[15] = { 0x2E8C, 0x2E7A, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_396)
{
    // 0EC1 0591 0EDC 0061;	
    // (ແ֑ໜ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO HO NO	[2E8C 2E7A 2E6E 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0EDC, 0x0061 };
    uint32_t const ces[15] = { 0x2E8C, 0x2E7A, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_397)
{
    // 0EC1 1D165 0EDC 0061;	
    // (ແ𝅥ໜ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO HO NO	[2E8C 2E7A 2E6E 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0EDC, 0x0061 };
    uint32_t const ces[15] = { 0x2E8C, 0x2E7A, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_398)
{
    // 0EC1 0001 0EDD 0061;	
    // (ແ'\u0001'ໝ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO HO MO	[2E8C 2E7A 2E75 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0EDD, 0x0061 };
    uint32_t const ces[15] = { 0x2E8C, 0x2E7A, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_399)
{
    // 0EC1 0591 0EDD 0061;	
    // (ແ֑ໝ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO HO MO	[2E8C 2E7A 2E75 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0EDD, 0x0061 };
    uint32_t const ces[15] = { 0x2E8C, 0x2E7A, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_400)
{
    // 0EC1 1D165 0EDD 0061;	
    // (ແ𝅥ໝ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO HO MO	[2E8C 2E7A 2E75 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0EDD, 0x0061 };
    uint32_t const ces[15] = { 0x2E8C, 0x2E7A, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_401)
{
    // 0EC1 0001 0EAD 0061;	
    // (ແ'\u0001'ອ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER O	[2E8C 2E7B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0EAD, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_402)
{
    // 0EC1 0591 0EAD 0061;	
    // (ແ֑ອ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER O	[2E8C 2E7B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0EAD, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_403)
{
    // 0EC1 1D165 0EAD 0061;	
    // (ແ𝅥ອ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER O	[2E8C 2E7B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0EAD, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_404)
{
    // 0EC1 0001 0EAE 0061;	
    // (ແ'\u0001'ຮ) LAO VOWEL SIGN EI, <START OF HEADING>, LAO LETTER HO TAM	[2E8C 2E7C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0001, 0x0EAE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_405)
{
    // 0EC1 0591 0EAE 0061;	
    // (ແ֑ຮ) LAO VOWEL SIGN EI, HEBREW ACCENT ETNAHTA, LAO LETTER HO TAM	[2E8C 2E7C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x0591, 0x0EAE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_406)
{
    // 0EC1 1D165 0EAE 0061;	
    // (ແ𝅥ຮ) LAO VOWEL SIGN EI, MUSICAL SYMBOL COMBINING STEM, LAO LETTER HO TAM	[2E8C 2E7C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC1, 0x1D165, 0x0EAE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8C, 0x2E7C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_407)
{
    // 0EC2 0021;	
    // (ໂ) LAO VOWEL SIGN O	[2E8D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC2, 0x0021 };
    uint32_t const ces[9] = { 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_408)
{
    // 0EC2 003F;	
    // (ໂ) LAO VOWEL SIGN O	[2E8D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC2, 0x003F };
    uint32_t const ces[9] = { 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_409)
{
    // 0EC2 0061;	
    // (ໂ) LAO VOWEL SIGN O	[2E8D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC2, 0x0061 };
    uint32_t const ces[9] = { 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_410)
{
    // 0EC2 0041;	
    // (ໂ) LAO VOWEL SIGN O	[2E8D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EC2, 0x0041 };
    uint32_t const ces[9] = { 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_411)
{
    // 0EC2 0062;	
    // (ໂ) LAO VOWEL SIGN O	[2E8D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EC2, 0x0062 };
    uint32_t const ces[9] = { 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_412)
{
    // 0EC2 0001 0EDE 0061;	
    // (ໂ'\u0001'ໞ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER KHMU GO	[2E8D 2E60 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0EDE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_413)
{
    // 0EC2 0591 0EDE 0061;	
    // (ໂ֑ໞ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER KHMU GO	[2E8D 2E60 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0EDE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_414)
{
    // 0EC2 1D165 0EDE 0061;	
    // (ໂ𝅥ໞ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KHMU GO	[2E8D 2E60 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0EDE, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_415)
{
    // 0EC2 0001 0E81 0061;	
    // (ໂ'\u0001'ກ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER KO	[2E8D 2E61 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0E81, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_416)
{
    // 0EC2 0591 0E81 0061;	
    // (ໂ֑ກ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER KO	[2E8D 2E61 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0E81, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_417)
{
    // 0EC2 1D165 0E81 0061;	
    // (ໂ𝅥ກ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KO	[2E8D 2E61 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0E81, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_418)
{
    // 0EC2 0001 0E82 0061;	
    // (ໂ'\u0001'ຂ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER KHO SUNG	[2E8D 2E62 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0E82, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_419)
{
    // 0EC2 0591 0E82 0061;	
    // (ໂ֑ຂ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER KHO SUNG	[2E8D 2E62 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0E82, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_420)
{
    // 0EC2 1D165 0E82 0061;	
    // (ໂ𝅥ຂ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KHO SUNG	[2E8D 2E62 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0E82, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_421)
{
    // 0EC2 0001 0E84 0061;	
    // (ໂ'\u0001'ຄ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER KHO TAM	[2E8D 2E63 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0E84, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_422)
{
    // 0EC2 0591 0E84 0061;	
    // (ໂ֑ຄ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER KHO TAM	[2E8D 2E63 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0E84, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_423)
{
    // 0EC2 1D165 0E84 0061;	
    // (ໂ𝅥ຄ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KHO TAM	[2E8D 2E63 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0E84, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_424)
{
    // 0EC2 0001 0E87 0061;	
    // (ໂ'\u0001'ງ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER NGO	[2E8D 2E64 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0E87, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_425)
{
    // 0EC2 0591 0E87 0061;	
    // (ໂ֑ງ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER NGO	[2E8D 2E64 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0E87, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_426)
{
    // 0EC2 1D165 0E87 0061;	
    // (ໂ𝅥ງ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER NGO	[2E8D 2E64 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0E87, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_427)
{
    // 0EC2 0001 0E88 0061;	
    // (ໂ'\u0001'ຈ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER CO	[2E8D 2E65 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0E88, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_428)
{
    // 0EC2 0591 0E88 0061;	
    // (ໂ֑ຈ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER CO	[2E8D 2E65 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0E88, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_429)
{
    // 0EC2 1D165 0E88 0061;	
    // (ໂ𝅥ຈ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER CO	[2E8D 2E65 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0E88, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_430)
{
    // 0EC2 0001 0EAA 0061;	
    // (ໂ'\u0001'ສ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER SO SUNG	[2E8D 2E66 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0EAA, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_431)
{
    // 0EC2 0591 0EAA 0061;	
    // (ໂ֑ສ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER SO SUNG	[2E8D 2E66 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0EAA, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_432)
{
    // 0EC2 1D165 0EAA 0061;	
    // (ໂ𝅥ສ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER SO SUNG	[2E8D 2E66 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0EAA, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_433)
{
    // 0EC2 0001 0E8A 0061;	
    // (ໂ'\u0001'ຊ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER SO TAM	[2E8D 2E67 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0E8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_434)
{
    // 0EC2 0591 0E8A 0061;	
    // (ໂ֑ຊ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER SO TAM	[2E8D 2E67 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0E8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_435)
{
    // 0EC2 1D165 0E8A 0061;	
    // (ໂ𝅥ຊ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER SO TAM	[2E8D 2E67 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0E8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_436)
{
    // 0EC2 0001 0EDF 0061;	
    // (ໂ'\u0001'ໟ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER KHMU NYO	[2E8D 2E68 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0EDF, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_437)
{
    // 0EC2 0591 0EDF 0061;	
    // (ໂ֑ໟ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER KHMU NYO	[2E8D 2E68 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0EDF, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_438)
{
    // 0EC2 1D165 0EDF 0061;	
    // (ໂ𝅥ໟ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER KHMU NYO	[2E8D 2E68 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0EDF, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_439)
{
    // 0EC2 0001 0E8D 0061;	
    // (ໂ'\u0001'ຍ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER NYO	[2E8D 2E69 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0E8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_440)
{
    // 0EC2 0591 0E8D 0061;	
    // (ໂ֑ຍ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER NYO	[2E8D 2E69 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0E8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_441)
{
    // 0EC2 1D165 0E8D 0061;	
    // (ໂ𝅥ຍ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER NYO	[2E8D 2E69 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0E8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_442)
{
    // 0EC2 0001 0E94 0061;	
    // (ໂ'\u0001'ດ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER DO	[2E8D 2E6A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0E94, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_443)
{
    // 0EC2 0591 0E94 0061;	
    // (ໂ֑ດ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER DO	[2E8D 2E6A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0E94, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_444)
{
    // 0EC2 1D165 0E94 0061;	
    // (ໂ𝅥ດ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER DO	[2E8D 2E6A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0E94, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E6A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_445)
{
    // 0EC2 0001 0E95 0061;	
    // (ໂ'\u0001'ຕ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER TO	[2E8D 2E6B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0E95, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_446)
{
    // 0EC2 0591 0E95 0061;	
    // (ໂ֑ຕ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER TO	[2E8D 2E6B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0E95, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_447)
{
    // 0EC2 1D165 0E95 0061;	
    // (ໂ𝅥ຕ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER TO	[2E8D 2E6B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0E95, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E6B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_448)
{
    // 0EC2 0001 0E96 0061;	
    // (ໂ'\u0001'ຖ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER THO SUNG	[2E8D 2E6C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0E96, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_449)
{
    // 0EC2 0591 0E96 0061;	
    // (ໂ֑ຖ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER THO SUNG	[2E8D 2E6C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0E96, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_450)
{
    // 0EC2 1D165 0E96 0061;	
    // (ໂ𝅥ຖ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER THO SUNG	[2E8D 2E6C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0E96, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E6C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_451)
{
    // 0EC2 0001 0E97 0061;	
    // (ໂ'\u0001'ທ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER THO TAM	[2E8D 2E6D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0E97, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_452)
{
    // 0EC2 0591 0E97 0061;	
    // (ໂ֑ທ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER THO TAM	[2E8D 2E6D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0E97, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_453)
{
    // 0EC2 1D165 0E97 0061;	
    // (ໂ𝅥ທ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER THO TAM	[2E8D 2E6D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0E97, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E6D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_454)
{
    // 0EC2 0001 0E99 0061;	
    // (ໂ'\u0001'ນ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER NO	[2E8D 2E6E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0E99, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_455)
{
    // 0EC2 0591 0E99 0061;	
    // (ໂ֑ນ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER NO	[2E8D 2E6E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0E99, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_456)
{
    // 0EC2 1D165 0E99 0061;	
    // (ໂ𝅥ນ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER NO	[2E8D 2E6E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0E99, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_457)
{
    // 0EC2 0001 0E9A 0061;	
    // (ໂ'\u0001'ບ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER BO	[2E8D 2E6F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0E9A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_458)
{
    // 0EC2 0591 0E9A 0061;	
    // (ໂ֑ບ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER BO	[2E8D 2E6F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0E9A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_459)
{
    // 0EC2 1D165 0E9A 0061;	
    // (ໂ𝅥ບ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER BO	[2E8D 2E6F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0E9A, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E6F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_460)
{
    // 0EC2 0001 0E9B 0061;	
    // (ໂ'\u0001'ປ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER PO	[2E8D 2E70 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0E9B, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_461)
{
    // 0EC2 0591 0E9B 0061;	
    // (ໂ֑ປ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER PO	[2E8D 2E70 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0E9B, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_462)
{
    // 0EC2 1D165 0E9B 0061;	
    // (ໂ𝅥ປ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER PO	[2E8D 2E70 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0E9B, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E70, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_463)
{
    // 0EC2 0001 0E9C 0061;	
    // (ໂ'\u0001'ຜ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER PHO SUNG	[2E8D 2E71 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0E9C, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_464)
{
    // 0EC2 0591 0E9C 0061;	
    // (ໂ֑ຜ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER PHO SUNG	[2E8D 2E71 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0E9C, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_465)
{
    // 0EC2 1D165 0E9C 0061;	
    // (ໂ𝅥ຜ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER PHO SUNG	[2E8D 2E71 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0E9C, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E71, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_466)
{
    // 0EC2 0001 0E9D 0061;	
    // (ໂ'\u0001'ຝ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER FO TAM	[2E8D 2E72 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0E9D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_467)
{
    // 0EC2 0591 0E9D 0061;	
    // (ໂ֑ຝ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER FO TAM	[2E8D 2E72 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0E9D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_468)
{
    // 0EC2 1D165 0E9D 0061;	
    // (ໂ𝅥ຝ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER FO TAM	[2E8D 2E72 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0E9D, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E72, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_469)
{
    // 0EC2 0001 0E9E 0061;	
    // (ໂ'\u0001'ພ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER PHO TAM	[2E8D 2E73 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0E9E, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_470)
{
    // 0EC2 0591 0E9E 0061;	
    // (ໂ֑ພ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER PHO TAM	[2E8D 2E73 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0E9E, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_471)
{
    // 0EC2 1D165 0E9E 0061;	
    // (ໂ𝅥ພ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER PHO TAM	[2E8D 2E73 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0E9E, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E73, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_472)
{
    // 0EC2 0001 0E9F 0061;	
    // (ໂ'\u0001'ຟ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER FO SUNG	[2E8D 2E74 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0E9F, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_473)
{
    // 0EC2 0591 0E9F 0061;	
    // (ໂ֑ຟ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER FO SUNG	[2E8D 2E74 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0E9F, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_474)
{
    // 0EC2 1D165 0E9F 0061;	
    // (ໂ𝅥ຟ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER FO SUNG	[2E8D 2E74 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0E9F, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E74, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_475)
{
    // 0EC2 0001 0EA1 0061;	
    // (ໂ'\u0001'ມ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER MO	[2E8D 2E75 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0EA1, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_476)
{
    // 0EC2 0591 0EA1 0061;	
    // (ໂ֑ມ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER MO	[2E8D 2E75 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0EA1, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_477)
{
    // 0EC2 1D165 0EA1 0061;	
    // (ໂ𝅥ມ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER MO	[2E8D 2E75 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0EA1, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_478)
{
    // 0EC2 0001 0EA2 0061;	
    // (ໂ'\u0001'ຢ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER YO	[2E8D 2E76 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0EA2, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_479)
{
    // 0EC2 0591 0EA2 0061;	
    // (ໂ֑ຢ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER YO	[2E8D 2E76 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0EA2, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_480)
{
    // 0EC2 1D165 0EA2 0061;	
    // (ໂ𝅥ຢ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER YO	[2E8D 2E76 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0EA2, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E76, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_481)
{
    // 0EC2 0001 0EA3 0061;	
    // (ໂ'\u0001'ຣ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER LO LING	[2E8D 2E77 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0EA3, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_482)
{
    // 0EC2 0591 0EA3 0061;	
    // (ໂ֑ຣ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER LO LING	[2E8D 2E77 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0EA3, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_483)
{
    // 0EC2 1D165 0EA3 0061;	
    // (ໂ𝅥ຣ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER LO LING	[2E8D 2E77 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0EA3, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E77, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_484)
{
    // 0EC2 0001 0EA5 0061;	
    // (ໂ'\u0001'ລ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER LO LOOT	[2E8D 2E78 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0EA5, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_485)
{
    // 0EC2 0591 0EA5 0061;	
    // (ໂ֑ລ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER LO LOOT	[2E8D 2E78 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0EA5, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_486)
{
    // 0EC2 1D165 0EA5 0061;	
    // (ໂ𝅥ລ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER LO LOOT	[2E8D 2E78 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0EA5, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E78, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_487)
{
    // 0EC2 0001 0EA7 0061;	
    // (ໂ'\u0001'ວ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER WO	[2E8D 2E79 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0EA7, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_488)
{
    // 0EC2 0591 0EA7 0061;	
    // (ໂ֑ວ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER WO	[2E8D 2E79 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0EA7, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_489)
{
    // 0EC2 1D165 0EA7 0061;	
    // (ໂ𝅥ວ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER WO	[2E8D 2E79 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0EA7, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E79, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_490)
{
    // 0EC2 0001 0EAB 0061;	
    // (ໂ'\u0001'ຫ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER HO SUNG	[2E8D 2E7A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0EAB, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_491)
{
    // 0EC2 0591 0EAB 0061;	
    // (ໂ֑ຫ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO LETTER HO SUNG	[2E8D 2E7A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0EAB, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_492)
{
    // 0EC2 1D165 0EAB 0061;	
    // (ໂ𝅥ຫ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO LETTER HO SUNG	[2E8D 2E7A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0EAB, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E7A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_493)
{
    // 0EC2 0001 0EDC 0061;	
    // (ໂ'\u0001'ໜ) LAO VOWEL SIGN O, <START OF HEADING>, LAO HO NO	[2E8D 2E7A 2E6E 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0EDC, 0x0061 };
    uint32_t const ces[15] = { 0x2E8D, 0x2E7A, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_494)
{
    // 0EC2 0591 0EDC 0061;	
    // (ໂ֑ໜ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO HO NO	[2E8D 2E7A 2E6E 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0EDC, 0x0061 };
    uint32_t const ces[15] = { 0x2E8D, 0x2E7A, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_495)
{
    // 0EC2 1D165 0EDC 0061;	
    // (ໂ𝅥ໜ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO HO NO	[2E8D 2E7A 2E6E 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0EDC, 0x0061 };
    uint32_t const ces[15] = { 0x2E8D, 0x2E7A, 0x2E6E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_496)
{
    // 0EC2 0001 0EDD 0061;	
    // (ໂ'\u0001'ໝ) LAO VOWEL SIGN O, <START OF HEADING>, LAO HO MO	[2E8D 2E7A 2E75 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0EDD, 0x0061 };
    uint32_t const ces[15] = { 0x2E8D, 0x2E7A, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_497)
{
    // 0EC2 0591 0EDD 0061;	
    // (ໂ֑ໝ) LAO VOWEL SIGN O, HEBREW ACCENT ETNAHTA, LAO HO MO	[2E8D 2E7A 2E75 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0591, 0x0EDD, 0x0061 };
    uint32_t const ces[15] = { 0x2E8D, 0x2E7A, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_498)
{
    // 0EC2 1D165 0EDD 0061;	
    // (ໂ𝅥ໝ) LAO VOWEL SIGN O, MUSICAL SYMBOL COMBINING STEM, LAO HO MO	[2E8D 2E7A 2E75 1CAD | 0020 0020 0020 0020 | 0002 0004 0004 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x1D165, 0x0EDD, 0x0061 };
    uint32_t const ces[15] = { 0x2E8D, 0x2E7A, 0x2E75, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_191_499)
{
    // 0EC2 0001 0EAD 0061;	
    // (ໂ'\u0001'ອ) LAO VOWEL SIGN O, <START OF HEADING>, LAO LETTER O	[2E8D 2E7B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0EC2, 0x0001, 0x0EAD, 0x0061 };
    uint32_t const ces[12] = { 0x2E8D, 0x2E7B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

