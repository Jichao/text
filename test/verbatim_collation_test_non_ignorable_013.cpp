// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_013_000)
{
    // FE48 0062;	
    // (﹈) PRESENTATION FORM FOR VERTICAL RIGHT SQUARE BRACKET	[031B 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE48, 0x0062 };
    uint32_t const ces[9] = { 0x031B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_001)
{
    // 007B 0021;	
    // ('{') LEFT CURLY BRACKET	[031C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x007B, 0x0021 };
    uint32_t const ces[9] = { 0x031C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_002)
{
    // FF5B 0021;	
    // (｛) FULLWIDTH LEFT CURLY BRACKET	[031C 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5B, 0x0021 };
    uint32_t const ces[9] = { 0x031C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_003)
{
    // FE5B 0021;	
    // (﹛) SMALL LEFT CURLY BRACKET	[031C 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE5B, 0x0021 };
    uint32_t const ces[9] = { 0x031C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_004)
{
    // FE37 0021;	
    // (︷) PRESENTATION FORM FOR VERTICAL LEFT CURLY BRACKET	[031C 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE37, 0x0021 };
    uint32_t const ces[9] = { 0x031C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_005)
{
    // 007B 003F;	
    // ('{') LEFT CURLY BRACKET	[031C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x007B, 0x003F };
    uint32_t const ces[9] = { 0x031C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_006)
{
    // FF5B 003F;	
    // (｛) FULLWIDTH LEFT CURLY BRACKET	[031C 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5B, 0x003F };
    uint32_t const ces[9] = { 0x031C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_007)
{
    // FE5B 003F;	
    // (﹛) SMALL LEFT CURLY BRACKET	[031C 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE5B, 0x003F };
    uint32_t const ces[9] = { 0x031C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_008)
{
    // FE37 003F;	
    // (︷) PRESENTATION FORM FOR VERTICAL LEFT CURLY BRACKET	[031C 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE37, 0x003F };
    uint32_t const ces[9] = { 0x031C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_009)
{
    // 007B 0061;	
    // ('{') LEFT CURLY BRACKET	[031C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x007B, 0x0061 };
    uint32_t const ces[9] = { 0x031C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_010)
{
    // 007B 0041;	
    // ('{') LEFT CURLY BRACKET	[031C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x007B, 0x0041 };
    uint32_t const ces[9] = { 0x031C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_011)
{
    // FF5B 0061;	
    // (｛) FULLWIDTH LEFT CURLY BRACKET	[031C 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5B, 0x0061 };
    uint32_t const ces[9] = { 0x031C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_012)
{
    // FF5B 0041;	
    // (｛) FULLWIDTH LEFT CURLY BRACKET	[031C 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF5B, 0x0041 };
    uint32_t const ces[9] = { 0x031C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_013)
{
    // FE5B 0061;	
    // (﹛) SMALL LEFT CURLY BRACKET	[031C 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE5B, 0x0061 };
    uint32_t const ces[9] = { 0x031C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_014)
{
    // FE5B 0041;	
    // (﹛) SMALL LEFT CURLY BRACKET	[031C 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE5B, 0x0041 };
    uint32_t const ces[9] = { 0x031C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_015)
{
    // FE37 0061;	
    // (︷) PRESENTATION FORM FOR VERTICAL LEFT CURLY BRACKET	[031C 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE37, 0x0061 };
    uint32_t const ces[9] = { 0x031C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_016)
{
    // FE37 0041;	
    // (︷) PRESENTATION FORM FOR VERTICAL LEFT CURLY BRACKET	[031C 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE37, 0x0041 };
    uint32_t const ces[9] = { 0x031C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_017)
{
    // 007B 0062;	
    // ('{') LEFT CURLY BRACKET	[031C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x007B, 0x0062 };
    uint32_t const ces[9] = { 0x031C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_018)
{
    // FF5B 0062;	
    // (｛) FULLWIDTH LEFT CURLY BRACKET	[031C 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5B, 0x0062 };
    uint32_t const ces[9] = { 0x031C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_019)
{
    // FE5B 0062;	
    // (﹛) SMALL LEFT CURLY BRACKET	[031C 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE5B, 0x0062 };
    uint32_t const ces[9] = { 0x031C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_020)
{
    // FE37 0062;	
    // (︷) PRESENTATION FORM FOR VERTICAL LEFT CURLY BRACKET	[031C 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE37, 0x0062 };
    uint32_t const ces[9] = { 0x031C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_021)
{
    // 007D 0021;	
    // ('}') RIGHT CURLY BRACKET	[031D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x007D, 0x0021 };
    uint32_t const ces[9] = { 0x031D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_022)
{
    // FF5D 0021;	
    // (｝) FULLWIDTH RIGHT CURLY BRACKET	[031D 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5D, 0x0021 };
    uint32_t const ces[9] = { 0x031D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_023)
{
    // FE5C 0021;	
    // (﹜) SMALL RIGHT CURLY BRACKET	[031D 0261 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE5C, 0x0021 };
    uint32_t const ces[9] = { 0x031D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_024)
{
    // FE38 0021;	
    // (︸) PRESENTATION FORM FOR VERTICAL RIGHT CURLY BRACKET	[031D 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE38, 0x0021 };
    uint32_t const ces[9] = { 0x031D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_025)
{
    // 007D 003F;	
    // ('}') RIGHT CURLY BRACKET	[031D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x007D, 0x003F };
    uint32_t const ces[9] = { 0x031D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_026)
{
    // FF5D 003F;	
    // (｝) FULLWIDTH RIGHT CURLY BRACKET	[031D 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5D, 0x003F };
    uint32_t const ces[9] = { 0x031D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_027)
{
    // FE5C 003F;	
    // (﹜) SMALL RIGHT CURLY BRACKET	[031D 0267 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE5C, 0x003F };
    uint32_t const ces[9] = { 0x031D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_028)
{
    // FE38 003F;	
    // (︸) PRESENTATION FORM FOR VERTICAL RIGHT CURLY BRACKET	[031D 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE38, 0x003F };
    uint32_t const ces[9] = { 0x031D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_029)
{
    // 007D 0061;	
    // ('}') RIGHT CURLY BRACKET	[031D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x007D, 0x0061 };
    uint32_t const ces[9] = { 0x031D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_030)
{
    // 007D 0041;	
    // ('}') RIGHT CURLY BRACKET	[031D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x007D, 0x0041 };
    uint32_t const ces[9] = { 0x031D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_031)
{
    // FF5D 0061;	
    // (｝) FULLWIDTH RIGHT CURLY BRACKET	[031D 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5D, 0x0061 };
    uint32_t const ces[9] = { 0x031D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_032)
{
    // FF5D 0041;	
    // (｝) FULLWIDTH RIGHT CURLY BRACKET	[031D 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF5D, 0x0041 };
    uint32_t const ces[9] = { 0x031D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_033)
{
    // FE5C 0061;	
    // (﹜) SMALL RIGHT CURLY BRACKET	[031D 1CAD | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE5C, 0x0061 };
    uint32_t const ces[9] = { 0x031D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_034)
{
    // FE5C 0041;	
    // (﹜) SMALL RIGHT CURLY BRACKET	[031D 1CAD | 0020 0020 | 000F 0008 |]

    uint32_t cps[2] = { 0xFE5C, 0x0041 };
    uint32_t const ces[9] = { 0x031D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_035)
{
    // FE38 0061;	
    // (︸) PRESENTATION FORM FOR VERTICAL RIGHT CURLY BRACKET	[031D 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE38, 0x0061 };
    uint32_t const ces[9] = { 0x031D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_036)
{
    // FE38 0041;	
    // (︸) PRESENTATION FORM FOR VERTICAL RIGHT CURLY BRACKET	[031D 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE38, 0x0041 };
    uint32_t const ces[9] = { 0x031D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_037)
{
    // 007D 0062;	
    // ('}') RIGHT CURLY BRACKET	[031D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x007D, 0x0062 };
    uint32_t const ces[9] = { 0x031D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_038)
{
    // FF5D 0062;	
    // (｝) FULLWIDTH RIGHT CURLY BRACKET	[031D 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5D, 0x0062 };
    uint32_t const ces[9] = { 0x031D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_039)
{
    // FE5C 0062;	
    // (﹜) SMALL RIGHT CURLY BRACKET	[031D 1CC6 | 0020 0020 | 000F 0002 |]

    uint32_t cps[2] = { 0xFE5C, 0x0062 };
    uint32_t const ces[9] = { 0x031D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000F, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_040)
{
    // FE38 0062;	
    // (︸) PRESENTATION FORM FOR VERTICAL RIGHT CURLY BRACKET	[031D 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE38, 0x0062 };
    uint32_t const ces[9] = { 0x031D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_041)
{
    // 0F3A 0021;	
    // (༺) TIBETAN MARK GUG RTAGS GYON	[031E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F3A, 0x0021 };
    uint32_t const ces[9] = { 0x031E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_042)
{
    // 0F3A 003F;	
    // (༺) TIBETAN MARK GUG RTAGS GYON	[031E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F3A, 0x003F };
    uint32_t const ces[9] = { 0x031E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_043)
{
    // 0F3A 0061;	
    // (༺) TIBETAN MARK GUG RTAGS GYON	[031E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F3A, 0x0061 };
    uint32_t const ces[9] = { 0x031E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_044)
{
    // 0F3A 0041;	
    // (༺) TIBETAN MARK GUG RTAGS GYON	[031E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F3A, 0x0041 };
    uint32_t const ces[9] = { 0x031E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_045)
{
    // 0F3A 0062;	
    // (༺) TIBETAN MARK GUG RTAGS GYON	[031E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F3A, 0x0062 };
    uint32_t const ces[9] = { 0x031E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_046)
{
    // 0F3B 0021;	
    // (༻) TIBETAN MARK GUG RTAGS GYAS	[031F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F3B, 0x0021 };
    uint32_t const ces[9] = { 0x031F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_047)
{
    // 0F3B 003F;	
    // (༻) TIBETAN MARK GUG RTAGS GYAS	[031F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F3B, 0x003F };
    uint32_t const ces[9] = { 0x031F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_048)
{
    // 0F3B 0061;	
    // (༻) TIBETAN MARK GUG RTAGS GYAS	[031F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F3B, 0x0061 };
    uint32_t const ces[9] = { 0x031F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_049)
{
    // 0F3B 0041;	
    // (༻) TIBETAN MARK GUG RTAGS GYAS	[031F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F3B, 0x0041 };
    uint32_t const ces[9] = { 0x031F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_050)
{
    // 0F3B 0062;	
    // (༻) TIBETAN MARK GUG RTAGS GYAS	[031F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F3B, 0x0062 };
    uint32_t const ces[9] = { 0x031F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_051)
{
    // 0F3C 0021;	
    // (༼) TIBETAN MARK ANG KHANG GYON	[0320 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F3C, 0x0021 };
    uint32_t const ces[9] = { 0x0320, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_052)
{
    // 0F3C 003F;	
    // (༼) TIBETAN MARK ANG KHANG GYON	[0320 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F3C, 0x003F };
    uint32_t const ces[9] = { 0x0320, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_053)
{
    // 0F3C 0061;	
    // (༼) TIBETAN MARK ANG KHANG GYON	[0320 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F3C, 0x0061 };
    uint32_t const ces[9] = { 0x0320, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_054)
{
    // 0F3C 0041;	
    // (༼) TIBETAN MARK ANG KHANG GYON	[0320 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F3C, 0x0041 };
    uint32_t const ces[9] = { 0x0320, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_055)
{
    // 0F3C 0062;	
    // (༼) TIBETAN MARK ANG KHANG GYON	[0320 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F3C, 0x0062 };
    uint32_t const ces[9] = { 0x0320, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_056)
{
    // 0F3D 0021;	
    // (༽) TIBETAN MARK ANG KHANG GYAS	[0321 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F3D, 0x0021 };
    uint32_t const ces[9] = { 0x0321, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_057)
{
    // 0F3D 003F;	
    // (༽) TIBETAN MARK ANG KHANG GYAS	[0321 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F3D, 0x003F };
    uint32_t const ces[9] = { 0x0321, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_058)
{
    // 0F3D 0061;	
    // (༽) TIBETAN MARK ANG KHANG GYAS	[0321 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F3D, 0x0061 };
    uint32_t const ces[9] = { 0x0321, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_059)
{
    // 0F3D 0041;	
    // (༽) TIBETAN MARK ANG KHANG GYAS	[0321 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0F3D, 0x0041 };
    uint32_t const ces[9] = { 0x0321, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_060)
{
    // 0F3D 0062;	
    // (༽) TIBETAN MARK ANG KHANG GYAS	[0321 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0F3D, 0x0062 };
    uint32_t const ces[9] = { 0x0321, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_061)
{
    // 169B 0021;	
    // (᚛) OGHAM FEATHER MARK	[0322 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B, 0x0021 };
    uint32_t const ces[9] = { 0x0322, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_062)
{
    // 169B 003F;	
    // (᚛) OGHAM FEATHER MARK	[0322 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B, 0x003F };
    uint32_t const ces[9] = { 0x0322, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_063)
{
    // 169B 0061;	
    // (᚛) OGHAM FEATHER MARK	[0322 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B, 0x0061 };
    uint32_t const ces[9] = { 0x0322, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_064)
{
    // 169B 0041;	
    // (᚛) OGHAM FEATHER MARK	[0322 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169B, 0x0041 };
    uint32_t const ces[9] = { 0x0322, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_065)
{
    // 169B 0062;	
    // (᚛) OGHAM FEATHER MARK	[0322 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169B, 0x0062 };
    uint32_t const ces[9] = { 0x0322, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_066)
{
    // 169C 0021;	
    // (᚜) OGHAM REVERSED FEATHER MARK	[0323 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C, 0x0021 };
    uint32_t const ces[9] = { 0x0323, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_067)
{
    // 169C 003F;	
    // (᚜) OGHAM REVERSED FEATHER MARK	[0323 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C, 0x003F };
    uint32_t const ces[9] = { 0x0323, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_068)
{
    // 169C 0061;	
    // (᚜) OGHAM REVERSED FEATHER MARK	[0323 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C, 0x0061 };
    uint32_t const ces[9] = { 0x0323, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_069)
{
    // 169C 0041;	
    // (᚜) OGHAM REVERSED FEATHER MARK	[0323 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x169C, 0x0041 };
    uint32_t const ces[9] = { 0x0323, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_070)
{
    // 169C 0062;	
    // (᚜) OGHAM REVERSED FEATHER MARK	[0323 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x169C, 0x0062 };
    uint32_t const ces[9] = { 0x0323, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_071)
{
    // 2045 0021;	
    // (⁅) LEFT SQUARE BRACKET WITH QUILL	[0324 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2045, 0x0021 };
    uint32_t const ces[9] = { 0x0324, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_072)
{
    // 2045 003F;	
    // (⁅) LEFT SQUARE BRACKET WITH QUILL	[0324 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2045, 0x003F };
    uint32_t const ces[9] = { 0x0324, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_073)
{
    // 2045 0061;	
    // (⁅) LEFT SQUARE BRACKET WITH QUILL	[0324 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2045, 0x0061 };
    uint32_t const ces[9] = { 0x0324, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_074)
{
    // 2045 0041;	
    // (⁅) LEFT SQUARE BRACKET WITH QUILL	[0324 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2045, 0x0041 };
    uint32_t const ces[9] = { 0x0324, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_075)
{
    // 2045 0062;	
    // (⁅) LEFT SQUARE BRACKET WITH QUILL	[0324 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2045, 0x0062 };
    uint32_t const ces[9] = { 0x0324, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_076)
{
    // 2046 0021;	
    // (⁆) RIGHT SQUARE BRACKET WITH QUILL	[0325 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2046, 0x0021 };
    uint32_t const ces[9] = { 0x0325, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_077)
{
    // 2046 003F;	
    // (⁆) RIGHT SQUARE BRACKET WITH QUILL	[0325 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2046, 0x003F };
    uint32_t const ces[9] = { 0x0325, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_078)
{
    // 2046 0061;	
    // (⁆) RIGHT SQUARE BRACKET WITH QUILL	[0325 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2046, 0x0061 };
    uint32_t const ces[9] = { 0x0325, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_079)
{
    // 2046 0041;	
    // (⁆) RIGHT SQUARE BRACKET WITH QUILL	[0325 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2046, 0x0041 };
    uint32_t const ces[9] = { 0x0325, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_080)
{
    // 2046 0062;	
    // (⁆) RIGHT SQUARE BRACKET WITH QUILL	[0325 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2046, 0x0062 };
    uint32_t const ces[9] = { 0x0325, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_081)
{
    // 2308 0021;	
    // (⌈) LEFT CEILING	[0326 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2308, 0x0021 };
    uint32_t const ces[9] = { 0x0326, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_082)
{
    // 2308 003F;	
    // (⌈) LEFT CEILING	[0326 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2308, 0x003F };
    uint32_t const ces[9] = { 0x0326, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_083)
{
    // 2308 0061;	
    // (⌈) LEFT CEILING	[0326 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2308, 0x0061 };
    uint32_t const ces[9] = { 0x0326, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_084)
{
    // 2308 0041;	
    // (⌈) LEFT CEILING	[0326 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2308, 0x0041 };
    uint32_t const ces[9] = { 0x0326, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_085)
{
    // 2308 0062;	
    // (⌈) LEFT CEILING	[0326 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2308, 0x0062 };
    uint32_t const ces[9] = { 0x0326, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_086)
{
    // 2309 0021;	
    // (⌉) RIGHT CEILING	[0327 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2309, 0x0021 };
    uint32_t const ces[9] = { 0x0327, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_087)
{
    // 2309 003F;	
    // (⌉) RIGHT CEILING	[0327 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2309, 0x003F };
    uint32_t const ces[9] = { 0x0327, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_088)
{
    // 2309 0061;	
    // (⌉) RIGHT CEILING	[0327 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2309, 0x0061 };
    uint32_t const ces[9] = { 0x0327, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_089)
{
    // 2309 0041;	
    // (⌉) RIGHT CEILING	[0327 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2309, 0x0041 };
    uint32_t const ces[9] = { 0x0327, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_090)
{
    // 2309 0062;	
    // (⌉) RIGHT CEILING	[0327 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2309, 0x0062 };
    uint32_t const ces[9] = { 0x0327, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_091)
{
    // 230A 0021;	
    // (⌊) LEFT FLOOR	[0328 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230A, 0x0021 };
    uint32_t const ces[9] = { 0x0328, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_092)
{
    // 230A 003F;	
    // (⌊) LEFT FLOOR	[0328 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230A, 0x003F };
    uint32_t const ces[9] = { 0x0328, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_093)
{
    // 230A 0061;	
    // (⌊) LEFT FLOOR	[0328 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230A, 0x0061 };
    uint32_t const ces[9] = { 0x0328, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_094)
{
    // 230A 0041;	
    // (⌊) LEFT FLOOR	[0328 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x230A, 0x0041 };
    uint32_t const ces[9] = { 0x0328, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_095)
{
    // 230A 0062;	
    // (⌊) LEFT FLOOR	[0328 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230A, 0x0062 };
    uint32_t const ces[9] = { 0x0328, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_096)
{
    // 230B 0021;	
    // (⌋) RIGHT FLOOR	[0329 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230B, 0x0021 };
    uint32_t const ces[9] = { 0x0329, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_097)
{
    // 230B 003F;	
    // (⌋) RIGHT FLOOR	[0329 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230B, 0x003F };
    uint32_t const ces[9] = { 0x0329, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_098)
{
    // 230B 0061;	
    // (⌋) RIGHT FLOOR	[0329 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230B, 0x0061 };
    uint32_t const ces[9] = { 0x0329, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_099)
{
    // 230B 0041;	
    // (⌋) RIGHT FLOOR	[0329 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x230B, 0x0041 };
    uint32_t const ces[9] = { 0x0329, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_100)
{
    // 230B 0062;	
    // (⌋) RIGHT FLOOR	[0329 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x230B, 0x0062 };
    uint32_t const ces[9] = { 0x0329, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_101)
{
    // 29FC 0021;	
    // (⧼) LEFT-POINTING CURVED ANGLE BRACKET	[032A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FC, 0x0021 };
    uint32_t const ces[9] = { 0x032A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_102)
{
    // 29FC 003F;	
    // (⧼) LEFT-POINTING CURVED ANGLE BRACKET	[032A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FC, 0x003F };
    uint32_t const ces[9] = { 0x032A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_103)
{
    // 29FC 0061;	
    // (⧼) LEFT-POINTING CURVED ANGLE BRACKET	[032A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FC, 0x0061 };
    uint32_t const ces[9] = { 0x032A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_104)
{
    // 29FC 0041;	
    // (⧼) LEFT-POINTING CURVED ANGLE BRACKET	[032A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29FC, 0x0041 };
    uint32_t const ces[9] = { 0x032A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_105)
{
    // 29FC 0062;	
    // (⧼) LEFT-POINTING CURVED ANGLE BRACKET	[032A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FC, 0x0062 };
    uint32_t const ces[9] = { 0x032A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_106)
{
    // 29FD 0021;	
    // (⧽) RIGHT-POINTING CURVED ANGLE BRACKET	[032B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FD, 0x0021 };
    uint32_t const ces[9] = { 0x032B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_107)
{
    // 29FD 003F;	
    // (⧽) RIGHT-POINTING CURVED ANGLE BRACKET	[032B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FD, 0x003F };
    uint32_t const ces[9] = { 0x032B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_108)
{
    // 29FD 0061;	
    // (⧽) RIGHT-POINTING CURVED ANGLE BRACKET	[032B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FD, 0x0061 };
    uint32_t const ces[9] = { 0x032B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_109)
{
    // 29FD 0041;	
    // (⧽) RIGHT-POINTING CURVED ANGLE BRACKET	[032B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x29FD, 0x0041 };
    uint32_t const ces[9] = { 0x032B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_110)
{
    // 29FD 0062;	
    // (⧽) RIGHT-POINTING CURVED ANGLE BRACKET	[032B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x29FD, 0x0062 };
    uint32_t const ces[9] = { 0x032B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_111)
{
    // 2983 0021;	
    // (⦃) LEFT WHITE CURLY BRACKET	[032C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2983, 0x0021 };
    uint32_t const ces[9] = { 0x032C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_112)
{
    // 2983 003F;	
    // (⦃) LEFT WHITE CURLY BRACKET	[032C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2983, 0x003F };
    uint32_t const ces[9] = { 0x032C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_113)
{
    // 2983 0061;	
    // (⦃) LEFT WHITE CURLY BRACKET	[032C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2983, 0x0061 };
    uint32_t const ces[9] = { 0x032C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_114)
{
    // 2983 0041;	
    // (⦃) LEFT WHITE CURLY BRACKET	[032C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2983, 0x0041 };
    uint32_t const ces[9] = { 0x032C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_115)
{
    // 2983 0062;	
    // (⦃) LEFT WHITE CURLY BRACKET	[032C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2983, 0x0062 };
    uint32_t const ces[9] = { 0x032C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_116)
{
    // 2984 0021;	
    // (⦄) RIGHT WHITE CURLY BRACKET	[032D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2984, 0x0021 };
    uint32_t const ces[9] = { 0x032D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_117)
{
    // 2984 003F;	
    // (⦄) RIGHT WHITE CURLY BRACKET	[032D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2984, 0x003F };
    uint32_t const ces[9] = { 0x032D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_118)
{
    // 2984 0061;	
    // (⦄) RIGHT WHITE CURLY BRACKET	[032D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2984, 0x0061 };
    uint32_t const ces[9] = { 0x032D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_119)
{
    // 2984 0041;	
    // (⦄) RIGHT WHITE CURLY BRACKET	[032D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2984, 0x0041 };
    uint32_t const ces[9] = { 0x032D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_120)
{
    // 2984 0062;	
    // (⦄) RIGHT WHITE CURLY BRACKET	[032D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2984, 0x0062 };
    uint32_t const ces[9] = { 0x032D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_121)
{
    // 2985 0021;	
    // (⦅) LEFT WHITE PARENTHESIS	[032E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2985, 0x0021 };
    uint32_t const ces[9] = { 0x032E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_122)
{
    // FF5F 0021;	
    // (｟) FULLWIDTH LEFT WHITE PARENTHESIS	[032E 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5F, 0x0021 };
    uint32_t const ces[9] = { 0x032E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_123)
{
    // 2985 003F;	
    // (⦅) LEFT WHITE PARENTHESIS	[032E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2985, 0x003F };
    uint32_t const ces[9] = { 0x032E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_124)
{
    // FF5F 003F;	
    // (｟) FULLWIDTH LEFT WHITE PARENTHESIS	[032E 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5F, 0x003F };
    uint32_t const ces[9] = { 0x032E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_125)
{
    // 2985 0061;	
    // (⦅) LEFT WHITE PARENTHESIS	[032E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2985, 0x0061 };
    uint32_t const ces[9] = { 0x032E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_126)
{
    // 2985 0041;	
    // (⦅) LEFT WHITE PARENTHESIS	[032E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2985, 0x0041 };
    uint32_t const ces[9] = { 0x032E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_127)
{
    // FF5F 0061;	
    // (｟) FULLWIDTH LEFT WHITE PARENTHESIS	[032E 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5F, 0x0061 };
    uint32_t const ces[9] = { 0x032E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_128)
{
    // FF5F 0041;	
    // (｟) FULLWIDTH LEFT WHITE PARENTHESIS	[032E 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF5F, 0x0041 };
    uint32_t const ces[9] = { 0x032E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_129)
{
    // 2985 0062;	
    // (⦅) LEFT WHITE PARENTHESIS	[032E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2985, 0x0062 };
    uint32_t const ces[9] = { 0x032E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_130)
{
    // FF5F 0062;	
    // (｟) FULLWIDTH LEFT WHITE PARENTHESIS	[032E 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF5F, 0x0062 };
    uint32_t const ces[9] = { 0x032E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_131)
{
    // 2986 0021;	
    // (⦆) RIGHT WHITE PARENTHESIS	[032F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2986, 0x0021 };
    uint32_t const ces[9] = { 0x032F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_132)
{
    // FF60 0021;	
    // (｠) FULLWIDTH RIGHT WHITE PARENTHESIS	[032F 0261 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF60, 0x0021 };
    uint32_t const ces[9] = { 0x032F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_133)
{
    // 2986 003F;	
    // (⦆) RIGHT WHITE PARENTHESIS	[032F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2986, 0x003F };
    uint32_t const ces[9] = { 0x032F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_134)
{
    // FF60 003F;	
    // (｠) FULLWIDTH RIGHT WHITE PARENTHESIS	[032F 0267 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF60, 0x003F };
    uint32_t const ces[9] = { 0x032F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_135)
{
    // 2986 0061;	
    // (⦆) RIGHT WHITE PARENTHESIS	[032F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2986, 0x0061 };
    uint32_t const ces[9] = { 0x032F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_136)
{
    // 2986 0041;	
    // (⦆) RIGHT WHITE PARENTHESIS	[032F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2986, 0x0041 };
    uint32_t const ces[9] = { 0x032F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_137)
{
    // FF60 0061;	
    // (｠) FULLWIDTH RIGHT WHITE PARENTHESIS	[032F 1CAD | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF60, 0x0061 };
    uint32_t const ces[9] = { 0x032F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_138)
{
    // FF60 0041;	
    // (｠) FULLWIDTH RIGHT WHITE PARENTHESIS	[032F 1CAD | 0020 0020 | 0003 0008 |]

    uint32_t cps[2] = { 0xFF60, 0x0041 };
    uint32_t const ces[9] = { 0x032F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_139)
{
    // 2986 0062;	
    // (⦆) RIGHT WHITE PARENTHESIS	[032F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2986, 0x0062 };
    uint32_t const ces[9] = { 0x032F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_140)
{
    // FF60 0062;	
    // (｠) FULLWIDTH RIGHT WHITE PARENTHESIS	[032F 1CC6 | 0020 0020 | 0003 0002 |]

    uint32_t cps[2] = { 0xFF60, 0x0062 };
    uint32_t const ces[9] = { 0x032F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0003, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_141)
{
    // 2987 0021;	
    // (⦇) Z NOTATION LEFT IMAGE BRACKET	[0330 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2987, 0x0021 };
    uint32_t const ces[9] = { 0x0330, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_142)
{
    // 2987 003F;	
    // (⦇) Z NOTATION LEFT IMAGE BRACKET	[0330 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2987, 0x003F };
    uint32_t const ces[9] = { 0x0330, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_143)
{
    // 2987 0061;	
    // (⦇) Z NOTATION LEFT IMAGE BRACKET	[0330 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2987, 0x0061 };
    uint32_t const ces[9] = { 0x0330, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_144)
{
    // 2987 0041;	
    // (⦇) Z NOTATION LEFT IMAGE BRACKET	[0330 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2987, 0x0041 };
    uint32_t const ces[9] = { 0x0330, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_145)
{
    // 2987 0062;	
    // (⦇) Z NOTATION LEFT IMAGE BRACKET	[0330 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2987, 0x0062 };
    uint32_t const ces[9] = { 0x0330, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_146)
{
    // 2988 0021;	
    // (⦈) Z NOTATION RIGHT IMAGE BRACKET	[0331 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2988, 0x0021 };
    uint32_t const ces[9] = { 0x0331, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_147)
{
    // 2988 003F;	
    // (⦈) Z NOTATION RIGHT IMAGE BRACKET	[0331 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2988, 0x003F };
    uint32_t const ces[9] = { 0x0331, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_148)
{
    // 2988 0061;	
    // (⦈) Z NOTATION RIGHT IMAGE BRACKET	[0331 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2988, 0x0061 };
    uint32_t const ces[9] = { 0x0331, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_149)
{
    // 2988 0041;	
    // (⦈) Z NOTATION RIGHT IMAGE BRACKET	[0331 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2988, 0x0041 };
    uint32_t const ces[9] = { 0x0331, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_150)
{
    // 2988 0062;	
    // (⦈) Z NOTATION RIGHT IMAGE BRACKET	[0331 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2988, 0x0062 };
    uint32_t const ces[9] = { 0x0331, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_151)
{
    // 2989 0021;	
    // (⦉) Z NOTATION LEFT BINDING BRACKET	[0332 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2989, 0x0021 };
    uint32_t const ces[9] = { 0x0332, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_152)
{
    // 2989 003F;	
    // (⦉) Z NOTATION LEFT BINDING BRACKET	[0332 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2989, 0x003F };
    uint32_t const ces[9] = { 0x0332, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_153)
{
    // 2989 0061;	
    // (⦉) Z NOTATION LEFT BINDING BRACKET	[0332 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2989, 0x0061 };
    uint32_t const ces[9] = { 0x0332, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_154)
{
    // 2989 0041;	
    // (⦉) Z NOTATION LEFT BINDING BRACKET	[0332 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2989, 0x0041 };
    uint32_t const ces[9] = { 0x0332, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_155)
{
    // 2989 0062;	
    // (⦉) Z NOTATION LEFT BINDING BRACKET	[0332 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2989, 0x0062 };
    uint32_t const ces[9] = { 0x0332, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_156)
{
    // 298A 0021;	
    // (⦊) Z NOTATION RIGHT BINDING BRACKET	[0333 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298A, 0x0021 };
    uint32_t const ces[9] = { 0x0333, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_157)
{
    // 298A 003F;	
    // (⦊) Z NOTATION RIGHT BINDING BRACKET	[0333 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298A, 0x003F };
    uint32_t const ces[9] = { 0x0333, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_158)
{
    // 298A 0061;	
    // (⦊) Z NOTATION RIGHT BINDING BRACKET	[0333 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298A, 0x0061 };
    uint32_t const ces[9] = { 0x0333, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_159)
{
    // 298A 0041;	
    // (⦊) Z NOTATION RIGHT BINDING BRACKET	[0333 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x298A, 0x0041 };
    uint32_t const ces[9] = { 0x0333, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_160)
{
    // 298A 0062;	
    // (⦊) Z NOTATION RIGHT BINDING BRACKET	[0333 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298A, 0x0062 };
    uint32_t const ces[9] = { 0x0333, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_161)
{
    // 298B 0021;	
    // (⦋) LEFT SQUARE BRACKET WITH UNDERBAR	[0334 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298B, 0x0021 };
    uint32_t const ces[9] = { 0x0334, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_162)
{
    // 298B 003F;	
    // (⦋) LEFT SQUARE BRACKET WITH UNDERBAR	[0334 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298B, 0x003F };
    uint32_t const ces[9] = { 0x0334, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_163)
{
    // 298B 0061;	
    // (⦋) LEFT SQUARE BRACKET WITH UNDERBAR	[0334 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298B, 0x0061 };
    uint32_t const ces[9] = { 0x0334, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_164)
{
    // 298B 0041;	
    // (⦋) LEFT SQUARE BRACKET WITH UNDERBAR	[0334 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x298B, 0x0041 };
    uint32_t const ces[9] = { 0x0334, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_165)
{
    // 298B 0062;	
    // (⦋) LEFT SQUARE BRACKET WITH UNDERBAR	[0334 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298B, 0x0062 };
    uint32_t const ces[9] = { 0x0334, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_166)
{
    // 298C 0021;	
    // (⦌) RIGHT SQUARE BRACKET WITH UNDERBAR	[0335 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298C, 0x0021 };
    uint32_t const ces[9] = { 0x0335, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_167)
{
    // 298C 003F;	
    // (⦌) RIGHT SQUARE BRACKET WITH UNDERBAR	[0335 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298C, 0x003F };
    uint32_t const ces[9] = { 0x0335, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_168)
{
    // 298C 0061;	
    // (⦌) RIGHT SQUARE BRACKET WITH UNDERBAR	[0335 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298C, 0x0061 };
    uint32_t const ces[9] = { 0x0335, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_169)
{
    // 298C 0041;	
    // (⦌) RIGHT SQUARE BRACKET WITH UNDERBAR	[0335 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x298C, 0x0041 };
    uint32_t const ces[9] = { 0x0335, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_170)
{
    // 298C 0062;	
    // (⦌) RIGHT SQUARE BRACKET WITH UNDERBAR	[0335 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298C, 0x0062 };
    uint32_t const ces[9] = { 0x0335, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_171)
{
    // 298D 0021;	
    // (⦍) LEFT SQUARE BRACKET WITH TICK IN TOP CORNER	[0336 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298D, 0x0021 };
    uint32_t const ces[9] = { 0x0336, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_172)
{
    // 298D 003F;	
    // (⦍) LEFT SQUARE BRACKET WITH TICK IN TOP CORNER	[0336 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298D, 0x003F };
    uint32_t const ces[9] = { 0x0336, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_173)
{
    // 298D 0061;	
    // (⦍) LEFT SQUARE BRACKET WITH TICK IN TOP CORNER	[0336 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298D, 0x0061 };
    uint32_t const ces[9] = { 0x0336, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_174)
{
    // 298D 0041;	
    // (⦍) LEFT SQUARE BRACKET WITH TICK IN TOP CORNER	[0336 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x298D, 0x0041 };
    uint32_t const ces[9] = { 0x0336, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_175)
{
    // 298D 0062;	
    // (⦍) LEFT SQUARE BRACKET WITH TICK IN TOP CORNER	[0336 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298D, 0x0062 };
    uint32_t const ces[9] = { 0x0336, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_176)
{
    // 298E 0021;	
    // (⦎) RIGHT SQUARE BRACKET WITH TICK IN BOTTOM CORNER	[0337 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298E, 0x0021 };
    uint32_t const ces[9] = { 0x0337, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_177)
{
    // 298E 003F;	
    // (⦎) RIGHT SQUARE BRACKET WITH TICK IN BOTTOM CORNER	[0337 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298E, 0x003F };
    uint32_t const ces[9] = { 0x0337, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_178)
{
    // 298E 0061;	
    // (⦎) RIGHT SQUARE BRACKET WITH TICK IN BOTTOM CORNER	[0337 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298E, 0x0061 };
    uint32_t const ces[9] = { 0x0337, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_179)
{
    // 298E 0041;	
    // (⦎) RIGHT SQUARE BRACKET WITH TICK IN BOTTOM CORNER	[0337 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x298E, 0x0041 };
    uint32_t const ces[9] = { 0x0337, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_180)
{
    // 298E 0062;	
    // (⦎) RIGHT SQUARE BRACKET WITH TICK IN BOTTOM CORNER	[0337 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298E, 0x0062 };
    uint32_t const ces[9] = { 0x0337, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_181)
{
    // 298F 0021;	
    // (⦏) LEFT SQUARE BRACKET WITH TICK IN BOTTOM CORNER	[0338 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298F, 0x0021 };
    uint32_t const ces[9] = { 0x0338, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_182)
{
    // 298F 003F;	
    // (⦏) LEFT SQUARE BRACKET WITH TICK IN BOTTOM CORNER	[0338 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298F, 0x003F };
    uint32_t const ces[9] = { 0x0338, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_183)
{
    // 298F 0061;	
    // (⦏) LEFT SQUARE BRACKET WITH TICK IN BOTTOM CORNER	[0338 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298F, 0x0061 };
    uint32_t const ces[9] = { 0x0338, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_184)
{
    // 298F 0041;	
    // (⦏) LEFT SQUARE BRACKET WITH TICK IN BOTTOM CORNER	[0338 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x298F, 0x0041 };
    uint32_t const ces[9] = { 0x0338, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_185)
{
    // 298F 0062;	
    // (⦏) LEFT SQUARE BRACKET WITH TICK IN BOTTOM CORNER	[0338 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x298F, 0x0062 };
    uint32_t const ces[9] = { 0x0338, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_186)
{
    // 2990 0021;	
    // (⦐) RIGHT SQUARE BRACKET WITH TICK IN TOP CORNER	[0339 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2990, 0x0021 };
    uint32_t const ces[9] = { 0x0339, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_187)
{
    // 2990 003F;	
    // (⦐) RIGHT SQUARE BRACKET WITH TICK IN TOP CORNER	[0339 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2990, 0x003F };
    uint32_t const ces[9] = { 0x0339, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_188)
{
    // 2990 0061;	
    // (⦐) RIGHT SQUARE BRACKET WITH TICK IN TOP CORNER	[0339 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2990, 0x0061 };
    uint32_t const ces[9] = { 0x0339, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_189)
{
    // 2990 0041;	
    // (⦐) RIGHT SQUARE BRACKET WITH TICK IN TOP CORNER	[0339 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2990, 0x0041 };
    uint32_t const ces[9] = { 0x0339, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_190)
{
    // 2990 0062;	
    // (⦐) RIGHT SQUARE BRACKET WITH TICK IN TOP CORNER	[0339 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2990, 0x0062 };
    uint32_t const ces[9] = { 0x0339, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_191)
{
    // 2991 0021;	
    // (⦑) LEFT ANGLE BRACKET WITH DOT	[033A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2991, 0x0021 };
    uint32_t const ces[9] = { 0x033A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_192)
{
    // 2991 003F;	
    // (⦑) LEFT ANGLE BRACKET WITH DOT	[033A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2991, 0x003F };
    uint32_t const ces[9] = { 0x033A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_193)
{
    // 2991 0061;	
    // (⦑) LEFT ANGLE BRACKET WITH DOT	[033A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2991, 0x0061 };
    uint32_t const ces[9] = { 0x033A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_194)
{
    // 2991 0041;	
    // (⦑) LEFT ANGLE BRACKET WITH DOT	[033A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2991, 0x0041 };
    uint32_t const ces[9] = { 0x033A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_195)
{
    // 2991 0062;	
    // (⦑) LEFT ANGLE BRACKET WITH DOT	[033A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2991, 0x0062 };
    uint32_t const ces[9] = { 0x033A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_196)
{
    // 2992 0021;	
    // (⦒) RIGHT ANGLE BRACKET WITH DOT	[033B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2992, 0x0021 };
    uint32_t const ces[9] = { 0x033B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_197)
{
    // 2992 003F;	
    // (⦒) RIGHT ANGLE BRACKET WITH DOT	[033B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2992, 0x003F };
    uint32_t const ces[9] = { 0x033B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_198)
{
    // 2992 0061;	
    // (⦒) RIGHT ANGLE BRACKET WITH DOT	[033B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2992, 0x0061 };
    uint32_t const ces[9] = { 0x033B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_199)
{
    // 2992 0041;	
    // (⦒) RIGHT ANGLE BRACKET WITH DOT	[033B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2992, 0x0041 };
    uint32_t const ces[9] = { 0x033B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_200)
{
    // 2992 0062;	
    // (⦒) RIGHT ANGLE BRACKET WITH DOT	[033B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2992, 0x0062 };
    uint32_t const ces[9] = { 0x033B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_201)
{
    // 2993 0021;	
    // (⦓) LEFT ARC LESS-THAN BRACKET	[033C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2993, 0x0021 };
    uint32_t const ces[9] = { 0x033C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_202)
{
    // 2993 003F;	
    // (⦓) LEFT ARC LESS-THAN BRACKET	[033C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2993, 0x003F };
    uint32_t const ces[9] = { 0x033C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_203)
{
    // 2993 0061;	
    // (⦓) LEFT ARC LESS-THAN BRACKET	[033C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2993, 0x0061 };
    uint32_t const ces[9] = { 0x033C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_204)
{
    // 2993 0041;	
    // (⦓) LEFT ARC LESS-THAN BRACKET	[033C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2993, 0x0041 };
    uint32_t const ces[9] = { 0x033C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_205)
{
    // 2993 0062;	
    // (⦓) LEFT ARC LESS-THAN BRACKET	[033C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2993, 0x0062 };
    uint32_t const ces[9] = { 0x033C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_206)
{
    // 2994 0021;	
    // (⦔) RIGHT ARC GREATER-THAN BRACKET	[033D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2994, 0x0021 };
    uint32_t const ces[9] = { 0x033D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_207)
{
    // 2994 003F;	
    // (⦔) RIGHT ARC GREATER-THAN BRACKET	[033D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2994, 0x003F };
    uint32_t const ces[9] = { 0x033D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_208)
{
    // 2994 0061;	
    // (⦔) RIGHT ARC GREATER-THAN BRACKET	[033D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2994, 0x0061 };
    uint32_t const ces[9] = { 0x033D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_209)
{
    // 2994 0041;	
    // (⦔) RIGHT ARC GREATER-THAN BRACKET	[033D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2994, 0x0041 };
    uint32_t const ces[9] = { 0x033D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_210)
{
    // 2994 0062;	
    // (⦔) RIGHT ARC GREATER-THAN BRACKET	[033D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2994, 0x0062 };
    uint32_t const ces[9] = { 0x033D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_211)
{
    // 2995 0021;	
    // (⦕) DOUBLE LEFT ARC GREATER-THAN BRACKET	[033E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2995, 0x0021 };
    uint32_t const ces[9] = { 0x033E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_212)
{
    // 2995 003F;	
    // (⦕) DOUBLE LEFT ARC GREATER-THAN BRACKET	[033E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2995, 0x003F };
    uint32_t const ces[9] = { 0x033E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_213)
{
    // 2995 0061;	
    // (⦕) DOUBLE LEFT ARC GREATER-THAN BRACKET	[033E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2995, 0x0061 };
    uint32_t const ces[9] = { 0x033E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_214)
{
    // 2995 0041;	
    // (⦕) DOUBLE LEFT ARC GREATER-THAN BRACKET	[033E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2995, 0x0041 };
    uint32_t const ces[9] = { 0x033E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_215)
{
    // 2995 0062;	
    // (⦕) DOUBLE LEFT ARC GREATER-THAN BRACKET	[033E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2995, 0x0062 };
    uint32_t const ces[9] = { 0x033E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_216)
{
    // 2996 0021;	
    // (⦖) DOUBLE RIGHT ARC LESS-THAN BRACKET	[033F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2996, 0x0021 };
    uint32_t const ces[9] = { 0x033F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_217)
{
    // 2996 003F;	
    // (⦖) DOUBLE RIGHT ARC LESS-THAN BRACKET	[033F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2996, 0x003F };
    uint32_t const ces[9] = { 0x033F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_218)
{
    // 2996 0061;	
    // (⦖) DOUBLE RIGHT ARC LESS-THAN BRACKET	[033F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2996, 0x0061 };
    uint32_t const ces[9] = { 0x033F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_219)
{
    // 2996 0041;	
    // (⦖) DOUBLE RIGHT ARC LESS-THAN BRACKET	[033F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2996, 0x0041 };
    uint32_t const ces[9] = { 0x033F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_220)
{
    // 2996 0062;	
    // (⦖) DOUBLE RIGHT ARC LESS-THAN BRACKET	[033F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2996, 0x0062 };
    uint32_t const ces[9] = { 0x033F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_221)
{
    // 2997 0021;	
    // (⦗) LEFT BLACK TORTOISE SHELL BRACKET	[0340 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2997, 0x0021 };
    uint32_t const ces[9] = { 0x0340, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_222)
{
    // 2997 003F;	
    // (⦗) LEFT BLACK TORTOISE SHELL BRACKET	[0340 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2997, 0x003F };
    uint32_t const ces[9] = { 0x0340, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_223)
{
    // 2997 0061;	
    // (⦗) LEFT BLACK TORTOISE SHELL BRACKET	[0340 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2997, 0x0061 };
    uint32_t const ces[9] = { 0x0340, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_224)
{
    // 2997 0041;	
    // (⦗) LEFT BLACK TORTOISE SHELL BRACKET	[0340 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2997, 0x0041 };
    uint32_t const ces[9] = { 0x0340, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_225)
{
    // 2997 0062;	
    // (⦗) LEFT BLACK TORTOISE SHELL BRACKET	[0340 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2997, 0x0062 };
    uint32_t const ces[9] = { 0x0340, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_226)
{
    // 2998 0021;	
    // (⦘) RIGHT BLACK TORTOISE SHELL BRACKET	[0341 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2998, 0x0021 };
    uint32_t const ces[9] = { 0x0341, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_227)
{
    // 2998 003F;	
    // (⦘) RIGHT BLACK TORTOISE SHELL BRACKET	[0341 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2998, 0x003F };
    uint32_t const ces[9] = { 0x0341, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_228)
{
    // 2998 0061;	
    // (⦘) RIGHT BLACK TORTOISE SHELL BRACKET	[0341 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2998, 0x0061 };
    uint32_t const ces[9] = { 0x0341, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_229)
{
    // 2998 0041;	
    // (⦘) RIGHT BLACK TORTOISE SHELL BRACKET	[0341 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2998, 0x0041 };
    uint32_t const ces[9] = { 0x0341, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_230)
{
    // 2998 0062;	
    // (⦘) RIGHT BLACK TORTOISE SHELL BRACKET	[0341 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2998, 0x0062 };
    uint32_t const ces[9] = { 0x0341, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_231)
{
    // 27C5 0021;	
    // (⟅) LEFT S-SHAPED BAG DELIMITER	[0342 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C5, 0x0021 };
    uint32_t const ces[9] = { 0x0342, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_232)
{
    // 27C5 003F;	
    // (⟅) LEFT S-SHAPED BAG DELIMITER	[0342 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C5, 0x003F };
    uint32_t const ces[9] = { 0x0342, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_233)
{
    // 27C5 0061;	
    // (⟅) LEFT S-SHAPED BAG DELIMITER	[0342 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C5, 0x0061 };
    uint32_t const ces[9] = { 0x0342, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_234)
{
    // 27C5 0041;	
    // (⟅) LEFT S-SHAPED BAG DELIMITER	[0342 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27C5, 0x0041 };
    uint32_t const ces[9] = { 0x0342, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_235)
{
    // 27C5 0062;	
    // (⟅) LEFT S-SHAPED BAG DELIMITER	[0342 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C5, 0x0062 };
    uint32_t const ces[9] = { 0x0342, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_236)
{
    // 27C6 0021;	
    // (⟆) RIGHT S-SHAPED BAG DELIMITER	[0343 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C6, 0x0021 };
    uint32_t const ces[9] = { 0x0343, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_237)
{
    // 27C6 003F;	
    // (⟆) RIGHT S-SHAPED BAG DELIMITER	[0343 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C6, 0x003F };
    uint32_t const ces[9] = { 0x0343, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_238)
{
    // 27C6 0061;	
    // (⟆) RIGHT S-SHAPED BAG DELIMITER	[0343 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C6, 0x0061 };
    uint32_t const ces[9] = { 0x0343, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_239)
{
    // 27C6 0041;	
    // (⟆) RIGHT S-SHAPED BAG DELIMITER	[0343 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27C6, 0x0041 };
    uint32_t const ces[9] = { 0x0343, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_240)
{
    // 27C6 0062;	
    // (⟆) RIGHT S-SHAPED BAG DELIMITER	[0343 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27C6, 0x0062 };
    uint32_t const ces[9] = { 0x0343, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_241)
{
    // 27E6 0021;	
    // (⟦) MATHEMATICAL LEFT WHITE SQUARE BRACKET	[0344 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E6, 0x0021 };
    uint32_t const ces[9] = { 0x0344, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_242)
{
    // 27E6 003F;	
    // (⟦) MATHEMATICAL LEFT WHITE SQUARE BRACKET	[0344 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E6, 0x003F };
    uint32_t const ces[9] = { 0x0344, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_243)
{
    // 27E6 0061;	
    // (⟦) MATHEMATICAL LEFT WHITE SQUARE BRACKET	[0344 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E6, 0x0061 };
    uint32_t const ces[9] = { 0x0344, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_244)
{
    // 27E6 0041;	
    // (⟦) MATHEMATICAL LEFT WHITE SQUARE BRACKET	[0344 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27E6, 0x0041 };
    uint32_t const ces[9] = { 0x0344, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_245)
{
    // 27E6 0062;	
    // (⟦) MATHEMATICAL LEFT WHITE SQUARE BRACKET	[0344 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E6, 0x0062 };
    uint32_t const ces[9] = { 0x0344, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_246)
{
    // 27E7 0021;	
    // (⟧) MATHEMATICAL RIGHT WHITE SQUARE BRACKET	[0345 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E7, 0x0021 };
    uint32_t const ces[9] = { 0x0345, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_247)
{
    // 27E7 003F;	
    // (⟧) MATHEMATICAL RIGHT WHITE SQUARE BRACKET	[0345 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E7, 0x003F };
    uint32_t const ces[9] = { 0x0345, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_248)
{
    // 27E7 0061;	
    // (⟧) MATHEMATICAL RIGHT WHITE SQUARE BRACKET	[0345 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E7, 0x0061 };
    uint32_t const ces[9] = { 0x0345, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_249)
{
    // 27E7 0041;	
    // (⟧) MATHEMATICAL RIGHT WHITE SQUARE BRACKET	[0345 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27E7, 0x0041 };
    uint32_t const ces[9] = { 0x0345, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_250)
{
    // 27E7 0062;	
    // (⟧) MATHEMATICAL RIGHT WHITE SQUARE BRACKET	[0345 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E7, 0x0062 };
    uint32_t const ces[9] = { 0x0345, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_251)
{
    // 27E8 0021;	
    // (⟨) MATHEMATICAL LEFT ANGLE BRACKET	[0346 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E8, 0x0021 };
    uint32_t const ces[9] = { 0x0346, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_252)
{
    // 27E8 003F;	
    // (⟨) MATHEMATICAL LEFT ANGLE BRACKET	[0346 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E8, 0x003F };
    uint32_t const ces[9] = { 0x0346, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_253)
{
    // 27E8 0061;	
    // (⟨) MATHEMATICAL LEFT ANGLE BRACKET	[0346 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E8, 0x0061 };
    uint32_t const ces[9] = { 0x0346, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_254)
{
    // 27E8 0041;	
    // (⟨) MATHEMATICAL LEFT ANGLE BRACKET	[0346 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27E8, 0x0041 };
    uint32_t const ces[9] = { 0x0346, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_255)
{
    // 27E8 0062;	
    // (⟨) MATHEMATICAL LEFT ANGLE BRACKET	[0346 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E8, 0x0062 };
    uint32_t const ces[9] = { 0x0346, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_256)
{
    // 27E9 0021;	
    // (⟩) MATHEMATICAL RIGHT ANGLE BRACKET	[0347 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E9, 0x0021 };
    uint32_t const ces[9] = { 0x0347, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_257)
{
    // 27E9 003F;	
    // (⟩) MATHEMATICAL RIGHT ANGLE BRACKET	[0347 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E9, 0x003F };
    uint32_t const ces[9] = { 0x0347, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_258)
{
    // 27E9 0061;	
    // (⟩) MATHEMATICAL RIGHT ANGLE BRACKET	[0347 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E9, 0x0061 };
    uint32_t const ces[9] = { 0x0347, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_259)
{
    // 27E9 0041;	
    // (⟩) MATHEMATICAL RIGHT ANGLE BRACKET	[0347 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27E9, 0x0041 };
    uint32_t const ces[9] = { 0x0347, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_260)
{
    // 27E9 0062;	
    // (⟩) MATHEMATICAL RIGHT ANGLE BRACKET	[0347 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27E9, 0x0062 };
    uint32_t const ces[9] = { 0x0347, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_261)
{
    // 27EA 0021;	
    // (⟪) MATHEMATICAL LEFT DOUBLE ANGLE BRACKET	[0348 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27EA, 0x0021 };
    uint32_t const ces[9] = { 0x0348, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_262)
{
    // 27EA 003F;	
    // (⟪) MATHEMATICAL LEFT DOUBLE ANGLE BRACKET	[0348 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27EA, 0x003F };
    uint32_t const ces[9] = { 0x0348, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_263)
{
    // 27EA 0061;	
    // (⟪) MATHEMATICAL LEFT DOUBLE ANGLE BRACKET	[0348 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27EA, 0x0061 };
    uint32_t const ces[9] = { 0x0348, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_264)
{
    // 27EA 0041;	
    // (⟪) MATHEMATICAL LEFT DOUBLE ANGLE BRACKET	[0348 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27EA, 0x0041 };
    uint32_t const ces[9] = { 0x0348, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_265)
{
    // 27EA 0062;	
    // (⟪) MATHEMATICAL LEFT DOUBLE ANGLE BRACKET	[0348 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27EA, 0x0062 };
    uint32_t const ces[9] = { 0x0348, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_266)
{
    // 27EB 0021;	
    // (⟫) MATHEMATICAL RIGHT DOUBLE ANGLE BRACKET	[0349 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27EB, 0x0021 };
    uint32_t const ces[9] = { 0x0349, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_267)
{
    // 27EB 003F;	
    // (⟫) MATHEMATICAL RIGHT DOUBLE ANGLE BRACKET	[0349 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27EB, 0x003F };
    uint32_t const ces[9] = { 0x0349, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_268)
{
    // 27EB 0061;	
    // (⟫) MATHEMATICAL RIGHT DOUBLE ANGLE BRACKET	[0349 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27EB, 0x0061 };
    uint32_t const ces[9] = { 0x0349, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_269)
{
    // 27EB 0041;	
    // (⟫) MATHEMATICAL RIGHT DOUBLE ANGLE BRACKET	[0349 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27EB, 0x0041 };
    uint32_t const ces[9] = { 0x0349, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_270)
{
    // 27EB 0062;	
    // (⟫) MATHEMATICAL RIGHT DOUBLE ANGLE BRACKET	[0349 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27EB, 0x0062 };
    uint32_t const ces[9] = { 0x0349, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_271)
{
    // 27EC 0021;	
    // (⟬) MATHEMATICAL LEFT WHITE TORTOISE SHELL BRACKET	[034A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27EC, 0x0021 };
    uint32_t const ces[9] = { 0x034A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_272)
{
    // 27EC 003F;	
    // (⟬) MATHEMATICAL LEFT WHITE TORTOISE SHELL BRACKET	[034A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27EC, 0x003F };
    uint32_t const ces[9] = { 0x034A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_273)
{
    // 27EC 0061;	
    // (⟬) MATHEMATICAL LEFT WHITE TORTOISE SHELL BRACKET	[034A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27EC, 0x0061 };
    uint32_t const ces[9] = { 0x034A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_274)
{
    // 27EC 0041;	
    // (⟬) MATHEMATICAL LEFT WHITE TORTOISE SHELL BRACKET	[034A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27EC, 0x0041 };
    uint32_t const ces[9] = { 0x034A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_275)
{
    // 27EC 0062;	
    // (⟬) MATHEMATICAL LEFT WHITE TORTOISE SHELL BRACKET	[034A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27EC, 0x0062 };
    uint32_t const ces[9] = { 0x034A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_276)
{
    // 27ED 0021;	
    // (⟭) MATHEMATICAL RIGHT WHITE TORTOISE SHELL BRACKET	[034B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27ED, 0x0021 };
    uint32_t const ces[9] = { 0x034B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_277)
{
    // 27ED 003F;	
    // (⟭) MATHEMATICAL RIGHT WHITE TORTOISE SHELL BRACKET	[034B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27ED, 0x003F };
    uint32_t const ces[9] = { 0x034B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_278)
{
    // 27ED 0061;	
    // (⟭) MATHEMATICAL RIGHT WHITE TORTOISE SHELL BRACKET	[034B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27ED, 0x0061 };
    uint32_t const ces[9] = { 0x034B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_279)
{
    // 27ED 0041;	
    // (⟭) MATHEMATICAL RIGHT WHITE TORTOISE SHELL BRACKET	[034B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27ED, 0x0041 };
    uint32_t const ces[9] = { 0x034B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_280)
{
    // 27ED 0062;	
    // (⟭) MATHEMATICAL RIGHT WHITE TORTOISE SHELL BRACKET	[034B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27ED, 0x0062 };
    uint32_t const ces[9] = { 0x034B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_281)
{
    // 27EE 0021;	
    // (⟮) MATHEMATICAL LEFT FLATTENED PARENTHESIS	[034C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27EE, 0x0021 };
    uint32_t const ces[9] = { 0x034C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_282)
{
    // 27EE 003F;	
    // (⟮) MATHEMATICAL LEFT FLATTENED PARENTHESIS	[034C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27EE, 0x003F };
    uint32_t const ces[9] = { 0x034C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_283)
{
    // 27EE 0061;	
    // (⟮) MATHEMATICAL LEFT FLATTENED PARENTHESIS	[034C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27EE, 0x0061 };
    uint32_t const ces[9] = { 0x034C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_284)
{
    // 27EE 0041;	
    // (⟮) MATHEMATICAL LEFT FLATTENED PARENTHESIS	[034C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27EE, 0x0041 };
    uint32_t const ces[9] = { 0x034C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_285)
{
    // 27EE 0062;	
    // (⟮) MATHEMATICAL LEFT FLATTENED PARENTHESIS	[034C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27EE, 0x0062 };
    uint32_t const ces[9] = { 0x034C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_286)
{
    // 27EF 0021;	
    // (⟯) MATHEMATICAL RIGHT FLATTENED PARENTHESIS	[034D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27EF, 0x0021 };
    uint32_t const ces[9] = { 0x034D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_287)
{
    // 27EF 003F;	
    // (⟯) MATHEMATICAL RIGHT FLATTENED PARENTHESIS	[034D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27EF, 0x003F };
    uint32_t const ces[9] = { 0x034D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_288)
{
    // 27EF 0061;	
    // (⟯) MATHEMATICAL RIGHT FLATTENED PARENTHESIS	[034D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27EF, 0x0061 };
    uint32_t const ces[9] = { 0x034D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_289)
{
    // 27EF 0041;	
    // (⟯) MATHEMATICAL RIGHT FLATTENED PARENTHESIS	[034D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x27EF, 0x0041 };
    uint32_t const ces[9] = { 0x034D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_290)
{
    // 27EF 0062;	
    // (⟯) MATHEMATICAL RIGHT FLATTENED PARENTHESIS	[034D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x27EF, 0x0062 };
    uint32_t const ces[9] = { 0x034D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_291)
{
    // 2768 0021;	
    // (❨) MEDIUM LEFT PARENTHESIS ORNAMENT	[034E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2768, 0x0021 };
    uint32_t const ces[9] = { 0x034E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_292)
{
    // 2768 003F;	
    // (❨) MEDIUM LEFT PARENTHESIS ORNAMENT	[034E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2768, 0x003F };
    uint32_t const ces[9] = { 0x034E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_293)
{
    // 2768 0061;	
    // (❨) MEDIUM LEFT PARENTHESIS ORNAMENT	[034E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2768, 0x0061 };
    uint32_t const ces[9] = { 0x034E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_294)
{
    // 2768 0041;	
    // (❨) MEDIUM LEFT PARENTHESIS ORNAMENT	[034E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2768, 0x0041 };
    uint32_t const ces[9] = { 0x034E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_295)
{
    // 2768 0062;	
    // (❨) MEDIUM LEFT PARENTHESIS ORNAMENT	[034E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2768, 0x0062 };
    uint32_t const ces[9] = { 0x034E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_296)
{
    // 2769 0021;	
    // (❩) MEDIUM RIGHT PARENTHESIS ORNAMENT	[034F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2769, 0x0021 };
    uint32_t const ces[9] = { 0x034F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_297)
{
    // 2769 003F;	
    // (❩) MEDIUM RIGHT PARENTHESIS ORNAMENT	[034F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2769, 0x003F };
    uint32_t const ces[9] = { 0x034F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_298)
{
    // 2769 0061;	
    // (❩) MEDIUM RIGHT PARENTHESIS ORNAMENT	[034F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2769, 0x0061 };
    uint32_t const ces[9] = { 0x034F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_299)
{
    // 2769 0041;	
    // (❩) MEDIUM RIGHT PARENTHESIS ORNAMENT	[034F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2769, 0x0041 };
    uint32_t const ces[9] = { 0x034F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_300)
{
    // 2769 0062;	
    // (❩) MEDIUM RIGHT PARENTHESIS ORNAMENT	[034F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2769, 0x0062 };
    uint32_t const ces[9] = { 0x034F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_301)
{
    // 276A 0021;	
    // (❪) MEDIUM FLATTENED LEFT PARENTHESIS ORNAMENT	[0350 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276A, 0x0021 };
    uint32_t const ces[9] = { 0x0350, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_302)
{
    // 276A 003F;	
    // (❪) MEDIUM FLATTENED LEFT PARENTHESIS ORNAMENT	[0350 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276A, 0x003F };
    uint32_t const ces[9] = { 0x0350, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_303)
{
    // 276A 0061;	
    // (❪) MEDIUM FLATTENED LEFT PARENTHESIS ORNAMENT	[0350 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276A, 0x0061 };
    uint32_t const ces[9] = { 0x0350, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_304)
{
    // 276A 0041;	
    // (❪) MEDIUM FLATTENED LEFT PARENTHESIS ORNAMENT	[0350 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x276A, 0x0041 };
    uint32_t const ces[9] = { 0x0350, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_305)
{
    // 276A 0062;	
    // (❪) MEDIUM FLATTENED LEFT PARENTHESIS ORNAMENT	[0350 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276A, 0x0062 };
    uint32_t const ces[9] = { 0x0350, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_306)
{
    // 276B 0021;	
    // (❫) MEDIUM FLATTENED RIGHT PARENTHESIS ORNAMENT	[0351 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276B, 0x0021 };
    uint32_t const ces[9] = { 0x0351, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_307)
{
    // 276B 003F;	
    // (❫) MEDIUM FLATTENED RIGHT PARENTHESIS ORNAMENT	[0351 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276B, 0x003F };
    uint32_t const ces[9] = { 0x0351, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_308)
{
    // 276B 0061;	
    // (❫) MEDIUM FLATTENED RIGHT PARENTHESIS ORNAMENT	[0351 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276B, 0x0061 };
    uint32_t const ces[9] = { 0x0351, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_309)
{
    // 276B 0041;	
    // (❫) MEDIUM FLATTENED RIGHT PARENTHESIS ORNAMENT	[0351 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x276B, 0x0041 };
    uint32_t const ces[9] = { 0x0351, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_310)
{
    // 276B 0062;	
    // (❫) MEDIUM FLATTENED RIGHT PARENTHESIS ORNAMENT	[0351 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276B, 0x0062 };
    uint32_t const ces[9] = { 0x0351, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_311)
{
    // 276C 0021;	
    // (❬) MEDIUM LEFT-POINTING ANGLE BRACKET ORNAMENT	[0352 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276C, 0x0021 };
    uint32_t const ces[9] = { 0x0352, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_312)
{
    // 276C 003F;	
    // (❬) MEDIUM LEFT-POINTING ANGLE BRACKET ORNAMENT	[0352 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276C, 0x003F };
    uint32_t const ces[9] = { 0x0352, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_313)
{
    // 276C 0061;	
    // (❬) MEDIUM LEFT-POINTING ANGLE BRACKET ORNAMENT	[0352 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276C, 0x0061 };
    uint32_t const ces[9] = { 0x0352, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_314)
{
    // 276C 0041;	
    // (❬) MEDIUM LEFT-POINTING ANGLE BRACKET ORNAMENT	[0352 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x276C, 0x0041 };
    uint32_t const ces[9] = { 0x0352, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_315)
{
    // 276C 0062;	
    // (❬) MEDIUM LEFT-POINTING ANGLE BRACKET ORNAMENT	[0352 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276C, 0x0062 };
    uint32_t const ces[9] = { 0x0352, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_316)
{
    // 276D 0021;	
    // (❭) MEDIUM RIGHT-POINTING ANGLE BRACKET ORNAMENT	[0353 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276D, 0x0021 };
    uint32_t const ces[9] = { 0x0353, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_317)
{
    // 276D 003F;	
    // (❭) MEDIUM RIGHT-POINTING ANGLE BRACKET ORNAMENT	[0353 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276D, 0x003F };
    uint32_t const ces[9] = { 0x0353, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_318)
{
    // 276D 0061;	
    // (❭) MEDIUM RIGHT-POINTING ANGLE BRACKET ORNAMENT	[0353 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276D, 0x0061 };
    uint32_t const ces[9] = { 0x0353, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_319)
{
    // 276D 0041;	
    // (❭) MEDIUM RIGHT-POINTING ANGLE BRACKET ORNAMENT	[0353 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x276D, 0x0041 };
    uint32_t const ces[9] = { 0x0353, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_320)
{
    // 276D 0062;	
    // (❭) MEDIUM RIGHT-POINTING ANGLE BRACKET ORNAMENT	[0353 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276D, 0x0062 };
    uint32_t const ces[9] = { 0x0353, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_321)
{
    // 276E 0021;	
    // (❮) HEAVY LEFT-POINTING ANGLE QUOTATION MARK ORNAMENT	[0354 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276E, 0x0021 };
    uint32_t const ces[9] = { 0x0354, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_322)
{
    // 276E 003F;	
    // (❮) HEAVY LEFT-POINTING ANGLE QUOTATION MARK ORNAMENT	[0354 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276E, 0x003F };
    uint32_t const ces[9] = { 0x0354, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_323)
{
    // 276E 0061;	
    // (❮) HEAVY LEFT-POINTING ANGLE QUOTATION MARK ORNAMENT	[0354 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276E, 0x0061 };
    uint32_t const ces[9] = { 0x0354, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_324)
{
    // 276E 0041;	
    // (❮) HEAVY LEFT-POINTING ANGLE QUOTATION MARK ORNAMENT	[0354 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x276E, 0x0041 };
    uint32_t const ces[9] = { 0x0354, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_325)
{
    // 276E 0062;	
    // (❮) HEAVY LEFT-POINTING ANGLE QUOTATION MARK ORNAMENT	[0354 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276E, 0x0062 };
    uint32_t const ces[9] = { 0x0354, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_326)
{
    // 276F 0021;	
    // (❯) HEAVY RIGHT-POINTING ANGLE QUOTATION MARK ORNAMENT	[0355 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276F, 0x0021 };
    uint32_t const ces[9] = { 0x0355, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_327)
{
    // 276F 003F;	
    // (❯) HEAVY RIGHT-POINTING ANGLE QUOTATION MARK ORNAMENT	[0355 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276F, 0x003F };
    uint32_t const ces[9] = { 0x0355, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_328)
{
    // 276F 0061;	
    // (❯) HEAVY RIGHT-POINTING ANGLE QUOTATION MARK ORNAMENT	[0355 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276F, 0x0061 };
    uint32_t const ces[9] = { 0x0355, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_329)
{
    // 276F 0041;	
    // (❯) HEAVY RIGHT-POINTING ANGLE QUOTATION MARK ORNAMENT	[0355 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x276F, 0x0041 };
    uint32_t const ces[9] = { 0x0355, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_330)
{
    // 276F 0062;	
    // (❯) HEAVY RIGHT-POINTING ANGLE QUOTATION MARK ORNAMENT	[0355 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x276F, 0x0062 };
    uint32_t const ces[9] = { 0x0355, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_331)
{
    // 2770 0021;	
    // (❰) HEAVY LEFT-POINTING ANGLE BRACKET ORNAMENT	[0356 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2770, 0x0021 };
    uint32_t const ces[9] = { 0x0356, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_332)
{
    // 2770 003F;	
    // (❰) HEAVY LEFT-POINTING ANGLE BRACKET ORNAMENT	[0356 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2770, 0x003F };
    uint32_t const ces[9] = { 0x0356, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_333)
{
    // 2770 0061;	
    // (❰) HEAVY LEFT-POINTING ANGLE BRACKET ORNAMENT	[0356 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2770, 0x0061 };
    uint32_t const ces[9] = { 0x0356, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_334)
{
    // 2770 0041;	
    // (❰) HEAVY LEFT-POINTING ANGLE BRACKET ORNAMENT	[0356 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2770, 0x0041 };
    uint32_t const ces[9] = { 0x0356, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_335)
{
    // 2770 0062;	
    // (❰) HEAVY LEFT-POINTING ANGLE BRACKET ORNAMENT	[0356 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2770, 0x0062 };
    uint32_t const ces[9] = { 0x0356, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_336)
{
    // 2771 0021;	
    // (❱) HEAVY RIGHT-POINTING ANGLE BRACKET ORNAMENT	[0357 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2771, 0x0021 };
    uint32_t const ces[9] = { 0x0357, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_337)
{
    // 2771 003F;	
    // (❱) HEAVY RIGHT-POINTING ANGLE BRACKET ORNAMENT	[0357 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2771, 0x003F };
    uint32_t const ces[9] = { 0x0357, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_338)
{
    // 2771 0061;	
    // (❱) HEAVY RIGHT-POINTING ANGLE BRACKET ORNAMENT	[0357 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2771, 0x0061 };
    uint32_t const ces[9] = { 0x0357, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_339)
{
    // 2771 0041;	
    // (❱) HEAVY RIGHT-POINTING ANGLE BRACKET ORNAMENT	[0357 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2771, 0x0041 };
    uint32_t const ces[9] = { 0x0357, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_340)
{
    // 2771 0062;	
    // (❱) HEAVY RIGHT-POINTING ANGLE BRACKET ORNAMENT	[0357 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2771, 0x0062 };
    uint32_t const ces[9] = { 0x0357, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_341)
{
    // 2772 0021;	
    // (❲) LIGHT LEFT TORTOISE SHELL BRACKET ORNAMENT	[0358 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2772, 0x0021 };
    uint32_t const ces[9] = { 0x0358, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_342)
{
    // 2772 003F;	
    // (❲) LIGHT LEFT TORTOISE SHELL BRACKET ORNAMENT	[0358 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2772, 0x003F };
    uint32_t const ces[9] = { 0x0358, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_343)
{
    // 2772 0061;	
    // (❲) LIGHT LEFT TORTOISE SHELL BRACKET ORNAMENT	[0358 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2772, 0x0061 };
    uint32_t const ces[9] = { 0x0358, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_344)
{
    // 2772 0041;	
    // (❲) LIGHT LEFT TORTOISE SHELL BRACKET ORNAMENT	[0358 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2772, 0x0041 };
    uint32_t const ces[9] = { 0x0358, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_345)
{
    // 2772 0062;	
    // (❲) LIGHT LEFT TORTOISE SHELL BRACKET ORNAMENT	[0358 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2772, 0x0062 };
    uint32_t const ces[9] = { 0x0358, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_346)
{
    // 2773 0021;	
    // (❳) LIGHT RIGHT TORTOISE SHELL BRACKET ORNAMENT	[0359 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2773, 0x0021 };
    uint32_t const ces[9] = { 0x0359, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_347)
{
    // 2773 003F;	
    // (❳) LIGHT RIGHT TORTOISE SHELL BRACKET ORNAMENT	[0359 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2773, 0x003F };
    uint32_t const ces[9] = { 0x0359, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_348)
{
    // 2773 0061;	
    // (❳) LIGHT RIGHT TORTOISE SHELL BRACKET ORNAMENT	[0359 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2773, 0x0061 };
    uint32_t const ces[9] = { 0x0359, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_349)
{
    // 2773 0041;	
    // (❳) LIGHT RIGHT TORTOISE SHELL BRACKET ORNAMENT	[0359 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2773, 0x0041 };
    uint32_t const ces[9] = { 0x0359, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_350)
{
    // 2773 0062;	
    // (❳) LIGHT RIGHT TORTOISE SHELL BRACKET ORNAMENT	[0359 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2773, 0x0062 };
    uint32_t const ces[9] = { 0x0359, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_351)
{
    // 2774 0021;	
    // (❴) MEDIUM LEFT CURLY BRACKET ORNAMENT	[035A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2774, 0x0021 };
    uint32_t const ces[9] = { 0x035A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_352)
{
    // 2774 003F;	
    // (❴) MEDIUM LEFT CURLY BRACKET ORNAMENT	[035A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2774, 0x003F };
    uint32_t const ces[9] = { 0x035A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_353)
{
    // 2774 0061;	
    // (❴) MEDIUM LEFT CURLY BRACKET ORNAMENT	[035A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2774, 0x0061 };
    uint32_t const ces[9] = { 0x035A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_354)
{
    // 2774 0041;	
    // (❴) MEDIUM LEFT CURLY BRACKET ORNAMENT	[035A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2774, 0x0041 };
    uint32_t const ces[9] = { 0x035A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_355)
{
    // 2774 0062;	
    // (❴) MEDIUM LEFT CURLY BRACKET ORNAMENT	[035A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2774, 0x0062 };
    uint32_t const ces[9] = { 0x035A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_356)
{
    // 2775 0021;	
    // (❵) MEDIUM RIGHT CURLY BRACKET ORNAMENT	[035B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2775, 0x0021 };
    uint32_t const ces[9] = { 0x035B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_357)
{
    // 2775 003F;	
    // (❵) MEDIUM RIGHT CURLY BRACKET ORNAMENT	[035B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2775, 0x003F };
    uint32_t const ces[9] = { 0x035B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_358)
{
    // 2775 0061;	
    // (❵) MEDIUM RIGHT CURLY BRACKET ORNAMENT	[035B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2775, 0x0061 };
    uint32_t const ces[9] = { 0x035B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_359)
{
    // 2775 0041;	
    // (❵) MEDIUM RIGHT CURLY BRACKET ORNAMENT	[035B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2775, 0x0041 };
    uint32_t const ces[9] = { 0x035B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_360)
{
    // 2775 0062;	
    // (❵) MEDIUM RIGHT CURLY BRACKET ORNAMENT	[035B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2775, 0x0062 };
    uint32_t const ces[9] = { 0x035B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_361)
{
    // 2E02 0021;	
    // (⸂) LEFT SUBSTITUTION BRACKET	[035C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E02, 0x0021 };
    uint32_t const ces[9] = { 0x035C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_362)
{
    // 2E02 003F;	
    // (⸂) LEFT SUBSTITUTION BRACKET	[035C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E02, 0x003F };
    uint32_t const ces[9] = { 0x035C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_363)
{
    // 2E02 0061;	
    // (⸂) LEFT SUBSTITUTION BRACKET	[035C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E02, 0x0061 };
    uint32_t const ces[9] = { 0x035C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_364)
{
    // 2E02 0041;	
    // (⸂) LEFT SUBSTITUTION BRACKET	[035C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E02, 0x0041 };
    uint32_t const ces[9] = { 0x035C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_365)
{
    // 2E02 0062;	
    // (⸂) LEFT SUBSTITUTION BRACKET	[035C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E02, 0x0062 };
    uint32_t const ces[9] = { 0x035C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_366)
{
    // 2E03 0021;	
    // (⸃) RIGHT SUBSTITUTION BRACKET	[035D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E03, 0x0021 };
    uint32_t const ces[9] = { 0x035D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_367)
{
    // 2E03 003F;	
    // (⸃) RIGHT SUBSTITUTION BRACKET	[035D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E03, 0x003F };
    uint32_t const ces[9] = { 0x035D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_368)
{
    // 2E03 0061;	
    // (⸃) RIGHT SUBSTITUTION BRACKET	[035D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E03, 0x0061 };
    uint32_t const ces[9] = { 0x035D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_369)
{
    // 2E03 0041;	
    // (⸃) RIGHT SUBSTITUTION BRACKET	[035D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E03, 0x0041 };
    uint32_t const ces[9] = { 0x035D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_370)
{
    // 2E03 0062;	
    // (⸃) RIGHT SUBSTITUTION BRACKET	[035D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E03, 0x0062 };
    uint32_t const ces[9] = { 0x035D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_371)
{
    // 2E04 0021;	
    // (⸄) LEFT DOTTED SUBSTITUTION BRACKET	[035E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E04, 0x0021 };
    uint32_t const ces[9] = { 0x035E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_372)
{
    // 2E04 003F;	
    // (⸄) LEFT DOTTED SUBSTITUTION BRACKET	[035E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E04, 0x003F };
    uint32_t const ces[9] = { 0x035E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_373)
{
    // 2E04 0061;	
    // (⸄) LEFT DOTTED SUBSTITUTION BRACKET	[035E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E04, 0x0061 };
    uint32_t const ces[9] = { 0x035E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_374)
{
    // 2E04 0041;	
    // (⸄) LEFT DOTTED SUBSTITUTION BRACKET	[035E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E04, 0x0041 };
    uint32_t const ces[9] = { 0x035E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_375)
{
    // 2E04 0062;	
    // (⸄) LEFT DOTTED SUBSTITUTION BRACKET	[035E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E04, 0x0062 };
    uint32_t const ces[9] = { 0x035E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_376)
{
    // 2E05 0021;	
    // (⸅) RIGHT DOTTED SUBSTITUTION BRACKET	[035F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E05, 0x0021 };
    uint32_t const ces[9] = { 0x035F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_377)
{
    // 2E05 003F;	
    // (⸅) RIGHT DOTTED SUBSTITUTION BRACKET	[035F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E05, 0x003F };
    uint32_t const ces[9] = { 0x035F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_378)
{
    // 2E05 0061;	
    // (⸅) RIGHT DOTTED SUBSTITUTION BRACKET	[035F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E05, 0x0061 };
    uint32_t const ces[9] = { 0x035F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_379)
{
    // 2E05 0041;	
    // (⸅) RIGHT DOTTED SUBSTITUTION BRACKET	[035F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E05, 0x0041 };
    uint32_t const ces[9] = { 0x035F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_380)
{
    // 2E05 0062;	
    // (⸅) RIGHT DOTTED SUBSTITUTION BRACKET	[035F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E05, 0x0062 };
    uint32_t const ces[9] = { 0x035F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_381)
{
    // 2E09 0021;	
    // (⸉) LEFT TRANSPOSITION BRACKET	[0360 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E09, 0x0021 };
    uint32_t const ces[9] = { 0x0360, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_382)
{
    // 2E09 003F;	
    // (⸉) LEFT TRANSPOSITION BRACKET	[0360 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E09, 0x003F };
    uint32_t const ces[9] = { 0x0360, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_383)
{
    // 2E09 0061;	
    // (⸉) LEFT TRANSPOSITION BRACKET	[0360 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E09, 0x0061 };
    uint32_t const ces[9] = { 0x0360, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_384)
{
    // 2E09 0041;	
    // (⸉) LEFT TRANSPOSITION BRACKET	[0360 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E09, 0x0041 };
    uint32_t const ces[9] = { 0x0360, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_385)
{
    // 2E09 0062;	
    // (⸉) LEFT TRANSPOSITION BRACKET	[0360 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E09, 0x0062 };
    uint32_t const ces[9] = { 0x0360, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_386)
{
    // 2E0A 0021;	
    // (⸊) RIGHT TRANSPOSITION BRACKET	[0361 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0A, 0x0021 };
    uint32_t const ces[9] = { 0x0361, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_387)
{
    // 2E0A 003F;	
    // (⸊) RIGHT TRANSPOSITION BRACKET	[0361 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0A, 0x003F };
    uint32_t const ces[9] = { 0x0361, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_388)
{
    // 2E0A 0061;	
    // (⸊) RIGHT TRANSPOSITION BRACKET	[0361 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0A, 0x0061 };
    uint32_t const ces[9] = { 0x0361, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_389)
{
    // 2E0A 0041;	
    // (⸊) RIGHT TRANSPOSITION BRACKET	[0361 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E0A, 0x0041 };
    uint32_t const ces[9] = { 0x0361, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_390)
{
    // 2E0A 0062;	
    // (⸊) RIGHT TRANSPOSITION BRACKET	[0361 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0A, 0x0062 };
    uint32_t const ces[9] = { 0x0361, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_391)
{
    // 2E0C 0021;	
    // (⸌) LEFT RAISED OMISSION BRACKET	[0362 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0C, 0x0021 };
    uint32_t const ces[9] = { 0x0362, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_392)
{
    // 2E0C 003F;	
    // (⸌) LEFT RAISED OMISSION BRACKET	[0362 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0C, 0x003F };
    uint32_t const ces[9] = { 0x0362, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_393)
{
    // 2E0C 0061;	
    // (⸌) LEFT RAISED OMISSION BRACKET	[0362 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0C, 0x0061 };
    uint32_t const ces[9] = { 0x0362, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_394)
{
    // 2E0C 0041;	
    // (⸌) LEFT RAISED OMISSION BRACKET	[0362 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E0C, 0x0041 };
    uint32_t const ces[9] = { 0x0362, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_395)
{
    // 2E0C 0062;	
    // (⸌) LEFT RAISED OMISSION BRACKET	[0362 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0C, 0x0062 };
    uint32_t const ces[9] = { 0x0362, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_396)
{
    // 2E0D 0021;	
    // (⸍) RIGHT RAISED OMISSION BRACKET	[0363 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0D, 0x0021 };
    uint32_t const ces[9] = { 0x0363, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_397)
{
    // 2E0D 003F;	
    // (⸍) RIGHT RAISED OMISSION BRACKET	[0363 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0D, 0x003F };
    uint32_t const ces[9] = { 0x0363, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_398)
{
    // 2E0D 0061;	
    // (⸍) RIGHT RAISED OMISSION BRACKET	[0363 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0D, 0x0061 };
    uint32_t const ces[9] = { 0x0363, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_399)
{
    // 2E0D 0041;	
    // (⸍) RIGHT RAISED OMISSION BRACKET	[0363 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E0D, 0x0041 };
    uint32_t const ces[9] = { 0x0363, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_400)
{
    // 2E0D 0062;	
    // (⸍) RIGHT RAISED OMISSION BRACKET	[0363 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E0D, 0x0062 };
    uint32_t const ces[9] = { 0x0363, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_401)
{
    // 2E1C 0021;	
    // (⸜) LEFT LOW PARAPHRASE BRACKET	[0364 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1C, 0x0021 };
    uint32_t const ces[9] = { 0x0364, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_402)
{
    // 2E1C 003F;	
    // (⸜) LEFT LOW PARAPHRASE BRACKET	[0364 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1C, 0x003F };
    uint32_t const ces[9] = { 0x0364, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_403)
{
    // 2E1C 0061;	
    // (⸜) LEFT LOW PARAPHRASE BRACKET	[0364 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1C, 0x0061 };
    uint32_t const ces[9] = { 0x0364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_404)
{
    // 2E1C 0041;	
    // (⸜) LEFT LOW PARAPHRASE BRACKET	[0364 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E1C, 0x0041 };
    uint32_t const ces[9] = { 0x0364, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_405)
{
    // 2E1C 0062;	
    // (⸜) LEFT LOW PARAPHRASE BRACKET	[0364 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1C, 0x0062 };
    uint32_t const ces[9] = { 0x0364, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_406)
{
    // 2E1D 0021;	
    // (⸝) RIGHT LOW PARAPHRASE BRACKET	[0365 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1D, 0x0021 };
    uint32_t const ces[9] = { 0x0365, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_407)
{
    // 2E1D 003F;	
    // (⸝) RIGHT LOW PARAPHRASE BRACKET	[0365 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1D, 0x003F };
    uint32_t const ces[9] = { 0x0365, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_408)
{
    // 2E1D 0061;	
    // (⸝) RIGHT LOW PARAPHRASE BRACKET	[0365 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1D, 0x0061 };
    uint32_t const ces[9] = { 0x0365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_409)
{
    // 2E1D 0041;	
    // (⸝) RIGHT LOW PARAPHRASE BRACKET	[0365 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E1D, 0x0041 };
    uint32_t const ces[9] = { 0x0365, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_410)
{
    // 2E1D 0062;	
    // (⸝) RIGHT LOW PARAPHRASE BRACKET	[0365 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E1D, 0x0062 };
    uint32_t const ces[9] = { 0x0365, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_411)
{
    // 2E20 0021;	
    // (⸠) LEFT VERTICAL BAR WITH QUILL	[0366 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E20, 0x0021 };
    uint32_t const ces[9] = { 0x0366, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_412)
{
    // 2E20 003F;	
    // (⸠) LEFT VERTICAL BAR WITH QUILL	[0366 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E20, 0x003F };
    uint32_t const ces[9] = { 0x0366, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_413)
{
    // 2E20 0061;	
    // (⸠) LEFT VERTICAL BAR WITH QUILL	[0366 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E20, 0x0061 };
    uint32_t const ces[9] = { 0x0366, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_414)
{
    // 2E20 0041;	
    // (⸠) LEFT VERTICAL BAR WITH QUILL	[0366 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E20, 0x0041 };
    uint32_t const ces[9] = { 0x0366, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_415)
{
    // 2E20 0062;	
    // (⸠) LEFT VERTICAL BAR WITH QUILL	[0366 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E20, 0x0062 };
    uint32_t const ces[9] = { 0x0366, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_416)
{
    // 2E21 0021;	
    // (⸡) RIGHT VERTICAL BAR WITH QUILL	[0367 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E21, 0x0021 };
    uint32_t const ces[9] = { 0x0367, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_417)
{
    // 2E21 003F;	
    // (⸡) RIGHT VERTICAL BAR WITH QUILL	[0367 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E21, 0x003F };
    uint32_t const ces[9] = { 0x0367, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_418)
{
    // 2E21 0061;	
    // (⸡) RIGHT VERTICAL BAR WITH QUILL	[0367 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E21, 0x0061 };
    uint32_t const ces[9] = { 0x0367, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_419)
{
    // 2E21 0041;	
    // (⸡) RIGHT VERTICAL BAR WITH QUILL	[0367 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E21, 0x0041 };
    uint32_t const ces[9] = { 0x0367, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_420)
{
    // 2E21 0062;	
    // (⸡) RIGHT VERTICAL BAR WITH QUILL	[0367 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E21, 0x0062 };
    uint32_t const ces[9] = { 0x0367, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_421)
{
    // 2E22 0021;	
    // (⸢) TOP LEFT HALF BRACKET	[0368 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E22, 0x0021 };
    uint32_t const ces[9] = { 0x0368, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_422)
{
    // 2E22 003F;	
    // (⸢) TOP LEFT HALF BRACKET	[0368 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E22, 0x003F };
    uint32_t const ces[9] = { 0x0368, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_423)
{
    // 2E22 0061;	
    // (⸢) TOP LEFT HALF BRACKET	[0368 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E22, 0x0061 };
    uint32_t const ces[9] = { 0x0368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_424)
{
    // 2E22 0041;	
    // (⸢) TOP LEFT HALF BRACKET	[0368 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E22, 0x0041 };
    uint32_t const ces[9] = { 0x0368, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_425)
{
    // 2E22 0062;	
    // (⸢) TOP LEFT HALF BRACKET	[0368 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E22, 0x0062 };
    uint32_t const ces[9] = { 0x0368, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_426)
{
    // 2E23 0021;	
    // (⸣) TOP RIGHT HALF BRACKET	[0369 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E23, 0x0021 };
    uint32_t const ces[9] = { 0x0369, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_427)
{
    // 2E23 003F;	
    // (⸣) TOP RIGHT HALF BRACKET	[0369 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E23, 0x003F };
    uint32_t const ces[9] = { 0x0369, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_428)
{
    // 2E23 0061;	
    // (⸣) TOP RIGHT HALF BRACKET	[0369 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E23, 0x0061 };
    uint32_t const ces[9] = { 0x0369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_429)
{
    // 2E23 0041;	
    // (⸣) TOP RIGHT HALF BRACKET	[0369 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E23, 0x0041 };
    uint32_t const ces[9] = { 0x0369, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_430)
{
    // 2E23 0062;	
    // (⸣) TOP RIGHT HALF BRACKET	[0369 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E23, 0x0062 };
    uint32_t const ces[9] = { 0x0369, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_431)
{
    // 2E24 0021;	
    // (⸤) BOTTOM LEFT HALF BRACKET	[036A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E24, 0x0021 };
    uint32_t const ces[9] = { 0x036A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_432)
{
    // 2E24 003F;	
    // (⸤) BOTTOM LEFT HALF BRACKET	[036A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E24, 0x003F };
    uint32_t const ces[9] = { 0x036A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_433)
{
    // 2E24 0061;	
    // (⸤) BOTTOM LEFT HALF BRACKET	[036A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E24, 0x0061 };
    uint32_t const ces[9] = { 0x036A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_434)
{
    // 2E24 0041;	
    // (⸤) BOTTOM LEFT HALF BRACKET	[036A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E24, 0x0041 };
    uint32_t const ces[9] = { 0x036A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_435)
{
    // 2E24 0062;	
    // (⸤) BOTTOM LEFT HALF BRACKET	[036A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E24, 0x0062 };
    uint32_t const ces[9] = { 0x036A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_436)
{
    // 2E25 0021;	
    // (⸥) BOTTOM RIGHT HALF BRACKET	[036B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E25, 0x0021 };
    uint32_t const ces[9] = { 0x036B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_437)
{
    // 2E25 003F;	
    // (⸥) BOTTOM RIGHT HALF BRACKET	[036B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E25, 0x003F };
    uint32_t const ces[9] = { 0x036B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_438)
{
    // 2E25 0061;	
    // (⸥) BOTTOM RIGHT HALF BRACKET	[036B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E25, 0x0061 };
    uint32_t const ces[9] = { 0x036B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_439)
{
    // 2E25 0041;	
    // (⸥) BOTTOM RIGHT HALF BRACKET	[036B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E25, 0x0041 };
    uint32_t const ces[9] = { 0x036B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_440)
{
    // 2E25 0062;	
    // (⸥) BOTTOM RIGHT HALF BRACKET	[036B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E25, 0x0062 };
    uint32_t const ces[9] = { 0x036B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_441)
{
    // 2E26 0021;	
    // (⸦) LEFT SIDEWAYS U BRACKET	[036C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E26, 0x0021 };
    uint32_t const ces[9] = { 0x036C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_442)
{
    // 2E26 003F;	
    // (⸦) LEFT SIDEWAYS U BRACKET	[036C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E26, 0x003F };
    uint32_t const ces[9] = { 0x036C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_443)
{
    // 2E26 0061;	
    // (⸦) LEFT SIDEWAYS U BRACKET	[036C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E26, 0x0061 };
    uint32_t const ces[9] = { 0x036C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_444)
{
    // 2E26 0041;	
    // (⸦) LEFT SIDEWAYS U BRACKET	[036C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E26, 0x0041 };
    uint32_t const ces[9] = { 0x036C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_445)
{
    // 2E26 0062;	
    // (⸦) LEFT SIDEWAYS U BRACKET	[036C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E26, 0x0062 };
    uint32_t const ces[9] = { 0x036C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_446)
{
    // 2E27 0021;	
    // (⸧) RIGHT SIDEWAYS U BRACKET	[036D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E27, 0x0021 };
    uint32_t const ces[9] = { 0x036D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_447)
{
    // 2E27 003F;	
    // (⸧) RIGHT SIDEWAYS U BRACKET	[036D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E27, 0x003F };
    uint32_t const ces[9] = { 0x036D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_448)
{
    // 2E27 0061;	
    // (⸧) RIGHT SIDEWAYS U BRACKET	[036D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E27, 0x0061 };
    uint32_t const ces[9] = { 0x036D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_449)
{
    // 2E27 0041;	
    // (⸧) RIGHT SIDEWAYS U BRACKET	[036D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E27, 0x0041 };
    uint32_t const ces[9] = { 0x036D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_450)
{
    // 2E27 0062;	
    // (⸧) RIGHT SIDEWAYS U BRACKET	[036D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E27, 0x0062 };
    uint32_t const ces[9] = { 0x036D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_451)
{
    // 2E28 0021;	
    // (⸨) LEFT DOUBLE PARENTHESIS	[036E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E28, 0x0021 };
    uint32_t const ces[9] = { 0x036E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_452)
{
    // 2E28 003F;	
    // (⸨) LEFT DOUBLE PARENTHESIS	[036E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E28, 0x003F };
    uint32_t const ces[9] = { 0x036E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_453)
{
    // 2E28 0061;	
    // (⸨) LEFT DOUBLE PARENTHESIS	[036E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E28, 0x0061 };
    uint32_t const ces[9] = { 0x036E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_454)
{
    // 2E28 0041;	
    // (⸨) LEFT DOUBLE PARENTHESIS	[036E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E28, 0x0041 };
    uint32_t const ces[9] = { 0x036E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_455)
{
    // 2E28 0062;	
    // (⸨) LEFT DOUBLE PARENTHESIS	[036E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E28, 0x0062 };
    uint32_t const ces[9] = { 0x036E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_456)
{
    // 2E29 0021;	
    // (⸩) RIGHT DOUBLE PARENTHESIS	[036F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E29, 0x0021 };
    uint32_t const ces[9] = { 0x036F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_457)
{
    // 2E29 003F;	
    // (⸩) RIGHT DOUBLE PARENTHESIS	[036F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E29, 0x003F };
    uint32_t const ces[9] = { 0x036F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_458)
{
    // 2E29 0061;	
    // (⸩) RIGHT DOUBLE PARENTHESIS	[036F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E29, 0x0061 };
    uint32_t const ces[9] = { 0x036F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_459)
{
    // 2E29 0041;	
    // (⸩) RIGHT DOUBLE PARENTHESIS	[036F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2E29, 0x0041 };
    uint32_t const ces[9] = { 0x036F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_460)
{
    // 2E29 0062;	
    // (⸩) RIGHT DOUBLE PARENTHESIS	[036F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2E29, 0x0062 };
    uint32_t const ces[9] = { 0x036F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_461)
{
    // 2329 0021;	
    // (〈) LEFT-POINTING ANGLE BRACKET	[0370 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2329, 0x0021 };
    uint32_t const ces[9] = { 0x0370, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_462)
{
    // 3008 0021;	
    // (〈) LEFT ANGLE BRACKET	[0370 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3008, 0x0021 };
    uint32_t const ces[9] = { 0x0370, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_463)
{
    // FE3F 0021;	
    // (︿) PRESENTATION FORM FOR VERTICAL LEFT ANGLE BRACKET	[0370 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3F, 0x0021 };
    uint32_t const ces[9] = { 0x0370, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_464)
{
    // 2329 003F;	
    // (〈) LEFT-POINTING ANGLE BRACKET	[0370 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2329, 0x003F };
    uint32_t const ces[9] = { 0x0370, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_465)
{
    // 3008 003F;	
    // (〈) LEFT ANGLE BRACKET	[0370 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3008, 0x003F };
    uint32_t const ces[9] = { 0x0370, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_466)
{
    // FE3F 003F;	
    // (︿) PRESENTATION FORM FOR VERTICAL LEFT ANGLE BRACKET	[0370 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3F, 0x003F };
    uint32_t const ces[9] = { 0x0370, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_467)
{
    // 2329 0061;	
    // (〈) LEFT-POINTING ANGLE BRACKET	[0370 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2329, 0x0061 };
    uint32_t const ces[9] = { 0x0370, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_468)
{
    // 3008 0061;	
    // (〈) LEFT ANGLE BRACKET	[0370 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3008, 0x0061 };
    uint32_t const ces[9] = { 0x0370, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_469)
{
    // 2329 0041;	
    // (〈) LEFT-POINTING ANGLE BRACKET	[0370 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2329, 0x0041 };
    uint32_t const ces[9] = { 0x0370, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_470)
{
    // 3008 0041;	
    // (〈) LEFT ANGLE BRACKET	[0370 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3008, 0x0041 };
    uint32_t const ces[9] = { 0x0370, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_471)
{
    // FE3F 0061;	
    // (︿) PRESENTATION FORM FOR VERTICAL LEFT ANGLE BRACKET	[0370 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3F, 0x0061 };
    uint32_t const ces[9] = { 0x0370, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_472)
{
    // FE3F 0041;	
    // (︿) PRESENTATION FORM FOR VERTICAL LEFT ANGLE BRACKET	[0370 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE3F, 0x0041 };
    uint32_t const ces[9] = { 0x0370, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_473)
{
    // 2329 0062;	
    // (〈) LEFT-POINTING ANGLE BRACKET	[0370 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2329, 0x0062 };
    uint32_t const ces[9] = { 0x0370, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_474)
{
    // 3008 0062;	
    // (〈) LEFT ANGLE BRACKET	[0370 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3008, 0x0062 };
    uint32_t const ces[9] = { 0x0370, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_475)
{
    // FE3F 0062;	
    // (︿) PRESENTATION FORM FOR VERTICAL LEFT ANGLE BRACKET	[0370 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3F, 0x0062 };
    uint32_t const ces[9] = { 0x0370, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_476)
{
    // 232A 0021;	
    // (〉) RIGHT-POINTING ANGLE BRACKET	[0371 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x232A, 0x0021 };
    uint32_t const ces[9] = { 0x0371, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_477)
{
    // 3009 0021;	
    // (〉) RIGHT ANGLE BRACKET	[0371 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3009, 0x0021 };
    uint32_t const ces[9] = { 0x0371, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_478)
{
    // FE40 0021;	
    // (﹀) PRESENTATION FORM FOR VERTICAL RIGHT ANGLE BRACKET	[0371 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE40, 0x0021 };
    uint32_t const ces[9] = { 0x0371, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_479)
{
    // 232A 003F;	
    // (〉) RIGHT-POINTING ANGLE BRACKET	[0371 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x232A, 0x003F };
    uint32_t const ces[9] = { 0x0371, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_480)
{
    // 3009 003F;	
    // (〉) RIGHT ANGLE BRACKET	[0371 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3009, 0x003F };
    uint32_t const ces[9] = { 0x0371, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_481)
{
    // FE40 003F;	
    // (﹀) PRESENTATION FORM FOR VERTICAL RIGHT ANGLE BRACKET	[0371 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE40, 0x003F };
    uint32_t const ces[9] = { 0x0371, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_482)
{
    // 232A 0061;	
    // (〉) RIGHT-POINTING ANGLE BRACKET	[0371 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x232A, 0x0061 };
    uint32_t const ces[9] = { 0x0371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_483)
{
    // 3009 0061;	
    // (〉) RIGHT ANGLE BRACKET	[0371 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3009, 0x0061 };
    uint32_t const ces[9] = { 0x0371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_484)
{
    // 232A 0041;	
    // (〉) RIGHT-POINTING ANGLE BRACKET	[0371 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x232A, 0x0041 };
    uint32_t const ces[9] = { 0x0371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_485)
{
    // 3009 0041;	
    // (〉) RIGHT ANGLE BRACKET	[0371 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x3009, 0x0041 };
    uint32_t const ces[9] = { 0x0371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_486)
{
    // FE40 0061;	
    // (﹀) PRESENTATION FORM FOR VERTICAL RIGHT ANGLE BRACKET	[0371 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE40, 0x0061 };
    uint32_t const ces[9] = { 0x0371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_487)
{
    // FE40 0041;	
    // (﹀) PRESENTATION FORM FOR VERTICAL RIGHT ANGLE BRACKET	[0371 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE40, 0x0041 };
    uint32_t const ces[9] = { 0x0371, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_488)
{
    // 232A 0062;	
    // (〉) RIGHT-POINTING ANGLE BRACKET	[0371 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x232A, 0x0062 };
    uint32_t const ces[9] = { 0x0371, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_489)
{
    // 3009 0062;	
    // (〉) RIGHT ANGLE BRACKET	[0371 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x3009, 0x0062 };
    uint32_t const ces[9] = { 0x0371, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_490)
{
    // FE40 0062;	
    // (﹀) PRESENTATION FORM FOR VERTICAL RIGHT ANGLE BRACKET	[0371 1CC6 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE40, 0x0062 };
    uint32_t const ces[9] = { 0x0371, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_491)
{
    // 300A 0021;	
    // (《) LEFT DOUBLE ANGLE BRACKET	[0372 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300A, 0x0021 };
    uint32_t const ces[9] = { 0x0372, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_492)
{
    // FE3D 0021;	
    // (︽) PRESENTATION FORM FOR VERTICAL LEFT DOUBLE ANGLE BRACKET	[0372 0261 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3D, 0x0021 };
    uint32_t const ces[9] = { 0x0372, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_493)
{
    // 300A 003F;	
    // (《) LEFT DOUBLE ANGLE BRACKET	[0372 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300A, 0x003F };
    uint32_t const ces[9] = { 0x0372, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_494)
{
    // FE3D 003F;	
    // (︽) PRESENTATION FORM FOR VERTICAL LEFT DOUBLE ANGLE BRACKET	[0372 0267 | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3D, 0x003F };
    uint32_t const ces[9] = { 0x0372, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_495)
{
    // 300A 0061;	
    // (《) LEFT DOUBLE ANGLE BRACKET	[0372 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300A, 0x0061 };
    uint32_t const ces[9] = { 0x0372, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_496)
{
    // 300A 0041;	
    // (《) LEFT DOUBLE ANGLE BRACKET	[0372 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x300A, 0x0041 };
    uint32_t const ces[9] = { 0x0372, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_497)
{
    // FE3D 0061;	
    // (︽) PRESENTATION FORM FOR VERTICAL LEFT DOUBLE ANGLE BRACKET	[0372 1CAD | 0020 0020 | 0016 0002 |]

    uint32_t cps[2] = { 0xFE3D, 0x0061 };
    uint32_t const ces[9] = { 0x0372, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_498)
{
    // FE3D 0041;	
    // (︽) PRESENTATION FORM FOR VERTICAL LEFT DOUBLE ANGLE BRACKET	[0372 1CAD | 0020 0020 | 0016 0008 |]

    uint32_t cps[2] = { 0xFE3D, 0x0041 };
    uint32_t const ces[9] = { 0x0372, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0016, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_013_499)
{
    // 300A 0062;	
    // (《) LEFT DOUBLE ANGLE BRACKET	[0372 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x300A, 0x0062 };
    uint32_t const ces[9] = { 0x0372, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

