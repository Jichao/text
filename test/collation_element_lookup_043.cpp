// Warning! This file is autogenerated.
#include <boost/text/collation_data.hpp>

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, table_lookup_043_000)
{
    // 19FC  ; [*0583.0020.0002] 
    // KHMER SYMBOL DAP-PII ROC

    uint32_t const cps[1] = { 0x19fc };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x583), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_001)
{
    // 19FD  ; [*0584.0020.0002] 
    // KHMER SYMBOL DAP-BEI ROC

    uint32_t const cps[1] = { 0x19fd };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x584), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_002)
{
    // 19FE  ; [*0585.0020.0002] 
    // KHMER SYMBOL DAP-BUON ROC

    uint32_t const cps[1] = { 0x19fe };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x585), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_003)
{
    // 19FF  ; [*0586.0020.0002] 
    // KHMER SYMBOL DAP-PRAM ROC

    uint32_t const cps[1] = { 0x19ff };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x586), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_004)
{
    // 1A00  ; [.30CC.0020.0002] 
    // BUGINESE LETTER KA

    uint32_t const cps[1] = { 0x1a00 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30cc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_005)
{
    // 1A01  ; [.30CD.0020.0002] 
    // BUGINESE LETTER GA

    uint32_t const cps[1] = { 0x1a01 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30cd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_006)
{
    // 1A02  ; [.30CE.0020.0002] 
    // BUGINESE LETTER NGA

    uint32_t const cps[1] = { 0x1a02 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30ce), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_007)
{
    // 1A03  ; [.30CF.0020.0002] 
    // BUGINESE LETTER NGKA

    uint32_t const cps[1] = { 0x1a03 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30cf), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_008)
{
    // 1A04  ; [.30D0.0020.0002] 
    // BUGINESE LETTER PA

    uint32_t const cps[1] = { 0x1a04 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30d0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_009)
{
    // 1A05  ; [.30D1.0020.0002] 
    // BUGINESE LETTER BA

    uint32_t const cps[1] = { 0x1a05 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30d1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_010)
{
    // 1A06  ; [.30D2.0020.0002] 
    // BUGINESE LETTER MA

    uint32_t const cps[1] = { 0x1a06 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30d2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_011)
{
    // 1A07  ; [.30D3.0020.0002] 
    // BUGINESE LETTER MPA

    uint32_t const cps[1] = { 0x1a07 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30d3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_012)
{
    // 1A08  ; [.30D4.0020.0002] 
    // BUGINESE LETTER TA

    uint32_t const cps[1] = { 0x1a08 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30d4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_013)
{
    // 1A09  ; [.30D5.0020.0002] 
    // BUGINESE LETTER DA

    uint32_t const cps[1] = { 0x1a09 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30d5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_014)
{
    // 1A0A  ; [.30D6.0020.0002] 
    // BUGINESE LETTER NA

    uint32_t const cps[1] = { 0x1a0a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30d6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_015)
{
    // 1A0B  ; [.30D7.0020.0002] 
    // BUGINESE LETTER NRA

    uint32_t const cps[1] = { 0x1a0b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30d7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_016)
{
    // 1A0C  ; [.30D8.0020.0002] 
    // BUGINESE LETTER CA

    uint32_t const cps[1] = { 0x1a0c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30d8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_017)
{
    // 1A0D  ; [.30D9.0020.0002] 
    // BUGINESE LETTER JA

    uint32_t const cps[1] = { 0x1a0d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30d9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_018)
{
    // 1A0E  ; [.30DA.0020.0002] 
    // BUGINESE LETTER NYA

    uint32_t const cps[1] = { 0x1a0e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30da), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_019)
{
    // 1A0F  ; [.30DB.0020.0002] 
    // BUGINESE LETTER NYCA

    uint32_t const cps[1] = { 0x1a0f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30db), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_020)
{
    // 1A10  ; [.30DC.0020.0002] 
    // BUGINESE LETTER YA

    uint32_t const cps[1] = { 0x1a10 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_021)
{
    // 1A11  ; [.30DD.0020.0002] 
    // BUGINESE LETTER RA

    uint32_t const cps[1] = { 0x1a11 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_022)
{
    // 1A12  ; [.30DE.0020.0002] 
    // BUGINESE LETTER LA

    uint32_t const cps[1] = { 0x1a12 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30de), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_023)
{
    // 1A13  ; [.30DF.0020.0002] 
    // BUGINESE LETTER VA

    uint32_t const cps[1] = { 0x1a13 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30df), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_024)
{
    // 1A14  ; [.30E0.0020.0002] 
    // BUGINESE LETTER SA

    uint32_t const cps[1] = { 0x1a14 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30e0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_025)
{
    // 1A15  ; [.30E1.0020.0002] 
    // BUGINESE LETTER A

    uint32_t const cps[1] = { 0x1a15 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30e1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_026)
{
    // 1A16  ; [.30E2.0020.0002] 
    // BUGINESE LETTER HA

    uint32_t const cps[1] = { 0x1a16 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30e2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_027)
{
    // 1A17  ; [.30E3.0020.0002] 
    // BUGINESE VOWEL SIGN I

    uint32_t const cps[1] = { 0x1a17 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30e3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_028)
{
    // 1A18  ; [.30E4.0020.0002] 
    // BUGINESE VOWEL SIGN U

    uint32_t const cps[1] = { 0x1a18 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30e4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_029)
{
    // 1A19  ; [.30E5.0020.0002] 
    // BUGINESE VOWEL SIGN E

    uint32_t const cps[1] = { 0x1a19 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_030)
{
    // 1A1A  ; [.30E6.0020.0002] 
    // BUGINESE VOWEL SIGN O

    uint32_t const cps[1] = { 0x1a1a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30e6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_031)
{
    // 1A1B  ; [.30E7.0020.0002] 
    // BUGINESE VOWEL SIGN AE

    uint32_t const cps[1] = { 0x1a1b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x30e7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_032)
{
    // 1A1E  ; [*02CA.0020.0002] 
    // BUGINESE PALLAWA

    uint32_t const cps[1] = { 0x1a1e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2ca), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_033)
{
    // 1A1F  ; [*02CB.0020.0002] 
    // BUGINESE END OF SECTION

    uint32_t const cps[1] = { 0x1a1f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x2cb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_034)
{
    // 1A20  ; [.32DC.0020.0002] 
    // TAI THAM LETTER HIGH KA

    uint32_t const cps[1] = { 0x1a20 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32dc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_035)
{
    // 1A21  ; [.32DD.0020.0002] 
    // TAI THAM LETTER HIGH KHA

    uint32_t const cps[1] = { 0x1a21 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32dd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_036)
{
    // 1A22  ; [.32DE.0020.0002] 
    // TAI THAM LETTER HIGH KXA

    uint32_t const cps[1] = { 0x1a22 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32de), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_037)
{
    // 1A23  ; [.32DF.0020.0002] 
    // TAI THAM LETTER LOW KA

    uint32_t const cps[1] = { 0x1a23 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32df), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_038)
{
    // 1A24  ; [.32E0.0020.0002] 
    // TAI THAM LETTER LOW KXA

    uint32_t const cps[1] = { 0x1a24 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32e0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_039)
{
    // 1A25  ; [.32E1.0020.0002] 
    // TAI THAM LETTER LOW KHA

    uint32_t const cps[1] = { 0x1a25 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32e1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_040)
{
    // 1A26  ; [.32E2.0020.0002] 
    // TAI THAM LETTER NGA

    uint32_t const cps[1] = { 0x1a26 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32e2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_041)
{
    // 1A27  ; [.32E3.0020.0002] 
    // TAI THAM LETTER HIGH CA

    uint32_t const cps[1] = { 0x1a27 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32e3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_042)
{
    // 1A28  ; [.32E4.0020.0002] 
    // TAI THAM LETTER HIGH CHA

    uint32_t const cps[1] = { 0x1a28 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32e4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_043)
{
    // 1A29  ; [.32E5.0020.0002] 
    // TAI THAM LETTER LOW CA

    uint32_t const cps[1] = { 0x1a29 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32e5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_044)
{
    // 1A2A  ; [.32E6.0020.0002] 
    // TAI THAM LETTER LOW SA

    uint32_t const cps[1] = { 0x1a2a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32e6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_045)
{
    // 1A2B  ; [.32E7.0020.0002] 
    // TAI THAM LETTER LOW CHA

    uint32_t const cps[1] = { 0x1a2b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32e7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_046)
{
    // 1A2C  ; [.32E8.0020.0002] 
    // TAI THAM LETTER NYA

    uint32_t const cps[1] = { 0x1a2c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32e8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_047)
{
    // 1A2D  ; [.32E9.0020.0002] 
    // TAI THAM LETTER RATA

    uint32_t const cps[1] = { 0x1a2d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32e9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_048)
{
    // 1A2E  ; [.32EA.0020.0002] 
    // TAI THAM LETTER HIGH RATHA

    uint32_t const cps[1] = { 0x1a2e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32ea), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_049)
{
    // 1A2F  ; [.32EB.0020.0002] 
    // TAI THAM LETTER DA

    uint32_t const cps[1] = { 0x1a2f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32eb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_050)
{
    // 1A30  ; [.32EC.0020.0002] 
    // TAI THAM LETTER LOW RATHA

    uint32_t const cps[1] = { 0x1a30 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32ec), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_051)
{
    // 1A31  ; [.32ED.0020.0002] 
    // TAI THAM LETTER RANA

    uint32_t const cps[1] = { 0x1a31 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32ed), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_052)
{
    // 1A32  ; [.32EE.0020.0002] 
    // TAI THAM LETTER HIGH TA

    uint32_t const cps[1] = { 0x1a32 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32ee), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_053)
{
    // 1A33  ; [.32EF.0020.0002] 
    // TAI THAM LETTER HIGH THA

    uint32_t const cps[1] = { 0x1a33 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32ef), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_054)
{
    // 1A34  ; [.32F0.0020.0002] 
    // TAI THAM LETTER LOW TA

    uint32_t const cps[1] = { 0x1a34 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32f0), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_055)
{
    // 1A35  ; [.32F1.0020.0002] 
    // TAI THAM LETTER LOW THA

    uint32_t const cps[1] = { 0x1a35 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32f1), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_056)
{
    // 1A36  ; [.32F2.0020.0002] 
    // TAI THAM LETTER NA

    uint32_t const cps[1] = { 0x1a36 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32f2), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_057)
{
    // 1A37  ; [.32F3.0020.0002] 
    // TAI THAM LETTER BA

    uint32_t const cps[1] = { 0x1a37 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32f3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_058)
{
    // 1A38  ; [.32F4.0020.0002] 
    // TAI THAM LETTER HIGH PA

    uint32_t const cps[1] = { 0x1a38 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32f4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_059)
{
    // 1A39  ; [.32F5.0020.0002] 
    // TAI THAM LETTER HIGH PHA

    uint32_t const cps[1] = { 0x1a39 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32f5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_060)
{
    // 1A3A  ; [.32F6.0020.0002] 
    // TAI THAM LETTER HIGH FA

    uint32_t const cps[1] = { 0x1a3a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32f6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_061)
{
    // 1A3B  ; [.32F7.0020.0002] 
    // TAI THAM LETTER LOW PA

    uint32_t const cps[1] = { 0x1a3b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32f7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_062)
{
    // 1A3C  ; [.32F8.0020.0002] 
    // TAI THAM LETTER LOW FA

    uint32_t const cps[1] = { 0x1a3c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32f8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_063)
{
    // 1A3D  ; [.32F9.0020.0002] 
    // TAI THAM LETTER LOW PHA

    uint32_t const cps[1] = { 0x1a3d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32f9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_064)
{
    // 1A3E  ; [.32FA.0020.0002] 
    // TAI THAM LETTER MA

    uint32_t const cps[1] = { 0x1a3e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32fa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_065)
{
    // 1A3F  ; [.32FB.0020.0002] 
    // TAI THAM LETTER LOW YA

    uint32_t const cps[1] = { 0x1a3f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32fb), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_066)
{
    // 1A40  ; [.32FC.0020.0002] 
    // TAI THAM LETTER HIGH YA

    uint32_t const cps[1] = { 0x1a40 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32fc), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_067)
{
    // 1A41  ; [.32FD.0020.0002] 
    // TAI THAM LETTER RA

    uint32_t const cps[1] = { 0x1a41 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32fd), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_068)
{
    // 1A42  ; [.32FE.0020.0002] 
    // TAI THAM LETTER RUE

    uint32_t const cps[1] = { 0x1a42 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32fe), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_069)
{
    // 1A43  ; [.32FF.0020.0002] 
    // TAI THAM LETTER LA

    uint32_t const cps[1] = { 0x1a43 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32ff), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_070)
{
    // 1A44  ; [.3300.0020.0002] 
    // TAI THAM LETTER LUE

    uint32_t const cps[1] = { 0x1a44 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3300), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_071)
{
    // 1A45  ; [.3301.0020.0002] 
    // TAI THAM LETTER WA

    uint32_t const cps[1] = { 0x1a45 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3301), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_072)
{
    // 1A46  ; [.3302.0020.0002] 
    // TAI THAM LETTER HIGH SHA

    uint32_t const cps[1] = { 0x1a46 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3302), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_073)
{
    // 1A47  ; [.3303.0020.0002] 
    // TAI THAM LETTER HIGH SSA

    uint32_t const cps[1] = { 0x1a47 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3303), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_074)
{
    // 1A48  ; [.3304.0020.0002] 
    // TAI THAM LETTER HIGH SA

    uint32_t const cps[1] = { 0x1a48 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3304), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_075)
{
    // 1A49  ; [.3305.0020.0002] 
    // TAI THAM LETTER HIGH HA

    uint32_t const cps[1] = { 0x1a49 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3305), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_076)
{
    // 1A4A  ; [.3306.0020.0002] 
    // TAI THAM LETTER LLA

    uint32_t const cps[1] = { 0x1a4a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3306), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_077)
{
    // 1A4B  ; [.3307.0020.0002] 
    // TAI THAM LETTER A

    uint32_t const cps[1] = { 0x1a4b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3307), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_078)
{
    // 1A4C  ; [.3308.0020.0002] 
    // TAI THAM LETTER LOW HA

    uint32_t const cps[1] = { 0x1a4c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3308), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_079)
{
    // 1A4D  ; [.3311.0020.0002] 
    // TAI THAM LETTER I

    uint32_t const cps[1] = { 0x1a4d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3311), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_080)
{
    // 1A4E  ; [.3312.0020.0002] 
    // TAI THAM LETTER II

    uint32_t const cps[1] = { 0x1a4e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3312), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_081)
{
    // 1A4F  ; [.3313.0020.0002] 
    // TAI THAM LETTER U

    uint32_t const cps[1] = { 0x1a4f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3313), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_082)
{
    // 1A50  ; [.3314.0020.0002] 
    // TAI THAM LETTER UU

    uint32_t const cps[1] = { 0x1a50 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3314), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_083)
{
    // 1A51  ; [.3315.0020.0002] 
    // TAI THAM LETTER EE

    uint32_t const cps[1] = { 0x1a51 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3315), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_084)
{
    // 1A52  ; [.3316.0020.0002] 
    // TAI THAM LETTER OO

    uint32_t const cps[1] = { 0x1a52 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3316), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_085)
{
    // 1A53  ; [.3309.0020.0002] 
    // TAI THAM LETTER LAE

    uint32_t const cps[1] = { 0x1a53 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3309), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_086)
{
    // 1A54  ; [.3302.0020.0004][.3328.0020.0004][.3302.0020.0004] 
    // TAI THAM LETTER GREAT SA

    uint32_t const cps[1] = { 0x1a54 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[3] = { {uint16_t(0x3302), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3328), uint8_t(0x0), uint8_t(0x4)}, {uint16_t(0x3302), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 3));
}

TEST(collation, table_lookup_043_087)
{
    // 1A55  ; [.330B.0020.0002] 
    // TAI THAM CONSONANT SIGN MEDIAL RA

    uint32_t const cps[1] = { 0x1a55 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x330b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_088)
{
    // 1A56  ; [.330C.0020.0002] 
    // TAI THAM CONSONANT SIGN MEDIAL LA

    uint32_t const cps[1] = { 0x1a56 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x330c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_089)
{
    // 1A57  ; [.330D.0020.0002] 
    // TAI THAM CONSONANT SIGN LA TANG LAI

    uint32_t const cps[1] = { 0x1a57 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x330d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_090)
{
    // 1A58  ; [.32E2.0020.0004] 
    // TAI THAM SIGN MAI KANG LAI

    uint32_t const cps[1] = { 0x1a58 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32e2), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_091)
{
    // 1A59  ; [.32E2.0020.0004] 
    // TAI THAM CONSONANT SIGN FINAL NGA

    uint32_t const cps[1] = { 0x1a59 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32e2), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_092)
{
    // 1A5A  ; [.32F7.0020.0004] 
    // TAI THAM CONSONANT SIGN LOW PA

    uint32_t const cps[1] = { 0x1a5a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32f7), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_093)
{
    // 1A5B  ; [.32F7.0020.0004] 
    // TAI THAM CONSONANT SIGN HIGH RATHA OR LOW PA

    uint32_t const cps[1] = { 0x1a5b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x32f7), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_094)
{
    // 1A5C  ; [.330E.0020.0002] 
    // TAI THAM CONSONANT SIGN MA

    uint32_t const cps[1] = { 0x1a5c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x330e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_095)
{
    // 1A5D  ; [.330F.0020.0002] 
    // TAI THAM CONSONANT SIGN BA

    uint32_t const cps[1] = { 0x1a5d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x330f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_096)
{
    // 1A5E  ; [.3310.0020.0002] 
    // TAI THAM CONSONANT SIGN SA

    uint32_t const cps[1] = { 0x1a5e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3310), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_097)
{
    // 1A60  ; [.3328.0020.0002] 
    // TAI THAM SIGN SAKOT

    uint32_t const cps[1] = { 0x1a60 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3328), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_098)
{
    // 1A61  ; [.3317.0020.0002] 
    // TAI THAM VOWEL SIGN A

    uint32_t const cps[1] = { 0x1a61 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3317), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_099)
{
    // 1A62  ; [.3319.0020.0002] 
    // TAI THAM VOWEL SIGN MAI SAT

    uint32_t const cps[1] = { 0x1a62 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3319), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_100)
{
    // 1A63  ; [.331A.0020.0002] 
    // TAI THAM VOWEL SIGN AA

    uint32_t const cps[1] = { 0x1a63 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x331a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_101)
{
    // 1A64  ; [.331A.0020.0004] 
    // TAI THAM VOWEL SIGN TALL AA

    uint32_t const cps[1] = { 0x1a64 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x331a), uint8_t(0x0), uint8_t(0x4)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_102)
{
    // 1A65  ; [.331B.0020.0002] 
    // TAI THAM VOWEL SIGN I

    uint32_t const cps[1] = { 0x1a65 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x331b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_103)
{
    // 1A66  ; [.331C.0020.0002] 
    // TAI THAM VOWEL SIGN II

    uint32_t const cps[1] = { 0x1a66 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x331c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_104)
{
    // 1A67  ; [.331D.0020.0002] 
    // TAI THAM VOWEL SIGN UE

    uint32_t const cps[1] = { 0x1a67 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x331d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_105)
{
    // 1A68  ; [.331E.0020.0002] 
    // TAI THAM VOWEL SIGN UUE

    uint32_t const cps[1] = { 0x1a68 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x331e), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_106)
{
    // 1A69  ; [.331F.0020.0002] 
    // TAI THAM VOWEL SIGN U

    uint32_t const cps[1] = { 0x1a69 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x331f), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_107)
{
    // 1A6A  ; [.3320.0020.0002] 
    // TAI THAM VOWEL SIGN UU

    uint32_t const cps[1] = { 0x1a6a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3320), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_108)
{
    // 1A6B  ; [.330A.0020.0002] 
    // TAI THAM VOWEL SIGN O

    uint32_t const cps[1] = { 0x1a6b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x330a), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_109)
{
    // 1A6C  ; [.3318.0020.0002] 
    // TAI THAM VOWEL SIGN OA BELOW

    uint32_t const cps[1] = { 0x1a6c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3318), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_110)
{
    // 1A6D  ; [.3327.0020.0002] 
    // TAI THAM VOWEL SIGN OY

    uint32_t const cps[1] = { 0x1a6d };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3327), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_111)
{
    // 1A6E  ; [.3321.0020.0002] 
    // TAI THAM VOWEL SIGN E

    uint32_t const cps[1] = { 0x1a6e };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3321), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_112)
{
    // 1A6F  ; [.3322.0020.0002] 
    // TAI THAM VOWEL SIGN AE

    uint32_t const cps[1] = { 0x1a6f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3322), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_113)
{
    // 1A70  ; [.3324.0020.0002] 
    // TAI THAM VOWEL SIGN OO

    uint32_t const cps[1] = { 0x1a70 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3324), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_114)
{
    // 1A71  ; [.3325.0020.0002] 
    // TAI THAM VOWEL SIGN AI

    uint32_t const cps[1] = { 0x1a71 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3325), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_115)
{
    // 1A72  ; [.3326.0020.0002] 
    // TAI THAM VOWEL SIGN THAM AI

    uint32_t const cps[1] = { 0x1a72 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3326), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_116)
{
    // 1A73  ; [.3323.0020.0002] 
    // TAI THAM VOWEL SIGN OA ABOVE

    uint32_t const cps[1] = { 0x1a73 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x3323), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_117)
{
    // 1A74  ; [.0000.00C4.0002] 
    // TAI THAM SIGN MAI KANG

    uint32_t const cps[1] = { 0x1a74 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xa4), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_118)
{
    // 1A75  ; [.0000.00EA.0002] 
    // TAI THAM SIGN TONE-1

    uint32_t const cps[1] = { 0x1a75 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xca), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_119)
{
    // 1A76  ; [.0000.00EB.0002] 
    // TAI THAM SIGN TONE-2

    uint32_t const cps[1] = { 0x1a76 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xcb), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_120)
{
    // 1A77  ; [.0000.00EC.0002] 
    // TAI THAM SIGN KHUEN TONE-3

    uint32_t const cps[1] = { 0x1a77 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xcc), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_121)
{
    // 1A78  ; [.0000.00ED.0002] 
    // TAI THAM SIGN KHUEN TONE-4

    uint32_t const cps[1] = { 0x1a78 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xcd), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_122)
{
    // 1A79  ; [.0000.00EE.0002] 
    // TAI THAM SIGN KHUEN TONE-5

    uint32_t const cps[1] = { 0x1a79 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xce), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_123)
{
    // 1A7A  ; [.0000.00EF.0002] 
    // TAI THAM SIGN RA HAAM

    uint32_t const cps[1] = { 0x1a7a };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xcf), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_124)
{
    // 1A7B  ; [.0000.00F0.0002] 
    // TAI THAM SIGN MAI SAM

    uint32_t const cps[1] = { 0x1a7b };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xd0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_125)
{
    // 1A7C  ; [.0000.00F1.0002] 
    // TAI THAM SIGN KHUEN-LUE KARAN

    uint32_t const cps[1] = { 0x1a7c };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xd1), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_126)
{
    // 1A7F  ; [.0000.0000.0000] 
    // TAI THAM COMBINING CRYPTOGRAMMIC DOT

    uint32_t const cps[1] = { 0x1a7f };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x0), uint8_t(0xe0), uint8_t(0x0)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_127)
{
    // 1A80  ; [.1CA3.0020.0002] 
    // TAI THAM HORA DIGIT ZERO

    uint32_t const cps[1] = { 0x1a80 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_128)
{
    // 1A81  ; [.1CA4.0020.0002] 
    // TAI THAM HORA DIGIT ONE

    uint32_t const cps[1] = { 0x1a81 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_129)
{
    // 1A82  ; [.1CA5.0020.0002] 
    // TAI THAM HORA DIGIT TWO

    uint32_t const cps[1] = { 0x1a82 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_130)
{
    // 1A83  ; [.1CA6.0020.0002] 
    // TAI THAM HORA DIGIT THREE

    uint32_t const cps[1] = { 0x1a83 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_131)
{
    // 1A84  ; [.1CA7.0020.0002] 
    // TAI THAM HORA DIGIT FOUR

    uint32_t const cps[1] = { 0x1a84 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_132)
{
    // 1A85  ; [.1CA8.0020.0002] 
    // TAI THAM HORA DIGIT FIVE

    uint32_t const cps[1] = { 0x1a85 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_133)
{
    // 1A86  ; [.1CA9.0020.0002] 
    // TAI THAM HORA DIGIT SIX

    uint32_t const cps[1] = { 0x1a86 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_134)
{
    // 1A87  ; [.1CAA.0020.0002] 
    // TAI THAM HORA DIGIT SEVEN

    uint32_t const cps[1] = { 0x1a87 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_135)
{
    // 1A88  ; [.1CAB.0020.0002] 
    // TAI THAM HORA DIGIT EIGHT

    uint32_t const cps[1] = { 0x1a88 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_136)
{
    // 1A89  ; [.1CAC.0020.0002] 
    // TAI THAM HORA DIGIT NINE

    uint32_t const cps[1] = { 0x1a89 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_137)
{
    // 1A90  ; [.1CA3.0020.0002] 
    // TAI THAM THAM DIGIT ZERO

    uint32_t const cps[1] = { 0x1a90 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca3), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_138)
{
    // 1A91  ; [.1CA4.0020.0002] 
    // TAI THAM THAM DIGIT ONE

    uint32_t const cps[1] = { 0x1a91 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca4), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_139)
{
    // 1A92  ; [.1CA5.0020.0002] 
    // TAI THAM THAM DIGIT TWO

    uint32_t const cps[1] = { 0x1a92 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca5), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_140)
{
    // 1A93  ; [.1CA6.0020.0002] 
    // TAI THAM THAM DIGIT THREE

    uint32_t const cps[1] = { 0x1a93 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca6), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_141)
{
    // 1A94  ; [.1CA7.0020.0002] 
    // TAI THAM THAM DIGIT FOUR

    uint32_t const cps[1] = { 0x1a94 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca7), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_142)
{
    // 1A95  ; [.1CA8.0020.0002] 
    // TAI THAM THAM DIGIT FIVE

    uint32_t const cps[1] = { 0x1a95 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca8), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_143)
{
    // 1A96  ; [.1CA9.0020.0002] 
    // TAI THAM THAM DIGIT SIX

    uint32_t const cps[1] = { 0x1a96 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1ca9), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_144)
{
    // 1A97  ; [.1CAA.0020.0002] 
    // TAI THAM THAM DIGIT SEVEN

    uint32_t const cps[1] = { 0x1a97 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1caa), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_145)
{
    // 1A98  ; [.1CAB.0020.0002] 
    // TAI THAM THAM DIGIT EIGHT

    uint32_t const cps[1] = { 0x1a98 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cab), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_146)
{
    // 1A99  ; [.1CAC.0020.0002] 
    // TAI THAM THAM DIGIT NINE

    uint32_t const cps[1] = { 0x1a99 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x1cac), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_147)
{
    // 1AA0  ; [*042B.0020.0002] 
    // TAI THAM SIGN WIANG

    uint32_t const cps[1] = { 0x1aa0 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x42b), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_148)
{
    // 1AA1  ; [*042C.0020.0002] 
    // TAI THAM SIGN WIANGWAAK

    uint32_t const cps[1] = { 0x1aa1 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x42c), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

TEST(collation, table_lookup_043_149)
{
    // 1AA2  ; [*042D.0020.0002] 
    // TAI THAM SIGN SAWAN

    uint32_t const cps[1] = { 0x1aa2 };
    // biased L2 weight
    boost::text::compressed_collation_element const ces[1] = { {uint16_t(0x42d), uint8_t(0x0), uint8_t(0x2)} };

    auto const coll = boost::text::longest_collation(cps, cps + 1);

    EXPECT_TRUE(coll.node_.collation_elements_);
    EXPECT_EQ(coll.match_length_, 1);
    EXPECT_TRUE(boost::algorithm::equal(coll.node_.collation_elements_.begin(), coll.node_.collation_elements_.end(), ces, ces + 1));
}

