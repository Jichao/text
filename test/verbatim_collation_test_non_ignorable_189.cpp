// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_189_000)
{
    // 0E43 0001 0E1E 0061;	
    // (ใ'\u0001'พ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER PHO PHAN	[2E5D 2E3D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E1E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_001)
{
    // 0E43 0591 0E1E 0061;	
    // (ใ֑พ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER PHO PHAN	[2E5D 2E3D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E1E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_002)
{
    // 0E43 1D165 0E1E 0061;	
    // (ใ𝅥พ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER PHO PHAN	[2E5D 2E3D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E1E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_003)
{
    // 0E43 0001 0E1F 0061;	
    // (ใ'\u0001'ฟ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER FO FAN	[2E5D 2E3E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E1F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_004)
{
    // 0E43 0591 0E1F 0061;	
    // (ใ֑ฟ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER FO FAN	[2E5D 2E3E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E1F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_005)
{
    // 0E43 1D165 0E1F 0061;	
    // (ใ𝅥ฟ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER FO FAN	[2E5D 2E3E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E1F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_006)
{
    // 0E43 0001 0E20 0061;	
    // (ใ'\u0001'ภ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER PHO SAMPHAO	[2E5D 2E3F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E20, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_007)
{
    // 0E43 0591 0E20 0061;	
    // (ใ֑ภ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER PHO SAMPHAO	[2E5D 2E3F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E20, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_008)
{
    // 0E43 1D165 0E20 0061;	
    // (ใ𝅥ภ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER PHO SAMPHAO	[2E5D 2E3F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E20, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_009)
{
    // 0E43 0001 0E21 0061;	
    // (ใ'\u0001'ม) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER MO MA	[2E5D 2E40 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E21, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_010)
{
    // 0E43 0591 0E21 0061;	
    // (ใ֑ม) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER MO MA	[2E5D 2E40 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E21, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_011)
{
    // 0E43 1D165 0E21 0061;	
    // (ใ𝅥ม) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER MO MA	[2E5D 2E40 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E21, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_012)
{
    // 0E43 0001 0E22 0061;	
    // (ใ'\u0001'ย) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER YO YAK	[2E5D 2E41 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E22, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_013)
{
    // 0E43 0591 0E22 0061;	
    // (ใ֑ย) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER YO YAK	[2E5D 2E41 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E22, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_014)
{
    // 0E43 1D165 0E22 0061;	
    // (ใ𝅥ย) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER YO YAK	[2E5D 2E41 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E22, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_015)
{
    // 0E43 0001 0E23 0061;	
    // (ใ'\u0001'ร) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER RO RUA	[2E5D 2E42 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E23, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_016)
{
    // 0E43 0591 0E23 0061;	
    // (ใ֑ร) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER RO RUA	[2E5D 2E42 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E23, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_017)
{
    // 0E43 1D165 0E23 0061;	
    // (ใ𝅥ร) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER RO RUA	[2E5D 2E42 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E23, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_018)
{
    // 0E43 0001 0E24 0061;	
    // (ใ'\u0001'ฤ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER RU	[2E5D 2E43 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E24, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_019)
{
    // 0E43 0591 0E24 0061;	
    // (ใ֑ฤ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER RU	[2E5D 2E43 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E24, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_020)
{
    // 0E43 1D165 0E24 0061;	
    // (ใ𝅥ฤ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER RU	[2E5D 2E43 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E24, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_021)
{
    // 0E43 0001 0E25 0061;	
    // (ใ'\u0001'ล) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER LO LING	[2E5D 2E44 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E25, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_022)
{
    // 0E43 0591 0E25 0061;	
    // (ใ֑ล) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER LO LING	[2E5D 2E44 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E25, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_023)
{
    // 0E43 1D165 0E25 0061;	
    // (ใ𝅥ล) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER LO LING	[2E5D 2E44 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E25, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_024)
{
    // 0E43 0001 0E26 0061;	
    // (ใ'\u0001'ฦ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER LU	[2E5D 2E45 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E26, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_025)
{
    // 0E43 0591 0E26 0061;	
    // (ใ֑ฦ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER LU	[2E5D 2E45 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E26, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_026)
{
    // 0E43 1D165 0E26 0061;	
    // (ใ𝅥ฦ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER LU	[2E5D 2E45 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E26, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_027)
{
    // 0E43 0001 0E27 0061;	
    // (ใ'\u0001'ว) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER WO WAEN	[2E5D 2E46 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E27, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_028)
{
    // 0E43 0591 0E27 0061;	
    // (ใ֑ว) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER WO WAEN	[2E5D 2E46 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E27, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_029)
{
    // 0E43 1D165 0E27 0061;	
    // (ใ𝅥ว) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER WO WAEN	[2E5D 2E46 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E27, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_030)
{
    // 0E43 0001 0E28 0061;	
    // (ใ'\u0001'ศ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER SO SALA	[2E5D 2E47 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E28, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_031)
{
    // 0E43 0591 0E28 0061;	
    // (ใ֑ศ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER SO SALA	[2E5D 2E47 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E28, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_032)
{
    // 0E43 1D165 0E28 0061;	
    // (ใ𝅥ศ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER SO SALA	[2E5D 2E47 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E28, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_033)
{
    // 0E43 0001 0E29 0061;	
    // (ใ'\u0001'ษ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER SO RUSI	[2E5D 2E48 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E29, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_034)
{
    // 0E43 0591 0E29 0061;	
    // (ใ֑ษ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER SO RUSI	[2E5D 2E48 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E29, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_035)
{
    // 0E43 1D165 0E29 0061;	
    // (ใ𝅥ษ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER SO RUSI	[2E5D 2E48 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E29, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_036)
{
    // 0E43 0001 0E2A 0061;	
    // (ใ'\u0001'ส) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER SO SUA	[2E5D 2E49 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E2A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_037)
{
    // 0E43 0591 0E2A 0061;	
    // (ใ֑ส) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER SO SUA	[2E5D 2E49 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E2A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_038)
{
    // 0E43 1D165 0E2A 0061;	
    // (ใ𝅥ส) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER SO SUA	[2E5D 2E49 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E2A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_039)
{
    // 0E43 0001 0E2B 0061;	
    // (ใ'\u0001'ห) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER HO HIP	[2E5D 2E4A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E2B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_040)
{
    // 0E43 0591 0E2B 0061;	
    // (ใ֑ห) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER HO HIP	[2E5D 2E4A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E2B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_041)
{
    // 0E43 1D165 0E2B 0061;	
    // (ใ𝅥ห) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER HO HIP	[2E5D 2E4A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E2B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_042)
{
    // 0E43 0001 0E2C 0061;	
    // (ใ'\u0001'ฬ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER LO CHULA	[2E5D 2E4B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E2C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_043)
{
    // 0E43 0591 0E2C 0061;	
    // (ใ֑ฬ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER LO CHULA	[2E5D 2E4B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E2C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_044)
{
    // 0E43 1D165 0E2C 0061;	
    // (ใ𝅥ฬ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER LO CHULA	[2E5D 2E4B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E2C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_045)
{
    // 0E43 0001 0E2D 0061;	
    // (ใ'\u0001'อ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER O ANG	[2E5D 2E4C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E2D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_046)
{
    // 0E43 0591 0E2D 0061;	
    // (ใ֑อ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER O ANG	[2E5D 2E4C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E2D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_047)
{
    // 0E43 1D165 0E2D 0061;	
    // (ใ𝅥อ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER O ANG	[2E5D 2E4C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E2D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_048)
{
    // 0E43 0001 0E2E 0061;	
    // (ใ'\u0001'ฮ) THAI CHARACTER SARA AI MAIMUAN, <START OF HEADING>, THAI CHARACTER HO NOKHUK	[2E5D 2E4D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0001, 0x0E2E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_049)
{
    // 0E43 0591 0E2E 0061;	
    // (ใ֑ฮ) THAI CHARACTER SARA AI MAIMUAN, HEBREW ACCENT ETNAHTA, THAI CHARACTER HO NOKHUK	[2E5D 2E4D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x0591, 0x0E2E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_050)
{
    // 0E43 1D165 0E2E 0061;	
    // (ใ𝅥ฮ) THAI CHARACTER SARA AI MAIMUAN, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER HO NOKHUK	[2E5D 2E4D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E43, 0x1D165, 0x0E2E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5D, 0x2E4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_051)
{
    // 0E44 0021;	
    // (ไ) THAI CHARACTER SARA AI MAIMALAI	[2E5E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E44, 0x0021 };
    uint32_t const ces[9] = { 0x2E5E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_052)
{
    // 0E44 003F;	
    // (ไ) THAI CHARACTER SARA AI MAIMALAI	[2E5E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E44, 0x003F };
    uint32_t const ces[9] = { 0x2E5E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_053)
{
    // 0E44 0061;	
    // (ไ) THAI CHARACTER SARA AI MAIMALAI	[2E5E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E44, 0x0061 };
    uint32_t const ces[9] = { 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_054)
{
    // 0E44 0041;	
    // (ไ) THAI CHARACTER SARA AI MAIMALAI	[2E5E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E44, 0x0041 };
    uint32_t const ces[9] = { 0x2E5E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_055)
{
    // 0E44 0062;	
    // (ไ) THAI CHARACTER SARA AI MAIMALAI	[2E5E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E44, 0x0062 };
    uint32_t const ces[9] = { 0x2E5E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_056)
{
    // 0E44 0001 0E01 0061;	
    // (ไ'\u0001'ก) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER KO KAI	[2E5E 2E20 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E01, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_057)
{
    // 0E44 0591 0E01 0061;	
    // (ไ֑ก) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER KO KAI	[2E5E 2E20 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E01, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_058)
{
    // 0E44 1D165 0E01 0061;	
    // (ไ𝅥ก) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KO KAI	[2E5E 2E20 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E01, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E20, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_059)
{
    // 0E44 0001 0E02 0061;	
    // (ไ'\u0001'ข) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER KHO KHAI	[2E5E 2E21 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E02, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_060)
{
    // 0E44 0591 0E02 0061;	
    // (ไ֑ข) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER KHO KHAI	[2E5E 2E21 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E02, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_061)
{
    // 0E44 1D165 0E02 0061;	
    // (ไ𝅥ข) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KHO KHAI	[2E5E 2E21 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E02, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E21, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_062)
{
    // 0E44 0001 0E03 0061;	
    // (ไ'\u0001'ฃ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER KHO KHUAT	[2E5E 2E22 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E03, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_063)
{
    // 0E44 0591 0E03 0061;	
    // (ไ֑ฃ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER KHO KHUAT	[2E5E 2E22 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E03, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_064)
{
    // 0E44 1D165 0E03 0061;	
    // (ไ𝅥ฃ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KHO KHUAT	[2E5E 2E22 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E03, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E22, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_065)
{
    // 0E44 0001 0E04 0061;	
    // (ไ'\u0001'ค) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER KHO KHWAI	[2E5E 2E23 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E04, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_066)
{
    // 0E44 0591 0E04 0061;	
    // (ไ֑ค) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER KHO KHWAI	[2E5E 2E23 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E04, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_067)
{
    // 0E44 1D165 0E04 0061;	
    // (ไ𝅥ค) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KHO KHWAI	[2E5E 2E23 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E04, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E23, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_068)
{
    // 0E44 0001 0E05 0061;	
    // (ไ'\u0001'ฅ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER KHO KHON	[2E5E 2E24 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E05, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_069)
{
    // 0E44 0591 0E05 0061;	
    // (ไ֑ฅ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER KHO KHON	[2E5E 2E24 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E05, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_070)
{
    // 0E44 1D165 0E05 0061;	
    // (ไ𝅥ฅ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KHO KHON	[2E5E 2E24 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E05, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E24, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_071)
{
    // 0E44 0001 0E06 0061;	
    // (ไ'\u0001'ฆ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER KHO RAKHANG	[2E5E 2E25 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E06, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_072)
{
    // 0E44 0591 0E06 0061;	
    // (ไ֑ฆ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER KHO RAKHANG	[2E5E 2E25 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E06, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_073)
{
    // 0E44 1D165 0E06 0061;	
    // (ไ𝅥ฆ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER KHO RAKHANG	[2E5E 2E25 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E06, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E25, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_074)
{
    // 0E44 0001 0E07 0061;	
    // (ไ'\u0001'ง) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER NGO NGU	[2E5E 2E26 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E07, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_075)
{
    // 0E44 0591 0E07 0061;	
    // (ไ֑ง) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER NGO NGU	[2E5E 2E26 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E07, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_076)
{
    // 0E44 1D165 0E07 0061;	
    // (ไ𝅥ง) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER NGO NGU	[2E5E 2E26 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E07, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E26, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_077)
{
    // 0E44 0001 0E08 0061;	
    // (ไ'\u0001'จ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER CHO CHAN	[2E5E 2E27 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E08, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_078)
{
    // 0E44 0591 0E08 0061;	
    // (ไ֑จ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER CHO CHAN	[2E5E 2E27 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E08, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_079)
{
    // 0E44 1D165 0E08 0061;	
    // (ไ𝅥จ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER CHO CHAN	[2E5E 2E27 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E08, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E27, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_080)
{
    // 0E44 0001 0E09 0061;	
    // (ไ'\u0001'ฉ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER CHO CHING	[2E5E 2E28 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E09, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_081)
{
    // 0E44 0591 0E09 0061;	
    // (ไ֑ฉ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER CHO CHING	[2E5E 2E28 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E09, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_082)
{
    // 0E44 1D165 0E09 0061;	
    // (ไ𝅥ฉ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER CHO CHING	[2E5E 2E28 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E09, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E28, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_083)
{
    // 0E44 0001 0E0A 0061;	
    // (ไ'\u0001'ช) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER CHO CHANG	[2E5E 2E29 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E0A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_084)
{
    // 0E44 0591 0E0A 0061;	
    // (ไ֑ช) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER CHO CHANG	[2E5E 2E29 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E0A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_085)
{
    // 0E44 1D165 0E0A 0061;	
    // (ไ𝅥ช) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER CHO CHANG	[2E5E 2E29 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E0A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E29, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_086)
{
    // 0E44 0001 0E0B 0061;	
    // (ไ'\u0001'ซ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER SO SO	[2E5E 2E2A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E0B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_087)
{
    // 0E44 0591 0E0B 0061;	
    // (ไ֑ซ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER SO SO	[2E5E 2E2A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E0B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_088)
{
    // 0E44 1D165 0E0B 0061;	
    // (ไ𝅥ซ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER SO SO	[2E5E 2E2A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E0B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E2A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_089)
{
    // 0E44 0001 0E0C 0061;	
    // (ไ'\u0001'ฌ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER CHO CHOE	[2E5E 2E2B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E0C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_090)
{
    // 0E44 0591 0E0C 0061;	
    // (ไ֑ฌ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER CHO CHOE	[2E5E 2E2B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E0C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_091)
{
    // 0E44 1D165 0E0C 0061;	
    // (ไ𝅥ฌ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER CHO CHOE	[2E5E 2E2B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E0C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E2B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_092)
{
    // 0E44 0001 0E0D 0061;	
    // (ไ'\u0001'ญ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER YO YING	[2E5E 2E2C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E0D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_093)
{
    // 0E44 0591 0E0D 0061;	
    // (ไ֑ญ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER YO YING	[2E5E 2E2C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E0D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_094)
{
    // 0E44 1D165 0E0D 0061;	
    // (ไ𝅥ญ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER YO YING	[2E5E 2E2C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E0D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E2C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_095)
{
    // 0E44 0001 0E0E 0061;	
    // (ไ'\u0001'ฎ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER DO CHADA	[2E5E 2E2D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E0E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_096)
{
    // 0E44 0591 0E0E 0061;	
    // (ไ֑ฎ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER DO CHADA	[2E5E 2E2D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E0E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_097)
{
    // 0E44 1D165 0E0E 0061;	
    // (ไ𝅥ฎ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER DO CHADA	[2E5E 2E2D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E0E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E2D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_098)
{
    // 0E44 0001 0E0F 0061;	
    // (ไ'\u0001'ฏ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER TO PATAK	[2E5E 2E2E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E0F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_099)
{
    // 0E44 0591 0E0F 0061;	
    // (ไ֑ฏ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER TO PATAK	[2E5E 2E2E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E0F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_100)
{
    // 0E44 1D165 0E0F 0061;	
    // (ไ𝅥ฏ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER TO PATAK	[2E5E 2E2E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E0F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E2E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_101)
{
    // 0E44 0001 0E10 0061;	
    // (ไ'\u0001'ฐ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER THO THAN	[2E5E 2E2F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E10, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_102)
{
    // 0E44 0591 0E10 0061;	
    // (ไ֑ฐ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO THAN	[2E5E 2E2F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E10, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_103)
{
    // 0E44 1D165 0E10 0061;	
    // (ไ𝅥ฐ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO THAN	[2E5E 2E2F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E10, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E2F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_104)
{
    // 0E44 0001 0E11 0061;	
    // (ไ'\u0001'ฑ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER THO NANGMONTHO	[2E5E 2E30 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E11, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_105)
{
    // 0E44 0591 0E11 0061;	
    // (ไ֑ฑ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO NANGMONTHO	[2E5E 2E30 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E11, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_106)
{
    // 0E44 1D165 0E11 0061;	
    // (ไ𝅥ฑ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO NANGMONTHO	[2E5E 2E30 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E11, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E30, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_107)
{
    // 0E44 0001 0E12 0061;	
    // (ไ'\u0001'ฒ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER THO PHUTHAO	[2E5E 2E31 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E12, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_108)
{
    // 0E44 0591 0E12 0061;	
    // (ไ֑ฒ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO PHUTHAO	[2E5E 2E31 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E12, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_109)
{
    // 0E44 1D165 0E12 0061;	
    // (ไ𝅥ฒ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO PHUTHAO	[2E5E 2E31 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E12, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E31, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_110)
{
    // 0E44 0001 0E13 0061;	
    // (ไ'\u0001'ณ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER NO NEN	[2E5E 2E32 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E13, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_111)
{
    // 0E44 0591 0E13 0061;	
    // (ไ֑ณ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER NO NEN	[2E5E 2E32 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E13, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_112)
{
    // 0E44 1D165 0E13 0061;	
    // (ไ𝅥ณ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER NO NEN	[2E5E 2E32 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E13, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E32, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_113)
{
    // 0E44 0001 0E14 0061;	
    // (ไ'\u0001'ด) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER DO DEK	[2E5E 2E33 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E14, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_114)
{
    // 0E44 0591 0E14 0061;	
    // (ไ֑ด) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER DO DEK	[2E5E 2E33 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E14, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_115)
{
    // 0E44 1D165 0E14 0061;	
    // (ไ𝅥ด) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER DO DEK	[2E5E 2E33 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E14, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E33, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_116)
{
    // 0E44 0001 0E15 0061;	
    // (ไ'\u0001'ต) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER TO TAO	[2E5E 2E34 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E15, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_117)
{
    // 0E44 0591 0E15 0061;	
    // (ไ֑ต) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER TO TAO	[2E5E 2E34 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E15, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_118)
{
    // 0E44 1D165 0E15 0061;	
    // (ไ𝅥ต) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER TO TAO	[2E5E 2E34 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E15, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E34, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_119)
{
    // 0E44 0001 0E16 0061;	
    // (ไ'\u0001'ถ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER THO THUNG	[2E5E 2E35 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E16, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_120)
{
    // 0E44 0591 0E16 0061;	
    // (ไ֑ถ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO THUNG	[2E5E 2E35 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E16, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_121)
{
    // 0E44 1D165 0E16 0061;	
    // (ไ𝅥ถ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO THUNG	[2E5E 2E35 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E16, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E35, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_122)
{
    // 0E44 0001 0E17 0061;	
    // (ไ'\u0001'ท) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER THO THAHAN	[2E5E 2E36 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E17, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_123)
{
    // 0E44 0591 0E17 0061;	
    // (ไ֑ท) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO THAHAN	[2E5E 2E36 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E17, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_124)
{
    // 0E44 1D165 0E17 0061;	
    // (ไ𝅥ท) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO THAHAN	[2E5E 2E36 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E17, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E36, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_125)
{
    // 0E44 0001 0E18 0061;	
    // (ไ'\u0001'ธ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER THO THONG	[2E5E 2E37 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E18, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_126)
{
    // 0E44 0591 0E18 0061;	
    // (ไ֑ธ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER THO THONG	[2E5E 2E37 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E18, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_127)
{
    // 0E44 1D165 0E18 0061;	
    // (ไ𝅥ธ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER THO THONG	[2E5E 2E37 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E18, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E37, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_128)
{
    // 0E44 0001 0E19 0061;	
    // (ไ'\u0001'น) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER NO NU	[2E5E 2E38 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E19, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_129)
{
    // 0E44 0591 0E19 0061;	
    // (ไ֑น) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER NO NU	[2E5E 2E38 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E19, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_130)
{
    // 0E44 1D165 0E19 0061;	
    // (ไ𝅥น) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER NO NU	[2E5E 2E38 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E19, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E38, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_131)
{
    // 0E44 0001 0E1A 0061;	
    // (ไ'\u0001'บ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER BO BAIMAI	[2E5E 2E39 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E1A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_132)
{
    // 0E44 0591 0E1A 0061;	
    // (ไ֑บ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER BO BAIMAI	[2E5E 2E39 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E1A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_133)
{
    // 0E44 1D165 0E1A 0061;	
    // (ไ𝅥บ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER BO BAIMAI	[2E5E 2E39 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E1A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E39, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_134)
{
    // 0E44 0001 0E1B 0061;	
    // (ไ'\u0001'ป) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER PO PLA	[2E5E 2E3A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E1B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_135)
{
    // 0E44 0591 0E1B 0061;	
    // (ไ֑ป) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER PO PLA	[2E5E 2E3A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E1B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_136)
{
    // 0E44 1D165 0E1B 0061;	
    // (ไ𝅥ป) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER PO PLA	[2E5E 2E3A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E1B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E3A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_137)
{
    // 0E44 0001 0E1C 0061;	
    // (ไ'\u0001'ผ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER PHO PHUNG	[2E5E 2E3B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E1C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_138)
{
    // 0E44 0591 0E1C 0061;	
    // (ไ֑ผ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER PHO PHUNG	[2E5E 2E3B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E1C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_139)
{
    // 0E44 1D165 0E1C 0061;	
    // (ไ𝅥ผ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER PHO PHUNG	[2E5E 2E3B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E1C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E3B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_140)
{
    // 0E44 0001 0E1D 0061;	
    // (ไ'\u0001'ฝ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER FO FA	[2E5E 2E3C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E1D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_141)
{
    // 0E44 0591 0E1D 0061;	
    // (ไ֑ฝ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER FO FA	[2E5E 2E3C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E1D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_142)
{
    // 0E44 1D165 0E1D 0061;	
    // (ไ𝅥ฝ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER FO FA	[2E5E 2E3C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E1D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E3C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_143)
{
    // 0E44 0001 0E1E 0061;	
    // (ไ'\u0001'พ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER PHO PHAN	[2E5E 2E3D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E1E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_144)
{
    // 0E44 0591 0E1E 0061;	
    // (ไ֑พ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER PHO PHAN	[2E5E 2E3D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E1E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_145)
{
    // 0E44 1D165 0E1E 0061;	
    // (ไ𝅥พ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER PHO PHAN	[2E5E 2E3D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E1E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E3D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_146)
{
    // 0E44 0001 0E1F 0061;	
    // (ไ'\u0001'ฟ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER FO FAN	[2E5E 2E3E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E1F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_147)
{
    // 0E44 0591 0E1F 0061;	
    // (ไ֑ฟ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER FO FAN	[2E5E 2E3E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E1F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_148)
{
    // 0E44 1D165 0E1F 0061;	
    // (ไ𝅥ฟ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER FO FAN	[2E5E 2E3E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E1F, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E3E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_149)
{
    // 0E44 0001 0E20 0061;	
    // (ไ'\u0001'ภ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER PHO SAMPHAO	[2E5E 2E3F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E20, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_150)
{
    // 0E44 0591 0E20 0061;	
    // (ไ֑ภ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER PHO SAMPHAO	[2E5E 2E3F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E20, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_151)
{
    // 0E44 1D165 0E20 0061;	
    // (ไ𝅥ภ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER PHO SAMPHAO	[2E5E 2E3F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E20, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E3F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_152)
{
    // 0E44 0001 0E21 0061;	
    // (ไ'\u0001'ม) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER MO MA	[2E5E 2E40 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E21, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_153)
{
    // 0E44 0591 0E21 0061;	
    // (ไ֑ม) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER MO MA	[2E5E 2E40 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E21, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_154)
{
    // 0E44 1D165 0E21 0061;	
    // (ไ𝅥ม) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER MO MA	[2E5E 2E40 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E21, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E40, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_155)
{
    // 0E44 0001 0E22 0061;	
    // (ไ'\u0001'ย) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER YO YAK	[2E5E 2E41 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E22, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_156)
{
    // 0E44 0591 0E22 0061;	
    // (ไ֑ย) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER YO YAK	[2E5E 2E41 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E22, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_157)
{
    // 0E44 1D165 0E22 0061;	
    // (ไ𝅥ย) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER YO YAK	[2E5E 2E41 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E22, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E41, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_158)
{
    // 0E44 0001 0E23 0061;	
    // (ไ'\u0001'ร) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER RO RUA	[2E5E 2E42 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E23, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_159)
{
    // 0E44 0591 0E23 0061;	
    // (ไ֑ร) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER RO RUA	[2E5E 2E42 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E23, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_160)
{
    // 0E44 1D165 0E23 0061;	
    // (ไ𝅥ร) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER RO RUA	[2E5E 2E42 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E23, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E42, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_161)
{
    // 0E44 0001 0E24 0061;	
    // (ไ'\u0001'ฤ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER RU	[2E5E 2E43 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E24, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_162)
{
    // 0E44 0591 0E24 0061;	
    // (ไ֑ฤ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER RU	[2E5E 2E43 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E24, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_163)
{
    // 0E44 1D165 0E24 0061;	
    // (ไ𝅥ฤ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER RU	[2E5E 2E43 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E24, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E43, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_164)
{
    // 0E44 0001 0E25 0061;	
    // (ไ'\u0001'ล) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER LO LING	[2E5E 2E44 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E25, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_165)
{
    // 0E44 0591 0E25 0061;	
    // (ไ֑ล) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER LO LING	[2E5E 2E44 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E25, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_166)
{
    // 0E44 1D165 0E25 0061;	
    // (ไ𝅥ล) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER LO LING	[2E5E 2E44 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E25, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E44, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_167)
{
    // 0E44 0001 0E26 0061;	
    // (ไ'\u0001'ฦ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER LU	[2E5E 2E45 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E26, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_168)
{
    // 0E44 0591 0E26 0061;	
    // (ไ֑ฦ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER LU	[2E5E 2E45 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E26, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_169)
{
    // 0E44 1D165 0E26 0061;	
    // (ไ𝅥ฦ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER LU	[2E5E 2E45 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E26, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E45, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_170)
{
    // 0E44 0001 0E27 0061;	
    // (ไ'\u0001'ว) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER WO WAEN	[2E5E 2E46 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E27, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_171)
{
    // 0E44 0591 0E27 0061;	
    // (ไ֑ว) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER WO WAEN	[2E5E 2E46 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E27, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_172)
{
    // 0E44 1D165 0E27 0061;	
    // (ไ𝅥ว) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER WO WAEN	[2E5E 2E46 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E27, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E46, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_173)
{
    // 0E44 0001 0E28 0061;	
    // (ไ'\u0001'ศ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER SO SALA	[2E5E 2E47 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E28, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_174)
{
    // 0E44 0591 0E28 0061;	
    // (ไ֑ศ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER SO SALA	[2E5E 2E47 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E28, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_175)
{
    // 0E44 1D165 0E28 0061;	
    // (ไ𝅥ศ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER SO SALA	[2E5E 2E47 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E28, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E47, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_176)
{
    // 0E44 0001 0E29 0061;	
    // (ไ'\u0001'ษ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER SO RUSI	[2E5E 2E48 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E29, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_177)
{
    // 0E44 0591 0E29 0061;	
    // (ไ֑ษ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER SO RUSI	[2E5E 2E48 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E29, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_178)
{
    // 0E44 1D165 0E29 0061;	
    // (ไ𝅥ษ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER SO RUSI	[2E5E 2E48 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E29, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E48, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_179)
{
    // 0E44 0001 0E2A 0061;	
    // (ไ'\u0001'ส) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER SO SUA	[2E5E 2E49 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E2A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_180)
{
    // 0E44 0591 0E2A 0061;	
    // (ไ֑ส) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER SO SUA	[2E5E 2E49 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E2A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_181)
{
    // 0E44 1D165 0E2A 0061;	
    // (ไ𝅥ส) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER SO SUA	[2E5E 2E49 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E2A, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E49, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_182)
{
    // 0E44 0001 0E2B 0061;	
    // (ไ'\u0001'ห) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER HO HIP	[2E5E 2E4A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E2B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_183)
{
    // 0E44 0591 0E2B 0061;	
    // (ไ֑ห) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER HO HIP	[2E5E 2E4A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E2B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_184)
{
    // 0E44 1D165 0E2B 0061;	
    // (ไ𝅥ห) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER HO HIP	[2E5E 2E4A 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E2B, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E4A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_185)
{
    // 0E44 0001 0E2C 0061;	
    // (ไ'\u0001'ฬ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER LO CHULA	[2E5E 2E4B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E2C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_186)
{
    // 0E44 0591 0E2C 0061;	
    // (ไ֑ฬ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER LO CHULA	[2E5E 2E4B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E2C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_187)
{
    // 0E44 1D165 0E2C 0061;	
    // (ไ𝅥ฬ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER LO CHULA	[2E5E 2E4B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E2C, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E4B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_188)
{
    // 0E44 0001 0E2D 0061;	
    // (ไ'\u0001'อ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER O ANG	[2E5E 2E4C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E2D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_189)
{
    // 0E44 0591 0E2D 0061;	
    // (ไ֑อ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER O ANG	[2E5E 2E4C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E2D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_190)
{
    // 0E44 1D165 0E2D 0061;	
    // (ไ𝅥อ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER O ANG	[2E5E 2E4C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E2D, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E4C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_191)
{
    // 0E44 0001 0E2E 0061;	
    // (ไ'\u0001'ฮ) THAI CHARACTER SARA AI MAIMALAI, <START OF HEADING>, THAI CHARACTER HO NOKHUK	[2E5E 2E4D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0001, 0x0E2E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_192)
{
    // 0E44 0591 0E2E 0061;	
    // (ไ֑ฮ) THAI CHARACTER SARA AI MAIMALAI, HEBREW ACCENT ETNAHTA, THAI CHARACTER HO NOKHUK	[2E5E 2E4D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x0591, 0x0E2E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_193)
{
    // 0E44 1D165 0E2E 0061;	
    // (ไ𝅥ฮ) THAI CHARACTER SARA AI MAIMALAI, MUSICAL SYMBOL COMBINING STEM, THAI CHARACTER HO NOKHUK	[2E5E 2E4D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[4] = { 0x0E44, 0x1D165, 0x0E2E, 0x0061 };
    uint32_t const ces[12] = { 0x2E5E, 0x2E4D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_194)
{
    // 0E45 0021;	
    // (ๅ) THAI CHARACTER LAKKHANGYAO	[2E5F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E45, 0x0021 };
    uint32_t const ces[9] = { 0x2E5F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_195)
{
    // 0E45 003F;	
    // (ๅ) THAI CHARACTER LAKKHANGYAO	[2E5F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E45, 0x003F };
    uint32_t const ces[9] = { 0x2E5F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_196)
{
    // 0E45 0061;	
    // (ๅ) THAI CHARACTER LAKKHANGYAO	[2E5F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E45, 0x0061 };
    uint32_t const ces[9] = { 0x2E5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_197)
{
    // 0E45 0041;	
    // (ๅ) THAI CHARACTER LAKKHANGYAO	[2E5F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E45, 0x0041 };
    uint32_t const ces[9] = { 0x2E5F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_198)
{
    // 0E45 0062;	
    // (ๅ) THAI CHARACTER LAKKHANGYAO	[2E5F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E45, 0x0062 };
    uint32_t const ces[9] = { 0x2E5F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_199)
{
    // 0EDE 0021;	
    // (ໞ) LAO LETTER KHMU GO	[2E60 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EDE, 0x0021 };
    uint32_t const ces[9] = { 0x2E60, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_200)
{
    // 0EDE 003F;	
    // (ໞ) LAO LETTER KHMU GO	[2E60 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EDE, 0x003F };
    uint32_t const ces[9] = { 0x2E60, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_201)
{
    // 0EDE 0061;	
    // (ໞ) LAO LETTER KHMU GO	[2E60 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EDE, 0x0061 };
    uint32_t const ces[9] = { 0x2E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_202)
{
    // 0EDE 0041;	
    // (ໞ) LAO LETTER KHMU GO	[2E60 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EDE, 0x0041 };
    uint32_t const ces[9] = { 0x2E60, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_203)
{
    // 0EDE 0062;	
    // (ໞ) LAO LETTER KHMU GO	[2E60 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EDE, 0x0062 };
    uint32_t const ces[9] = { 0x2E60, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_204)
{
    // 0EC0 0EDE 0021;	
    // (ເໞ) LAO VOWEL SIGN E, LAO LETTER KHMU GO	[2E60 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EDE, 0x0021 };
    uint32_t const ces[12] = { 0x2E60, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_205)
{
    // 0EC0 0EDE 003F;	
    // (ເໞ) LAO VOWEL SIGN E, LAO LETTER KHMU GO	[2E60 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EDE, 0x003F };
    uint32_t const ces[12] = { 0x2E60, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_206)
{
    // 0EC0 0EDE 0061;	
    // (ເໞ) LAO VOWEL SIGN E, LAO LETTER KHMU GO	[2E60 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EDE, 0x0061 };
    uint32_t const ces[12] = { 0x2E60, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_207)
{
    // 0EC0 0EDE 0041;	
    // (ເໞ) LAO VOWEL SIGN E, LAO LETTER KHMU GO	[2E60 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EDE, 0x0041 };
    uint32_t const ces[12] = { 0x2E60, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_208)
{
    // 0EC0 0EDE 0062;	
    // (ເໞ) LAO VOWEL SIGN E, LAO LETTER KHMU GO	[2E60 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EDE, 0x0062 };
    uint32_t const ces[12] = { 0x2E60, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_209)
{
    // 0EC1 0EDE 0021;	
    // (ແໞ) LAO VOWEL SIGN EI, LAO LETTER KHMU GO	[2E60 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EDE, 0x0021 };
    uint32_t const ces[12] = { 0x2E60, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_210)
{
    // 0EC1 0EDE 003F;	
    // (ແໞ) LAO VOWEL SIGN EI, LAO LETTER KHMU GO	[2E60 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EDE, 0x003F };
    uint32_t const ces[12] = { 0x2E60, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_211)
{
    // 0EC1 0EDE 0061;	
    // (ແໞ) LAO VOWEL SIGN EI, LAO LETTER KHMU GO	[2E60 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EDE, 0x0061 };
    uint32_t const ces[12] = { 0x2E60, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_212)
{
    // 0EC1 0EDE 0041;	
    // (ແໞ) LAO VOWEL SIGN EI, LAO LETTER KHMU GO	[2E60 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EDE, 0x0041 };
    uint32_t const ces[12] = { 0x2E60, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_213)
{
    // 0EC1 0EDE 0062;	
    // (ແໞ) LAO VOWEL SIGN EI, LAO LETTER KHMU GO	[2E60 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EDE, 0x0062 };
    uint32_t const ces[12] = { 0x2E60, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_214)
{
    // 0EC2 0EDE 0021;	
    // (ໂໞ) LAO VOWEL SIGN O, LAO LETTER KHMU GO	[2E60 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EDE, 0x0021 };
    uint32_t const ces[12] = { 0x2E60, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_215)
{
    // 0EC2 0EDE 003F;	
    // (ໂໞ) LAO VOWEL SIGN O, LAO LETTER KHMU GO	[2E60 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EDE, 0x003F };
    uint32_t const ces[12] = { 0x2E60, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_216)
{
    // 0EC2 0EDE 0061;	
    // (ໂໞ) LAO VOWEL SIGN O, LAO LETTER KHMU GO	[2E60 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EDE, 0x0061 };
    uint32_t const ces[12] = { 0x2E60, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_217)
{
    // 0EC2 0EDE 0041;	
    // (ໂໞ) LAO VOWEL SIGN O, LAO LETTER KHMU GO	[2E60 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EDE, 0x0041 };
    uint32_t const ces[12] = { 0x2E60, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_218)
{
    // 0EC2 0EDE 0062;	
    // (ໂໞ) LAO VOWEL SIGN O, LAO LETTER KHMU GO	[2E60 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EDE, 0x0062 };
    uint32_t const ces[12] = { 0x2E60, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_219)
{
    // 0EC3 0EDE 0021;	
    // (ໃໞ) LAO VOWEL SIGN AY, LAO LETTER KHMU GO	[2E60 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EDE, 0x0021 };
    uint32_t const ces[12] = { 0x2E60, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_220)
{
    // 0EC3 0EDE 003F;	
    // (ໃໞ) LAO VOWEL SIGN AY, LAO LETTER KHMU GO	[2E60 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EDE, 0x003F };
    uint32_t const ces[12] = { 0x2E60, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_221)
{
    // 0EC3 0EDE 0061;	
    // (ໃໞ) LAO VOWEL SIGN AY, LAO LETTER KHMU GO	[2E60 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EDE, 0x0061 };
    uint32_t const ces[12] = { 0x2E60, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_222)
{
    // 0EC3 0EDE 0041;	
    // (ໃໞ) LAO VOWEL SIGN AY, LAO LETTER KHMU GO	[2E60 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EDE, 0x0041 };
    uint32_t const ces[12] = { 0x2E60, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_223)
{
    // 0EC3 0EDE 0062;	
    // (ໃໞ) LAO VOWEL SIGN AY, LAO LETTER KHMU GO	[2E60 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EDE, 0x0062 };
    uint32_t const ces[12] = { 0x2E60, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_224)
{
    // 0EC4 0EDE 0021;	
    // (ໄໞ) LAO VOWEL SIGN AI, LAO LETTER KHMU GO	[2E60 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EDE, 0x0021 };
    uint32_t const ces[12] = { 0x2E60, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_225)
{
    // 0EC4 0EDE 003F;	
    // (ໄໞ) LAO VOWEL SIGN AI, LAO LETTER KHMU GO	[2E60 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EDE, 0x003F };
    uint32_t const ces[12] = { 0x2E60, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_226)
{
    // 0EC4 0EDE 0061;	
    // (ໄໞ) LAO VOWEL SIGN AI, LAO LETTER KHMU GO	[2E60 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EDE, 0x0061 };
    uint32_t const ces[12] = { 0x2E60, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_227)
{
    // 0EC4 0EDE 0041;	
    // (ໄໞ) LAO VOWEL SIGN AI, LAO LETTER KHMU GO	[2E60 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EDE, 0x0041 };
    uint32_t const ces[12] = { 0x2E60, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_228)
{
    // 0EC4 0EDE 0062;	
    // (ໄໞ) LAO VOWEL SIGN AI, LAO LETTER KHMU GO	[2E60 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EDE, 0x0062 };
    uint32_t const ces[12] = { 0x2E60, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_229)
{
    // 0E81 0021;	
    // (ກ) LAO LETTER KO	[2E61 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E81, 0x0021 };
    uint32_t const ces[9] = { 0x2E61, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_230)
{
    // 0E81 003F;	
    // (ກ) LAO LETTER KO	[2E61 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E81, 0x003F };
    uint32_t const ces[9] = { 0x2E61, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_231)
{
    // 0E81 0061;	
    // (ກ) LAO LETTER KO	[2E61 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E81, 0x0061 };
    uint32_t const ces[9] = { 0x2E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_232)
{
    // 0E81 0041;	
    // (ກ) LAO LETTER KO	[2E61 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E81, 0x0041 };
    uint32_t const ces[9] = { 0x2E61, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_233)
{
    // 0E81 0062;	
    // (ກ) LAO LETTER KO	[2E61 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E81, 0x0062 };
    uint32_t const ces[9] = { 0x2E61, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_234)
{
    // 0EC0 0E81 0021;	
    // (ເກ) LAO VOWEL SIGN E, LAO LETTER KO	[2E61 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E81, 0x0021 };
    uint32_t const ces[12] = { 0x2E61, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_235)
{
    // 0EC0 0E81 003F;	
    // (ເກ) LAO VOWEL SIGN E, LAO LETTER KO	[2E61 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E81, 0x003F };
    uint32_t const ces[12] = { 0x2E61, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_236)
{
    // 0EC0 0E81 0061;	
    // (ເກ) LAO VOWEL SIGN E, LAO LETTER KO	[2E61 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E81, 0x0061 };
    uint32_t const ces[12] = { 0x2E61, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_237)
{
    // 0EC0 0E81 0041;	
    // (ເກ) LAO VOWEL SIGN E, LAO LETTER KO	[2E61 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E81, 0x0041 };
    uint32_t const ces[12] = { 0x2E61, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_238)
{
    // 0EC0 0E81 0062;	
    // (ເກ) LAO VOWEL SIGN E, LAO LETTER KO	[2E61 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E81, 0x0062 };
    uint32_t const ces[12] = { 0x2E61, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_239)
{
    // 0EC1 0E81 0021;	
    // (ແກ) LAO VOWEL SIGN EI, LAO LETTER KO	[2E61 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E81, 0x0021 };
    uint32_t const ces[12] = { 0x2E61, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_240)
{
    // 0EC1 0E81 003F;	
    // (ແກ) LAO VOWEL SIGN EI, LAO LETTER KO	[2E61 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E81, 0x003F };
    uint32_t const ces[12] = { 0x2E61, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_241)
{
    // 0EC1 0E81 0061;	
    // (ແກ) LAO VOWEL SIGN EI, LAO LETTER KO	[2E61 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E81, 0x0061 };
    uint32_t const ces[12] = { 0x2E61, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_242)
{
    // 0EC1 0E81 0041;	
    // (ແກ) LAO VOWEL SIGN EI, LAO LETTER KO	[2E61 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E81, 0x0041 };
    uint32_t const ces[12] = { 0x2E61, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_243)
{
    // 0EC1 0E81 0062;	
    // (ແກ) LAO VOWEL SIGN EI, LAO LETTER KO	[2E61 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E81, 0x0062 };
    uint32_t const ces[12] = { 0x2E61, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_244)
{
    // 0EC2 0E81 0021;	
    // (ໂກ) LAO VOWEL SIGN O, LAO LETTER KO	[2E61 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E81, 0x0021 };
    uint32_t const ces[12] = { 0x2E61, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_245)
{
    // 0EC2 0E81 003F;	
    // (ໂກ) LAO VOWEL SIGN O, LAO LETTER KO	[2E61 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E81, 0x003F };
    uint32_t const ces[12] = { 0x2E61, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_246)
{
    // 0EC2 0E81 0061;	
    // (ໂກ) LAO VOWEL SIGN O, LAO LETTER KO	[2E61 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E81, 0x0061 };
    uint32_t const ces[12] = { 0x2E61, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_247)
{
    // 0EC2 0E81 0041;	
    // (ໂກ) LAO VOWEL SIGN O, LAO LETTER KO	[2E61 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E81, 0x0041 };
    uint32_t const ces[12] = { 0x2E61, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_248)
{
    // 0EC2 0E81 0062;	
    // (ໂກ) LAO VOWEL SIGN O, LAO LETTER KO	[2E61 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E81, 0x0062 };
    uint32_t const ces[12] = { 0x2E61, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_249)
{
    // 0EC3 0E81 0021;	
    // (ໃກ) LAO VOWEL SIGN AY, LAO LETTER KO	[2E61 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E81, 0x0021 };
    uint32_t const ces[12] = { 0x2E61, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_250)
{
    // 0EC3 0E81 003F;	
    // (ໃກ) LAO VOWEL SIGN AY, LAO LETTER KO	[2E61 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E81, 0x003F };
    uint32_t const ces[12] = { 0x2E61, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_251)
{
    // 0EC3 0E81 0061;	
    // (ໃກ) LAO VOWEL SIGN AY, LAO LETTER KO	[2E61 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E81, 0x0061 };
    uint32_t const ces[12] = { 0x2E61, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_252)
{
    // 0EC3 0E81 0041;	
    // (ໃກ) LAO VOWEL SIGN AY, LAO LETTER KO	[2E61 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E81, 0x0041 };
    uint32_t const ces[12] = { 0x2E61, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_253)
{
    // 0EC3 0E81 0062;	
    // (ໃກ) LAO VOWEL SIGN AY, LAO LETTER KO	[2E61 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E81, 0x0062 };
    uint32_t const ces[12] = { 0x2E61, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_254)
{
    // 0EC4 0E81 0021;	
    // (ໄກ) LAO VOWEL SIGN AI, LAO LETTER KO	[2E61 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E81, 0x0021 };
    uint32_t const ces[12] = { 0x2E61, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_255)
{
    // 0EC4 0E81 003F;	
    // (ໄກ) LAO VOWEL SIGN AI, LAO LETTER KO	[2E61 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E81, 0x003F };
    uint32_t const ces[12] = { 0x2E61, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_256)
{
    // 0EC4 0E81 0061;	
    // (ໄກ) LAO VOWEL SIGN AI, LAO LETTER KO	[2E61 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E81, 0x0061 };
    uint32_t const ces[12] = { 0x2E61, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_257)
{
    // 0EC4 0E81 0041;	
    // (ໄກ) LAO VOWEL SIGN AI, LAO LETTER KO	[2E61 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E81, 0x0041 };
    uint32_t const ces[12] = { 0x2E61, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_258)
{
    // 0EC4 0E81 0062;	
    // (ໄກ) LAO VOWEL SIGN AI, LAO LETTER KO	[2E61 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E81, 0x0062 };
    uint32_t const ces[12] = { 0x2E61, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_259)
{
    // 0E82 0021;	
    // (ຂ) LAO LETTER KHO SUNG	[2E62 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E82, 0x0021 };
    uint32_t const ces[9] = { 0x2E62, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_260)
{
    // 0E82 003F;	
    // (ຂ) LAO LETTER KHO SUNG	[2E62 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E82, 0x003F };
    uint32_t const ces[9] = { 0x2E62, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_261)
{
    // 0E82 0061;	
    // (ຂ) LAO LETTER KHO SUNG	[2E62 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E82, 0x0061 };
    uint32_t const ces[9] = { 0x2E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_262)
{
    // 0E82 0041;	
    // (ຂ) LAO LETTER KHO SUNG	[2E62 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E82, 0x0041 };
    uint32_t const ces[9] = { 0x2E62, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_263)
{
    // 0E82 0062;	
    // (ຂ) LAO LETTER KHO SUNG	[2E62 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E82, 0x0062 };
    uint32_t const ces[9] = { 0x2E62, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_264)
{
    // 0EC0 0E82 0021;	
    // (ເຂ) LAO VOWEL SIGN E, LAO LETTER KHO SUNG	[2E62 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E82, 0x0021 };
    uint32_t const ces[12] = { 0x2E62, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_265)
{
    // 0EC0 0E82 003F;	
    // (ເຂ) LAO VOWEL SIGN E, LAO LETTER KHO SUNG	[2E62 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E82, 0x003F };
    uint32_t const ces[12] = { 0x2E62, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_266)
{
    // 0EC0 0E82 0061;	
    // (ເຂ) LAO VOWEL SIGN E, LAO LETTER KHO SUNG	[2E62 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E82, 0x0061 };
    uint32_t const ces[12] = { 0x2E62, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_267)
{
    // 0EC0 0E82 0041;	
    // (ເຂ) LAO VOWEL SIGN E, LAO LETTER KHO SUNG	[2E62 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E82, 0x0041 };
    uint32_t const ces[12] = { 0x2E62, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_268)
{
    // 0EC0 0E82 0062;	
    // (ເຂ) LAO VOWEL SIGN E, LAO LETTER KHO SUNG	[2E62 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E82, 0x0062 };
    uint32_t const ces[12] = { 0x2E62, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_269)
{
    // 0EC1 0E82 0021;	
    // (ແຂ) LAO VOWEL SIGN EI, LAO LETTER KHO SUNG	[2E62 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E82, 0x0021 };
    uint32_t const ces[12] = { 0x2E62, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_270)
{
    // 0EC1 0E82 003F;	
    // (ແຂ) LAO VOWEL SIGN EI, LAO LETTER KHO SUNG	[2E62 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E82, 0x003F };
    uint32_t const ces[12] = { 0x2E62, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_271)
{
    // 0EC1 0E82 0061;	
    // (ແຂ) LAO VOWEL SIGN EI, LAO LETTER KHO SUNG	[2E62 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E82, 0x0061 };
    uint32_t const ces[12] = { 0x2E62, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_272)
{
    // 0EC1 0E82 0041;	
    // (ແຂ) LAO VOWEL SIGN EI, LAO LETTER KHO SUNG	[2E62 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E82, 0x0041 };
    uint32_t const ces[12] = { 0x2E62, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_273)
{
    // 0EC1 0E82 0062;	
    // (ແຂ) LAO VOWEL SIGN EI, LAO LETTER KHO SUNG	[2E62 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E82, 0x0062 };
    uint32_t const ces[12] = { 0x2E62, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_274)
{
    // 0EC2 0E82 0021;	
    // (ໂຂ) LAO VOWEL SIGN O, LAO LETTER KHO SUNG	[2E62 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E82, 0x0021 };
    uint32_t const ces[12] = { 0x2E62, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_275)
{
    // 0EC2 0E82 003F;	
    // (ໂຂ) LAO VOWEL SIGN O, LAO LETTER KHO SUNG	[2E62 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E82, 0x003F };
    uint32_t const ces[12] = { 0x2E62, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_276)
{
    // 0EC2 0E82 0061;	
    // (ໂຂ) LAO VOWEL SIGN O, LAO LETTER KHO SUNG	[2E62 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E82, 0x0061 };
    uint32_t const ces[12] = { 0x2E62, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_277)
{
    // 0EC2 0E82 0041;	
    // (ໂຂ) LAO VOWEL SIGN O, LAO LETTER KHO SUNG	[2E62 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E82, 0x0041 };
    uint32_t const ces[12] = { 0x2E62, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_278)
{
    // 0EC2 0E82 0062;	
    // (ໂຂ) LAO VOWEL SIGN O, LAO LETTER KHO SUNG	[2E62 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E82, 0x0062 };
    uint32_t const ces[12] = { 0x2E62, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_279)
{
    // 0EC3 0E82 0021;	
    // (ໃຂ) LAO VOWEL SIGN AY, LAO LETTER KHO SUNG	[2E62 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E82, 0x0021 };
    uint32_t const ces[12] = { 0x2E62, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_280)
{
    // 0EC3 0E82 003F;	
    // (ໃຂ) LAO VOWEL SIGN AY, LAO LETTER KHO SUNG	[2E62 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E82, 0x003F };
    uint32_t const ces[12] = { 0x2E62, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_281)
{
    // 0EC3 0E82 0061;	
    // (ໃຂ) LAO VOWEL SIGN AY, LAO LETTER KHO SUNG	[2E62 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E82, 0x0061 };
    uint32_t const ces[12] = { 0x2E62, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_282)
{
    // 0EC3 0E82 0041;	
    // (ໃຂ) LAO VOWEL SIGN AY, LAO LETTER KHO SUNG	[2E62 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E82, 0x0041 };
    uint32_t const ces[12] = { 0x2E62, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_283)
{
    // 0EC3 0E82 0062;	
    // (ໃຂ) LAO VOWEL SIGN AY, LAO LETTER KHO SUNG	[2E62 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E82, 0x0062 };
    uint32_t const ces[12] = { 0x2E62, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_284)
{
    // 0EC4 0E82 0021;	
    // (ໄຂ) LAO VOWEL SIGN AI, LAO LETTER KHO SUNG	[2E62 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E82, 0x0021 };
    uint32_t const ces[12] = { 0x2E62, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_285)
{
    // 0EC4 0E82 003F;	
    // (ໄຂ) LAO VOWEL SIGN AI, LAO LETTER KHO SUNG	[2E62 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E82, 0x003F };
    uint32_t const ces[12] = { 0x2E62, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_286)
{
    // 0EC4 0E82 0061;	
    // (ໄຂ) LAO VOWEL SIGN AI, LAO LETTER KHO SUNG	[2E62 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E82, 0x0061 };
    uint32_t const ces[12] = { 0x2E62, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_287)
{
    // 0EC4 0E82 0041;	
    // (ໄຂ) LAO VOWEL SIGN AI, LAO LETTER KHO SUNG	[2E62 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E82, 0x0041 };
    uint32_t const ces[12] = { 0x2E62, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_288)
{
    // 0EC4 0E82 0062;	
    // (ໄຂ) LAO VOWEL SIGN AI, LAO LETTER KHO SUNG	[2E62 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E82, 0x0062 };
    uint32_t const ces[12] = { 0x2E62, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_289)
{
    // 0E84 0021;	
    // (ຄ) LAO LETTER KHO TAM	[2E63 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E84, 0x0021 };
    uint32_t const ces[9] = { 0x2E63, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_290)
{
    // 0E84 003F;	
    // (ຄ) LAO LETTER KHO TAM	[2E63 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E84, 0x003F };
    uint32_t const ces[9] = { 0x2E63, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_291)
{
    // 0E84 0061;	
    // (ຄ) LAO LETTER KHO TAM	[2E63 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E84, 0x0061 };
    uint32_t const ces[9] = { 0x2E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_292)
{
    // 0E84 0041;	
    // (ຄ) LAO LETTER KHO TAM	[2E63 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E84, 0x0041 };
    uint32_t const ces[9] = { 0x2E63, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_293)
{
    // 0E84 0062;	
    // (ຄ) LAO LETTER KHO TAM	[2E63 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E84, 0x0062 };
    uint32_t const ces[9] = { 0x2E63, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_294)
{
    // 0EC0 0E84 0021;	
    // (ເຄ) LAO VOWEL SIGN E, LAO LETTER KHO TAM	[2E63 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E84, 0x0021 };
    uint32_t const ces[12] = { 0x2E63, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_295)
{
    // 0EC0 0E84 003F;	
    // (ເຄ) LAO VOWEL SIGN E, LAO LETTER KHO TAM	[2E63 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E84, 0x003F };
    uint32_t const ces[12] = { 0x2E63, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_296)
{
    // 0EC0 0E84 0061;	
    // (ເຄ) LAO VOWEL SIGN E, LAO LETTER KHO TAM	[2E63 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E84, 0x0061 };
    uint32_t const ces[12] = { 0x2E63, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_297)
{
    // 0EC0 0E84 0041;	
    // (ເຄ) LAO VOWEL SIGN E, LAO LETTER KHO TAM	[2E63 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E84, 0x0041 };
    uint32_t const ces[12] = { 0x2E63, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_298)
{
    // 0EC0 0E84 0062;	
    // (ເຄ) LAO VOWEL SIGN E, LAO LETTER KHO TAM	[2E63 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E84, 0x0062 };
    uint32_t const ces[12] = { 0x2E63, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_299)
{
    // 0EC1 0E84 0021;	
    // (ແຄ) LAO VOWEL SIGN EI, LAO LETTER KHO TAM	[2E63 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E84, 0x0021 };
    uint32_t const ces[12] = { 0x2E63, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_300)
{
    // 0EC1 0E84 003F;	
    // (ແຄ) LAO VOWEL SIGN EI, LAO LETTER KHO TAM	[2E63 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E84, 0x003F };
    uint32_t const ces[12] = { 0x2E63, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_301)
{
    // 0EC1 0E84 0061;	
    // (ແຄ) LAO VOWEL SIGN EI, LAO LETTER KHO TAM	[2E63 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E84, 0x0061 };
    uint32_t const ces[12] = { 0x2E63, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_302)
{
    // 0EC1 0E84 0041;	
    // (ແຄ) LAO VOWEL SIGN EI, LAO LETTER KHO TAM	[2E63 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E84, 0x0041 };
    uint32_t const ces[12] = { 0x2E63, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_303)
{
    // 0EC1 0E84 0062;	
    // (ແຄ) LAO VOWEL SIGN EI, LAO LETTER KHO TAM	[2E63 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E84, 0x0062 };
    uint32_t const ces[12] = { 0x2E63, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_304)
{
    // 0EC2 0E84 0021;	
    // (ໂຄ) LAO VOWEL SIGN O, LAO LETTER KHO TAM	[2E63 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E84, 0x0021 };
    uint32_t const ces[12] = { 0x2E63, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_305)
{
    // 0EC2 0E84 003F;	
    // (ໂຄ) LAO VOWEL SIGN O, LAO LETTER KHO TAM	[2E63 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E84, 0x003F };
    uint32_t const ces[12] = { 0x2E63, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_306)
{
    // 0EC2 0E84 0061;	
    // (ໂຄ) LAO VOWEL SIGN O, LAO LETTER KHO TAM	[2E63 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E84, 0x0061 };
    uint32_t const ces[12] = { 0x2E63, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_307)
{
    // 0EC2 0E84 0041;	
    // (ໂຄ) LAO VOWEL SIGN O, LAO LETTER KHO TAM	[2E63 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E84, 0x0041 };
    uint32_t const ces[12] = { 0x2E63, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_308)
{
    // 0EC2 0E84 0062;	
    // (ໂຄ) LAO VOWEL SIGN O, LAO LETTER KHO TAM	[2E63 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E84, 0x0062 };
    uint32_t const ces[12] = { 0x2E63, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_309)
{
    // 0EC3 0E84 0021;	
    // (ໃຄ) LAO VOWEL SIGN AY, LAO LETTER KHO TAM	[2E63 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E84, 0x0021 };
    uint32_t const ces[12] = { 0x2E63, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_310)
{
    // 0EC3 0E84 003F;	
    // (ໃຄ) LAO VOWEL SIGN AY, LAO LETTER KHO TAM	[2E63 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E84, 0x003F };
    uint32_t const ces[12] = { 0x2E63, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_311)
{
    // 0EC3 0E84 0061;	
    // (ໃຄ) LAO VOWEL SIGN AY, LAO LETTER KHO TAM	[2E63 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E84, 0x0061 };
    uint32_t const ces[12] = { 0x2E63, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_312)
{
    // 0EC3 0E84 0041;	
    // (ໃຄ) LAO VOWEL SIGN AY, LAO LETTER KHO TAM	[2E63 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E84, 0x0041 };
    uint32_t const ces[12] = { 0x2E63, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_313)
{
    // 0EC3 0E84 0062;	
    // (ໃຄ) LAO VOWEL SIGN AY, LAO LETTER KHO TAM	[2E63 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E84, 0x0062 };
    uint32_t const ces[12] = { 0x2E63, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_314)
{
    // 0EC4 0E84 0021;	
    // (ໄຄ) LAO VOWEL SIGN AI, LAO LETTER KHO TAM	[2E63 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E84, 0x0021 };
    uint32_t const ces[12] = { 0x2E63, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_315)
{
    // 0EC4 0E84 003F;	
    // (ໄຄ) LAO VOWEL SIGN AI, LAO LETTER KHO TAM	[2E63 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E84, 0x003F };
    uint32_t const ces[12] = { 0x2E63, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_316)
{
    // 0EC4 0E84 0061;	
    // (ໄຄ) LAO VOWEL SIGN AI, LAO LETTER KHO TAM	[2E63 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E84, 0x0061 };
    uint32_t const ces[12] = { 0x2E63, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_317)
{
    // 0EC4 0E84 0041;	
    // (ໄຄ) LAO VOWEL SIGN AI, LAO LETTER KHO TAM	[2E63 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E84, 0x0041 };
    uint32_t const ces[12] = { 0x2E63, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_318)
{
    // 0EC4 0E84 0062;	
    // (ໄຄ) LAO VOWEL SIGN AI, LAO LETTER KHO TAM	[2E63 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E84, 0x0062 };
    uint32_t const ces[12] = { 0x2E63, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_319)
{
    // 0E87 0021;	
    // (ງ) LAO LETTER NGO	[2E64 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E87, 0x0021 };
    uint32_t const ces[9] = { 0x2E64, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_320)
{
    // 0E87 003F;	
    // (ງ) LAO LETTER NGO	[2E64 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E87, 0x003F };
    uint32_t const ces[9] = { 0x2E64, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_321)
{
    // 0E87 0061;	
    // (ງ) LAO LETTER NGO	[2E64 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E87, 0x0061 };
    uint32_t const ces[9] = { 0x2E64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_322)
{
    // 0E87 0041;	
    // (ງ) LAO LETTER NGO	[2E64 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E87, 0x0041 };
    uint32_t const ces[9] = { 0x2E64, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_323)
{
    // 0E87 0062;	
    // (ງ) LAO LETTER NGO	[2E64 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E87, 0x0062 };
    uint32_t const ces[9] = { 0x2E64, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_324)
{
    // 0EC0 0E87 0021;	
    // (ເງ) LAO VOWEL SIGN E, LAO LETTER NGO	[2E64 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E87, 0x0021 };
    uint32_t const ces[12] = { 0x2E64, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_325)
{
    // 0EC0 0E87 003F;	
    // (ເງ) LAO VOWEL SIGN E, LAO LETTER NGO	[2E64 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E87, 0x003F };
    uint32_t const ces[12] = { 0x2E64, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_326)
{
    // 0EC0 0E87 0061;	
    // (ເງ) LAO VOWEL SIGN E, LAO LETTER NGO	[2E64 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E87, 0x0061 };
    uint32_t const ces[12] = { 0x2E64, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_327)
{
    // 0EC0 0E87 0041;	
    // (ເງ) LAO VOWEL SIGN E, LAO LETTER NGO	[2E64 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E87, 0x0041 };
    uint32_t const ces[12] = { 0x2E64, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_328)
{
    // 0EC0 0E87 0062;	
    // (ເງ) LAO VOWEL SIGN E, LAO LETTER NGO	[2E64 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E87, 0x0062 };
    uint32_t const ces[12] = { 0x2E64, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_329)
{
    // 0EC1 0E87 0021;	
    // (ແງ) LAO VOWEL SIGN EI, LAO LETTER NGO	[2E64 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E87, 0x0021 };
    uint32_t const ces[12] = { 0x2E64, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_330)
{
    // 0EC1 0E87 003F;	
    // (ແງ) LAO VOWEL SIGN EI, LAO LETTER NGO	[2E64 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E87, 0x003F };
    uint32_t const ces[12] = { 0x2E64, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_331)
{
    // 0EC1 0E87 0061;	
    // (ແງ) LAO VOWEL SIGN EI, LAO LETTER NGO	[2E64 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E87, 0x0061 };
    uint32_t const ces[12] = { 0x2E64, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_332)
{
    // 0EC1 0E87 0041;	
    // (ແງ) LAO VOWEL SIGN EI, LAO LETTER NGO	[2E64 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E87, 0x0041 };
    uint32_t const ces[12] = { 0x2E64, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_333)
{
    // 0EC1 0E87 0062;	
    // (ແງ) LAO VOWEL SIGN EI, LAO LETTER NGO	[2E64 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E87, 0x0062 };
    uint32_t const ces[12] = { 0x2E64, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_334)
{
    // 0EC2 0E87 0021;	
    // (ໂງ) LAO VOWEL SIGN O, LAO LETTER NGO	[2E64 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E87, 0x0021 };
    uint32_t const ces[12] = { 0x2E64, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_335)
{
    // 0EC2 0E87 003F;	
    // (ໂງ) LAO VOWEL SIGN O, LAO LETTER NGO	[2E64 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E87, 0x003F };
    uint32_t const ces[12] = { 0x2E64, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_336)
{
    // 0EC2 0E87 0061;	
    // (ໂງ) LAO VOWEL SIGN O, LAO LETTER NGO	[2E64 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E87, 0x0061 };
    uint32_t const ces[12] = { 0x2E64, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_337)
{
    // 0EC2 0E87 0041;	
    // (ໂງ) LAO VOWEL SIGN O, LAO LETTER NGO	[2E64 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E87, 0x0041 };
    uint32_t const ces[12] = { 0x2E64, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_338)
{
    // 0EC2 0E87 0062;	
    // (ໂງ) LAO VOWEL SIGN O, LAO LETTER NGO	[2E64 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E87, 0x0062 };
    uint32_t const ces[12] = { 0x2E64, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_339)
{
    // 0EC3 0E87 0021;	
    // (ໃງ) LAO VOWEL SIGN AY, LAO LETTER NGO	[2E64 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E87, 0x0021 };
    uint32_t const ces[12] = { 0x2E64, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_340)
{
    // 0EC3 0E87 003F;	
    // (ໃງ) LAO VOWEL SIGN AY, LAO LETTER NGO	[2E64 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E87, 0x003F };
    uint32_t const ces[12] = { 0x2E64, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_341)
{
    // 0EC3 0E87 0061;	
    // (ໃງ) LAO VOWEL SIGN AY, LAO LETTER NGO	[2E64 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E87, 0x0061 };
    uint32_t const ces[12] = { 0x2E64, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_342)
{
    // 0EC3 0E87 0041;	
    // (ໃງ) LAO VOWEL SIGN AY, LAO LETTER NGO	[2E64 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E87, 0x0041 };
    uint32_t const ces[12] = { 0x2E64, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_343)
{
    // 0EC3 0E87 0062;	
    // (ໃງ) LAO VOWEL SIGN AY, LAO LETTER NGO	[2E64 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E87, 0x0062 };
    uint32_t const ces[12] = { 0x2E64, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_344)
{
    // 0EC4 0E87 0021;	
    // (ໄງ) LAO VOWEL SIGN AI, LAO LETTER NGO	[2E64 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E87, 0x0021 };
    uint32_t const ces[12] = { 0x2E64, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_345)
{
    // 0EC4 0E87 003F;	
    // (ໄງ) LAO VOWEL SIGN AI, LAO LETTER NGO	[2E64 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E87, 0x003F };
    uint32_t const ces[12] = { 0x2E64, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_346)
{
    // 0EC4 0E87 0061;	
    // (ໄງ) LAO VOWEL SIGN AI, LAO LETTER NGO	[2E64 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E87, 0x0061 };
    uint32_t const ces[12] = { 0x2E64, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_347)
{
    // 0EC4 0E87 0041;	
    // (ໄງ) LAO VOWEL SIGN AI, LAO LETTER NGO	[2E64 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E87, 0x0041 };
    uint32_t const ces[12] = { 0x2E64, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_348)
{
    // 0EC4 0E87 0062;	
    // (ໄງ) LAO VOWEL SIGN AI, LAO LETTER NGO	[2E64 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E87, 0x0062 };
    uint32_t const ces[12] = { 0x2E64, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_349)
{
    // 0E88 0021;	
    // (ຈ) LAO LETTER CO	[2E65 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E88, 0x0021 };
    uint32_t const ces[9] = { 0x2E65, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_350)
{
    // 0E88 003F;	
    // (ຈ) LAO LETTER CO	[2E65 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E88, 0x003F };
    uint32_t const ces[9] = { 0x2E65, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_351)
{
    // 0E88 0061;	
    // (ຈ) LAO LETTER CO	[2E65 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E88, 0x0061 };
    uint32_t const ces[9] = { 0x2E65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_352)
{
    // 0E88 0041;	
    // (ຈ) LAO LETTER CO	[2E65 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E88, 0x0041 };
    uint32_t const ces[9] = { 0x2E65, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_353)
{
    // 0E88 0062;	
    // (ຈ) LAO LETTER CO	[2E65 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E88, 0x0062 };
    uint32_t const ces[9] = { 0x2E65, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_354)
{
    // 0EC0 0E88 0021;	
    // (ເຈ) LAO VOWEL SIGN E, LAO LETTER CO	[2E65 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E88, 0x0021 };
    uint32_t const ces[12] = { 0x2E65, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_355)
{
    // 0EC0 0E88 003F;	
    // (ເຈ) LAO VOWEL SIGN E, LAO LETTER CO	[2E65 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E88, 0x003F };
    uint32_t const ces[12] = { 0x2E65, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_356)
{
    // 0EC0 0E88 0061;	
    // (ເຈ) LAO VOWEL SIGN E, LAO LETTER CO	[2E65 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E88, 0x0061 };
    uint32_t const ces[12] = { 0x2E65, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_357)
{
    // 0EC0 0E88 0041;	
    // (ເຈ) LAO VOWEL SIGN E, LAO LETTER CO	[2E65 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E88, 0x0041 };
    uint32_t const ces[12] = { 0x2E65, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_358)
{
    // 0EC0 0E88 0062;	
    // (ເຈ) LAO VOWEL SIGN E, LAO LETTER CO	[2E65 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E88, 0x0062 };
    uint32_t const ces[12] = { 0x2E65, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_359)
{
    // 0EC1 0E88 0021;	
    // (ແຈ) LAO VOWEL SIGN EI, LAO LETTER CO	[2E65 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E88, 0x0021 };
    uint32_t const ces[12] = { 0x2E65, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_360)
{
    // 0EC1 0E88 003F;	
    // (ແຈ) LAO VOWEL SIGN EI, LAO LETTER CO	[2E65 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E88, 0x003F };
    uint32_t const ces[12] = { 0x2E65, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_361)
{
    // 0EC1 0E88 0061;	
    // (ແຈ) LAO VOWEL SIGN EI, LAO LETTER CO	[2E65 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E88, 0x0061 };
    uint32_t const ces[12] = { 0x2E65, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_362)
{
    // 0EC1 0E88 0041;	
    // (ແຈ) LAO VOWEL SIGN EI, LAO LETTER CO	[2E65 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E88, 0x0041 };
    uint32_t const ces[12] = { 0x2E65, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_363)
{
    // 0EC1 0E88 0062;	
    // (ແຈ) LAO VOWEL SIGN EI, LAO LETTER CO	[2E65 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E88, 0x0062 };
    uint32_t const ces[12] = { 0x2E65, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_364)
{
    // 0EC2 0E88 0021;	
    // (ໂຈ) LAO VOWEL SIGN O, LAO LETTER CO	[2E65 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E88, 0x0021 };
    uint32_t const ces[12] = { 0x2E65, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_365)
{
    // 0EC2 0E88 003F;	
    // (ໂຈ) LAO VOWEL SIGN O, LAO LETTER CO	[2E65 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E88, 0x003F };
    uint32_t const ces[12] = { 0x2E65, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_366)
{
    // 0EC2 0E88 0061;	
    // (ໂຈ) LAO VOWEL SIGN O, LAO LETTER CO	[2E65 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E88, 0x0061 };
    uint32_t const ces[12] = { 0x2E65, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_367)
{
    // 0EC2 0E88 0041;	
    // (ໂຈ) LAO VOWEL SIGN O, LAO LETTER CO	[2E65 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E88, 0x0041 };
    uint32_t const ces[12] = { 0x2E65, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_368)
{
    // 0EC2 0E88 0062;	
    // (ໂຈ) LAO VOWEL SIGN O, LAO LETTER CO	[2E65 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E88, 0x0062 };
    uint32_t const ces[12] = { 0x2E65, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_369)
{
    // 0EC3 0E88 0021;	
    // (ໃຈ) LAO VOWEL SIGN AY, LAO LETTER CO	[2E65 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E88, 0x0021 };
    uint32_t const ces[12] = { 0x2E65, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_370)
{
    // 0EC3 0E88 003F;	
    // (ໃຈ) LAO VOWEL SIGN AY, LAO LETTER CO	[2E65 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E88, 0x003F };
    uint32_t const ces[12] = { 0x2E65, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_371)
{
    // 0EC3 0E88 0061;	
    // (ໃຈ) LAO VOWEL SIGN AY, LAO LETTER CO	[2E65 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E88, 0x0061 };
    uint32_t const ces[12] = { 0x2E65, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_372)
{
    // 0EC3 0E88 0041;	
    // (ໃຈ) LAO VOWEL SIGN AY, LAO LETTER CO	[2E65 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E88, 0x0041 };
    uint32_t const ces[12] = { 0x2E65, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_373)
{
    // 0EC3 0E88 0062;	
    // (ໃຈ) LAO VOWEL SIGN AY, LAO LETTER CO	[2E65 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E88, 0x0062 };
    uint32_t const ces[12] = { 0x2E65, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_374)
{
    // 0EC4 0E88 0021;	
    // (ໄຈ) LAO VOWEL SIGN AI, LAO LETTER CO	[2E65 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E88, 0x0021 };
    uint32_t const ces[12] = { 0x2E65, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_375)
{
    // 0EC4 0E88 003F;	
    // (ໄຈ) LAO VOWEL SIGN AI, LAO LETTER CO	[2E65 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E88, 0x003F };
    uint32_t const ces[12] = { 0x2E65, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_376)
{
    // 0EC4 0E88 0061;	
    // (ໄຈ) LAO VOWEL SIGN AI, LAO LETTER CO	[2E65 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E88, 0x0061 };
    uint32_t const ces[12] = { 0x2E65, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_377)
{
    // 0EC4 0E88 0041;	
    // (ໄຈ) LAO VOWEL SIGN AI, LAO LETTER CO	[2E65 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E88, 0x0041 };
    uint32_t const ces[12] = { 0x2E65, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_378)
{
    // 0EC4 0E88 0062;	
    // (ໄຈ) LAO VOWEL SIGN AI, LAO LETTER CO	[2E65 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E88, 0x0062 };
    uint32_t const ces[12] = { 0x2E65, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_379)
{
    // 0EAA 0021;	
    // (ສ) LAO LETTER SO SUNG	[2E66 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EAA, 0x0021 };
    uint32_t const ces[9] = { 0x2E66, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_380)
{
    // 0EAA 003F;	
    // (ສ) LAO LETTER SO SUNG	[2E66 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EAA, 0x003F };
    uint32_t const ces[9] = { 0x2E66, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_381)
{
    // 0EAA 0061;	
    // (ສ) LAO LETTER SO SUNG	[2E66 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EAA, 0x0061 };
    uint32_t const ces[9] = { 0x2E66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_382)
{
    // 0EAA 0041;	
    // (ສ) LAO LETTER SO SUNG	[2E66 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EAA, 0x0041 };
    uint32_t const ces[9] = { 0x2E66, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_383)
{
    // 0EAA 0062;	
    // (ສ) LAO LETTER SO SUNG	[2E66 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EAA, 0x0062 };
    uint32_t const ces[9] = { 0x2E66, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_384)
{
    // 0EC0 0EAA 0021;	
    // (ເສ) LAO VOWEL SIGN E, LAO LETTER SO SUNG	[2E66 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EAA, 0x0021 };
    uint32_t const ces[12] = { 0x2E66, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_385)
{
    // 0EC0 0EAA 003F;	
    // (ເສ) LAO VOWEL SIGN E, LAO LETTER SO SUNG	[2E66 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EAA, 0x003F };
    uint32_t const ces[12] = { 0x2E66, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_386)
{
    // 0EC0 0EAA 0061;	
    // (ເສ) LAO VOWEL SIGN E, LAO LETTER SO SUNG	[2E66 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EAA, 0x0061 };
    uint32_t const ces[12] = { 0x2E66, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_387)
{
    // 0EC0 0EAA 0041;	
    // (ເສ) LAO VOWEL SIGN E, LAO LETTER SO SUNG	[2E66 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EAA, 0x0041 };
    uint32_t const ces[12] = { 0x2E66, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_388)
{
    // 0EC0 0EAA 0062;	
    // (ເສ) LAO VOWEL SIGN E, LAO LETTER SO SUNG	[2E66 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EAA, 0x0062 };
    uint32_t const ces[12] = { 0x2E66, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_389)
{
    // 0EC1 0EAA 0021;	
    // (ແສ) LAO VOWEL SIGN EI, LAO LETTER SO SUNG	[2E66 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EAA, 0x0021 };
    uint32_t const ces[12] = { 0x2E66, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_390)
{
    // 0EC1 0EAA 003F;	
    // (ແສ) LAO VOWEL SIGN EI, LAO LETTER SO SUNG	[2E66 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EAA, 0x003F };
    uint32_t const ces[12] = { 0x2E66, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_391)
{
    // 0EC1 0EAA 0061;	
    // (ແສ) LAO VOWEL SIGN EI, LAO LETTER SO SUNG	[2E66 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EAA, 0x0061 };
    uint32_t const ces[12] = { 0x2E66, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_392)
{
    // 0EC1 0EAA 0041;	
    // (ແສ) LAO VOWEL SIGN EI, LAO LETTER SO SUNG	[2E66 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EAA, 0x0041 };
    uint32_t const ces[12] = { 0x2E66, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_393)
{
    // 0EC1 0EAA 0062;	
    // (ແສ) LAO VOWEL SIGN EI, LAO LETTER SO SUNG	[2E66 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EAA, 0x0062 };
    uint32_t const ces[12] = { 0x2E66, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_394)
{
    // 0EC2 0EAA 0021;	
    // (ໂສ) LAO VOWEL SIGN O, LAO LETTER SO SUNG	[2E66 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EAA, 0x0021 };
    uint32_t const ces[12] = { 0x2E66, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_395)
{
    // 0EC2 0EAA 003F;	
    // (ໂສ) LAO VOWEL SIGN O, LAO LETTER SO SUNG	[2E66 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EAA, 0x003F };
    uint32_t const ces[12] = { 0x2E66, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_396)
{
    // 0EC2 0EAA 0061;	
    // (ໂສ) LAO VOWEL SIGN O, LAO LETTER SO SUNG	[2E66 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EAA, 0x0061 };
    uint32_t const ces[12] = { 0x2E66, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_397)
{
    // 0EC2 0EAA 0041;	
    // (ໂສ) LAO VOWEL SIGN O, LAO LETTER SO SUNG	[2E66 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EAA, 0x0041 };
    uint32_t const ces[12] = { 0x2E66, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_398)
{
    // 0EC2 0EAA 0062;	
    // (ໂສ) LAO VOWEL SIGN O, LAO LETTER SO SUNG	[2E66 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EAA, 0x0062 };
    uint32_t const ces[12] = { 0x2E66, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_399)
{
    // 0EC3 0EAA 0021;	
    // (ໃສ) LAO VOWEL SIGN AY, LAO LETTER SO SUNG	[2E66 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EAA, 0x0021 };
    uint32_t const ces[12] = { 0x2E66, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_400)
{
    // 0EC3 0EAA 003F;	
    // (ໃສ) LAO VOWEL SIGN AY, LAO LETTER SO SUNG	[2E66 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EAA, 0x003F };
    uint32_t const ces[12] = { 0x2E66, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_401)
{
    // 0EC3 0EAA 0061;	
    // (ໃສ) LAO VOWEL SIGN AY, LAO LETTER SO SUNG	[2E66 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EAA, 0x0061 };
    uint32_t const ces[12] = { 0x2E66, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_402)
{
    // 0EC3 0EAA 0041;	
    // (ໃສ) LAO VOWEL SIGN AY, LAO LETTER SO SUNG	[2E66 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EAA, 0x0041 };
    uint32_t const ces[12] = { 0x2E66, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_403)
{
    // 0EC3 0EAA 0062;	
    // (ໃສ) LAO VOWEL SIGN AY, LAO LETTER SO SUNG	[2E66 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EAA, 0x0062 };
    uint32_t const ces[12] = { 0x2E66, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_404)
{
    // 0EC4 0EAA 0021;	
    // (ໄສ) LAO VOWEL SIGN AI, LAO LETTER SO SUNG	[2E66 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EAA, 0x0021 };
    uint32_t const ces[12] = { 0x2E66, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_405)
{
    // 0EC4 0EAA 003F;	
    // (ໄສ) LAO VOWEL SIGN AI, LAO LETTER SO SUNG	[2E66 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EAA, 0x003F };
    uint32_t const ces[12] = { 0x2E66, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_406)
{
    // 0EC4 0EAA 0061;	
    // (ໄສ) LAO VOWEL SIGN AI, LAO LETTER SO SUNG	[2E66 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EAA, 0x0061 };
    uint32_t const ces[12] = { 0x2E66, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_407)
{
    // 0EC4 0EAA 0041;	
    // (ໄສ) LAO VOWEL SIGN AI, LAO LETTER SO SUNG	[2E66 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EAA, 0x0041 };
    uint32_t const ces[12] = { 0x2E66, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_408)
{
    // 0EC4 0EAA 0062;	
    // (ໄສ) LAO VOWEL SIGN AI, LAO LETTER SO SUNG	[2E66 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EAA, 0x0062 };
    uint32_t const ces[12] = { 0x2E66, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_409)
{
    // 0E8A 0021;	
    // (ຊ) LAO LETTER SO TAM	[2E67 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E8A, 0x0021 };
    uint32_t const ces[9] = { 0x2E67, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_410)
{
    // 0E8A 003F;	
    // (ຊ) LAO LETTER SO TAM	[2E67 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E8A, 0x003F };
    uint32_t const ces[9] = { 0x2E67, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_411)
{
    // 0E8A 0061;	
    // (ຊ) LAO LETTER SO TAM	[2E67 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E8A, 0x0061 };
    uint32_t const ces[9] = { 0x2E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_412)
{
    // 0E8A 0041;	
    // (ຊ) LAO LETTER SO TAM	[2E67 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E8A, 0x0041 };
    uint32_t const ces[9] = { 0x2E67, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_413)
{
    // 0E8A 0062;	
    // (ຊ) LAO LETTER SO TAM	[2E67 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E8A, 0x0062 };
    uint32_t const ces[9] = { 0x2E67, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_414)
{
    // 0EC0 0E8A 0021;	
    // (ເຊ) LAO VOWEL SIGN E, LAO LETTER SO TAM	[2E67 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E8A, 0x0021 };
    uint32_t const ces[12] = { 0x2E67, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_415)
{
    // 0EC0 0E8A 003F;	
    // (ເຊ) LAO VOWEL SIGN E, LAO LETTER SO TAM	[2E67 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E8A, 0x003F };
    uint32_t const ces[12] = { 0x2E67, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_416)
{
    // 0EC0 0E8A 0061;	
    // (ເຊ) LAO VOWEL SIGN E, LAO LETTER SO TAM	[2E67 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E67, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_417)
{
    // 0EC0 0E8A 0041;	
    // (ເຊ) LAO VOWEL SIGN E, LAO LETTER SO TAM	[2E67 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E8A, 0x0041 };
    uint32_t const ces[12] = { 0x2E67, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_418)
{
    // 0EC0 0E8A 0062;	
    // (ເຊ) LAO VOWEL SIGN E, LAO LETTER SO TAM	[2E67 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E8A, 0x0062 };
    uint32_t const ces[12] = { 0x2E67, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_419)
{
    // 0EC1 0E8A 0021;	
    // (ແຊ) LAO VOWEL SIGN EI, LAO LETTER SO TAM	[2E67 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E8A, 0x0021 };
    uint32_t const ces[12] = { 0x2E67, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_420)
{
    // 0EC1 0E8A 003F;	
    // (ແຊ) LAO VOWEL SIGN EI, LAO LETTER SO TAM	[2E67 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E8A, 0x003F };
    uint32_t const ces[12] = { 0x2E67, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_421)
{
    // 0EC1 0E8A 0061;	
    // (ແຊ) LAO VOWEL SIGN EI, LAO LETTER SO TAM	[2E67 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E67, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_422)
{
    // 0EC1 0E8A 0041;	
    // (ແຊ) LAO VOWEL SIGN EI, LAO LETTER SO TAM	[2E67 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E8A, 0x0041 };
    uint32_t const ces[12] = { 0x2E67, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_423)
{
    // 0EC1 0E8A 0062;	
    // (ແຊ) LAO VOWEL SIGN EI, LAO LETTER SO TAM	[2E67 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E8A, 0x0062 };
    uint32_t const ces[12] = { 0x2E67, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_424)
{
    // 0EC2 0E8A 0021;	
    // (ໂຊ) LAO VOWEL SIGN O, LAO LETTER SO TAM	[2E67 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E8A, 0x0021 };
    uint32_t const ces[12] = { 0x2E67, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_425)
{
    // 0EC2 0E8A 003F;	
    // (ໂຊ) LAO VOWEL SIGN O, LAO LETTER SO TAM	[2E67 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E8A, 0x003F };
    uint32_t const ces[12] = { 0x2E67, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_426)
{
    // 0EC2 0E8A 0061;	
    // (ໂຊ) LAO VOWEL SIGN O, LAO LETTER SO TAM	[2E67 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E67, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_427)
{
    // 0EC2 0E8A 0041;	
    // (ໂຊ) LAO VOWEL SIGN O, LAO LETTER SO TAM	[2E67 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E8A, 0x0041 };
    uint32_t const ces[12] = { 0x2E67, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_428)
{
    // 0EC2 0E8A 0062;	
    // (ໂຊ) LAO VOWEL SIGN O, LAO LETTER SO TAM	[2E67 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E8A, 0x0062 };
    uint32_t const ces[12] = { 0x2E67, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_429)
{
    // 0EC3 0E8A 0021;	
    // (ໃຊ) LAO VOWEL SIGN AY, LAO LETTER SO TAM	[2E67 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E8A, 0x0021 };
    uint32_t const ces[12] = { 0x2E67, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_430)
{
    // 0EC3 0E8A 003F;	
    // (ໃຊ) LAO VOWEL SIGN AY, LAO LETTER SO TAM	[2E67 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E8A, 0x003F };
    uint32_t const ces[12] = { 0x2E67, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_431)
{
    // 0EC3 0E8A 0061;	
    // (ໃຊ) LAO VOWEL SIGN AY, LAO LETTER SO TAM	[2E67 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E67, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_432)
{
    // 0EC3 0E8A 0041;	
    // (ໃຊ) LAO VOWEL SIGN AY, LAO LETTER SO TAM	[2E67 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E8A, 0x0041 };
    uint32_t const ces[12] = { 0x2E67, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_433)
{
    // 0EC3 0E8A 0062;	
    // (ໃຊ) LAO VOWEL SIGN AY, LAO LETTER SO TAM	[2E67 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E8A, 0x0062 };
    uint32_t const ces[12] = { 0x2E67, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_434)
{
    // 0EC4 0E8A 0021;	
    // (ໄຊ) LAO VOWEL SIGN AI, LAO LETTER SO TAM	[2E67 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E8A, 0x0021 };
    uint32_t const ces[12] = { 0x2E67, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_435)
{
    // 0EC4 0E8A 003F;	
    // (ໄຊ) LAO VOWEL SIGN AI, LAO LETTER SO TAM	[2E67 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E8A, 0x003F };
    uint32_t const ces[12] = { 0x2E67, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_436)
{
    // 0EC4 0E8A 0061;	
    // (ໄຊ) LAO VOWEL SIGN AI, LAO LETTER SO TAM	[2E67 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E8A, 0x0061 };
    uint32_t const ces[12] = { 0x2E67, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_437)
{
    // 0EC4 0E8A 0041;	
    // (ໄຊ) LAO VOWEL SIGN AI, LAO LETTER SO TAM	[2E67 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E8A, 0x0041 };
    uint32_t const ces[12] = { 0x2E67, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_438)
{
    // 0EC4 0E8A 0062;	
    // (ໄຊ) LAO VOWEL SIGN AI, LAO LETTER SO TAM	[2E67 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E8A, 0x0062 };
    uint32_t const ces[12] = { 0x2E67, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_439)
{
    // 0EDF 0021;	
    // (ໟ) LAO LETTER KHMU NYO	[2E68 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EDF, 0x0021 };
    uint32_t const ces[9] = { 0x2E68, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_440)
{
    // 0EDF 003F;	
    // (ໟ) LAO LETTER KHMU NYO	[2E68 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EDF, 0x003F };
    uint32_t const ces[9] = { 0x2E68, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_441)
{
    // 0EDF 0061;	
    // (ໟ) LAO LETTER KHMU NYO	[2E68 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EDF, 0x0061 };
    uint32_t const ces[9] = { 0x2E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_442)
{
    // 0EDF 0041;	
    // (ໟ) LAO LETTER KHMU NYO	[2E68 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0EDF, 0x0041 };
    uint32_t const ces[9] = { 0x2E68, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_443)
{
    // 0EDF 0062;	
    // (ໟ) LAO LETTER KHMU NYO	[2E68 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0EDF, 0x0062 };
    uint32_t const ces[9] = { 0x2E68, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_444)
{
    // 0EC0 0EDF 0021;	
    // (ເໟ) LAO VOWEL SIGN E, LAO LETTER KHMU NYO	[2E68 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EDF, 0x0021 };
    uint32_t const ces[12] = { 0x2E68, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_445)
{
    // 0EC0 0EDF 003F;	
    // (ເໟ) LAO VOWEL SIGN E, LAO LETTER KHMU NYO	[2E68 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EDF, 0x003F };
    uint32_t const ces[12] = { 0x2E68, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_446)
{
    // 0EC0 0EDF 0061;	
    // (ເໟ) LAO VOWEL SIGN E, LAO LETTER KHMU NYO	[2E68 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EDF, 0x0061 };
    uint32_t const ces[12] = { 0x2E68, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_447)
{
    // 0EC0 0EDF 0041;	
    // (ເໟ) LAO VOWEL SIGN E, LAO LETTER KHMU NYO	[2E68 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EDF, 0x0041 };
    uint32_t const ces[12] = { 0x2E68, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_448)
{
    // 0EC0 0EDF 0062;	
    // (ເໟ) LAO VOWEL SIGN E, LAO LETTER KHMU NYO	[2E68 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0EDF, 0x0062 };
    uint32_t const ces[12] = { 0x2E68, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_449)
{
    // 0EC1 0EDF 0021;	
    // (ແໟ) LAO VOWEL SIGN EI, LAO LETTER KHMU NYO	[2E68 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EDF, 0x0021 };
    uint32_t const ces[12] = { 0x2E68, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_450)
{
    // 0EC1 0EDF 003F;	
    // (ແໟ) LAO VOWEL SIGN EI, LAO LETTER KHMU NYO	[2E68 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EDF, 0x003F };
    uint32_t const ces[12] = { 0x2E68, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_451)
{
    // 0EC1 0EDF 0061;	
    // (ແໟ) LAO VOWEL SIGN EI, LAO LETTER KHMU NYO	[2E68 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EDF, 0x0061 };
    uint32_t const ces[12] = { 0x2E68, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_452)
{
    // 0EC1 0EDF 0041;	
    // (ແໟ) LAO VOWEL SIGN EI, LAO LETTER KHMU NYO	[2E68 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EDF, 0x0041 };
    uint32_t const ces[12] = { 0x2E68, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_453)
{
    // 0EC1 0EDF 0062;	
    // (ແໟ) LAO VOWEL SIGN EI, LAO LETTER KHMU NYO	[2E68 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0EDF, 0x0062 };
    uint32_t const ces[12] = { 0x2E68, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_454)
{
    // 0EC2 0EDF 0021;	
    // (ໂໟ) LAO VOWEL SIGN O, LAO LETTER KHMU NYO	[2E68 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EDF, 0x0021 };
    uint32_t const ces[12] = { 0x2E68, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_455)
{
    // 0EC2 0EDF 003F;	
    // (ໂໟ) LAO VOWEL SIGN O, LAO LETTER KHMU NYO	[2E68 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EDF, 0x003F };
    uint32_t const ces[12] = { 0x2E68, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_456)
{
    // 0EC2 0EDF 0061;	
    // (ໂໟ) LAO VOWEL SIGN O, LAO LETTER KHMU NYO	[2E68 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EDF, 0x0061 };
    uint32_t const ces[12] = { 0x2E68, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_457)
{
    // 0EC2 0EDF 0041;	
    // (ໂໟ) LAO VOWEL SIGN O, LAO LETTER KHMU NYO	[2E68 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EDF, 0x0041 };
    uint32_t const ces[12] = { 0x2E68, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_458)
{
    // 0EC2 0EDF 0062;	
    // (ໂໟ) LAO VOWEL SIGN O, LAO LETTER KHMU NYO	[2E68 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0EDF, 0x0062 };
    uint32_t const ces[12] = { 0x2E68, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_459)
{
    // 0EC3 0EDF 0021;	
    // (ໃໟ) LAO VOWEL SIGN AY, LAO LETTER KHMU NYO	[2E68 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EDF, 0x0021 };
    uint32_t const ces[12] = { 0x2E68, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_460)
{
    // 0EC3 0EDF 003F;	
    // (ໃໟ) LAO VOWEL SIGN AY, LAO LETTER KHMU NYO	[2E68 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EDF, 0x003F };
    uint32_t const ces[12] = { 0x2E68, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_461)
{
    // 0EC3 0EDF 0061;	
    // (ໃໟ) LAO VOWEL SIGN AY, LAO LETTER KHMU NYO	[2E68 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EDF, 0x0061 };
    uint32_t const ces[12] = { 0x2E68, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_462)
{
    // 0EC3 0EDF 0041;	
    // (ໃໟ) LAO VOWEL SIGN AY, LAO LETTER KHMU NYO	[2E68 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EDF, 0x0041 };
    uint32_t const ces[12] = { 0x2E68, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_463)
{
    // 0EC3 0EDF 0062;	
    // (ໃໟ) LAO VOWEL SIGN AY, LAO LETTER KHMU NYO	[2E68 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0EDF, 0x0062 };
    uint32_t const ces[12] = { 0x2E68, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_464)
{
    // 0EC4 0EDF 0021;	
    // (ໄໟ) LAO VOWEL SIGN AI, LAO LETTER KHMU NYO	[2E68 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EDF, 0x0021 };
    uint32_t const ces[12] = { 0x2E68, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_465)
{
    // 0EC4 0EDF 003F;	
    // (ໄໟ) LAO VOWEL SIGN AI, LAO LETTER KHMU NYO	[2E68 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EDF, 0x003F };
    uint32_t const ces[12] = { 0x2E68, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_466)
{
    // 0EC4 0EDF 0061;	
    // (ໄໟ) LAO VOWEL SIGN AI, LAO LETTER KHMU NYO	[2E68 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EDF, 0x0061 };
    uint32_t const ces[12] = { 0x2E68, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_467)
{
    // 0EC4 0EDF 0041;	
    // (ໄໟ) LAO VOWEL SIGN AI, LAO LETTER KHMU NYO	[2E68 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EDF, 0x0041 };
    uint32_t const ces[12] = { 0x2E68, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_468)
{
    // 0EC4 0EDF 0062;	
    // (ໄໟ) LAO VOWEL SIGN AI, LAO LETTER KHMU NYO	[2E68 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0EDF, 0x0062 };
    uint32_t const ces[12] = { 0x2E68, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_469)
{
    // 0E8D 0021;	
    // (ຍ) LAO LETTER NYO	[2E69 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E8D, 0x0021 };
    uint32_t const ces[9] = { 0x2E69, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_470)
{
    // 0E8D 003F;	
    // (ຍ) LAO LETTER NYO	[2E69 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E8D, 0x003F };
    uint32_t const ces[9] = { 0x2E69, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_471)
{
    // 0E8D 0061;	
    // (ຍ) LAO LETTER NYO	[2E69 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E8D, 0x0061 };
    uint32_t const ces[9] = { 0x2E69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_472)
{
    // 0E8D 0041;	
    // (ຍ) LAO LETTER NYO	[2E69 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0E8D, 0x0041 };
    uint32_t const ces[9] = { 0x2E69, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_473)
{
    // 0E8D 0062;	
    // (ຍ) LAO LETTER NYO	[2E69 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E8D, 0x0062 };
    uint32_t const ces[9] = { 0x2E69, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_474)
{
    // 0EC0 0E8D 0021;	
    // (ເຍ) LAO VOWEL SIGN E, LAO LETTER NYO	[2E69 2E8B 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E8D, 0x0021 };
    uint32_t const ces[12] = { 0x2E69, 0x2E8B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_475)
{
    // 0EC0 0E8D 003F;	
    // (ເຍ) LAO VOWEL SIGN E, LAO LETTER NYO	[2E69 2E8B 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E8D, 0x003F };
    uint32_t const ces[12] = { 0x2E69, 0x2E8B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_476)
{
    // 0EC0 0E8D 0061;	
    // (ເຍ) LAO VOWEL SIGN E, LAO LETTER NYO	[2E69 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E69, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_477)
{
    // 0EC0 0E8D 0041;	
    // (ເຍ) LAO VOWEL SIGN E, LAO LETTER NYO	[2E69 2E8B 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E8D, 0x0041 };
    uint32_t const ces[12] = { 0x2E69, 0x2E8B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_478)
{
    // 0EC0 0E8D 0062;	
    // (ເຍ) LAO VOWEL SIGN E, LAO LETTER NYO	[2E69 2E8B 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC0, 0x0E8D, 0x0062 };
    uint32_t const ces[12] = { 0x2E69, 0x2E8B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_479)
{
    // 0EC1 0E8D 0021;	
    // (ແຍ) LAO VOWEL SIGN EI, LAO LETTER NYO	[2E69 2E8C 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E8D, 0x0021 };
    uint32_t const ces[12] = { 0x2E69, 0x2E8C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_480)
{
    // 0EC1 0E8D 003F;	
    // (ແຍ) LAO VOWEL SIGN EI, LAO LETTER NYO	[2E69 2E8C 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E8D, 0x003F };
    uint32_t const ces[12] = { 0x2E69, 0x2E8C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_481)
{
    // 0EC1 0E8D 0061;	
    // (ແຍ) LAO VOWEL SIGN EI, LAO LETTER NYO	[2E69 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E69, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_482)
{
    // 0EC1 0E8D 0041;	
    // (ແຍ) LAO VOWEL SIGN EI, LAO LETTER NYO	[2E69 2E8C 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E8D, 0x0041 };
    uint32_t const ces[12] = { 0x2E69, 0x2E8C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_483)
{
    // 0EC1 0E8D 0062;	
    // (ແຍ) LAO VOWEL SIGN EI, LAO LETTER NYO	[2E69 2E8C 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC1, 0x0E8D, 0x0062 };
    uint32_t const ces[12] = { 0x2E69, 0x2E8C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_484)
{
    // 0EC2 0E8D 0021;	
    // (ໂຍ) LAO VOWEL SIGN O, LAO LETTER NYO	[2E69 2E8D 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E8D, 0x0021 };
    uint32_t const ces[12] = { 0x2E69, 0x2E8D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_485)
{
    // 0EC2 0E8D 003F;	
    // (ໂຍ) LAO VOWEL SIGN O, LAO LETTER NYO	[2E69 2E8D 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E8D, 0x003F };
    uint32_t const ces[12] = { 0x2E69, 0x2E8D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_486)
{
    // 0EC2 0E8D 0061;	
    // (ໂຍ) LAO VOWEL SIGN O, LAO LETTER NYO	[2E69 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E69, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_487)
{
    // 0EC2 0E8D 0041;	
    // (ໂຍ) LAO VOWEL SIGN O, LAO LETTER NYO	[2E69 2E8D 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E8D, 0x0041 };
    uint32_t const ces[12] = { 0x2E69, 0x2E8D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_488)
{
    // 0EC2 0E8D 0062;	
    // (ໂຍ) LAO VOWEL SIGN O, LAO LETTER NYO	[2E69 2E8D 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC2, 0x0E8D, 0x0062 };
    uint32_t const ces[12] = { 0x2E69, 0x2E8D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_489)
{
    // 0EC3 0E8D 0021;	
    // (ໃຍ) LAO VOWEL SIGN AY, LAO LETTER NYO	[2E69 2E8E 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E8D, 0x0021 };
    uint32_t const ces[12] = { 0x2E69, 0x2E8E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_490)
{
    // 0EC3 0E8D 003F;	
    // (ໃຍ) LAO VOWEL SIGN AY, LAO LETTER NYO	[2E69 2E8E 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E8D, 0x003F };
    uint32_t const ces[12] = { 0x2E69, 0x2E8E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_491)
{
    // 0EC3 0E8D 0061;	
    // (ໃຍ) LAO VOWEL SIGN AY, LAO LETTER NYO	[2E69 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E69, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_492)
{
    // 0EC3 0E8D 0041;	
    // (ໃຍ) LAO VOWEL SIGN AY, LAO LETTER NYO	[2E69 2E8E 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E8D, 0x0041 };
    uint32_t const ces[12] = { 0x2E69, 0x2E8E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_493)
{
    // 0EC3 0E8D 0062;	
    // (ໃຍ) LAO VOWEL SIGN AY, LAO LETTER NYO	[2E69 2E8E 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC3, 0x0E8D, 0x0062 };
    uint32_t const ces[12] = { 0x2E69, 0x2E8E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_494)
{
    // 0EC4 0E8D 0021;	
    // (ໄຍ) LAO VOWEL SIGN AI, LAO LETTER NYO	[2E69 2E8F 0261 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E8D, 0x0021 };
    uint32_t const ces[12] = { 0x2E69, 0x2E8F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_495)
{
    // 0EC4 0E8D 003F;	
    // (ໄຍ) LAO VOWEL SIGN AI, LAO LETTER NYO	[2E69 2E8F 0267 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E8D, 0x003F };
    uint32_t const ces[12] = { 0x2E69, 0x2E8F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_496)
{
    // 0EC4 0E8D 0061;	
    // (ໄຍ) LAO VOWEL SIGN AI, LAO LETTER NYO	[2E69 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E8D, 0x0061 };
    uint32_t const ces[12] = { 0x2E69, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_497)
{
    // 0EC4 0E8D 0041;	
    // (ໄຍ) LAO VOWEL SIGN AI, LAO LETTER NYO	[2E69 2E8F 1CAD | 0020 0020 0020 | 0002 0002 0008 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E8D, 0x0041 };
    uint32_t const ces[12] = { 0x2E69, 0x2E8F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_498)
{
    // 0EC4 0E8D 0062;	
    // (ໄຍ) LAO VOWEL SIGN AI, LAO LETTER NYO	[2E69 2E8F 1CC6 | 0020 0020 0020 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x0EC4, 0x0E8D, 0x0062 };
    uint32_t const ces[12] = { 0x2E69, 0x2E8F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_189_499)
{
    // 0E94 0021;	
    // (ດ) LAO LETTER DO	[2E6A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0E94, 0x0021 };
    uint32_t const ces[9] = { 0x2E6A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

