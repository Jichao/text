// Warning! This file is autogenerated.
#include "collation_tests.hpp"

#include <boost/algorithm/cxx14/equal.hpp>

#include <gtest/gtest.h>



TEST(collation, non_ignorable_135_000)
{
    // 2126 0334 0345 0314 0342;	
    // (ᾩ̴) OHM SIGN, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI, COMBINING REVERSED COMMA ABOVE	[2047 | 0020 004A 0023 002A 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x2126, 0x0334, 0x0345, 0x0314, 0x0342 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_001)
{
    // 2126 0345 0314 0334 0342;	
    // (ᾩ̴) OHM SIGN, COMBINING GREEK YPOGEGRAMMENI, COMBINING REVERSED COMMA ABOVE, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 002A 004C | 0008 0002 0002 0002 0002 |]

    uint32_t cps[5] = { 0x2126, 0x0345, 0x0314, 0x0334, 0x0342 };
    uint32_t const ces[14] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x002A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 5, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 14);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 14))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_002)
{
    // 03C9 0334 0314 0345;	
    // (ὡ̴) GREEK SMALL LETTER OMEGA, COMBINING TILDE OVERLAY, COMBINING REVERSED COMMA ABOVE	[2047 | 0020 004A 0023 004C | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0334, 0x0314, 0x0345 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_003)
{
    // 1F61 0334 0345;	
    // (ὡ̴) GREEK SMALL LETTER OMEGA WITH DASIA, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 004C | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F61, 0x0334, 0x0345 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_004)
{
    // 1F61 0345 0334;	
    // (ᾡ) GREEK SMALL LETTER OMEGA WITH DASIA, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0023 004C | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1F61, 0x0345, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_005)
{
    // 1FA1 0334;	
    // (ᾡ) GREEK SMALL LETTER OMEGA WITH DASIA AND YPOGEGRAMMENI	[2047 | 0020 004A 0023 004C | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA1, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_006)
{
    // 2126 0314 0345 0334;	
    // (ᾩ) OHM SIGN, COMBINING REVERSED COMMA ABOVE, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0023 004C | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x2126, 0x0314, 0x0345, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_007)
{
    // 2126 0334 0345 0314;	
    // (ῼ̴) OHM SIGN, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0023 004C | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x2126, 0x0334, 0x0345, 0x0314 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_008)
{
    // 2126 0345 0314 0334;	
    // (ᾩ) OHM SIGN, COMBINING GREEK YPOGEGRAMMENI, COMBINING REVERSED COMMA ABOVE	[2047 | 0020 004A 0023 004C | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x2126, 0x0345, 0x0314, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_009)
{
    // 2126 0345 0334 0314;	
    // (ῼ̴) OHM SIGN, COMBINING GREEK YPOGEGRAMMENI, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0023 004C | 0008 0002 0002 0002 |]

    uint32_t cps[4] = { 0x2126, 0x0345, 0x0334, 0x0314 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0023, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_010)
{
    // 03C9 0301 0334;	
    // (ώ) GREEK SMALL LETTER OMEGA, COMBINING ACUTE ACCENT	[2047 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C9, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_011)
{
    // 03C9 0341 0334;	
    // (ώ) GREEK SMALL LETTER OMEGA, COMBINING ACUTE TONE MARK	[2047 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C9, 0x0341, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_012)
{
    // 03CE 0334;	
    // (ώ) GREEK SMALL LETTER OMEGA WITH TONOS	[2047 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CE, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_013)
{
    // 1F7D 0334;	
    // (ώ) GREEK SMALL LETTER OMEGA WITH OXIA	[2047 | 0020 004A 0024 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_014)
{
    // 038F 0334;	
    // (Ώ) GREEK CAPITAL LETTER OMEGA WITH TONOS	[2047 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x038F, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_015)
{
    // 03A9 0301 0334;	
    // (Ώ) GREEK CAPITAL LETTER OMEGA, COMBINING ACUTE ACCENT	[2047 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A9, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_016)
{
    // 03A9 0341 0334;	
    // (Ώ) GREEK CAPITAL LETTER OMEGA, COMBINING ACUTE TONE MARK	[2047 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A9, 0x0341, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_017)
{
    // 2126 0301 0334;	
    // (Ώ) OHM SIGN, COMBINING ACUTE ACCENT	[2047 | 0020 004A 0024 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x2126, 0x0301, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0024, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_018)
{
    // 03C9 0301 0345 0334;	
    // (ῴ) GREEK SMALL LETTER OMEGA, COMBINING ACUTE ACCENT, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0024 004C | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0301, 0x0345, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_019)
{
    // 03C9 0334 0345 0301;	
    // (ῳ̴) GREEK SMALL LETTER OMEGA, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0024 004C | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0334, 0x0345, 0x0301 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_020)
{
    // 03C9 0341 0345 0334;	
    // (ῴ) GREEK SMALL LETTER OMEGA, COMBINING ACUTE TONE MARK, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0024 004C | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0341, 0x0345, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_021)
{
    // 1FF4 0334;	
    // (ῴ) GREEK SMALL LETTER OMEGA WITH OXIA AND YPOGEGRAMMENI	[2047 | 0020 004A 0024 004C | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF4, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0024, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_022)
{
    // 03C9 0300 0334;	
    // (ὼ) GREEK SMALL LETTER OMEGA, COMBINING GRAVE ACCENT	[2047 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C9, 0x0300, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_023)
{
    // 03C9 0334 0300;	
    // (ω̴) GREEK SMALL LETTER OMEGA, COMBINING TILDE OVERLAY	[2047 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C9, 0x0334, 0x0300 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_024)
{
    // 03C9 0340 0334;	
    // (ὼ) GREEK SMALL LETTER OMEGA, COMBINING GRAVE TONE MARK	[2047 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C9, 0x0340, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_025)
{
    // 1F7C 0334;	
    // (ὼ) GREEK SMALL LETTER OMEGA WITH VARIA	[2047 | 0020 004A 0025 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_026)
{
    // 03A9 0300 0334;	
    // (Ὼ) GREEK CAPITAL LETTER OMEGA, COMBINING GRAVE ACCENT	[2047 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A9, 0x0300, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_027)
{
    // 03A9 0340 0334;	
    // (Ὼ) GREEK CAPITAL LETTER OMEGA, COMBINING GRAVE TONE MARK	[2047 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A9, 0x0340, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_028)
{
    // 2126 0300 0334;	
    // (Ὼ) OHM SIGN, COMBINING GRAVE ACCENT	[2047 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x2126, 0x0300, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_029)
{
    // 2126 0340 0334;	
    // (Ὼ) OHM SIGN, COMBINING GRAVE TONE MARK	[2047 | 0020 004A 0025 | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x2126, 0x0340, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0025, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_030)
{
    // 03C9 0300 0345 0334;	
    // (ῲ) GREEK SMALL LETTER OMEGA, COMBINING GRAVE ACCENT, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0025 004C | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0300, 0x0345, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_031)
{
    // 03C9 0334 0345 0300;	
    // (ῳ̴) GREEK SMALL LETTER OMEGA, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0025 004C | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0334, 0x0345, 0x0300 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_032)
{
    // 03C9 0334 0345 0340;	
    // (ῳ̴) GREEK SMALL LETTER OMEGA, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 0025 004C | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0334, 0x0345, 0x0340 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_033)
{
    // 1FF2 0334;	
    // (ῲ) GREEK SMALL LETTER OMEGA WITH VARIA AND YPOGEGRAMMENI	[2047 | 0020 004A 0025 004C | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF2, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x0025, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_034)
{
    // 03C9 0334 0342;	
    // (ω̴) GREEK SMALL LETTER OMEGA, COMBINING TILDE OVERLAY	[2047 | 0020 004A 002A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C9, 0x0334, 0x0342 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_035)
{
    // 03C9 0342 0334;	
    // (ῶ) GREEK SMALL LETTER OMEGA, COMBINING GREEK PERISPOMENI	[2047 | 0020 004A 002A | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C9, 0x0342, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_036)
{
    // 1FF6 0334;	
    // (ῶ) GREEK SMALL LETTER OMEGA WITH PERISPOMENI	[2047 | 0020 004A 002A | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF6, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x002A, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_037)
{
    // 03C9 0334 0342 0345;	
    // (ῶ̴) GREEK SMALL LETTER OMEGA, COMBINING TILDE OVERLAY, COMBINING GREEK PERISPOMENI	[2047 | 0020 004A 002A 004C | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0334, 0x0342, 0x0345 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_038)
{
    // 03C9 0334 0345 0342;	
    // (ῳ̴) GREEK SMALL LETTER OMEGA, COMBINING TILDE OVERLAY, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 002A 004C | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0334, 0x0345, 0x0342 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_039)
{
    // 03C9 0345 0342 0334;	
    // (ῷ) GREEK SMALL LETTER OMEGA, COMBINING GREEK YPOGEGRAMMENI, COMBINING GREEK PERISPOMENI	[2047 | 0020 004A 002A 004C | 0002 0002 0002 0002 |]

    uint32_t cps[4] = { 0x03C9, 0x0345, 0x0342, 0x0334 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 4, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_040)
{
    // 1FF3 0334 0342;	
    // (ῳ̴) GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI, COMBINING TILDE OVERLAY	[2047 | 0020 004A 002A 004C | 0002 0002 0002 0002 |]

    uint32_t cps[3] = { 0x1FF3, 0x0334, 0x0342 };
    uint32_t const ces[12] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x002A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 12);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 12))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_041)
{
    // 03C9 0334 0345;	
    // (ω̴) GREEK SMALL LETTER OMEGA, COMBINING TILDE OVERLAY	[2047 | 0020 004A 004C | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C9, 0x0334, 0x0345 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_042)
{
    // 03C9 0345 0334;	
    // (ῳ) GREEK SMALL LETTER OMEGA, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 004C | 0002 0002 0002 |]

    uint32_t cps[3] = { 0x03C9, 0x0345, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_043)
{
    // 1FF3 0334;	
    // (ῳ) GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI	[2047 | 0020 004A 004C | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF3, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x004C, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_044)
{
    // 03A9 0334 0345;	
    // (Ω̴) GREEK CAPITAL LETTER OMEGA, COMBINING TILDE OVERLAY	[2047 | 0020 004A 004C | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A9, 0x0334, 0x0345 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_045)
{
    // 03A9 0345 0334;	
    // (ῼ) GREEK CAPITAL LETTER OMEGA, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 004C | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x03A9, 0x0345, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_046)
{
    // 1FFC 0334;	
    // (ῼ) GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI	[2047 | 0020 004A 004C | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FFC, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_047)
{
    // 2126 0345 0334;	
    // (ῼ) OHM SIGN, COMBINING GREEK YPOGEGRAMMENI	[2047 | 0020 004A 004C | 0008 0002 0002 |]

    uint32_t cps[3] = { 0x2126, 0x0345, 0x0334 };
    uint32_t const ces[10] = { 0x2047, 0x0000, 0x0020, 0x004A, 0x004C, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 3, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 10);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 10))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_048)
{
    // 03C9 0021;	
    // (ω) GREEK SMALL LETTER OMEGA	[2047 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C9, 0x0021 };
    uint32_t const ces[9] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_049)
{
    // 1D6DA 0021;	
    // (𝛚) MATHEMATICAL BOLD SMALL OMEGA	[2047 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6DA, 0x0021 };
    uint32_t const ces[9] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_050)
{
    // 1D714 0021;	
    // (𝜔) MATHEMATICAL ITALIC SMALL OMEGA	[2047 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D714, 0x0021 };
    uint32_t const ces[9] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_051)
{
    // 1D74E 0021;	
    // (𝝎) MATHEMATICAL BOLD ITALIC SMALL OMEGA	[2047 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74E, 0x0021 };
    uint32_t const ces[9] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_052)
{
    // 1D788 0021;	
    // (𝞈) MATHEMATICAL SANS-SERIF BOLD SMALL OMEGA	[2047 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D788, 0x0021 };
    uint32_t const ces[9] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_053)
{
    // 1D7C2 0021;	
    // (𝟂) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL OMEGA	[2047 0261 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C2, 0x0021 };
    uint32_t const ces[9] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_054)
{
    // 03A9 0021;	
    // (Ω) GREEK CAPITAL LETTER OMEGA	[2047 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A9, 0x0021 };
    uint32_t const ces[9] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_055)
{
    // 2126 0021;	
    // (Ω) OHM SIGN	[2047 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2126, 0x0021 };
    uint32_t const ces[9] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_056)
{
    // 1D6C0 0021;	
    // (𝛀) MATHEMATICAL BOLD CAPITAL OMEGA	[2047 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6C0, 0x0021 };
    uint32_t const ces[9] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_057)
{
    // 1D6FA 0021;	
    // (𝛺) MATHEMATICAL ITALIC CAPITAL OMEGA	[2047 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6FA, 0x0021 };
    uint32_t const ces[9] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_058)
{
    // 1D734 0021;	
    // (𝜴) MATHEMATICAL BOLD ITALIC CAPITAL OMEGA	[2047 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D734, 0x0021 };
    uint32_t const ces[9] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_059)
{
    // 1D76E 0021;	
    // (𝝮) MATHEMATICAL SANS-SERIF BOLD CAPITAL OMEGA	[2047 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D76E, 0x0021 };
    uint32_t const ces[9] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_060)
{
    // 1D7A8 0021;	
    // (𝞨) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL OMEGA	[2047 0261 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A8, 0x0021 };
    uint32_t const ces[9] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_061)
{
    // 1F60 0021;	
    // (ὠ) GREEK SMALL LETTER OMEGA WITH PSILI	[2047 0261 | 0020 0022 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F60, 0x0021 };
    uint32_t const ces[11] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_062)
{
    // 1F68 0021;	
    // (Ὠ) GREEK CAPITAL LETTER OMEGA WITH PSILI	[2047 0261 | 0020 0022 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F68, 0x0021 };
    uint32_t const ces[11] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_063)
{
    // 1F64 0021;	
    // (ὤ) GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA	[2047 0261 | 0020 0022 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F64, 0x0021 };
    uint32_t const ces[13] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_064)
{
    // 1F6C 0021;	
    // (Ὤ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA	[2047 0261 | 0020 0022 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C, 0x0021 };
    uint32_t const ces[13] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_065)
{
    // 1FA4 0021;	
    // (ᾤ) GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA AND YPOGEGRAMMENI	[2047 0261 | 0020 0022 0024 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA4, 0x0021 };
    uint32_t const ces[15] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0022, 0x0024, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_066)
{
    // 1FAC 0021;	
    // (ᾬ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA AND PROSGEGRAMMENI	[2047 0261 | 0020 0022 0024 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAC, 0x0021 };
    uint32_t const ces[15] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0022, 0x0024, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_067)
{
    // 1F62 0021;	
    // (ὢ) GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA	[2047 0261 | 0020 0022 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F62, 0x0021 };
    uint32_t const ces[13] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_068)
{
    // 1F6A 0021;	
    // (Ὢ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA	[2047 0261 | 0020 0022 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A, 0x0021 };
    uint32_t const ces[13] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_069)
{
    // 1FA2 0021;	
    // (ᾢ) GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA AND YPOGEGRAMMENI	[2047 0261 | 0020 0022 0025 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA2, 0x0021 };
    uint32_t const ces[15] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0022, 0x0025, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_070)
{
    // 1FAA 0021;	
    // (ᾪ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA AND PROSGEGRAMMENI	[2047 0261 | 0020 0022 0025 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAA, 0x0021 };
    uint32_t const ces[15] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0022, 0x0025, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_071)
{
    // 1F66 0021;	
    // (ὦ) GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI	[2047 0261 | 0020 0022 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F66, 0x0021 };
    uint32_t const ces[13] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_072)
{
    // 1F6E 0021;	
    // (Ὦ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI	[2047 0261 | 0020 0022 002A 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E, 0x0021 };
    uint32_t const ces[13] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_073)
{
    // 1FA6 0021;	
    // (ᾦ) GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI	[2047 0261 | 0020 0022 002A 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA6, 0x0021 };
    uint32_t const ces[15] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0022, 0x002A, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_074)
{
    // 1FAE 0021;	
    // (ᾮ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI	[2047 0261 | 0020 0022 002A 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAE, 0x0021 };
    uint32_t const ces[15] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0022, 0x002A, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_075)
{
    // 1FA0 0021;	
    // (ᾠ) GREEK SMALL LETTER OMEGA WITH PSILI AND YPOGEGRAMMENI	[2047 0261 | 0020 0022 004C 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA0, 0x0021 };
    uint32_t const ces[13] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0022, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_076)
{
    // 1FA8 0021;	
    // (ᾨ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND PROSGEGRAMMENI	[2047 0261 | 0020 0022 004C 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA8, 0x0021 };
    uint32_t const ces[13] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0022, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_077)
{
    // 1F61 0021;	
    // (ὡ) GREEK SMALL LETTER OMEGA WITH DASIA	[2047 0261 | 0020 0023 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F61, 0x0021 };
    uint32_t const ces[11] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_078)
{
    // 1F69 0021;	
    // (Ὡ) GREEK CAPITAL LETTER OMEGA WITH DASIA	[2047 0261 | 0020 0023 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F69, 0x0021 };
    uint32_t const ces[11] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_079)
{
    // 1F65 0021;	
    // (ὥ) GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA	[2047 0261 | 0020 0023 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F65, 0x0021 };
    uint32_t const ces[13] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_080)
{
    // 1F6D 0021;	
    // (Ὥ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA	[2047 0261 | 0020 0023 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D, 0x0021 };
    uint32_t const ces[13] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_081)
{
    // 1FA5 0021;	
    // (ᾥ) GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA AND YPOGEGRAMMENI	[2047 0261 | 0020 0023 0024 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA5, 0x0021 };
    uint32_t const ces[15] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0023, 0x0024, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_082)
{
    // 1FAD 0021;	
    // (ᾭ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA AND PROSGEGRAMMENI	[2047 0261 | 0020 0023 0024 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAD, 0x0021 };
    uint32_t const ces[15] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0023, 0x0024, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_083)
{
    // 1F63 0021;	
    // (ὣ) GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA	[2047 0261 | 0020 0023 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F63, 0x0021 };
    uint32_t const ces[13] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_084)
{
    // 1F6B 0021;	
    // (Ὣ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA	[2047 0261 | 0020 0023 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B, 0x0021 };
    uint32_t const ces[13] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_085)
{
    // 1FA3 0021;	
    // (ᾣ) GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA AND YPOGEGRAMMENI	[2047 0261 | 0020 0023 0025 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA3, 0x0021 };
    uint32_t const ces[15] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0023, 0x0025, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_086)
{
    // 1FAB 0021;	
    // (ᾫ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA AND PROSGEGRAMMENI	[2047 0261 | 0020 0023 0025 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAB, 0x0021 };
    uint32_t const ces[15] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0023, 0x0025, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_087)
{
    // 1F67 0021;	
    // (ὧ) GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI	[2047 0261 | 0020 0023 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F67, 0x0021 };
    uint32_t const ces[13] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_088)
{
    // 1F6F 0021;	
    // (Ὧ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI	[2047 0261 | 0020 0023 002A 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F, 0x0021 };
    uint32_t const ces[13] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_089)
{
    // 1FA7 0021;	
    // (ᾧ) GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI	[2047 0261 | 0020 0023 002A 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA7, 0x0021 };
    uint32_t const ces[15] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0023, 0x002A, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_090)
{
    // 1FAF 0021;	
    // (ᾯ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI	[2047 0261 | 0020 0023 002A 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAF, 0x0021 };
    uint32_t const ces[15] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0023, 0x002A, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_091)
{
    // 1FA1 0021;	
    // (ᾡ) GREEK SMALL LETTER OMEGA WITH DASIA AND YPOGEGRAMMENI	[2047 0261 | 0020 0023 004C 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA1, 0x0021 };
    uint32_t const ces[13] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0023, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_092)
{
    // 1FA9 0021;	
    // (ᾩ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI	[2047 0261 | 0020 0023 004C 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA9, 0x0021 };
    uint32_t const ces[13] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0023, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_093)
{
    // 03CE 0021;	
    // (ώ) GREEK SMALL LETTER OMEGA WITH TONOS	[2047 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CE, 0x0021 };
    uint32_t const ces[11] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_094)
{
    // 1F7D 0021;	
    // (ώ) GREEK SMALL LETTER OMEGA WITH OXIA	[2047 0261 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D, 0x0021 };
    uint32_t const ces[11] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_095)
{
    // 038F 0021;	
    // (Ώ) GREEK CAPITAL LETTER OMEGA WITH TONOS	[2047 0261 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x038F, 0x0021 };
    uint32_t const ces[11] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_096)
{
    // 1FFB 0021;	
    // (Ώ) GREEK CAPITAL LETTER OMEGA WITH OXIA	[2047 0261 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FFB, 0x0021 };
    uint32_t const ces[11] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_097)
{
    // 1FF4 0021;	
    // (ῴ) GREEK SMALL LETTER OMEGA WITH OXIA AND YPOGEGRAMMENI	[2047 0261 | 0020 0024 004C 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF4, 0x0021 };
    uint32_t const ces[13] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0024, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_098)
{
    // 1F7C 0021;	
    // (ὼ) GREEK SMALL LETTER OMEGA WITH VARIA	[2047 0261 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C, 0x0021 };
    uint32_t const ces[11] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_099)
{
    // 1FFA 0021;	
    // (Ὼ) GREEK CAPITAL LETTER OMEGA WITH VARIA	[2047 0261 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FFA, 0x0021 };
    uint32_t const ces[11] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_100)
{
    // 1FF2 0021;	
    // (ῲ) GREEK SMALL LETTER OMEGA WITH VARIA AND YPOGEGRAMMENI	[2047 0261 | 0020 0025 004C 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF2, 0x0021 };
    uint32_t const ces[13] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x0025, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_101)
{
    // 1FF6 0021;	
    // (ῶ) GREEK SMALL LETTER OMEGA WITH PERISPOMENI	[2047 0261 | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF6, 0x0021 };
    uint32_t const ces[11] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_102)
{
    // 1FF7 0021;	
    // (ῷ) GREEK SMALL LETTER OMEGA WITH PERISPOMENI AND YPOGEGRAMMENI	[2047 0261 | 0020 002A 004C 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF7, 0x0021 };
    uint32_t const ces[13] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x002A, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_103)
{
    // 1FF3 0021;	
    // (ῳ) GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI	[2047 0261 | 0020 004C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF3, 0x0021 };
    uint32_t const ces[11] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_104)
{
    // 1FFC 0021;	
    // (ῼ) GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI	[2047 0261 | 0020 004C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FFC, 0x0021 };
    uint32_t const ces[11] = { 0x2047, 0x0261, 0x0000, 0x0020, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_105)
{
    // 03C9 003F;	
    // (ω) GREEK SMALL LETTER OMEGA	[2047 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C9, 0x003F };
    uint32_t const ces[9] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_106)
{
    // 1D6DA 003F;	
    // (𝛚) MATHEMATICAL BOLD SMALL OMEGA	[2047 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6DA, 0x003F };
    uint32_t const ces[9] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_107)
{
    // 1D714 003F;	
    // (𝜔) MATHEMATICAL ITALIC SMALL OMEGA	[2047 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D714, 0x003F };
    uint32_t const ces[9] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_108)
{
    // 1D74E 003F;	
    // (𝝎) MATHEMATICAL BOLD ITALIC SMALL OMEGA	[2047 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74E, 0x003F };
    uint32_t const ces[9] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_109)
{
    // 1D788 003F;	
    // (𝞈) MATHEMATICAL SANS-SERIF BOLD SMALL OMEGA	[2047 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D788, 0x003F };
    uint32_t const ces[9] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_110)
{
    // 1D7C2 003F;	
    // (𝟂) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL OMEGA	[2047 0267 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C2, 0x003F };
    uint32_t const ces[9] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_111)
{
    // 03A9 003F;	
    // (Ω) GREEK CAPITAL LETTER OMEGA	[2047 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A9, 0x003F };
    uint32_t const ces[9] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_112)
{
    // 2126 003F;	
    // (Ω) OHM SIGN	[2047 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2126, 0x003F };
    uint32_t const ces[9] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_113)
{
    // 1D6C0 003F;	
    // (𝛀) MATHEMATICAL BOLD CAPITAL OMEGA	[2047 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6C0, 0x003F };
    uint32_t const ces[9] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_114)
{
    // 1D6FA 003F;	
    // (𝛺) MATHEMATICAL ITALIC CAPITAL OMEGA	[2047 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6FA, 0x003F };
    uint32_t const ces[9] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_115)
{
    // 1D734 003F;	
    // (𝜴) MATHEMATICAL BOLD ITALIC CAPITAL OMEGA	[2047 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D734, 0x003F };
    uint32_t const ces[9] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_116)
{
    // 1D76E 003F;	
    // (𝝮) MATHEMATICAL SANS-SERIF BOLD CAPITAL OMEGA	[2047 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D76E, 0x003F };
    uint32_t const ces[9] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_117)
{
    // 1D7A8 003F;	
    // (𝞨) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL OMEGA	[2047 0267 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A8, 0x003F };
    uint32_t const ces[9] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_118)
{
    // 1F60 003F;	
    // (ὠ) GREEK SMALL LETTER OMEGA WITH PSILI	[2047 0267 | 0020 0022 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F60, 0x003F };
    uint32_t const ces[11] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_119)
{
    // 1F68 003F;	
    // (Ὠ) GREEK CAPITAL LETTER OMEGA WITH PSILI	[2047 0267 | 0020 0022 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F68, 0x003F };
    uint32_t const ces[11] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_120)
{
    // 1F64 003F;	
    // (ὤ) GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA	[2047 0267 | 0020 0022 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F64, 0x003F };
    uint32_t const ces[13] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_121)
{
    // 1F6C 003F;	
    // (Ὤ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA	[2047 0267 | 0020 0022 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C, 0x003F };
    uint32_t const ces[13] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_122)
{
    // 1FA4 003F;	
    // (ᾤ) GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA AND YPOGEGRAMMENI	[2047 0267 | 0020 0022 0024 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA4, 0x003F };
    uint32_t const ces[15] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0022, 0x0024, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_123)
{
    // 1FAC 003F;	
    // (ᾬ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA AND PROSGEGRAMMENI	[2047 0267 | 0020 0022 0024 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAC, 0x003F };
    uint32_t const ces[15] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0022, 0x0024, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_124)
{
    // 1F62 003F;	
    // (ὢ) GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA	[2047 0267 | 0020 0022 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F62, 0x003F };
    uint32_t const ces[13] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_125)
{
    // 1F6A 003F;	
    // (Ὢ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA	[2047 0267 | 0020 0022 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A, 0x003F };
    uint32_t const ces[13] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_126)
{
    // 1FA2 003F;	
    // (ᾢ) GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA AND YPOGEGRAMMENI	[2047 0267 | 0020 0022 0025 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA2, 0x003F };
    uint32_t const ces[15] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0022, 0x0025, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_127)
{
    // 1FAA 003F;	
    // (ᾪ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA AND PROSGEGRAMMENI	[2047 0267 | 0020 0022 0025 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAA, 0x003F };
    uint32_t const ces[15] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0022, 0x0025, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_128)
{
    // 1F66 003F;	
    // (ὦ) GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI	[2047 0267 | 0020 0022 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F66, 0x003F };
    uint32_t const ces[13] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_129)
{
    // 1F6E 003F;	
    // (Ὦ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI	[2047 0267 | 0020 0022 002A 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E, 0x003F };
    uint32_t const ces[13] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_130)
{
    // 1FA6 003F;	
    // (ᾦ) GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI	[2047 0267 | 0020 0022 002A 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA6, 0x003F };
    uint32_t const ces[15] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0022, 0x002A, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_131)
{
    // 1FAE 003F;	
    // (ᾮ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI	[2047 0267 | 0020 0022 002A 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAE, 0x003F };
    uint32_t const ces[15] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0022, 0x002A, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_132)
{
    // 1FA0 003F;	
    // (ᾠ) GREEK SMALL LETTER OMEGA WITH PSILI AND YPOGEGRAMMENI	[2047 0267 | 0020 0022 004C 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA0, 0x003F };
    uint32_t const ces[13] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0022, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_133)
{
    // 1FA8 003F;	
    // (ᾨ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND PROSGEGRAMMENI	[2047 0267 | 0020 0022 004C 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA8, 0x003F };
    uint32_t const ces[13] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0022, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_134)
{
    // 1F61 003F;	
    // (ὡ) GREEK SMALL LETTER OMEGA WITH DASIA	[2047 0267 | 0020 0023 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F61, 0x003F };
    uint32_t const ces[11] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_135)
{
    // 1F69 003F;	
    // (Ὡ) GREEK CAPITAL LETTER OMEGA WITH DASIA	[2047 0267 | 0020 0023 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F69, 0x003F };
    uint32_t const ces[11] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_136)
{
    // 1F65 003F;	
    // (ὥ) GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA	[2047 0267 | 0020 0023 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F65, 0x003F };
    uint32_t const ces[13] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_137)
{
    // 1F6D 003F;	
    // (Ὥ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA	[2047 0267 | 0020 0023 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D, 0x003F };
    uint32_t const ces[13] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_138)
{
    // 1FA5 003F;	
    // (ᾥ) GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA AND YPOGEGRAMMENI	[2047 0267 | 0020 0023 0024 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA5, 0x003F };
    uint32_t const ces[15] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0023, 0x0024, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_139)
{
    // 1FAD 003F;	
    // (ᾭ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA AND PROSGEGRAMMENI	[2047 0267 | 0020 0023 0024 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAD, 0x003F };
    uint32_t const ces[15] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0023, 0x0024, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_140)
{
    // 1F63 003F;	
    // (ὣ) GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA	[2047 0267 | 0020 0023 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F63, 0x003F };
    uint32_t const ces[13] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_141)
{
    // 1F6B 003F;	
    // (Ὣ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA	[2047 0267 | 0020 0023 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B, 0x003F };
    uint32_t const ces[13] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_142)
{
    // 1FA3 003F;	
    // (ᾣ) GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA AND YPOGEGRAMMENI	[2047 0267 | 0020 0023 0025 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA3, 0x003F };
    uint32_t const ces[15] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0023, 0x0025, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_143)
{
    // 1FAB 003F;	
    // (ᾫ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA AND PROSGEGRAMMENI	[2047 0267 | 0020 0023 0025 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAB, 0x003F };
    uint32_t const ces[15] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0023, 0x0025, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_144)
{
    // 1F67 003F;	
    // (ὧ) GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI	[2047 0267 | 0020 0023 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F67, 0x003F };
    uint32_t const ces[13] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_145)
{
    // 1F6F 003F;	
    // (Ὧ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI	[2047 0267 | 0020 0023 002A 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F, 0x003F };
    uint32_t const ces[13] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_146)
{
    // 1FA7 003F;	
    // (ᾧ) GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI	[2047 0267 | 0020 0023 002A 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA7, 0x003F };
    uint32_t const ces[15] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0023, 0x002A, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_147)
{
    // 1FAF 003F;	
    // (ᾯ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI	[2047 0267 | 0020 0023 002A 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAF, 0x003F };
    uint32_t const ces[15] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0023, 0x002A, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_148)
{
    // 1FA1 003F;	
    // (ᾡ) GREEK SMALL LETTER OMEGA WITH DASIA AND YPOGEGRAMMENI	[2047 0267 | 0020 0023 004C 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA1, 0x003F };
    uint32_t const ces[13] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0023, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_149)
{
    // 1FA9 003F;	
    // (ᾩ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI	[2047 0267 | 0020 0023 004C 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA9, 0x003F };
    uint32_t const ces[13] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0023, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_150)
{
    // 03CE 003F;	
    // (ώ) GREEK SMALL LETTER OMEGA WITH TONOS	[2047 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CE, 0x003F };
    uint32_t const ces[11] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_151)
{
    // 1F7D 003F;	
    // (ώ) GREEK SMALL LETTER OMEGA WITH OXIA	[2047 0267 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D, 0x003F };
    uint32_t const ces[11] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_152)
{
    // 038F 003F;	
    // (Ώ) GREEK CAPITAL LETTER OMEGA WITH TONOS	[2047 0267 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x038F, 0x003F };
    uint32_t const ces[11] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_153)
{
    // 1FFB 003F;	
    // (Ώ) GREEK CAPITAL LETTER OMEGA WITH OXIA	[2047 0267 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FFB, 0x003F };
    uint32_t const ces[11] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_154)
{
    // 1FF4 003F;	
    // (ῴ) GREEK SMALL LETTER OMEGA WITH OXIA AND YPOGEGRAMMENI	[2047 0267 | 0020 0024 004C 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF4, 0x003F };
    uint32_t const ces[13] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0024, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_155)
{
    // 1F7C 003F;	
    // (ὼ) GREEK SMALL LETTER OMEGA WITH VARIA	[2047 0267 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C, 0x003F };
    uint32_t const ces[11] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_156)
{
    // 1FFA 003F;	
    // (Ὼ) GREEK CAPITAL LETTER OMEGA WITH VARIA	[2047 0267 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FFA, 0x003F };
    uint32_t const ces[11] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_157)
{
    // 1FF2 003F;	
    // (ῲ) GREEK SMALL LETTER OMEGA WITH VARIA AND YPOGEGRAMMENI	[2047 0267 | 0020 0025 004C 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF2, 0x003F };
    uint32_t const ces[13] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x0025, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_158)
{
    // 1FF6 003F;	
    // (ῶ) GREEK SMALL LETTER OMEGA WITH PERISPOMENI	[2047 0267 | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF6, 0x003F };
    uint32_t const ces[11] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_159)
{
    // 1FF7 003F;	
    // (ῷ) GREEK SMALL LETTER OMEGA WITH PERISPOMENI AND YPOGEGRAMMENI	[2047 0267 | 0020 002A 004C 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF7, 0x003F };
    uint32_t const ces[13] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x002A, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_160)
{
    // 1FF3 003F;	
    // (ῳ) GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI	[2047 0267 | 0020 004C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF3, 0x003F };
    uint32_t const ces[11] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_161)
{
    // 1FFC 003F;	
    // (ῼ) GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI	[2047 0267 | 0020 004C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FFC, 0x003F };
    uint32_t const ces[11] = { 0x2047, 0x0267, 0x0000, 0x0020, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_162)
{
    // 03C9 0061;	
    // (ω) GREEK SMALL LETTER OMEGA	[2047 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C9, 0x0061 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_163)
{
    // 03C9 0041;	
    // (ω) GREEK SMALL LETTER OMEGA	[2047 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03C9, 0x0041 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_164)
{
    // 1D6DA 0061;	
    // (𝛚) MATHEMATICAL BOLD SMALL OMEGA	[2047 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6DA, 0x0061 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_165)
{
    // 1D714 0061;	
    // (𝜔) MATHEMATICAL ITALIC SMALL OMEGA	[2047 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D714, 0x0061 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_166)
{
    // 1D74E 0061;	
    // (𝝎) MATHEMATICAL BOLD ITALIC SMALL OMEGA	[2047 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74E, 0x0061 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_167)
{
    // 1D788 0061;	
    // (𝞈) MATHEMATICAL SANS-SERIF BOLD SMALL OMEGA	[2047 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D788, 0x0061 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_168)
{
    // 1D7C2 0061;	
    // (𝟂) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL OMEGA	[2047 1CAD | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C2, 0x0061 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_169)
{
    // 1D6DA 0041;	
    // (𝛚) MATHEMATICAL BOLD SMALL OMEGA	[2047 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D6DA, 0x0041 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_170)
{
    // 1D714 0041;	
    // (𝜔) MATHEMATICAL ITALIC SMALL OMEGA	[2047 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D714, 0x0041 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_171)
{
    // 1D74E 0041;	
    // (𝝎) MATHEMATICAL BOLD ITALIC SMALL OMEGA	[2047 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D74E, 0x0041 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_172)
{
    // 1D788 0041;	
    // (𝞈) MATHEMATICAL SANS-SERIF BOLD SMALL OMEGA	[2047 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D788, 0x0041 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_173)
{
    // 1D7C2 0041;	
    // (𝟂) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL OMEGA	[2047 1CAD | 0020 0020 | 0005 0008 |]

    uint32_t cps[2] = { 0x1D7C2, 0x0041 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_174)
{
    // 03A9 0061;	
    // (Ω) GREEK CAPITAL LETTER OMEGA	[2047 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A9, 0x0061 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_175)
{
    // 2126 0061;	
    // (Ω) OHM SIGN	[2047 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2126, 0x0061 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_176)
{
    // 03A9 0041;	
    // (Ω) GREEK CAPITAL LETTER OMEGA	[2047 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x03A9, 0x0041 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_177)
{
    // 2126 0041;	
    // (Ω) OHM SIGN	[2047 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2126, 0x0041 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_178)
{
    // 1D6C0 0061;	
    // (𝛀) MATHEMATICAL BOLD CAPITAL OMEGA	[2047 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6C0, 0x0061 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_179)
{
    // 1D6FA 0061;	
    // (𝛺) MATHEMATICAL ITALIC CAPITAL OMEGA	[2047 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6FA, 0x0061 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_180)
{
    // 1D734 0061;	
    // (𝜴) MATHEMATICAL BOLD ITALIC CAPITAL OMEGA	[2047 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D734, 0x0061 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_181)
{
    // 1D76E 0061;	
    // (𝝮) MATHEMATICAL SANS-SERIF BOLD CAPITAL OMEGA	[2047 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D76E, 0x0061 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_182)
{
    // 1D7A8 0061;	
    // (𝞨) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL OMEGA	[2047 1CAD | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A8, 0x0061 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_183)
{
    // 1D6C0 0041;	
    // (𝛀) MATHEMATICAL BOLD CAPITAL OMEGA	[2047 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6C0, 0x0041 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_184)
{
    // 1D6FA 0041;	
    // (𝛺) MATHEMATICAL ITALIC CAPITAL OMEGA	[2047 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D6FA, 0x0041 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_185)
{
    // 1D734 0041;	
    // (𝜴) MATHEMATICAL BOLD ITALIC CAPITAL OMEGA	[2047 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D734, 0x0041 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_186)
{
    // 1D76E 0041;	
    // (𝝮) MATHEMATICAL SANS-SERIF BOLD CAPITAL OMEGA	[2047 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D76E, 0x0041 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_187)
{
    // 1D7A8 0041;	
    // (𝞨) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL OMEGA	[2047 1CAD | 0020 0020 | 000B 0008 |]

    uint32_t cps[2] = { 0x1D7A8, 0x0041 };
    uint32_t const ces[9] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_188)
{
    // 1F60 0061;	
    // (ὠ) GREEK SMALL LETTER OMEGA WITH PSILI	[2047 1CAD | 0020 0022 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F60, 0x0061 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_189)
{
    // 1F60 0041;	
    // (ὠ) GREEK SMALL LETTER OMEGA WITH PSILI	[2047 1CAD | 0020 0022 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F60, 0x0041 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_190)
{
    // 1F68 0061;	
    // (Ὠ) GREEK CAPITAL LETTER OMEGA WITH PSILI	[2047 1CAD | 0020 0022 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F68, 0x0061 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_191)
{
    // 1F68 0041;	
    // (Ὠ) GREEK CAPITAL LETTER OMEGA WITH PSILI	[2047 1CAD | 0020 0022 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1F68, 0x0041 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_192)
{
    // 1F64 0061;	
    // (ὤ) GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA	[2047 1CAD | 0020 0022 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F64, 0x0061 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_193)
{
    // 1F64 0041;	
    // (ὤ) GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA	[2047 1CAD | 0020 0022 0024 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F64, 0x0041 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_194)
{
    // 1F6C 0061;	
    // (Ὤ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA	[2047 1CAD | 0020 0022 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C, 0x0061 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_195)
{
    // 1F6C 0041;	
    // (Ὤ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA	[2047 1CAD | 0020 0022 0024 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F6C, 0x0041 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_196)
{
    // 1FA4 0061;	
    // (ᾤ) GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA AND YPOGEGRAMMENI	[2047 1CAD | 0020 0022 0024 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA4, 0x0061 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0024, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_197)
{
    // 1FA4 0041;	
    // (ᾤ) GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA AND YPOGEGRAMMENI	[2047 1CAD | 0020 0022 0024 004C 0020 | 0002 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FA4, 0x0041 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0024, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_198)
{
    // 1FAC 0061;	
    // (ᾬ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA AND PROSGEGRAMMENI	[2047 1CAD | 0020 0022 0024 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAC, 0x0061 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0024, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_199)
{
    // 1FAC 0041;	
    // (ᾬ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA AND PROSGEGRAMMENI	[2047 1CAD | 0020 0022 0024 004C 0020 | 0008 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FAC, 0x0041 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0024, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_200)
{
    // 1F62 0061;	
    // (ὢ) GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA	[2047 1CAD | 0020 0022 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F62, 0x0061 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_201)
{
    // 1F62 0041;	
    // (ὢ) GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA	[2047 1CAD | 0020 0022 0025 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F62, 0x0041 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_202)
{
    // 1F6A 0061;	
    // (Ὢ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA	[2047 1CAD | 0020 0022 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A, 0x0061 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_203)
{
    // 1F6A 0041;	
    // (Ὢ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA	[2047 1CAD | 0020 0022 0025 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F6A, 0x0041 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_204)
{
    // 1FA2 0061;	
    // (ᾢ) GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA AND YPOGEGRAMMENI	[2047 1CAD | 0020 0022 0025 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA2, 0x0061 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0025, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_205)
{
    // 1FA2 0041;	
    // (ᾢ) GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA AND YPOGEGRAMMENI	[2047 1CAD | 0020 0022 0025 004C 0020 | 0002 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FA2, 0x0041 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0025, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_206)
{
    // 1FAA 0061;	
    // (ᾪ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA AND PROSGEGRAMMENI	[2047 1CAD | 0020 0022 0025 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAA, 0x0061 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0025, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_207)
{
    // 1FAA 0041;	
    // (ᾪ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA AND PROSGEGRAMMENI	[2047 1CAD | 0020 0022 0025 004C 0020 | 0008 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FAA, 0x0041 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x0025, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_208)
{
    // 1F66 0061;	
    // (ὦ) GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI	[2047 1CAD | 0020 0022 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F66, 0x0061 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_209)
{
    // 1F66 0041;	
    // (ὦ) GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI	[2047 1CAD | 0020 0022 002A 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F66, 0x0041 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_210)
{
    // 1F6E 0061;	
    // (Ὦ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI	[2047 1CAD | 0020 0022 002A 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E, 0x0061 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_211)
{
    // 1F6E 0041;	
    // (Ὦ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI	[2047 1CAD | 0020 0022 002A 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F6E, 0x0041 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_212)
{
    // 1FA6 0061;	
    // (ᾦ) GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI	[2047 1CAD | 0020 0022 002A 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA6, 0x0061 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x002A, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_213)
{
    // 1FA6 0041;	
    // (ᾦ) GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI	[2047 1CAD | 0020 0022 002A 004C 0020 | 0002 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FA6, 0x0041 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x002A, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_214)
{
    // 1FAE 0061;	
    // (ᾮ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI	[2047 1CAD | 0020 0022 002A 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAE, 0x0061 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x002A, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_215)
{
    // 1FAE 0041;	
    // (ᾮ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI	[2047 1CAD | 0020 0022 002A 004C 0020 | 0008 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FAE, 0x0041 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x002A, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_216)
{
    // 1FA0 0061;	
    // (ᾠ) GREEK SMALL LETTER OMEGA WITH PSILI AND YPOGEGRAMMENI	[2047 1CAD | 0020 0022 004C 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA0, 0x0061 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_217)
{
    // 1FA0 0041;	
    // (ᾠ) GREEK SMALL LETTER OMEGA WITH PSILI AND YPOGEGRAMMENI	[2047 1CAD | 0020 0022 004C 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FA0, 0x0041 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_218)
{
    // 1FA8 0061;	
    // (ᾨ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND PROSGEGRAMMENI	[2047 1CAD | 0020 0022 004C 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA8, 0x0061 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_219)
{
    // 1FA8 0041;	
    // (ᾨ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND PROSGEGRAMMENI	[2047 1CAD | 0020 0022 004C 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FA8, 0x0041 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0022, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_220)
{
    // 1F61 0061;	
    // (ὡ) GREEK SMALL LETTER OMEGA WITH DASIA	[2047 1CAD | 0020 0023 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F61, 0x0061 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_221)
{
    // 1F61 0041;	
    // (ὡ) GREEK SMALL LETTER OMEGA WITH DASIA	[2047 1CAD | 0020 0023 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F61, 0x0041 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_222)
{
    // 1F69 0061;	
    // (Ὡ) GREEK CAPITAL LETTER OMEGA WITH DASIA	[2047 1CAD | 0020 0023 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F69, 0x0061 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_223)
{
    // 1F69 0041;	
    // (Ὡ) GREEK CAPITAL LETTER OMEGA WITH DASIA	[2047 1CAD | 0020 0023 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1F69, 0x0041 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_224)
{
    // 1F65 0061;	
    // (ὥ) GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA	[2047 1CAD | 0020 0023 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F65, 0x0061 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_225)
{
    // 1F65 0041;	
    // (ὥ) GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA	[2047 1CAD | 0020 0023 0024 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F65, 0x0041 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_226)
{
    // 1F6D 0061;	
    // (Ὥ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA	[2047 1CAD | 0020 0023 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D, 0x0061 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_227)
{
    // 1F6D 0041;	
    // (Ὥ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA	[2047 1CAD | 0020 0023 0024 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F6D, 0x0041 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_228)
{
    // 1FA5 0061;	
    // (ᾥ) GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA AND YPOGEGRAMMENI	[2047 1CAD | 0020 0023 0024 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA5, 0x0061 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0024, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_229)
{
    // 1FA5 0041;	
    // (ᾥ) GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA AND YPOGEGRAMMENI	[2047 1CAD | 0020 0023 0024 004C 0020 | 0002 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FA5, 0x0041 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0024, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_230)
{
    // 1FAD 0061;	
    // (ᾭ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA AND PROSGEGRAMMENI	[2047 1CAD | 0020 0023 0024 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAD, 0x0061 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0024, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_231)
{
    // 1FAD 0041;	
    // (ᾭ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA AND PROSGEGRAMMENI	[2047 1CAD | 0020 0023 0024 004C 0020 | 0008 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FAD, 0x0041 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0024, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_232)
{
    // 1F63 0061;	
    // (ὣ) GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA	[2047 1CAD | 0020 0023 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F63, 0x0061 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_233)
{
    // 1F63 0041;	
    // (ὣ) GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA	[2047 1CAD | 0020 0023 0025 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F63, 0x0041 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_234)
{
    // 1F6B 0061;	
    // (Ὣ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA	[2047 1CAD | 0020 0023 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B, 0x0061 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_235)
{
    // 1F6B 0041;	
    // (Ὣ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA	[2047 1CAD | 0020 0023 0025 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F6B, 0x0041 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_236)
{
    // 1FA3 0061;	
    // (ᾣ) GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA AND YPOGEGRAMMENI	[2047 1CAD | 0020 0023 0025 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA3, 0x0061 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0025, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_237)
{
    // 1FA3 0041;	
    // (ᾣ) GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA AND YPOGEGRAMMENI	[2047 1CAD | 0020 0023 0025 004C 0020 | 0002 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FA3, 0x0041 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0025, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_238)
{
    // 1FAB 0061;	
    // (ᾫ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA AND PROSGEGRAMMENI	[2047 1CAD | 0020 0023 0025 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAB, 0x0061 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0025, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_239)
{
    // 1FAB 0041;	
    // (ᾫ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA AND PROSGEGRAMMENI	[2047 1CAD | 0020 0023 0025 004C 0020 | 0008 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FAB, 0x0041 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x0025, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_240)
{
    // 1F67 0061;	
    // (ὧ) GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI	[2047 1CAD | 0020 0023 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F67, 0x0061 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_241)
{
    // 1F67 0041;	
    // (ὧ) GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI	[2047 1CAD | 0020 0023 002A 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F67, 0x0041 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_242)
{
    // 1F6F 0061;	
    // (Ὧ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI	[2047 1CAD | 0020 0023 002A 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F, 0x0061 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_243)
{
    // 1F6F 0041;	
    // (Ὧ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI	[2047 1CAD | 0020 0023 002A 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F6F, 0x0041 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_244)
{
    // 1FA7 0061;	
    // (ᾧ) GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI	[2047 1CAD | 0020 0023 002A 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA7, 0x0061 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x002A, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_245)
{
    // 1FA7 0041;	
    // (ᾧ) GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI	[2047 1CAD | 0020 0023 002A 004C 0020 | 0002 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FA7, 0x0041 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x002A, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_246)
{
    // 1FAF 0061;	
    // (ᾯ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI	[2047 1CAD | 0020 0023 002A 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAF, 0x0061 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x002A, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_247)
{
    // 1FAF 0041;	
    // (ᾯ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI	[2047 1CAD | 0020 0023 002A 004C 0020 | 0008 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FAF, 0x0041 };
    uint32_t const ces[15] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x002A, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_248)
{
    // 1FA1 0061;	
    // (ᾡ) GREEK SMALL LETTER OMEGA WITH DASIA AND YPOGEGRAMMENI	[2047 1CAD | 0020 0023 004C 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA1, 0x0061 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_249)
{
    // 1FA1 0041;	
    // (ᾡ) GREEK SMALL LETTER OMEGA WITH DASIA AND YPOGEGRAMMENI	[2047 1CAD | 0020 0023 004C 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FA1, 0x0041 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_250)
{
    // 1FA9 0061;	
    // (ᾩ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI	[2047 1CAD | 0020 0023 004C 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA9, 0x0061 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_251)
{
    // 1FA9 0041;	
    // (ᾩ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI	[2047 1CAD | 0020 0023 004C 0020 | 0008 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FA9, 0x0041 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0023, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_252)
{
    // 03CE 0061;	
    // (ώ) GREEK SMALL LETTER OMEGA WITH TONOS	[2047 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CE, 0x0061 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_253)
{
    // 1F7D 0061;	
    // (ώ) GREEK SMALL LETTER OMEGA WITH OXIA	[2047 1CAD | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D, 0x0061 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_254)
{
    // 03CE 0041;	
    // (ώ) GREEK SMALL LETTER OMEGA WITH TONOS	[2047 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x03CE, 0x0041 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_255)
{
    // 1F7D 0041;	
    // (ώ) GREEK SMALL LETTER OMEGA WITH OXIA	[2047 1CAD | 0020 0024 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F7D, 0x0041 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_256)
{
    // 038F 0061;	
    // (Ώ) GREEK CAPITAL LETTER OMEGA WITH TONOS	[2047 1CAD | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x038F, 0x0061 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_257)
{
    // 1FFB 0061;	
    // (Ώ) GREEK CAPITAL LETTER OMEGA WITH OXIA	[2047 1CAD | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FFB, 0x0061 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_258)
{
    // 038F 0041;	
    // (Ώ) GREEK CAPITAL LETTER OMEGA WITH TONOS	[2047 1CAD | 0020 0024 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x038F, 0x0041 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_259)
{
    // 1FFB 0041;	
    // (Ώ) GREEK CAPITAL LETTER OMEGA WITH OXIA	[2047 1CAD | 0020 0024 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1FFB, 0x0041 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_260)
{
    // 1FF4 0061;	
    // (ῴ) GREEK SMALL LETTER OMEGA WITH OXIA AND YPOGEGRAMMENI	[2047 1CAD | 0020 0024 004C 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF4, 0x0061 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_261)
{
    // 1FF4 0041;	
    // (ῴ) GREEK SMALL LETTER OMEGA WITH OXIA AND YPOGEGRAMMENI	[2047 1CAD | 0020 0024 004C 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FF4, 0x0041 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0024, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_262)
{
    // 1F7C 0061;	
    // (ὼ) GREEK SMALL LETTER OMEGA WITH VARIA	[2047 1CAD | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C, 0x0061 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_263)
{
    // 1F7C 0041;	
    // (ὼ) GREEK SMALL LETTER OMEGA WITH VARIA	[2047 1CAD | 0020 0025 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1F7C, 0x0041 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_264)
{
    // 1FFA 0061;	
    // (Ὼ) GREEK CAPITAL LETTER OMEGA WITH VARIA	[2047 1CAD | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FFA, 0x0061 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_265)
{
    // 1FFA 0041;	
    // (Ὼ) GREEK CAPITAL LETTER OMEGA WITH VARIA	[2047 1CAD | 0020 0025 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1FFA, 0x0041 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_266)
{
    // 1FF2 0061;	
    // (ῲ) GREEK SMALL LETTER OMEGA WITH VARIA AND YPOGEGRAMMENI	[2047 1CAD | 0020 0025 004C 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF2, 0x0061 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_267)
{
    // 1FF2 0041;	
    // (ῲ) GREEK SMALL LETTER OMEGA WITH VARIA AND YPOGEGRAMMENI	[2047 1CAD | 0020 0025 004C 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FF2, 0x0041 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x0025, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_268)
{
    // 1FF6 0061;	
    // (ῶ) GREEK SMALL LETTER OMEGA WITH PERISPOMENI	[2047 1CAD | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF6, 0x0061 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_269)
{
    // 1FF6 0041;	
    // (ῶ) GREEK SMALL LETTER OMEGA WITH PERISPOMENI	[2047 1CAD | 0020 002A 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FF6, 0x0041 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_270)
{
    // 1FF7 0061;	
    // (ῷ) GREEK SMALL LETTER OMEGA WITH PERISPOMENI AND YPOGEGRAMMENI	[2047 1CAD | 0020 002A 004C 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF7, 0x0061 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x002A, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_271)
{
    // 1FF7 0041;	
    // (ῷ) GREEK SMALL LETTER OMEGA WITH PERISPOMENI AND YPOGEGRAMMENI	[2047 1CAD | 0020 002A 004C 0020 | 0002 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FF7, 0x0041 };
    uint32_t const ces[13] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x002A, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_272)
{
    // 1FF3 0061;	
    // (ῳ) GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI	[2047 1CAD | 0020 004C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF3, 0x0061 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_273)
{
    // 1FF3 0041;	
    // (ῳ) GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI	[2047 1CAD | 0020 004C 0020 | 0002 0002 0008 |]

    uint32_t cps[2] = { 0x1FF3, 0x0041 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_274)
{
    // 1FFC 0061;	
    // (ῼ) GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI	[2047 1CAD | 0020 004C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FFC, 0x0061 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_275)
{
    // 1FFC 0041;	
    // (ῼ) GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI	[2047 1CAD | 0020 004C 0020 | 0008 0002 0008 |]

    uint32_t cps[2] = { 0x1FFC, 0x0041 };
    uint32_t const ces[11] = { 0x2047, 0x1CAD, 0x0000, 0x0020, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_276)
{
    // 03C9 0062;	
    // (ω) GREEK SMALL LETTER OMEGA	[2047 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03C9, 0x0062 };
    uint32_t const ces[9] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_277)
{
    // 1D6DA 0062;	
    // (𝛚) MATHEMATICAL BOLD SMALL OMEGA	[2047 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D6DA, 0x0062 };
    uint32_t const ces[9] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_278)
{
    // 1D714 0062;	
    // (𝜔) MATHEMATICAL ITALIC SMALL OMEGA	[2047 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D714, 0x0062 };
    uint32_t const ces[9] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_279)
{
    // 1D74E 0062;	
    // (𝝎) MATHEMATICAL BOLD ITALIC SMALL OMEGA	[2047 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D74E, 0x0062 };
    uint32_t const ces[9] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_280)
{
    // 1D788 0062;	
    // (𝞈) MATHEMATICAL SANS-SERIF BOLD SMALL OMEGA	[2047 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D788, 0x0062 };
    uint32_t const ces[9] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_281)
{
    // 1D7C2 0062;	
    // (𝟂) MATHEMATICAL SANS-SERIF BOLD ITALIC SMALL OMEGA	[2047 1CC6 | 0020 0020 | 0005 0002 |]

    uint32_t cps[2] = { 0x1D7C2, 0x0062 };
    uint32_t const ces[9] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0005, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_282)
{
    // 03A9 0062;	
    // (Ω) GREEK CAPITAL LETTER OMEGA	[2047 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03A9, 0x0062 };
    uint32_t const ces[9] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_283)
{
    // 2126 0062;	
    // (Ω) OHM SIGN	[2047 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2126, 0x0062 };
    uint32_t const ces[9] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_284)
{
    // 1D6C0 0062;	
    // (𝛀) MATHEMATICAL BOLD CAPITAL OMEGA	[2047 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6C0, 0x0062 };
    uint32_t const ces[9] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_285)
{
    // 1D6FA 0062;	
    // (𝛺) MATHEMATICAL ITALIC CAPITAL OMEGA	[2047 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D6FA, 0x0062 };
    uint32_t const ces[9] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_286)
{
    // 1D734 0062;	
    // (𝜴) MATHEMATICAL BOLD ITALIC CAPITAL OMEGA	[2047 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D734, 0x0062 };
    uint32_t const ces[9] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_287)
{
    // 1D76E 0062;	
    // (𝝮) MATHEMATICAL SANS-SERIF BOLD CAPITAL OMEGA	[2047 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D76E, 0x0062 };
    uint32_t const ces[9] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_288)
{
    // 1D7A8 0062;	
    // (𝞨) MATHEMATICAL SANS-SERIF BOLD ITALIC CAPITAL OMEGA	[2047 1CC6 | 0020 0020 | 000B 0002 |]

    uint32_t cps[2] = { 0x1D7A8, 0x0062 };
    uint32_t const ces[9] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x000B, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_289)
{
    // 1F60 0062;	
    // (ὠ) GREEK SMALL LETTER OMEGA WITH PSILI	[2047 1CC6 | 0020 0022 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F60, 0x0062 };
    uint32_t const ces[11] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_290)
{
    // 1F68 0062;	
    // (Ὠ) GREEK CAPITAL LETTER OMEGA WITH PSILI	[2047 1CC6 | 0020 0022 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F68, 0x0062 };
    uint32_t const ces[11] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_291)
{
    // 1F64 0062;	
    // (ὤ) GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA	[2047 1CC6 | 0020 0022 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F64, 0x0062 };
    uint32_t const ces[13] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_292)
{
    // 1F6C 0062;	
    // (Ὤ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA	[2047 1CC6 | 0020 0022 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6C, 0x0062 };
    uint32_t const ces[13] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_293)
{
    // 1FA4 0062;	
    // (ᾤ) GREEK SMALL LETTER OMEGA WITH PSILI AND OXIA AND YPOGEGRAMMENI	[2047 1CC6 | 0020 0022 0024 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA4, 0x0062 };
    uint32_t const ces[15] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0024, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_294)
{
    // 1FAC 0062;	
    // (ᾬ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND OXIA AND PROSGEGRAMMENI	[2047 1CC6 | 0020 0022 0024 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAC, 0x0062 };
    uint32_t const ces[15] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0024, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_295)
{
    // 1F62 0062;	
    // (ὢ) GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA	[2047 1CC6 | 0020 0022 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F62, 0x0062 };
    uint32_t const ces[13] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_296)
{
    // 1F6A 0062;	
    // (Ὢ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA	[2047 1CC6 | 0020 0022 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6A, 0x0062 };
    uint32_t const ces[13] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_297)
{
    // 1FA2 0062;	
    // (ᾢ) GREEK SMALL LETTER OMEGA WITH PSILI AND VARIA AND YPOGEGRAMMENI	[2047 1CC6 | 0020 0022 0025 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA2, 0x0062 };
    uint32_t const ces[15] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0025, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_298)
{
    // 1FAA 0062;	
    // (ᾪ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND VARIA AND PROSGEGRAMMENI	[2047 1CC6 | 0020 0022 0025 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAA, 0x0062 };
    uint32_t const ces[15] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x0025, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_299)
{
    // 1F66 0062;	
    // (ὦ) GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI	[2047 1CC6 | 0020 0022 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F66, 0x0062 };
    uint32_t const ces[13] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_300)
{
    // 1F6E 0062;	
    // (Ὦ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI	[2047 1CC6 | 0020 0022 002A 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6E, 0x0062 };
    uint32_t const ces[13] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_301)
{
    // 1FA6 0062;	
    // (ᾦ) GREEK SMALL LETTER OMEGA WITH PSILI AND PERISPOMENI AND YPOGEGRAMMENI	[2047 1CC6 | 0020 0022 002A 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA6, 0x0062 };
    uint32_t const ces[15] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x002A, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_302)
{
    // 1FAE 0062;	
    // (ᾮ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND PERISPOMENI AND PROSGEGRAMMENI	[2047 1CC6 | 0020 0022 002A 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAE, 0x0062 };
    uint32_t const ces[15] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x002A, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_303)
{
    // 1FA0 0062;	
    // (ᾠ) GREEK SMALL LETTER OMEGA WITH PSILI AND YPOGEGRAMMENI	[2047 1CC6 | 0020 0022 004C 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA0, 0x0062 };
    uint32_t const ces[13] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_304)
{
    // 1FA8 0062;	
    // (ᾨ) GREEK CAPITAL LETTER OMEGA WITH PSILI AND PROSGEGRAMMENI	[2047 1CC6 | 0020 0022 004C 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA8, 0x0062 };
    uint32_t const ces[13] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0022, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_305)
{
    // 1F61 0062;	
    // (ὡ) GREEK SMALL LETTER OMEGA WITH DASIA	[2047 1CC6 | 0020 0023 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F61, 0x0062 };
    uint32_t const ces[11] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_306)
{
    // 1F69 0062;	
    // (Ὡ) GREEK CAPITAL LETTER OMEGA WITH DASIA	[2047 1CC6 | 0020 0023 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1F69, 0x0062 };
    uint32_t const ces[11] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_307)
{
    // 1F65 0062;	
    // (ὥ) GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA	[2047 1CC6 | 0020 0023 0024 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F65, 0x0062 };
    uint32_t const ces[13] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_308)
{
    // 1F6D 0062;	
    // (Ὥ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA	[2047 1CC6 | 0020 0023 0024 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6D, 0x0062 };
    uint32_t const ces[13] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_309)
{
    // 1FA5 0062;	
    // (ᾥ) GREEK SMALL LETTER OMEGA WITH DASIA AND OXIA AND YPOGEGRAMMENI	[2047 1CC6 | 0020 0023 0024 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA5, 0x0062 };
    uint32_t const ces[15] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0024, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_310)
{
    // 1FAD 0062;	
    // (ᾭ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND OXIA AND PROSGEGRAMMENI	[2047 1CC6 | 0020 0023 0024 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAD, 0x0062 };
    uint32_t const ces[15] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0024, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_311)
{
    // 1F63 0062;	
    // (ὣ) GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA	[2047 1CC6 | 0020 0023 0025 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F63, 0x0062 };
    uint32_t const ces[13] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_312)
{
    // 1F6B 0062;	
    // (Ὣ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA	[2047 1CC6 | 0020 0023 0025 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6B, 0x0062 };
    uint32_t const ces[13] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_313)
{
    // 1FA3 0062;	
    // (ᾣ) GREEK SMALL LETTER OMEGA WITH DASIA AND VARIA AND YPOGEGRAMMENI	[2047 1CC6 | 0020 0023 0025 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA3, 0x0062 };
    uint32_t const ces[15] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0025, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_314)
{
    // 1FAB 0062;	
    // (ᾫ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND VARIA AND PROSGEGRAMMENI	[2047 1CC6 | 0020 0023 0025 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAB, 0x0062 };
    uint32_t const ces[15] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x0025, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_315)
{
    // 1F67 0062;	
    // (ὧ) GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI	[2047 1CC6 | 0020 0023 002A 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F67, 0x0062 };
    uint32_t const ces[13] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_316)
{
    // 1F6F 0062;	
    // (Ὧ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI	[2047 1CC6 | 0020 0023 002A 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F6F, 0x0062 };
    uint32_t const ces[13] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x002A, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_317)
{
    // 1FA7 0062;	
    // (ᾧ) GREEK SMALL LETTER OMEGA WITH DASIA AND PERISPOMENI AND YPOGEGRAMMENI	[2047 1CC6 | 0020 0023 002A 004C 0020 | 0002 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA7, 0x0062 };
    uint32_t const ces[15] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x002A, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_318)
{
    // 1FAF 0062;	
    // (ᾯ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND PERISPOMENI AND PROSGEGRAMMENI	[2047 1CC6 | 0020 0023 002A 004C 0020 | 0008 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FAF, 0x0062 };
    uint32_t const ces[15] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x002A, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_319)
{
    // 1FA1 0062;	
    // (ᾡ) GREEK SMALL LETTER OMEGA WITH DASIA AND YPOGEGRAMMENI	[2047 1CC6 | 0020 0023 004C 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA1, 0x0062 };
    uint32_t const ces[13] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_320)
{
    // 1FA9 0062;	
    // (ᾩ) GREEK CAPITAL LETTER OMEGA WITH DASIA AND PROSGEGRAMMENI	[2047 1CC6 | 0020 0023 004C 0020 | 0008 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FA9, 0x0062 };
    uint32_t const ces[13] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0023, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_321)
{
    // 03CE 0062;	
    // (ώ) GREEK SMALL LETTER OMEGA WITH TONOS	[2047 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x03CE, 0x0062 };
    uint32_t const ces[11] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_322)
{
    // 1F7D 0062;	
    // (ώ) GREEK SMALL LETTER OMEGA WITH OXIA	[2047 1CC6 | 0020 0024 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F7D, 0x0062 };
    uint32_t const ces[11] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_323)
{
    // 038F 0062;	
    // (Ώ) GREEK CAPITAL LETTER OMEGA WITH TONOS	[2047 1CC6 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x038F, 0x0062 };
    uint32_t const ces[11] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_324)
{
    // 1FFB 0062;	
    // (Ώ) GREEK CAPITAL LETTER OMEGA WITH OXIA	[2047 1CC6 | 0020 0024 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FFB, 0x0062 };
    uint32_t const ces[11] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_325)
{
    // 1FF4 0062;	
    // (ῴ) GREEK SMALL LETTER OMEGA WITH OXIA AND YPOGEGRAMMENI	[2047 1CC6 | 0020 0024 004C 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF4, 0x0062 };
    uint32_t const ces[13] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0024, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_326)
{
    // 1F7C 0062;	
    // (ὼ) GREEK SMALL LETTER OMEGA WITH VARIA	[2047 1CC6 | 0020 0025 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1F7C, 0x0062 };
    uint32_t const ces[11] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_327)
{
    // 1FFA 0062;	
    // (Ὼ) GREEK CAPITAL LETTER OMEGA WITH VARIA	[2047 1CC6 | 0020 0025 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FFA, 0x0062 };
    uint32_t const ces[11] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_328)
{
    // 1FF2 0062;	
    // (ῲ) GREEK SMALL LETTER OMEGA WITH VARIA AND YPOGEGRAMMENI	[2047 1CC6 | 0020 0025 004C 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF2, 0x0062 };
    uint32_t const ces[13] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x0025, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_329)
{
    // 1FF6 0062;	
    // (ῶ) GREEK SMALL LETTER OMEGA WITH PERISPOMENI	[2047 1CC6 | 0020 002A 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF6, 0x0062 };
    uint32_t const ces[11] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x002A, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_330)
{
    // 1FF7 0062;	
    // (ῷ) GREEK SMALL LETTER OMEGA WITH PERISPOMENI AND YPOGEGRAMMENI	[2047 1CC6 | 0020 002A 004C 0020 | 0002 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF7, 0x0062 };
    uint32_t const ces[13] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x002A, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 13);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 13))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_331)
{
    // 1FF3 0062;	
    // (ῳ) GREEK SMALL LETTER OMEGA WITH YPOGEGRAMMENI	[2047 1CC6 | 0020 004C 0020 | 0002 0002 0002 |]

    uint32_t cps[2] = { 0x1FF3, 0x0062 };
    uint32_t const ces[11] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x004C, 0x0020, 0x0000, 0x0002, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_332)
{
    // 1FFC 0062;	
    // (ῼ) GREEK CAPITAL LETTER OMEGA WITH PROSGEGRAMMENI	[2047 1CC6 | 0020 004C 0020 | 0008 0002 0002 |]

    uint32_t cps[2] = { 0x1FFC, 0x0062 };
    uint32_t const ces[11] = { 0x2047, 0x1CC6, 0x0000, 0x0020, 0x004C, 0x0020, 0x0000, 0x0008, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 11);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 11))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_333)
{
    // AB65 0021;	
    // (ꭥ) GREEK LETTER SMALL CAPITAL OMEGA	[2048 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB65, 0x0021 };
    uint32_t const ces[9] = { 0x2048, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_334)
{
    // AB65 003F;	
    // (ꭥ) GREEK LETTER SMALL CAPITAL OMEGA	[2048 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB65, 0x003F };
    uint32_t const ces[9] = { 0x2048, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_335)
{
    // AB65 0061;	
    // (ꭥ) GREEK LETTER SMALL CAPITAL OMEGA	[2048 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB65, 0x0061 };
    uint32_t const ces[9] = { 0x2048, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_336)
{
    // AB65 0041;	
    // (ꭥ) GREEK LETTER SMALL CAPITAL OMEGA	[2048 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0xAB65, 0x0041 };
    uint32_t const ces[9] = { 0x2048, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_337)
{
    // AB65 0062;	
    // (ꭥ) GREEK LETTER SMALL CAPITAL OMEGA	[2048 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0xAB65, 0x0062 };
    uint32_t const ces[9] = { 0x2048, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_338)
{
    // 03E1 0021;	
    // (ϡ) GREEK SMALL LETTER SAMPI	[2049 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03E1, 0x0021 };
    uint32_t const ces[9] = { 0x2049, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_339)
{
    // 03E0 0021;	
    // (Ϡ) GREEK LETTER SAMPI	[2049 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03E0, 0x0021 };
    uint32_t const ces[9] = { 0x2049, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_340)
{
    // 03E1 003F;	
    // (ϡ) GREEK SMALL LETTER SAMPI	[2049 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03E1, 0x003F };
    uint32_t const ces[9] = { 0x2049, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_341)
{
    // 03E0 003F;	
    // (Ϡ) GREEK LETTER SAMPI	[2049 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03E0, 0x003F };
    uint32_t const ces[9] = { 0x2049, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_342)
{
    // 03E1 0061;	
    // (ϡ) GREEK SMALL LETTER SAMPI	[2049 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03E1, 0x0061 };
    uint32_t const ces[9] = { 0x2049, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_343)
{
    // 03E1 0041;	
    // (ϡ) GREEK SMALL LETTER SAMPI	[2049 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03E1, 0x0041 };
    uint32_t const ces[9] = { 0x2049, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_344)
{
    // 03E0 0061;	
    // (Ϡ) GREEK LETTER SAMPI	[2049 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03E0, 0x0061 };
    uint32_t const ces[9] = { 0x2049, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_345)
{
    // 03E0 0041;	
    // (Ϡ) GREEK LETTER SAMPI	[2049 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x03E0, 0x0041 };
    uint32_t const ces[9] = { 0x2049, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_346)
{
    // 03E1 0062;	
    // (ϡ) GREEK SMALL LETTER SAMPI	[2049 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03E1, 0x0062 };
    uint32_t const ces[9] = { 0x2049, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_347)
{
    // 03E0 0062;	
    // (Ϡ) GREEK LETTER SAMPI	[2049 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03E0, 0x0062 };
    uint32_t const ces[9] = { 0x2049, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_348)
{
    // 0373 0021;	
    // (ͳ) GREEK SMALL LETTER ARCHAIC SAMPI	[204A 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0373, 0x0021 };
    uint32_t const ces[9] = { 0x204A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_349)
{
    // 0372 0021;	
    // (Ͳ) GREEK CAPITAL LETTER ARCHAIC SAMPI	[204A 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0372, 0x0021 };
    uint32_t const ces[9] = { 0x204A, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_350)
{
    // 0373 003F;	
    // (ͳ) GREEK SMALL LETTER ARCHAIC SAMPI	[204A 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0373, 0x003F };
    uint32_t const ces[9] = { 0x204A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_351)
{
    // 0372 003F;	
    // (Ͳ) GREEK CAPITAL LETTER ARCHAIC SAMPI	[204A 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0372, 0x003F };
    uint32_t const ces[9] = { 0x204A, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_352)
{
    // 0373 0061;	
    // (ͳ) GREEK SMALL LETTER ARCHAIC SAMPI	[204A 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0373, 0x0061 };
    uint32_t const ces[9] = { 0x204A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_353)
{
    // 0373 0041;	
    // (ͳ) GREEK SMALL LETTER ARCHAIC SAMPI	[204A 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x0373, 0x0041 };
    uint32_t const ces[9] = { 0x204A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_354)
{
    // 0372 0061;	
    // (Ͳ) GREEK CAPITAL LETTER ARCHAIC SAMPI	[204A 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0372, 0x0061 };
    uint32_t const ces[9] = { 0x204A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_355)
{
    // 0372 0041;	
    // (Ͳ) GREEK CAPITAL LETTER ARCHAIC SAMPI	[204A 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x0372, 0x0041 };
    uint32_t const ces[9] = { 0x204A, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_356)
{
    // 0373 0062;	
    // (ͳ) GREEK SMALL LETTER ARCHAIC SAMPI	[204A 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x0373, 0x0062 };
    uint32_t const ces[9] = { 0x204A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_357)
{
    // 0372 0062;	
    // (Ͳ) GREEK CAPITAL LETTER ARCHAIC SAMPI	[204A 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x0372, 0x0062 };
    uint32_t const ces[9] = { 0x204A, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_358)
{
    // 03F8 0021;	
    // (ϸ) GREEK SMALL LETTER SHO	[204B 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03F8, 0x0021 };
    uint32_t const ces[9] = { 0x204B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_359)
{
    // 03F7 0021;	
    // (Ϸ) GREEK CAPITAL LETTER SHO	[204B 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03F7, 0x0021 };
    uint32_t const ces[9] = { 0x204B, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_360)
{
    // 03F8 003F;	
    // (ϸ) GREEK SMALL LETTER SHO	[204B 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03F8, 0x003F };
    uint32_t const ces[9] = { 0x204B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_361)
{
    // 03F7 003F;	
    // (Ϸ) GREEK CAPITAL LETTER SHO	[204B 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03F7, 0x003F };
    uint32_t const ces[9] = { 0x204B, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_362)
{
    // 03F8 0061;	
    // (ϸ) GREEK SMALL LETTER SHO	[204B 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03F8, 0x0061 };
    uint32_t const ces[9] = { 0x204B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_363)
{
    // 03F8 0041;	
    // (ϸ) GREEK SMALL LETTER SHO	[204B 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x03F8, 0x0041 };
    uint32_t const ces[9] = { 0x204B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_364)
{
    // 03F7 0061;	
    // (Ϸ) GREEK CAPITAL LETTER SHO	[204B 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03F7, 0x0061 };
    uint32_t const ces[9] = { 0x204B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_365)
{
    // 03F7 0041;	
    // (Ϸ) GREEK CAPITAL LETTER SHO	[204B 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x03F7, 0x0041 };
    uint32_t const ces[9] = { 0x204B, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_366)
{
    // 03F8 0062;	
    // (ϸ) GREEK SMALL LETTER SHO	[204B 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x03F8, 0x0062 };
    uint32_t const ces[9] = { 0x204B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_367)
{
    // 03F7 0062;	
    // (Ϸ) GREEK CAPITAL LETTER SHO	[204B 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x03F7, 0x0062 };
    uint32_t const ces[9] = { 0x204B, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_368)
{
    // 2C81 0021;	
    // (ⲁ) COPTIC SMALL LETTER ALFA	[204C 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C81, 0x0021 };
    uint32_t const ces[9] = { 0x204C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_369)
{
    // 2C80 0021;	
    // (Ⲁ) COPTIC CAPITAL LETTER ALFA	[204C 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C80, 0x0021 };
    uint32_t const ces[9] = { 0x204C, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_370)
{
    // 2C81 003F;	
    // (ⲁ) COPTIC SMALL LETTER ALFA	[204C 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C81, 0x003F };
    uint32_t const ces[9] = { 0x204C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_371)
{
    // 2C80 003F;	
    // (Ⲁ) COPTIC CAPITAL LETTER ALFA	[204C 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C80, 0x003F };
    uint32_t const ces[9] = { 0x204C, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_372)
{
    // 2C81 0061;	
    // (ⲁ) COPTIC SMALL LETTER ALFA	[204C 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C81, 0x0061 };
    uint32_t const ces[9] = { 0x204C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_373)
{
    // 2C81 0041;	
    // (ⲁ) COPTIC SMALL LETTER ALFA	[204C 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C81, 0x0041 };
    uint32_t const ces[9] = { 0x204C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_374)
{
    // 2C80 0061;	
    // (Ⲁ) COPTIC CAPITAL LETTER ALFA	[204C 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C80, 0x0061 };
    uint32_t const ces[9] = { 0x204C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_375)
{
    // 2C80 0041;	
    // (Ⲁ) COPTIC CAPITAL LETTER ALFA	[204C 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C80, 0x0041 };
    uint32_t const ces[9] = { 0x204C, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_376)
{
    // 2C81 0062;	
    // (ⲁ) COPTIC SMALL LETTER ALFA	[204C 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C81, 0x0062 };
    uint32_t const ces[9] = { 0x204C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_377)
{
    // 2C80 0062;	
    // (Ⲁ) COPTIC CAPITAL LETTER ALFA	[204C 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C80, 0x0062 };
    uint32_t const ces[9] = { 0x204C, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_378)
{
    // 2C83 0021;	
    // (ⲃ) COPTIC SMALL LETTER VIDA	[204D 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C83, 0x0021 };
    uint32_t const ces[9] = { 0x204D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_379)
{
    // 2C82 0021;	
    // (Ⲃ) COPTIC CAPITAL LETTER VIDA	[204D 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C82, 0x0021 };
    uint32_t const ces[9] = { 0x204D, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_380)
{
    // 2C83 003F;	
    // (ⲃ) COPTIC SMALL LETTER VIDA	[204D 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C83, 0x003F };
    uint32_t const ces[9] = { 0x204D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_381)
{
    // 2C82 003F;	
    // (Ⲃ) COPTIC CAPITAL LETTER VIDA	[204D 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C82, 0x003F };
    uint32_t const ces[9] = { 0x204D, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_382)
{
    // 2C83 0061;	
    // (ⲃ) COPTIC SMALL LETTER VIDA	[204D 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C83, 0x0061 };
    uint32_t const ces[9] = { 0x204D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_383)
{
    // 2C83 0041;	
    // (ⲃ) COPTIC SMALL LETTER VIDA	[204D 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C83, 0x0041 };
    uint32_t const ces[9] = { 0x204D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_384)
{
    // 2C82 0061;	
    // (Ⲃ) COPTIC CAPITAL LETTER VIDA	[204D 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C82, 0x0061 };
    uint32_t const ces[9] = { 0x204D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_385)
{
    // 2C82 0041;	
    // (Ⲃ) COPTIC CAPITAL LETTER VIDA	[204D 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C82, 0x0041 };
    uint32_t const ces[9] = { 0x204D, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_386)
{
    // 2C83 0062;	
    // (ⲃ) COPTIC SMALL LETTER VIDA	[204D 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C83, 0x0062 };
    uint32_t const ces[9] = { 0x204D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_387)
{
    // 2C82 0062;	
    // (Ⲃ) COPTIC CAPITAL LETTER VIDA	[204D 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C82, 0x0062 };
    uint32_t const ces[9] = { 0x204D, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_388)
{
    // 2C85 0021;	
    // (ⲅ) COPTIC SMALL LETTER GAMMA	[204E 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C85, 0x0021 };
    uint32_t const ces[9] = { 0x204E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_389)
{
    // 2C84 0021;	
    // (Ⲅ) COPTIC CAPITAL LETTER GAMMA	[204E 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C84, 0x0021 };
    uint32_t const ces[9] = { 0x204E, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_390)
{
    // 2C85 003F;	
    // (ⲅ) COPTIC SMALL LETTER GAMMA	[204E 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C85, 0x003F };
    uint32_t const ces[9] = { 0x204E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_391)
{
    // 2C84 003F;	
    // (Ⲅ) COPTIC CAPITAL LETTER GAMMA	[204E 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C84, 0x003F };
    uint32_t const ces[9] = { 0x204E, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_392)
{
    // 2C85 0061;	
    // (ⲅ) COPTIC SMALL LETTER GAMMA	[204E 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C85, 0x0061 };
    uint32_t const ces[9] = { 0x204E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_393)
{
    // 2C85 0041;	
    // (ⲅ) COPTIC SMALL LETTER GAMMA	[204E 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C85, 0x0041 };
    uint32_t const ces[9] = { 0x204E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_394)
{
    // 2C84 0061;	
    // (Ⲅ) COPTIC CAPITAL LETTER GAMMA	[204E 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C84, 0x0061 };
    uint32_t const ces[9] = { 0x204E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_395)
{
    // 2C84 0041;	
    // (Ⲅ) COPTIC CAPITAL LETTER GAMMA	[204E 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C84, 0x0041 };
    uint32_t const ces[9] = { 0x204E, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_396)
{
    // 2C85 0062;	
    // (ⲅ) COPTIC SMALL LETTER GAMMA	[204E 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C85, 0x0062 };
    uint32_t const ces[9] = { 0x204E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_397)
{
    // 2C84 0062;	
    // (Ⲅ) COPTIC CAPITAL LETTER GAMMA	[204E 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C84, 0x0062 };
    uint32_t const ces[9] = { 0x204E, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_398)
{
    // 2C87 0021;	
    // (ⲇ) COPTIC SMALL LETTER DALDA	[204F 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C87, 0x0021 };
    uint32_t const ces[9] = { 0x204F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_399)
{
    // 2C86 0021;	
    // (Ⲇ) COPTIC CAPITAL LETTER DALDA	[204F 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C86, 0x0021 };
    uint32_t const ces[9] = { 0x204F, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_400)
{
    // 2C87 003F;	
    // (ⲇ) COPTIC SMALL LETTER DALDA	[204F 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C87, 0x003F };
    uint32_t const ces[9] = { 0x204F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_401)
{
    // 2C86 003F;	
    // (Ⲇ) COPTIC CAPITAL LETTER DALDA	[204F 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C86, 0x003F };
    uint32_t const ces[9] = { 0x204F, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_402)
{
    // 2C87 0061;	
    // (ⲇ) COPTIC SMALL LETTER DALDA	[204F 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C87, 0x0061 };
    uint32_t const ces[9] = { 0x204F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_403)
{
    // 2C87 0041;	
    // (ⲇ) COPTIC SMALL LETTER DALDA	[204F 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C87, 0x0041 };
    uint32_t const ces[9] = { 0x204F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_404)
{
    // 2C86 0061;	
    // (Ⲇ) COPTIC CAPITAL LETTER DALDA	[204F 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C86, 0x0061 };
    uint32_t const ces[9] = { 0x204F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_405)
{
    // 2C86 0041;	
    // (Ⲇ) COPTIC CAPITAL LETTER DALDA	[204F 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C86, 0x0041 };
    uint32_t const ces[9] = { 0x204F, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_406)
{
    // 2C87 0062;	
    // (ⲇ) COPTIC SMALL LETTER DALDA	[204F 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C87, 0x0062 };
    uint32_t const ces[9] = { 0x204F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_407)
{
    // 2C86 0062;	
    // (Ⲇ) COPTIC CAPITAL LETTER DALDA	[204F 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C86, 0x0062 };
    uint32_t const ces[9] = { 0x204F, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_408)
{
    // 2C89 0021;	
    // (ⲉ) COPTIC SMALL LETTER EIE	[2050 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C89, 0x0021 };
    uint32_t const ces[9] = { 0x2050, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_409)
{
    // 2C88 0021;	
    // (Ⲉ) COPTIC CAPITAL LETTER EIE	[2050 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C88, 0x0021 };
    uint32_t const ces[9] = { 0x2050, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_410)
{
    // 2C89 003F;	
    // (ⲉ) COPTIC SMALL LETTER EIE	[2050 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C89, 0x003F };
    uint32_t const ces[9] = { 0x2050, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_411)
{
    // 2C88 003F;	
    // (Ⲉ) COPTIC CAPITAL LETTER EIE	[2050 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C88, 0x003F };
    uint32_t const ces[9] = { 0x2050, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_412)
{
    // 2C89 0061;	
    // (ⲉ) COPTIC SMALL LETTER EIE	[2050 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C89, 0x0061 };
    uint32_t const ces[9] = { 0x2050, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_413)
{
    // 2C89 0041;	
    // (ⲉ) COPTIC SMALL LETTER EIE	[2050 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C89, 0x0041 };
    uint32_t const ces[9] = { 0x2050, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_414)
{
    // 2C88 0061;	
    // (Ⲉ) COPTIC CAPITAL LETTER EIE	[2050 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C88, 0x0061 };
    uint32_t const ces[9] = { 0x2050, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_415)
{
    // 2C88 0041;	
    // (Ⲉ) COPTIC CAPITAL LETTER EIE	[2050 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C88, 0x0041 };
    uint32_t const ces[9] = { 0x2050, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_416)
{
    // 2C89 0062;	
    // (ⲉ) COPTIC SMALL LETTER EIE	[2050 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C89, 0x0062 };
    uint32_t const ces[9] = { 0x2050, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_417)
{
    // 2C88 0062;	
    // (Ⲉ) COPTIC CAPITAL LETTER EIE	[2050 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C88, 0x0062 };
    uint32_t const ces[9] = { 0x2050, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_418)
{
    // 2CB7 0021;	
    // (ⲷ) COPTIC SMALL LETTER CRYPTOGRAMMIC EIE	[2051 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CB7, 0x0021 };
    uint32_t const ces[9] = { 0x2051, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_419)
{
    // 2CB6 0021;	
    // (Ⲷ) COPTIC CAPITAL LETTER CRYPTOGRAMMIC EIE	[2051 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2CB6, 0x0021 };
    uint32_t const ces[9] = { 0x2051, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_420)
{
    // 2CB7 003F;	
    // (ⲷ) COPTIC SMALL LETTER CRYPTOGRAMMIC EIE	[2051 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CB7, 0x003F };
    uint32_t const ces[9] = { 0x2051, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_421)
{
    // 2CB6 003F;	
    // (Ⲷ) COPTIC CAPITAL LETTER CRYPTOGRAMMIC EIE	[2051 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2CB6, 0x003F };
    uint32_t const ces[9] = { 0x2051, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_422)
{
    // 2CB7 0061;	
    // (ⲷ) COPTIC SMALL LETTER CRYPTOGRAMMIC EIE	[2051 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CB7, 0x0061 };
    uint32_t const ces[9] = { 0x2051, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_423)
{
    // 2CB7 0041;	
    // (ⲷ) COPTIC SMALL LETTER CRYPTOGRAMMIC EIE	[2051 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2CB7, 0x0041 };
    uint32_t const ces[9] = { 0x2051, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_424)
{
    // 2CB6 0061;	
    // (Ⲷ) COPTIC CAPITAL LETTER CRYPTOGRAMMIC EIE	[2051 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2CB6, 0x0061 };
    uint32_t const ces[9] = { 0x2051, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_425)
{
    // 2CB6 0041;	
    // (Ⲷ) COPTIC CAPITAL LETTER CRYPTOGRAMMIC EIE	[2051 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2CB6, 0x0041 };
    uint32_t const ces[9] = { 0x2051, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_426)
{
    // 2CB7 0062;	
    // (ⲷ) COPTIC SMALL LETTER CRYPTOGRAMMIC EIE	[2051 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CB7, 0x0062 };
    uint32_t const ces[9] = { 0x2051, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_427)
{
    // 2CB6 0062;	
    // (Ⲷ) COPTIC CAPITAL LETTER CRYPTOGRAMMIC EIE	[2051 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2CB6, 0x0062 };
    uint32_t const ces[9] = { 0x2051, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_428)
{
    // 2C8B 0021;	
    // (ⲋ) COPTIC SMALL LETTER SOU	[2052 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C8B, 0x0021 };
    uint32_t const ces[9] = { 0x2052, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_429)
{
    // 2C8A 0021;	
    // (Ⲋ) COPTIC CAPITAL LETTER SOU	[2052 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C8A, 0x0021 };
    uint32_t const ces[9] = { 0x2052, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_430)
{
    // 2C8B 003F;	
    // (ⲋ) COPTIC SMALL LETTER SOU	[2052 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C8B, 0x003F };
    uint32_t const ces[9] = { 0x2052, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_431)
{
    // 2C8A 003F;	
    // (Ⲋ) COPTIC CAPITAL LETTER SOU	[2052 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C8A, 0x003F };
    uint32_t const ces[9] = { 0x2052, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_432)
{
    // 2C8B 0061;	
    // (ⲋ) COPTIC SMALL LETTER SOU	[2052 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C8B, 0x0061 };
    uint32_t const ces[9] = { 0x2052, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_433)
{
    // 2C8B 0041;	
    // (ⲋ) COPTIC SMALL LETTER SOU	[2052 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C8B, 0x0041 };
    uint32_t const ces[9] = { 0x2052, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_434)
{
    // 2C8A 0061;	
    // (Ⲋ) COPTIC CAPITAL LETTER SOU	[2052 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C8A, 0x0061 };
    uint32_t const ces[9] = { 0x2052, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_435)
{
    // 2C8A 0041;	
    // (Ⲋ) COPTIC CAPITAL LETTER SOU	[2052 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C8A, 0x0041 };
    uint32_t const ces[9] = { 0x2052, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_436)
{
    // 2C8B 0062;	
    // (ⲋ) COPTIC SMALL LETTER SOU	[2052 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C8B, 0x0062 };
    uint32_t const ces[9] = { 0x2052, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_437)
{
    // 2C8A 0062;	
    // (Ⲋ) COPTIC CAPITAL LETTER SOU	[2052 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C8A, 0x0062 };
    uint32_t const ces[9] = { 0x2052, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_438)
{
    // 2C8D 0021;	
    // (ⲍ) COPTIC SMALL LETTER ZATA	[2053 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C8D, 0x0021 };
    uint32_t const ces[9] = { 0x2053, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_439)
{
    // 2C8C 0021;	
    // (Ⲍ) COPTIC CAPITAL LETTER ZATA	[2053 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C8C, 0x0021 };
    uint32_t const ces[9] = { 0x2053, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_440)
{
    // 2C8D 003F;	
    // (ⲍ) COPTIC SMALL LETTER ZATA	[2053 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C8D, 0x003F };
    uint32_t const ces[9] = { 0x2053, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_441)
{
    // 2C8C 003F;	
    // (Ⲍ) COPTIC CAPITAL LETTER ZATA	[2053 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C8C, 0x003F };
    uint32_t const ces[9] = { 0x2053, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_442)
{
    // 2C8D 0061;	
    // (ⲍ) COPTIC SMALL LETTER ZATA	[2053 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C8D, 0x0061 };
    uint32_t const ces[9] = { 0x2053, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_443)
{
    // 2C8D 0041;	
    // (ⲍ) COPTIC SMALL LETTER ZATA	[2053 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C8D, 0x0041 };
    uint32_t const ces[9] = { 0x2053, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_444)
{
    // 2C8C 0061;	
    // (Ⲍ) COPTIC CAPITAL LETTER ZATA	[2053 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C8C, 0x0061 };
    uint32_t const ces[9] = { 0x2053, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_445)
{
    // 2C8C 0041;	
    // (Ⲍ) COPTIC CAPITAL LETTER ZATA	[2053 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C8C, 0x0041 };
    uint32_t const ces[9] = { 0x2053, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_446)
{
    // 2C8D 0062;	
    // (ⲍ) COPTIC SMALL LETTER ZATA	[2053 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C8D, 0x0062 };
    uint32_t const ces[9] = { 0x2053, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_447)
{
    // 2C8C 0062;	
    // (Ⲍ) COPTIC CAPITAL LETTER ZATA	[2053 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C8C, 0x0062 };
    uint32_t const ces[9] = { 0x2053, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_448)
{
    // 2C8F 0021;	
    // (ⲏ) COPTIC SMALL LETTER HATE	[2054 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C8F, 0x0021 };
    uint32_t const ces[9] = { 0x2054, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_449)
{
    // 2C8E 0021;	
    // (Ⲏ) COPTIC CAPITAL LETTER HATE	[2054 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C8E, 0x0021 };
    uint32_t const ces[9] = { 0x2054, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_450)
{
    // 2C8F 003F;	
    // (ⲏ) COPTIC SMALL LETTER HATE	[2054 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C8F, 0x003F };
    uint32_t const ces[9] = { 0x2054, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_451)
{
    // 2C8E 003F;	
    // (Ⲏ) COPTIC CAPITAL LETTER HATE	[2054 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C8E, 0x003F };
    uint32_t const ces[9] = { 0x2054, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_452)
{
    // 2C8F 0061;	
    // (ⲏ) COPTIC SMALL LETTER HATE	[2054 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C8F, 0x0061 };
    uint32_t const ces[9] = { 0x2054, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_453)
{
    // 2C8F 0041;	
    // (ⲏ) COPTIC SMALL LETTER HATE	[2054 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C8F, 0x0041 };
    uint32_t const ces[9] = { 0x2054, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_454)
{
    // 2C8E 0061;	
    // (Ⲏ) COPTIC CAPITAL LETTER HATE	[2054 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C8E, 0x0061 };
    uint32_t const ces[9] = { 0x2054, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_455)
{
    // 2C8E 0041;	
    // (Ⲏ) COPTIC CAPITAL LETTER HATE	[2054 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C8E, 0x0041 };
    uint32_t const ces[9] = { 0x2054, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_456)
{
    // 2C8F 0062;	
    // (ⲏ) COPTIC SMALL LETTER HATE	[2054 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C8F, 0x0062 };
    uint32_t const ces[9] = { 0x2054, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_457)
{
    // 2C8E 0062;	
    // (Ⲏ) COPTIC CAPITAL LETTER HATE	[2054 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C8E, 0x0062 };
    uint32_t const ces[9] = { 0x2054, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_458)
{
    // 2C91 0021;	
    // (ⲑ) COPTIC SMALL LETTER THETHE	[2055 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C91, 0x0021 };
    uint32_t const ces[9] = { 0x2055, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_459)
{
    // 2C90 0021;	
    // (Ⲑ) COPTIC CAPITAL LETTER THETHE	[2055 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C90, 0x0021 };
    uint32_t const ces[9] = { 0x2055, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_460)
{
    // 2C91 003F;	
    // (ⲑ) COPTIC SMALL LETTER THETHE	[2055 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C91, 0x003F };
    uint32_t const ces[9] = { 0x2055, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_461)
{
    // 2C90 003F;	
    // (Ⲑ) COPTIC CAPITAL LETTER THETHE	[2055 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C90, 0x003F };
    uint32_t const ces[9] = { 0x2055, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_462)
{
    // 2C91 0061;	
    // (ⲑ) COPTIC SMALL LETTER THETHE	[2055 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C91, 0x0061 };
    uint32_t const ces[9] = { 0x2055, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_463)
{
    // 2C91 0041;	
    // (ⲑ) COPTIC SMALL LETTER THETHE	[2055 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C91, 0x0041 };
    uint32_t const ces[9] = { 0x2055, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_464)
{
    // 2C90 0061;	
    // (Ⲑ) COPTIC CAPITAL LETTER THETHE	[2055 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C90, 0x0061 };
    uint32_t const ces[9] = { 0x2055, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_465)
{
    // 2C90 0041;	
    // (Ⲑ) COPTIC CAPITAL LETTER THETHE	[2055 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C90, 0x0041 };
    uint32_t const ces[9] = { 0x2055, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_466)
{
    // 2C91 0062;	
    // (ⲑ) COPTIC SMALL LETTER THETHE	[2055 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C91, 0x0062 };
    uint32_t const ces[9] = { 0x2055, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_467)
{
    // 2C90 0062;	
    // (Ⲑ) COPTIC CAPITAL LETTER THETHE	[2055 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C90, 0x0062 };
    uint32_t const ces[9] = { 0x2055, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_468)
{
    // 2C93 0021;	
    // (ⲓ) COPTIC SMALL LETTER IAUDA	[2056 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C93, 0x0021 };
    uint32_t const ces[9] = { 0x2056, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_469)
{
    // 2C92 0021;	
    // (Ⲓ) COPTIC CAPITAL LETTER IAUDA	[2056 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C92, 0x0021 };
    uint32_t const ces[9] = { 0x2056, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_470)
{
    // 2C93 003F;	
    // (ⲓ) COPTIC SMALL LETTER IAUDA	[2056 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C93, 0x003F };
    uint32_t const ces[9] = { 0x2056, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_471)
{
    // 2C92 003F;	
    // (Ⲓ) COPTIC CAPITAL LETTER IAUDA	[2056 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C92, 0x003F };
    uint32_t const ces[9] = { 0x2056, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_472)
{
    // 2C93 0061;	
    // (ⲓ) COPTIC SMALL LETTER IAUDA	[2056 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C93, 0x0061 };
    uint32_t const ces[9] = { 0x2056, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_473)
{
    // 2C93 0041;	
    // (ⲓ) COPTIC SMALL LETTER IAUDA	[2056 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C93, 0x0041 };
    uint32_t const ces[9] = { 0x2056, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_474)
{
    // 2C92 0061;	
    // (Ⲓ) COPTIC CAPITAL LETTER IAUDA	[2056 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C92, 0x0061 };
    uint32_t const ces[9] = { 0x2056, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_475)
{
    // 2C92 0041;	
    // (Ⲓ) COPTIC CAPITAL LETTER IAUDA	[2056 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C92, 0x0041 };
    uint32_t const ces[9] = { 0x2056, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_476)
{
    // 2C93 0062;	
    // (ⲓ) COPTIC SMALL LETTER IAUDA	[2056 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C93, 0x0062 };
    uint32_t const ces[9] = { 0x2056, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_477)
{
    // 2C92 0062;	
    // (Ⲓ) COPTIC CAPITAL LETTER IAUDA	[2056 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C92, 0x0062 };
    uint32_t const ces[9] = { 0x2056, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_478)
{
    // 2C95 0021;	
    // (ⲕ) COPTIC SMALL LETTER KAPA	[2057 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C95, 0x0021 };
    uint32_t const ces[9] = { 0x2057, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_479)
{
    // 2C94 0021;	
    // (Ⲕ) COPTIC CAPITAL LETTER KAPA	[2057 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C94, 0x0021 };
    uint32_t const ces[9] = { 0x2057, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_480)
{
    // 2C95 003F;	
    // (ⲕ) COPTIC SMALL LETTER KAPA	[2057 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C95, 0x003F };
    uint32_t const ces[9] = { 0x2057, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_481)
{
    // 2C94 003F;	
    // (Ⲕ) COPTIC CAPITAL LETTER KAPA	[2057 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C94, 0x003F };
    uint32_t const ces[9] = { 0x2057, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_482)
{
    // 2C95 0061;	
    // (ⲕ) COPTIC SMALL LETTER KAPA	[2057 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C95, 0x0061 };
    uint32_t const ces[9] = { 0x2057, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_483)
{
    // 2C95 0041;	
    // (ⲕ) COPTIC SMALL LETTER KAPA	[2057 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2C95, 0x0041 };
    uint32_t const ces[9] = { 0x2057, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_484)
{
    // 2C94 0061;	
    // (Ⲕ) COPTIC CAPITAL LETTER KAPA	[2057 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C94, 0x0061 };
    uint32_t const ces[9] = { 0x2057, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_485)
{
    // 2C94 0041;	
    // (Ⲕ) COPTIC CAPITAL LETTER KAPA	[2057 1CAD | 0020 0020 | 0008 0008 |]

    uint32_t cps[2] = { 0x2C94, 0x0041 };
    uint32_t const ces[9] = { 0x2057, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_486)
{
    // 2C95 0062;	
    // (ⲕ) COPTIC SMALL LETTER KAPA	[2057 1CC6 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2C95, 0x0062 };
    uint32_t const ces[9] = { 0x2057, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_487)
{
    // 2C94 0062;	
    // (Ⲕ) COPTIC CAPITAL LETTER KAPA	[2057 1CC6 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2C94, 0x0062 };
    uint32_t const ces[9] = { 0x2057, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_488)
{
    // 2CE4 0021;	
    // (ⳤ) COPTIC SYMBOL KAI	[2057 204C 2056 0261 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2CE4, 0x0021 };
    uint32_t const ces[15] = { 0x2057, 0x204C, 0x2056, 0x0261, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_489)
{
    // 2CE4 003F;	
    // (ⳤ) COPTIC SYMBOL KAI	[2057 204C 2056 0267 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2CE4, 0x003F };
    uint32_t const ces[15] = { 0x2057, 0x204C, 0x2056, 0x0267, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_490)
{
    // 2CE4 0061;	
    // (ⳤ) COPTIC SYMBOL KAI	[2057 204C 2056 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2CE4, 0x0061 };
    uint32_t const ces[15] = { 0x2057, 0x204C, 0x2056, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_491)
{
    // 2CE4 0041;	
    // (ⳤ) COPTIC SYMBOL KAI	[2057 204C 2056 1CAD | 0020 0020 0020 0020 | 0004 0004 0004 0008 |]

    uint32_t cps[2] = { 0x2CE4, 0x0041 };
    uint32_t const ces[15] = { 0x2057, 0x204C, 0x2056, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_492)
{
    // 2CE4 0062;	
    // (ⳤ) COPTIC SYMBOL KAI	[2057 204C 2056 1CC6 | 0020 0020 0020 0020 | 0004 0004 0004 0002 |]

    uint32_t cps[2] = { 0x2CE4, 0x0062 };
    uint32_t const ces[15] = { 0x2057, 0x204C, 0x2056, 0x1CC6, 0x0000, 0x0020, 0x0020, 0x0020, 0x0020, 0x0000, 0x0004, 0x0004, 0x0004, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 15);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 15))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_493)
{
    // 2CB9 0021;	
    // (ⲹ) COPTIC SMALL LETTER DIALECT-P KAPA	[2058 0261 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CB9, 0x0021 };
    uint32_t const ces[9] = { 0x2058, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_494)
{
    // 2CB8 0021;	
    // (Ⲹ) COPTIC CAPITAL LETTER DIALECT-P KAPA	[2058 0261 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2CB8, 0x0021 };
    uint32_t const ces[9] = { 0x2058, 0x0261, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_495)
{
    // 2CB9 003F;	
    // (ⲹ) COPTIC SMALL LETTER DIALECT-P KAPA	[2058 0267 | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CB9, 0x003F };
    uint32_t const ces[9] = { 0x2058, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_496)
{
    // 2CB8 003F;	
    // (Ⲹ) COPTIC CAPITAL LETTER DIALECT-P KAPA	[2058 0267 | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2CB8, 0x003F };
    uint32_t const ces[9] = { 0x2058, 0x0267, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_497)
{
    // 2CB9 0061;	
    // (ⲹ) COPTIC SMALL LETTER DIALECT-P KAPA	[2058 1CAD | 0020 0020 | 0002 0002 |]

    uint32_t cps[2] = { 0x2CB9, 0x0061 };
    uint32_t const ces[9] = { 0x2058, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_498)
{
    // 2CB9 0041;	
    // (ⲹ) COPTIC SMALL LETTER DIALECT-P KAPA	[2058 1CAD | 0020 0020 | 0002 0008 |]

    uint32_t cps[2] = { 0x2CB9, 0x0041 };
    uint32_t const ces[9] = { 0x2058, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0002, 0x0008, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

TEST(collation, non_ignorable_135_499)
{
    // 2CB8 0061;	
    // (Ⲹ) COPTIC CAPITAL LETTER DIALECT-P KAPA	[2058 1CAD | 0020 0020 | 0008 0002 |]

    uint32_t cps[2] = { 0x2CB8, 0x0061 };
    uint32_t const ces[9] = { 0x2058, 0x1CAD, 0x0000, 0x0020, 0x0020, 0x0000, 0x0008, 0x0002, 0x0000 };

    auto collation = collate_for_tests(
        cps, cps + 2, boost::text::variable_weighting::non_ignorable);

    EXPECT_EQ(collation.size(), 9);
    EXPECT_TRUE(boost::algorithm::equal(collation.begin(), collation.end(), ces, ces + 9))
        << "from:     " << ce_dumper(cps)
        << "expected: " << ce_dumper(ces)
        << "got:      " << ce_dumper(collation);
}

